[package]
name = "weaver"
version = "0.10.0"
authors = ["OpenTelemetry"]
edition = "2021"
repository = "https://github.com/open-telemetry/weaver"
description = "Manage semantic convention registry and telemetry schema workflows (OpenTelemetry Project)"
keywords = ["opentelemetry", "semconv", "schema", "registry", "generator"]
categories = ["command-line-utilities"]
license = "Apache-2.0"
readme = "README.md"
publish = false
resolver = "2"

[package.metadata.dist]
dist=true

[package.metadata.wix]
upgrade-guid = "C9F6BF20-4C32-4AF3-8550-79653C00886C"
path-guid = "A83EC6F0-88E1-4676-BCE2-E4D84A032225"
license = false
eula = false

# Workspace definition ========================================================
[workspace]
members = [
    "crates/*",
]

[workspace.package]
authors = ["OpenTelemetry"]
edition = "2021"
repository = "https://github.com/open-telemetry/weaver"
license = "Apache-2.0"
publish = false
rust-version = "1.76"

[workspace.dependencies]
serde = { version = "1.0.210", features = ["derive"] }
serde_yaml = "0.9.32"
serde_json = { version = "1.0.132"}
thiserror = "1.0.65"
url = "2.5.2"
ureq = "2.10.0"
regex = "1.11.0"
rayon = "1.10.0"
ordered-float = { version = "4.4.0", features = ["serde", "schemars"] }
walkdir = "2.5.0"
anyhow = "1.0.91"
itertools = "0.13.0"
globset = { version = "0.4.15", features = ["serde1"] }
miette = { version = "7.2.0", features = ["fancy", "serde"] }
include_dir = "0.7.4"
tempdir = "0.3.7"
schemars = "0.8.21"
dirs = "5.0.1"
once_cell = "1.20.2"
opentelemetry = { version = "0.23.0", features = ["trace", "metrics", "logs", "otel_unstable"] }

# Features definition =========================================================
[features]
experimental = []

# Crate definitions ===========================================================
[[bin]]
bench = false
path = "src/main.rs"
name = "weaver"

[dependencies]
# local crates dependencies
weaver_common = { path = "crates/weaver_common" }
weaver_resolver = { path = "crates/weaver_resolver" }
weaver_semconv = { path = "crates/weaver_semconv" }
weaver_resolved_schema = { path = "crates/weaver_resolved_schema" }
weaver_semconv_gen = { path = "crates/weaver_semconv_gen" }
weaver_cache = { path = "crates/weaver_cache" }
weaver_forge = { path = "crates/weaver_forge" }
weaver_checker = { path = "crates/weaver_checker" }

clap = { version = "4.5.20", features = ["derive"] }
rayon = "1.10.0"
ratatui = { version = "0.28.1", features=["serde"] }
crossterm = { version = "0.28.1", features = ["serde"] }
tui-textarea = "0.6.1"

# workspace dependencies
serde.workspace = true
serde_yaml.workspace = true
serde_json.workspace = true
walkdir.workspace = true
include_dir.workspace = true
thiserror.workspace = true
miette.workspace = true
schemars.workspace = true
itertools.workspace = true

[dev-dependencies]
weaver_diff = { path = "crates/weaver_diff" }
tempdir.workspace = true
assert_cmd = "2.0.14"

[profile.release]
lto = true
strip = true
panic = "abort"

# The profile that 'cargo dist' will build with
[profile.dist]
inherits = "release"
lto = "thin"

[workspace.lints.rust]
rust_2018_idioms = { level = "warn", priority = -1 }
unused_lifetimes = "warn"
# unreachable_pub = "warn"
semicolon_in_expressions_from_macros = "warn"
missing_docs = "deny"
unstable_features = "deny"
unused_import_braces = "deny"
unused_qualifications = "deny"
unused_results = "deny"
unused_extern_crates = "deny"

unsafe_op_in_unsafe_fn = "warn"
unused_macro_rules = "warn"

[lints]
workspace = true

[workspace.lints.clippy]
all = { level = "deny", priority = -1 }
cargo = { level = "deny", priority = -1 }
unwrap_used = "deny"
print_stdout = "deny"
print_stderr = "deny"
multiple_crate_versions = "allow"
# this lint shows places where you could add the #must_use attribute.
must-use-candidate = "warn"

complexity = { level = "warn", priority = -1 }
correctness = { level = "deny", priority = -1 }
perf = { level = "deny", priority = -1 }
restriction = { level = "allow", priority = -1 }
style = { level = "warn", priority = -1 }
suspicious = { level = "warn", priority = -1 }

too_many_arguments = "allow"
type_complexity = "allow"
wrong_self_convention = "allow"
rc_buffer = "warn"
str_to_string = "warn"
checked_conversions = "warn"
create_dir = "warn"
dbg_macro = "warn"
debug_assert_with_mut_call = "warn"
empty_enum = "warn"
enum_glob_use = "warn"
exit = "warn"
expl_impl_clone_on_copy = "warn"
explicit_deref_methods = "warn"
explicit_into_iter_loop = "warn"
fallible_impl_from = "warn"
filter_map_next = "warn"
flat_map_option = "warn"
float_cmp_const = "warn"
fn_params_excessive_bools = "warn"
from_iter_instead_of_collect = "warn"
imprecise_flops = "warn"
inefficient_to_string = "warn"
infinite_loop = "warn"
invalid_upcast_comparisons = "warn"
items_after_statements = "warn"
large_digit_groups = "warn"
large_stack_arrays = "warn"
large_types_passed_by_value = "warn"
linkedlist = "warn"
lossy_float_literal = "warn"
macro_use_imports = "warn"
match_wildcard_for_single_variants = "warn"
mem_forget = "warn"
mutex_integer = "warn"
needless_continue = "warn"
needless_for_each = "warn"
negative_feature_names = "warn"
path_buf_push_overwrite = "warn"
ptr_as_ptr = "warn"
rc_mutex = "warn"
redundant_feature_names = "warn"
ref_option_ref = "warn"
rest_pat_in_fully_bound_structs = "warn"
same_functions_in_if_condition = "warn"
# disabled due to false positives
# self_named_module_files = "warn"
semicolon_if_nothing_returned = "warn"
single_match_else = "warn"
string_add = "warn"
string_add_assign = "warn"
string_lit_as_bytes = "warn"
trait_duplication_in_bounds = "warn"
verbose_file_reads = "warn"
wildcard_imports = "warn"
zero_sized_map_values = "warn"
string_to_string = "warn"

# Config for 'cargo dist'
[workspace.metadata.dist]
# The preferred cargo-dist version to use in CI (Cargo.toml SemVer syntax)
cargo-dist-version = "0.21.1"
# CI backends to support
ci = "github"
# The installers to generate for each app
installers = ["shell", "powershell", "msi"]
# Target platforms to build apps for (Rust target-triple syntax)
targets = ["aarch64-apple-darwin", "x86_64-apple-darwin", "x86_64-unknown-linux-gnu", "x86_64-pc-windows-msvc"]
# Which actions to run on pull requests
pr-run-mode = "plan"
# Whether to install an updater program
install-updater = false
# Path that installers should place binaries in
install-path = "CARGO_HOME"
# Whether to enable GitHub Attestations
github-attestations = true


#exhaustive_enums = "warn"
#doc_markdown = "warn"
#exhaustive_structs = "warn"
#todo = "warn"
#implicit_clone = "warn"
#inconsistent_struct_constructor = "warn"

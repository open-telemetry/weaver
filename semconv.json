{
  "groups": [
    {
      "id": "trace.db.common.minimal",
      "type": "attribute_group",
      "brief": "This group defines the attributes used to perform database client calls.",
      "attributes": [
        {
          "name": "db.operation.batch.size",
          "type": "int",
          "brief": "The number of queries included in a batch operation.",
          "examples": [
            2,
            3,
            4
          ],
          "requirement_level": "recommended",
          "note": "Operations are only considered batches when they contain two or more operations, and so `db.operation.batch.size` SHOULD never be `1`.\n",
          "stability": "release_candidate"
        },
        {
          "name": "db.response.status_code",
          "type": "string",
          "brief": "Database response status code.",
          "examples": [
            "102",
            "ORA-17002",
            "08P01",
            "404"
          ],
          "requirement_level": {
            "conditionally_required": "If the operation failed and status code is available."
          },
          "note": "The status code returned by the database. Usually it represents an error code, but may also represent partial success, warning, or differentiate between various types of successful outcomes.\nSemantic conventions for individual database systems SHOULD document what `db.response.status_code` means in the context of that system.\n",
          "stability": "release_candidate"
        },
        {
          "name": "db.operation.name",
          "type": "string",
          "brief": "The name of the operation or command being executed.\n",
          "examples": [
            "findAndModify",
            "HMSET",
            "SELECT"
          ],
          "requirement_level": {
            "conditionally_required": "If readily available and if there is a single operation name that describes the database call.\n"
          },
          "sampling_relevant": true,
          "note": "It is RECOMMENDED to capture the value as provided by the application\nwithout attempting to do any case normalization.\n\nThe operation name SHOULD NOT be extracted from `db.query.text`,\nwhen the database system supports cross-table queries in non-batch operations.\n\nFor batch operations, if the individual operations are known to have the same operation name\nthen that operation name SHOULD be used prepended by `BATCH `,\notherwise `db.operation.name` SHOULD be `BATCH` or some other database\nsystem specific term if more applicable.\n",
          "stability": "release_candidate"
        },
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "timeout",
            "java.net.UnknownHostException",
            "server_certificate_invalid",
            "500"
          ],
          "requirement_level": {
            "conditionally_required": "If and only if the operation failed."
          },
          "note": "The `error.type` SHOULD match the `db.response.status_code` returned by the database or the client library, or the canonical name of exception that occurred.\nWhen using canonical exception type name, instrumentation SHOULD do the best effort to report the most relevant type. For example, if the original exception is wrapped into a generic one, the original exception SHOULD be preferred.\nInstrumentations SHOULD document how `error.type` is populated.\n",
          "stability": "stable"
        },
        {
          "name": "server.address",
          "type": "string",
          "brief": "Name of the database host.\n",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "recommended",
          "sampling_relevant": true,
          "note": "When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": {
            "conditionally_required": "If using a port other than the default port for this DBMS and if `server.address` is set."
          },
          "sampling_relevant": true,
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/database/spans.yaml",
        "attributes": {
          "db.operation.batch.size": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "db.operation.name": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "db.response.status_code": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "sampling_relevant"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ]
          }
        }
      }
    },
    {
      "id": "trace.db.common.query",
      "type": "attribute_group",
      "brief": "This group defines the attributes used to perform database client calls.",
      "attributes": [
        {
          "name": "db.operation.batch.size",
          "type": "int",
          "brief": "The number of queries included in a batch operation.",
          "examples": [
            2,
            3,
            4
          ],
          "requirement_level": "recommended",
          "note": "Operations are only considered batches when they contain two or more operations, and so `db.operation.batch.size` SHOULD never be `1`.\n",
          "stability": "release_candidate"
        },
        {
          "name": "db.response.returned_rows",
          "type": "int",
          "brief": "Number of rows returned by the operation.",
          "examples": [
            10,
            30,
            1000
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "db.response.status_code",
          "type": "string",
          "brief": "Database response status code.",
          "examples": [
            "102",
            "ORA-17002",
            "08P01",
            "404"
          ],
          "requirement_level": {
            "conditionally_required": "If the operation failed and status code is available."
          },
          "note": "The status code returned by the database. Usually it represents an error code, but may also represent partial success, warning, or differentiate between various types of successful outcomes.\nSemantic conventions for individual database systems SHOULD document what `db.response.status_code` means in the context of that system.\n",
          "stability": "release_candidate"
        },
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "timeout",
            "java.net.UnknownHostException",
            "server_certificate_invalid",
            "500"
          ],
          "requirement_level": {
            "conditionally_required": "If and only if the operation failed."
          },
          "note": "The `error.type` SHOULD match the `db.response.status_code` returned by the database or the client library, or the canonical name of exception that occurred.\nWhen using canonical exception type name, instrumentation SHOULD do the best effort to report the most relevant type. For example, if the original exception is wrapped into a generic one, the original exception SHOULD be preferred.\nInstrumentations SHOULD document how `error.type` is populated.\n",
          "stability": "stable"
        },
        {
          "name": "server.address",
          "type": "string",
          "brief": "Name of the database host.\n",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "recommended",
          "sampling_relevant": true,
          "note": "When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": {
            "conditionally_required": "If using a port other than the default port for this DBMS and if `server.address` is set."
          },
          "sampling_relevant": true,
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "db.operation.parameter",
          "type": "template[string]",
          "brief": "A database operation parameter, with `<key>` being the parameter name, and the attribute value being a string representation of the parameter value.\n",
          "examples": [
            "someval",
            "55"
          ],
          "requirement_level": "opt_in",
          "note": "If a parameter has no name and instead is referenced only by index, then `<key>` SHOULD be the 0-based index.\nIf `db.query.text` is also captured, then `db.operation.parameter.<key>` SHOULD match up with the parameterized placeholders present in `db.query.text`.\n",
          "stability": "release_candidate"
        },
        {
          "name": "db.query.summary",
          "type": "string",
          "brief": "Low cardinality representation of a database query text.\n",
          "examples": [
            "SELECT wuser_table",
            "INSERT shipping_details SELECT orders",
            "get user by id"
          ],
          "requirement_level": {
            "recommended": "if readily available or if instrumentation supports query summarization."
          },
          "sampling_relevant": true,
          "note": "`db.query.summary` provides static summary of the query text. It describes a class of database queries and is useful as a grouping key, especially when analyzing telemetry for database calls involving complex queries.\nSummary may be available to the instrumentation through instrumentation hooks or other means. If it is not available, instrumentations that support query parsing SHOULD generate a summary following [Generating query summary](../database/database-spans.md#generating-a-summary-of-the-query-text) section.\n",
          "stability": "release_candidate"
        },
        {
          "name": "db.query.text",
          "type": "string",
          "brief": "The database query being executed.\n",
          "examples": [
            "SELECT * FROM wuser_table where username = ?",
            "SET mykey ?"
          ],
          "requirement_level": {
            "recommended": "Non-parameterized query text SHOULD NOT be collected by default unless there is sanitization that excludes sensitive data, e.g. by redacting all literal values present in the query text. See [Sanitization of `db.query.text`](../database/database-spans.md#sanitization-of-dbquerytext).\nParameterized query text SHOULD be collected by default (the query parameter values themselves are opt-in, see [`db.operation.parameter.<key>`](../attributes-registry/db.md)).\n"
          },
          "sampling_relevant": true,
          "note": "For sanitization see [Sanitization of `db.query.text`](../database/database-spans.md#sanitization-of-dbquerytext).\nFor batch operations, if the individual operations are known to have the same query text then that query text SHOULD be used, otherwise all of the individual query texts SHOULD be concatenated with separator `; ` or some other database system specific separator if more applicable.\nEven though parameterized query text can potentially have sensitive data, by using a parameterized query the user is giving a strong signal that any sensitive data will be passed as parameter values, and the benefit to observability of capturing the static part of the query text by default outweighs the risk.\n",
          "stability": "release_candidate"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/database/spans.yaml",
        "attributes": {
          "db.operation.batch.size": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "db.operation.parameter": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "db.query.summary": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "db.query.text": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "db.response.returned_rows": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "db.response.status_code": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "sampling_relevant"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ]
          }
        }
      }
    },
    {
      "id": "trace.db.common.query_and_collection",
      "type": "attribute_group",
      "brief": "This group defines the attributes used to perform database client calls.",
      "attributes": [
        {
          "name": "db.operation.batch.size",
          "type": "int",
          "brief": "The number of queries included in a batch operation.",
          "examples": [
            2,
            3,
            4
          ],
          "requirement_level": "recommended",
          "note": "Operations are only considered batches when they contain two or more operations, and so `db.operation.batch.size` SHOULD never be `1`.\n",
          "stability": "release_candidate"
        },
        {
          "name": "db.response.returned_rows",
          "type": "int",
          "brief": "Number of rows returned by the operation.",
          "examples": [
            10,
            30,
            1000
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "db.response.status_code",
          "type": "string",
          "brief": "Database response status code.",
          "examples": [
            "102",
            "ORA-17002",
            "08P01",
            "404"
          ],
          "requirement_level": {
            "conditionally_required": "If the operation failed and status code is available."
          },
          "note": "The status code returned by the database. Usually it represents an error code, but may also represent partial success, warning, or differentiate between various types of successful outcomes.\nSemantic conventions for individual database systems SHOULD document what `db.response.status_code` means in the context of that system.\n",
          "stability": "release_candidate"
        },
        {
          "name": "db.operation.name",
          "type": "string",
          "brief": "The name of the operation or command being executed.\n",
          "examples": [
            "findAndModify",
            "HMSET",
            "SELECT"
          ],
          "requirement_level": {
            "conditionally_required": "If readily available and if there is a single operation name that describes the database call.\n"
          },
          "sampling_relevant": true,
          "note": "It is RECOMMENDED to capture the value as provided by the application\nwithout attempting to do any case normalization.\n\nThe operation name SHOULD NOT be extracted from `db.query.text`,\nwhen the database system supports cross-table queries in non-batch operations.\n\nFor batch operations, if the individual operations are known to have the same operation name\nthen that operation name SHOULD be used prepended by `BATCH `,\notherwise `db.operation.name` SHOULD be `BATCH` or some other database\nsystem specific term if more applicable.\n",
          "stability": "release_candidate"
        },
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "timeout",
            "java.net.UnknownHostException",
            "server_certificate_invalid",
            "500"
          ],
          "requirement_level": {
            "conditionally_required": "If and only if the operation failed."
          },
          "note": "The `error.type` SHOULD match the `db.response.status_code` returned by the database or the client library, or the canonical name of exception that occurred.\nWhen using canonical exception type name, instrumentation SHOULD do the best effort to report the most relevant type. For example, if the original exception is wrapped into a generic one, the original exception SHOULD be preferred.\nInstrumentations SHOULD document how `error.type` is populated.\n",
          "stability": "stable"
        },
        {
          "name": "server.address",
          "type": "string",
          "brief": "Name of the database host.\n",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "recommended",
          "sampling_relevant": true,
          "note": "When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": {
            "conditionally_required": "If using a port other than the default port for this DBMS and if `server.address` is set."
          },
          "sampling_relevant": true,
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "db.operation.parameter",
          "type": "template[string]",
          "brief": "A database operation parameter, with `<key>` being the parameter name, and the attribute value being a string representation of the parameter value.\n",
          "examples": [
            "someval",
            "55"
          ],
          "requirement_level": "opt_in",
          "note": "If a parameter has no name and instead is referenced only by index, then `<key>` SHOULD be the 0-based index.\nIf `db.query.text` is also captured, then `db.operation.parameter.<key>` SHOULD match up with the parameterized placeholders present in `db.query.text`.\n",
          "stability": "release_candidate"
        },
        {
          "name": "db.query.summary",
          "type": "string",
          "brief": "Low cardinality representation of a database query text.\n",
          "examples": [
            "SELECT wuser_table",
            "INSERT shipping_details SELECT orders",
            "get user by id"
          ],
          "requirement_level": {
            "recommended": "if readily available or if instrumentation supports query summarization."
          },
          "sampling_relevant": true,
          "note": "`db.query.summary` provides static summary of the query text. It describes a class of database queries and is useful as a grouping key, especially when analyzing telemetry for database calls involving complex queries.\nSummary may be available to the instrumentation through instrumentation hooks or other means. If it is not available, instrumentations that support query parsing SHOULD generate a summary following [Generating query summary](../database/database-spans.md#generating-a-summary-of-the-query-text) section.\n",
          "stability": "release_candidate"
        },
        {
          "name": "db.query.text",
          "type": "string",
          "brief": "The database query being executed.\n",
          "examples": [
            "SELECT * FROM wuser_table where username = ?",
            "SET mykey ?"
          ],
          "requirement_level": {
            "recommended": "Non-parameterized query text SHOULD NOT be collected by default unless there is sanitization that excludes sensitive data, e.g. by redacting all literal values present in the query text. See [Sanitization of `db.query.text`](../database/database-spans.md#sanitization-of-dbquerytext).\nParameterized query text SHOULD be collected by default (the query parameter values themselves are opt-in, see [`db.operation.parameter.<key>`](../attributes-registry/db.md)).\n"
          },
          "sampling_relevant": true,
          "note": "For sanitization see [Sanitization of `db.query.text`](../database/database-spans.md#sanitization-of-dbquerytext).\nFor batch operations, if the individual operations are known to have the same query text then that query text SHOULD be used, otherwise all of the individual query texts SHOULD be concatenated with separator `; ` or some other database system specific separator if more applicable.\nEven though parameterized query text can potentially have sensitive data, by using a parameterized query the user is giving a strong signal that any sensitive data will be passed as parameter values, and the benefit to observability of capturing the static part of the query text by default outweighs the risk.\n",
          "stability": "release_candidate"
        },
        {
          "name": "db.collection.name",
          "type": "string",
          "brief": "The name of a collection (table, container) within the database.",
          "examples": [
            "public.users",
            "customers"
          ],
          "requirement_level": {
            "conditionally_required": "If readily available and if a database call is performed on a single collection.\n"
          },
          "sampling_relevant": true,
          "note": "It is RECOMMENDED to capture the value as provided by the application\nwithout attempting to do any case normalization.\n\nThe collection name SHOULD NOT be extracted from `db.query.text`,\nwhen the database system supports cross-table queries in non-batch operations.\n\nFor batch operations, if the individual operations are known to have the same\ncollection name then that collection name SHOULD be used.\n",
          "stability": "release_candidate"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/database/spans.yaml",
        "attributes": {
          "db.collection.name": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "db.operation.batch.size": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "db.operation.name": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "db.operation.parameter": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "db.query.summary": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "db.query.text": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "db.response.returned_rows": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "db.response.status_code": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "sampling_relevant"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ]
          }
        }
      }
    },
    {
      "id": "trace.db.common.full",
      "type": "attribute_group",
      "brief": "This group documents attributes that describe database call along with network information.",
      "attributes": [
        {
          "name": "db.operation.batch.size",
          "type": "int",
          "brief": "The number of queries included in a batch operation.",
          "examples": [
            2,
            3,
            4
          ],
          "requirement_level": "recommended",
          "note": "Operations are only considered batches when they contain two or more operations, and so `db.operation.batch.size` SHOULD never be `1`.\n",
          "stability": "release_candidate"
        },
        {
          "name": "db.response.returned_rows",
          "type": "int",
          "brief": "Number of rows returned by the operation.",
          "examples": [
            10,
            30,
            1000
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "db.response.status_code",
          "type": "string",
          "brief": "Database response status code.",
          "examples": [
            "102",
            "ORA-17002",
            "08P01",
            "404"
          ],
          "requirement_level": {
            "conditionally_required": "If the operation failed and status code is available."
          },
          "note": "The status code returned by the database. Usually it represents an error code, but may also represent partial success, warning, or differentiate between various types of successful outcomes.\nSemantic conventions for individual database systems SHOULD document what `db.response.status_code` means in the context of that system.\n",
          "stability": "release_candidate"
        },
        {
          "name": "db.operation.name",
          "type": "string",
          "brief": "The name of the operation or command being executed.\n",
          "examples": [
            "findAndModify",
            "HMSET",
            "SELECT"
          ],
          "requirement_level": {
            "conditionally_required": "If readily available and if there is a single operation name that describes the database call.\n"
          },
          "sampling_relevant": true,
          "note": "It is RECOMMENDED to capture the value as provided by the application\nwithout attempting to do any case normalization.\n\nThe operation name SHOULD NOT be extracted from `db.query.text`,\nwhen the database system supports cross-table queries in non-batch operations.\n\nFor batch operations, if the individual operations are known to have the same operation name\nthen that operation name SHOULD be used prepended by `BATCH `,\notherwise `db.operation.name` SHOULD be `BATCH` or some other database\nsystem specific term if more applicable.\n",
          "stability": "release_candidate"
        },
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "timeout",
            "java.net.UnknownHostException",
            "server_certificate_invalid",
            "500"
          ],
          "requirement_level": {
            "conditionally_required": "If and only if the operation failed."
          },
          "note": "The `error.type` SHOULD match the `db.response.status_code` returned by the database or the client library, or the canonical name of exception that occurred.\nWhen using canonical exception type name, instrumentation SHOULD do the best effort to report the most relevant type. For example, if the original exception is wrapped into a generic one, the original exception SHOULD be preferred.\nInstrumentations SHOULD document how `error.type` is populated.\n",
          "stability": "stable"
        },
        {
          "name": "server.address",
          "type": "string",
          "brief": "Name of the database host.\n",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "recommended",
          "sampling_relevant": true,
          "note": "When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": {
            "conditionally_required": "If using a port other than the default port for this DBMS and if `server.address` is set."
          },
          "sampling_relevant": true,
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "db.operation.parameter",
          "type": "template[string]",
          "brief": "A database operation parameter, with `<key>` being the parameter name, and the attribute value being a string representation of the parameter value.\n",
          "examples": [
            "someval",
            "55"
          ],
          "requirement_level": "opt_in",
          "note": "If a parameter has no name and instead is referenced only by index, then `<key>` SHOULD be the 0-based index.\nIf `db.query.text` is also captured, then `db.operation.parameter.<key>` SHOULD match up with the parameterized placeholders present in `db.query.text`.\n",
          "stability": "release_candidate"
        },
        {
          "name": "db.query.summary",
          "type": "string",
          "brief": "Low cardinality representation of a database query text.\n",
          "examples": [
            "SELECT wuser_table",
            "INSERT shipping_details SELECT orders",
            "get user by id"
          ],
          "requirement_level": {
            "recommended": "if readily available or if instrumentation supports query summarization."
          },
          "sampling_relevant": true,
          "note": "`db.query.summary` provides static summary of the query text. It describes a class of database queries and is useful as a grouping key, especially when analyzing telemetry for database calls involving complex queries.\nSummary may be available to the instrumentation through instrumentation hooks or other means. If it is not available, instrumentations that support query parsing SHOULD generate a summary following [Generating query summary](../database/database-spans.md#generating-a-summary-of-the-query-text) section.\n",
          "stability": "release_candidate"
        },
        {
          "name": "db.query.text",
          "type": "string",
          "brief": "The database query being executed.\n",
          "examples": [
            "SELECT * FROM wuser_table where username = ?",
            "SET mykey ?"
          ],
          "requirement_level": {
            "recommended": "Non-parameterized query text SHOULD NOT be collected by default unless there is sanitization that excludes sensitive data, e.g. by redacting all literal values present in the query text. See [Sanitization of `db.query.text`](../database/database-spans.md#sanitization-of-dbquerytext).\nParameterized query text SHOULD be collected by default (the query parameter values themselves are opt-in, see [`db.operation.parameter.<key>`](../attributes-registry/db.md)).\n"
          },
          "sampling_relevant": true,
          "note": "For sanitization see [Sanitization of `db.query.text`](../database/database-spans.md#sanitization-of-dbquerytext).\nFor batch operations, if the individual operations are known to have the same query text then that query text SHOULD be used, otherwise all of the individual query texts SHOULD be concatenated with separator `; ` or some other database system specific separator if more applicable.\nEven though parameterized query text can potentially have sensitive data, by using a parameterized query the user is giving a strong signal that any sensitive data will be passed as parameter values, and the benefit to observability of capturing the static part of the query text by default outweighs the risk.\n",
          "stability": "release_candidate"
        },
        {
          "name": "db.collection.name",
          "type": "string",
          "brief": "The name of a collection (table, container) within the database.",
          "examples": [
            "public.users",
            "customers"
          ],
          "requirement_level": {
            "conditionally_required": "If readily available and if a database call is performed on a single collection.\n"
          },
          "sampling_relevant": true,
          "note": "It is RECOMMENDED to capture the value as provided by the application\nwithout attempting to do any case normalization.\n\nThe collection name SHOULD NOT be extracted from `db.query.text`,\nwhen the database system supports cross-table queries in non-batch operations.\n\nFor batch operations, if the individual operations are known to have the same\ncollection name then that collection name SHOULD be used.\n",
          "stability": "release_candidate"
        },
        {
          "name": "db.namespace",
          "type": "string",
          "brief": "The name of the database, fully qualified within the server address and port.\n",
          "examples": [
            "customers",
            "test.users"
          ],
          "requirement_level": {
            "conditionally_required": "If available."
          },
          "sampling_relevant": true,
          "note": "If a database system has multiple namespace components, they SHOULD be concatenated (potentially using database system specific conventions) from most general to most specific namespace component, and more specific namespaces SHOULD NOT be captured without the more general namespaces, to ensure that \"startswith\" queries for the more general namespaces will be valid.\nSemantic conventions for individual database systems SHOULD document what `db.namespace` means in the context of that system.\nIt is RECOMMENDED to capture the value as provided by the application without attempting to do any case normalization.\n",
          "stability": "release_candidate"
        },
        {
          "name": "db.system.name",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "other_sql",
                "value": "other_sql",
                "brief": "Some other SQL database. Fallback only.",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "softwareag.adabas",
                "value": "softwareag.adabas",
                "brief": "[Adabas (Adaptable Database System)](https://documentation.softwareag.com/?pf=adabas)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "actian.ingres",
                "value": "actian.ingres",
                "brief": "[Actian Ingres](https://www.actian.com/databases/ingres/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "aws.dynamodb",
                "value": "aws.dynamodb",
                "brief": "[Amazon DynamoDB](https://aws.amazon.com/pm/dynamodb/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "aws.redshift",
                "value": "aws.redshift",
                "brief": "[Amazon Redshift](https://aws.amazon.com/redshift/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "azure.cosmosdb",
                "value": "azure.cosmosdb",
                "brief": "[Azure Cosmos DB](https://learn.microsoft.com/azure/cosmos-db)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "intersystems.cache",
                "value": "intersystems.cache",
                "brief": "[InterSystems Caché](https://www.intersystems.com/products/cache/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "cassandra",
                "value": "cassandra",
                "brief": "[Apache Cassandra](https://cassandra.apache.org/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "clickhouse",
                "value": "clickhouse",
                "brief": "[ClickHouse](https://clickhouse.com/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "cockroachdb",
                "value": "cockroachdb",
                "brief": "[CockroachDB](https://www.cockroachlabs.com/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "couchbase",
                "value": "couchbase",
                "brief": "[Couchbase](https://www.couchbase.com/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "couchdb",
                "value": "couchdb",
                "brief": "[Apache CouchDB](https://couchdb.apache.org/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "derby",
                "value": "derby",
                "brief": "[Apache Derby](https://db.apache.org/derby/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "elasticsearch",
                "value": "elasticsearch",
                "brief": "[Elasticsearch](https://www.elastic.co/elasticsearch)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "firebirdsql",
                "value": "firebirdsql",
                "brief": "[Firebird](https://www.firebirdsql.org/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "gcp.spanner",
                "value": "gcp.spanner",
                "brief": "[Google Cloud Spanner](https://cloud.google.com/spanner)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "geode",
                "value": "geode",
                "brief": "[Apache Geode](https://geode.apache.org/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "h2database",
                "value": "h2database",
                "brief": "[H2 Database](https://h2database.com/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "hbase",
                "value": "hbase",
                "brief": "[Apache HBase](https://hbase.apache.org/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "hive",
                "value": "hive",
                "brief": "[Apache Hive](https://hive.apache.org/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "hsqldb",
                "value": "hsqldb",
                "brief": "[HyperSQL Database](https://hsqldb.org/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "ibm.db2",
                "value": "ibm.db2",
                "brief": "[IBM Db2](https://www.ibm.com/db2)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "ibm.informix",
                "value": "ibm.informix",
                "brief": "[IBM Informix](https://www.ibm.com/products/informix)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "ibm.netezza",
                "value": "ibm.netezza",
                "brief": "[IBM Netezza](https://www.ibm.com/products/netezza)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "influxdb",
                "value": "influxdb",
                "brief": "[InfluxDB](https://www.influxdata.com/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "instantdb",
                "value": "instantdb",
                "brief": "[Instant](https://www.instantdb.com/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "mariadb",
                "value": "mariadb",
                "brief": "[MariaDB](https://mariadb.org/)",
                "note": null,
                "stability": "release_candidate",
                "deprecated": null
              },
              {
                "id": "memcached",
                "value": "memcached",
                "brief": "[Memcached](https://memcached.org/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "mongodb",
                "value": "mongodb",
                "brief": "[MongoDB](https://www.mongodb.com/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "microsoft.sql_server",
                "value": "microsoft.sql_server",
                "brief": "[Microsoft SQL Server](https://www.microsoft.com/sql-server)",
                "note": null,
                "stability": "release_candidate",
                "deprecated": null
              },
              {
                "id": "mysql",
                "value": "mysql",
                "brief": "[MySQL](https://www.mysql.com/)",
                "note": null,
                "stability": "release_candidate",
                "deprecated": null
              },
              {
                "id": "neo4j",
                "value": "neo4j",
                "brief": "[Neo4j](https://neo4j.com/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "opensearch",
                "value": "opensearch",
                "brief": "[OpenSearch](https://opensearch.org/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "oracle.db",
                "value": "oracle.db",
                "brief": "[Oracle Database](https://www.oracle.com/database/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "postgresql",
                "value": "postgresql",
                "brief": "[PostgreSQL](https://www.postgresql.org/)",
                "note": null,
                "stability": "release_candidate",
                "deprecated": null
              },
              {
                "id": "redis",
                "value": "redis",
                "brief": "[Redis](https://redis.io/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "sap.hana",
                "value": "sap.hana",
                "brief": "[SAP HANA](https://www.sap.com/products/technology-platform/hana/what-is-sap-hana.html)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "sap.maxdb",
                "value": "sap.maxdb",
                "brief": "[SAP MaxDB](https://maxdb.sap.com/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "sqlite",
                "value": "sqlite",
                "brief": "[SQLite](https://www.sqlite.org/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "teradata",
                "value": "teradata",
                "brief": "[Teradata](https://www.teradata.com/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "trino",
                "value": "trino",
                "brief": "[Trino](https://trino.io/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The database management system (DBMS) product as identified by the client instrumentation.",
          "requirement_level": "required",
          "sampling_relevant": true,
          "note": "The actual DBMS may differ from the one identified by the client. For example, when using PostgreSQL client libraries to connect to a CockroachDB, the `db.system.name` is set to `postgresql` based on the instrumentation's best knowledge.\n",
          "stability": "release_candidate"
        },
        {
          "name": "network.peer.address",
          "type": "string",
          "brief": "Peer address of the database node where the operation was performed.",
          "examples": [
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": {
            "recommended": "If applicable for this database system."
          },
          "note": "Semantic conventions for individual database systems SHOULD document whether `network.peer.*` attributes are applicable. Network peer address and port are useful when the application interacts with individual database nodes directly.\nIf a database operation involved multiple network calls (for example retries), the address of the last contacted node SHOULD be used.\n",
          "stability": "stable"
        },
        {
          "name": "network.peer.port",
          "type": "int",
          "brief": "Peer port number of the network connection.",
          "examples": [
            65123
          ],
          "requirement_level": {
            "recommended": "if and only if `network.peer.address` is set."
          },
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/database/spans.yaml",
        "attributes": {
          "db.collection.name": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "db.namespace": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "db.operation.batch.size": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "db.operation.name": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "db.operation.parameter": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "db.query.summary": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "db.query.text": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "db.response.returned_rows": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "db.response.status_code": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "db.system.name": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ]
          },
          "network.peer.address": {
            "source_group": "registry.network",
            "inherited_fields": [
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "note",
              "requirement_level"
            ]
          },
          "network.peer.port": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "sampling_relevant"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ]
          }
        }
      }
    },
    {
      "id": "span.db.client",
      "type": "span",
      "brief": "This span defines the attributes used to perform database client calls.",
      "stability": "development",
      "attributes": [
        {
          "name": "db.operation.batch.size",
          "type": "int",
          "brief": "The number of queries included in a batch operation.",
          "examples": [
            2,
            3,
            4
          ],
          "requirement_level": "recommended",
          "note": "Operations are only considered batches when they contain two or more operations, and so `db.operation.batch.size` SHOULD never be `1`.\n",
          "stability": "release_candidate"
        },
        {
          "name": "db.response.returned_rows",
          "type": "int",
          "brief": "Number of rows returned by the operation.",
          "examples": [
            10,
            30,
            1000
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "db.response.status_code",
          "type": "string",
          "brief": "Database response status code.",
          "examples": [
            "102",
            "ORA-17002",
            "08P01",
            "404"
          ],
          "requirement_level": {
            "conditionally_required": "If the operation failed and status code is available."
          },
          "note": "The status code returned by the database. Usually it represents an error code, but may also represent partial success, warning, or differentiate between various types of successful outcomes.\nSemantic conventions for individual database systems SHOULD document what `db.response.status_code` means in the context of that system.\n",
          "stability": "release_candidate"
        },
        {
          "name": "db.operation.name",
          "type": "string",
          "brief": "The name of the operation or command being executed.\n",
          "examples": [
            "findAndModify",
            "HMSET",
            "SELECT"
          ],
          "requirement_level": {
            "conditionally_required": "If readily available and if there is a single operation name that describes the database call.\n"
          },
          "sampling_relevant": true,
          "note": "It is RECOMMENDED to capture the value as provided by the application\nwithout attempting to do any case normalization.\n\nThe operation name SHOULD NOT be extracted from `db.query.text`,\nwhen the database system supports cross-table queries in non-batch operations.\n\nFor batch operations, if the individual operations are known to have the same operation name\nthen that operation name SHOULD be used prepended by `BATCH `,\notherwise `db.operation.name` SHOULD be `BATCH` or some other database\nsystem specific term if more applicable.\n",
          "stability": "release_candidate"
        },
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "timeout",
            "java.net.UnknownHostException",
            "server_certificate_invalid",
            "500"
          ],
          "requirement_level": {
            "conditionally_required": "If and only if the operation failed."
          },
          "note": "The `error.type` SHOULD match the `db.response.status_code` returned by the database or the client library, or the canonical name of exception that occurred.\nWhen using canonical exception type name, instrumentation SHOULD do the best effort to report the most relevant type. For example, if the original exception is wrapped into a generic one, the original exception SHOULD be preferred.\nInstrumentations SHOULD document how `error.type` is populated.\n",
          "stability": "stable"
        },
        {
          "name": "server.address",
          "type": "string",
          "brief": "Name of the database host.\n",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "recommended",
          "sampling_relevant": true,
          "note": "When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": {
            "conditionally_required": "If using a port other than the default port for this DBMS and if `server.address` is set."
          },
          "sampling_relevant": true,
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "db.operation.parameter",
          "type": "template[string]",
          "brief": "A database operation parameter, with `<key>` being the parameter name, and the attribute value being a string representation of the parameter value.\n",
          "examples": [
            "someval",
            "55"
          ],
          "requirement_level": "opt_in",
          "note": "If a parameter has no name and instead is referenced only by index, then `<key>` SHOULD be the 0-based index.\nIf `db.query.text` is also captured, then `db.operation.parameter.<key>` SHOULD match up with the parameterized placeholders present in `db.query.text`.\n",
          "stability": "release_candidate"
        },
        {
          "name": "db.query.summary",
          "type": "string",
          "brief": "Low cardinality representation of a database query text.\n",
          "examples": [
            "SELECT wuser_table",
            "INSERT shipping_details SELECT orders",
            "get user by id"
          ],
          "requirement_level": {
            "recommended": "if readily available or if instrumentation supports query summarization."
          },
          "sampling_relevant": true,
          "note": "`db.query.summary` provides static summary of the query text. It describes a class of database queries and is useful as a grouping key, especially when analyzing telemetry for database calls involving complex queries.\nSummary may be available to the instrumentation through instrumentation hooks or other means. If it is not available, instrumentations that support query parsing SHOULD generate a summary following [Generating query summary](../database/database-spans.md#generating-a-summary-of-the-query-text) section.\n",
          "stability": "release_candidate"
        },
        {
          "name": "db.query.text",
          "type": "string",
          "brief": "The database query being executed.\n",
          "examples": [
            "SELECT * FROM wuser_table where username = ?",
            "SET mykey ?"
          ],
          "requirement_level": {
            "recommended": "Non-parameterized query text SHOULD NOT be collected by default unless there is sanitization that excludes sensitive data, e.g. by redacting all literal values present in the query text. See [Sanitization of `db.query.text`](../database/database-spans.md#sanitization-of-dbquerytext).\nParameterized query text SHOULD be collected by default (the query parameter values themselves are opt-in, see [`db.operation.parameter.<key>`](../attributes-registry/db.md)).\n"
          },
          "sampling_relevant": true,
          "note": "For sanitization see [Sanitization of `db.query.text`](../database/database-spans.md#sanitization-of-dbquerytext).\nFor batch operations, if the individual operations are known to have the same query text then that query text SHOULD be used, otherwise all of the individual query texts SHOULD be concatenated with separator `; ` or some other database system specific separator if more applicable.\nEven though parameterized query text can potentially have sensitive data, by using a parameterized query the user is giving a strong signal that any sensitive data will be passed as parameter values, and the benefit to observability of capturing the static part of the query text by default outweighs the risk.\n",
          "stability": "release_candidate"
        },
        {
          "name": "db.collection.name",
          "type": "string",
          "brief": "The name of a collection (table, container) within the database.",
          "examples": [
            "public.users",
            "customers"
          ],
          "requirement_level": {
            "conditionally_required": "If readily available and if a database call is performed on a single collection.\n"
          },
          "sampling_relevant": true,
          "note": "It is RECOMMENDED to capture the value as provided by the application\nwithout attempting to do any case normalization.\n\nThe collection name SHOULD NOT be extracted from `db.query.text`,\nwhen the database system supports cross-table queries in non-batch operations.\n\nFor batch operations, if the individual operations are known to have the same\ncollection name then that collection name SHOULD be used.\n",
          "stability": "release_candidate"
        },
        {
          "name": "db.namespace",
          "type": "string",
          "brief": "The name of the database, fully qualified within the server address and port.\n",
          "examples": [
            "customers",
            "test.users"
          ],
          "requirement_level": {
            "conditionally_required": "If available."
          },
          "sampling_relevant": true,
          "note": "If a database system has multiple namespace components, they SHOULD be concatenated (potentially using database system specific conventions) from most general to most specific namespace component, and more specific namespaces SHOULD NOT be captured without the more general namespaces, to ensure that \"startswith\" queries for the more general namespaces will be valid.\nSemantic conventions for individual database systems SHOULD document what `db.namespace` means in the context of that system.\nIt is RECOMMENDED to capture the value as provided by the application without attempting to do any case normalization.\n",
          "stability": "release_candidate"
        },
        {
          "name": "db.system.name",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "other_sql",
                "value": "other_sql",
                "brief": "Some other SQL database. Fallback only.",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "softwareag.adabas",
                "value": "softwareag.adabas",
                "brief": "[Adabas (Adaptable Database System)](https://documentation.softwareag.com/?pf=adabas)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "actian.ingres",
                "value": "actian.ingres",
                "brief": "[Actian Ingres](https://www.actian.com/databases/ingres/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "aws.dynamodb",
                "value": "aws.dynamodb",
                "brief": "[Amazon DynamoDB](https://aws.amazon.com/pm/dynamodb/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "aws.redshift",
                "value": "aws.redshift",
                "brief": "[Amazon Redshift](https://aws.amazon.com/redshift/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "azure.cosmosdb",
                "value": "azure.cosmosdb",
                "brief": "[Azure Cosmos DB](https://learn.microsoft.com/azure/cosmos-db)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "intersystems.cache",
                "value": "intersystems.cache",
                "brief": "[InterSystems Caché](https://www.intersystems.com/products/cache/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "cassandra",
                "value": "cassandra",
                "brief": "[Apache Cassandra](https://cassandra.apache.org/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "clickhouse",
                "value": "clickhouse",
                "brief": "[ClickHouse](https://clickhouse.com/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "cockroachdb",
                "value": "cockroachdb",
                "brief": "[CockroachDB](https://www.cockroachlabs.com/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "couchbase",
                "value": "couchbase",
                "brief": "[Couchbase](https://www.couchbase.com/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "couchdb",
                "value": "couchdb",
                "brief": "[Apache CouchDB](https://couchdb.apache.org/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "derby",
                "value": "derby",
                "brief": "[Apache Derby](https://db.apache.org/derby/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "elasticsearch",
                "value": "elasticsearch",
                "brief": "[Elasticsearch](https://www.elastic.co/elasticsearch)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "firebirdsql",
                "value": "firebirdsql",
                "brief": "[Firebird](https://www.firebirdsql.org/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "gcp.spanner",
                "value": "gcp.spanner",
                "brief": "[Google Cloud Spanner](https://cloud.google.com/spanner)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "geode",
                "value": "geode",
                "brief": "[Apache Geode](https://geode.apache.org/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "h2database",
                "value": "h2database",
                "brief": "[H2 Database](https://h2database.com/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "hbase",
                "value": "hbase",
                "brief": "[Apache HBase](https://hbase.apache.org/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "hive",
                "value": "hive",
                "brief": "[Apache Hive](https://hive.apache.org/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "hsqldb",
                "value": "hsqldb",
                "brief": "[HyperSQL Database](https://hsqldb.org/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "ibm.db2",
                "value": "ibm.db2",
                "brief": "[IBM Db2](https://www.ibm.com/db2)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "ibm.informix",
                "value": "ibm.informix",
                "brief": "[IBM Informix](https://www.ibm.com/products/informix)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "ibm.netezza",
                "value": "ibm.netezza",
                "brief": "[IBM Netezza](https://www.ibm.com/products/netezza)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "influxdb",
                "value": "influxdb",
                "brief": "[InfluxDB](https://www.influxdata.com/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "instantdb",
                "value": "instantdb",
                "brief": "[Instant](https://www.instantdb.com/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "mariadb",
                "value": "mariadb",
                "brief": "[MariaDB](https://mariadb.org/)",
                "note": null,
                "stability": "release_candidate",
                "deprecated": null
              },
              {
                "id": "memcached",
                "value": "memcached",
                "brief": "[Memcached](https://memcached.org/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "mongodb",
                "value": "mongodb",
                "brief": "[MongoDB](https://www.mongodb.com/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "microsoft.sql_server",
                "value": "microsoft.sql_server",
                "brief": "[Microsoft SQL Server](https://www.microsoft.com/sql-server)",
                "note": null,
                "stability": "release_candidate",
                "deprecated": null
              },
              {
                "id": "mysql",
                "value": "mysql",
                "brief": "[MySQL](https://www.mysql.com/)",
                "note": null,
                "stability": "release_candidate",
                "deprecated": null
              },
              {
                "id": "neo4j",
                "value": "neo4j",
                "brief": "[Neo4j](https://neo4j.com/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "opensearch",
                "value": "opensearch",
                "brief": "[OpenSearch](https://opensearch.org/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "oracle.db",
                "value": "oracle.db",
                "brief": "[Oracle Database](https://www.oracle.com/database/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "postgresql",
                "value": "postgresql",
                "brief": "[PostgreSQL](https://www.postgresql.org/)",
                "note": null,
                "stability": "release_candidate",
                "deprecated": null
              },
              {
                "id": "redis",
                "value": "redis",
                "brief": "[Redis](https://redis.io/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "sap.hana",
                "value": "sap.hana",
                "brief": "[SAP HANA](https://www.sap.com/products/technology-platform/hana/what-is-sap-hana.html)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "sap.maxdb",
                "value": "sap.maxdb",
                "brief": "[SAP MaxDB](https://maxdb.sap.com/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "sqlite",
                "value": "sqlite",
                "brief": "[SQLite](https://www.sqlite.org/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "teradata",
                "value": "teradata",
                "brief": "[Teradata](https://www.teradata.com/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "trino",
                "value": "trino",
                "brief": "[Trino](https://trino.io/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The database management system (DBMS) product as identified by the client instrumentation.",
          "requirement_level": "required",
          "sampling_relevant": true,
          "note": "The actual DBMS may differ from the one identified by the client. For example, when using PostgreSQL client libraries to connect to a CockroachDB, the `db.system.name` is set to `postgresql` based on the instrumentation's best knowledge.\n",
          "stability": "release_candidate"
        },
        {
          "name": "network.peer.address",
          "type": "string",
          "brief": "Peer address of the database node where the operation was performed.",
          "examples": [
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": {
            "recommended": "If applicable for this database system."
          },
          "note": "Semantic conventions for individual database systems SHOULD document whether `network.peer.*` attributes are applicable. Network peer address and port are useful when the application interacts with individual database nodes directly.\nIf a database operation involved multiple network calls (for example retries), the address of the last contacted node SHOULD be used.\n",
          "stability": "stable"
        },
        {
          "name": "network.peer.port",
          "type": "int",
          "brief": "Peer port number of the network connection.",
          "examples": [
            65123
          ],
          "requirement_level": {
            "recommended": "if and only if `network.peer.address` is set."
          },
          "stability": "stable"
        }
      ],
      "span_kind": "client",
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/database/spans.yaml",
        "attributes": {
          "db.collection.name": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "db.namespace": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "db.operation.batch.size": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "db.operation.name": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "db.operation.parameter": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "db.query.summary": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "db.query.text": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "db.response.returned_rows": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "db.response.status_code": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "db.system.name": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ]
          },
          "network.peer.address": {
            "source_group": "registry.network",
            "inherited_fields": [
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "note",
              "requirement_level"
            ]
          },
          "network.peer.port": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "sampling_relevant"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ]
          }
        }
      }
    },
    {
      "id": "span.db.mssql.client",
      "type": "span",
      "brief": "Attributes for Microsoft SQL Server\n",
      "stability": "development",
      "attributes": [
        {
          "name": "db.operation.batch.size",
          "type": "int",
          "brief": "The number of queries included in a batch operation.",
          "examples": [
            2,
            3,
            4
          ],
          "requirement_level": "recommended",
          "note": "Operations are only considered batches when they contain two or more operations, and so `db.operation.batch.size` SHOULD never be `1`.\n",
          "stability": "release_candidate"
        },
        {
          "name": "db.response.returned_rows",
          "type": "int",
          "brief": "Number of rows returned by the operation.",
          "examples": [
            10,
            30,
            1000
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "timeout",
            "java.net.UnknownHostException",
            "server_certificate_invalid",
            "500"
          ],
          "requirement_level": {
            "conditionally_required": "If and only if the operation failed."
          },
          "note": "The `error.type` SHOULD match the `db.response.status_code` returned by the database or the client library, or the canonical name of exception that occurred.\nWhen using canonical exception type name, instrumentation SHOULD do the best effort to report the most relevant type. For example, if the original exception is wrapped into a generic one, the original exception SHOULD be preferred.\nInstrumentations SHOULD document how `error.type` is populated.\n",
          "stability": "stable"
        },
        {
          "name": "server.address",
          "type": "string",
          "brief": "Name of the database host.\n",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "recommended",
          "sampling_relevant": true,
          "note": "When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": {
            "conditionally_required": "If using a port other than the default port for this DBMS and if `server.address` is set."
          },
          "sampling_relevant": true,
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "db.operation.parameter",
          "type": "template[string]",
          "brief": "A database operation parameter, with `<key>` being the parameter name, and the attribute value being a string representation of the parameter value.\n",
          "examples": [
            "someval",
            "55"
          ],
          "requirement_level": "opt_in",
          "note": "If a parameter has no name and instead is referenced only by index, then `<key>` SHOULD be the 0-based index.\nIf `db.query.text` is also captured, then `db.operation.parameter.<key>` SHOULD match up with the parameterized placeholders present in `db.query.text`.\n",
          "stability": "release_candidate"
        },
        {
          "name": "db.query.summary",
          "type": "string",
          "brief": "Low cardinality representation of a database query text.\n",
          "examples": [
            "SELECT wuser_table",
            "INSERT shipping_details SELECT orders",
            "get user by id"
          ],
          "requirement_level": {
            "recommended": "if readily available or if instrumentation supports query summarization."
          },
          "sampling_relevant": true,
          "note": "`db.query.summary` provides static summary of the query text. It describes a class of database queries and is useful as a grouping key, especially when analyzing telemetry for database calls involving complex queries.\nSummary may be available to the instrumentation through instrumentation hooks or other means. If it is not available, instrumentations that support query parsing SHOULD generate a summary following [Generating query summary](../database/database-spans.md#generating-a-summary-of-the-query-text) section.\n",
          "stability": "release_candidate"
        },
        {
          "name": "db.query.text",
          "type": "string",
          "brief": "The database query being executed.\n",
          "examples": [
            "SELECT * FROM wuser_table where username = ?",
            "SET mykey ?"
          ],
          "requirement_level": {
            "recommended": "Non-parameterized query text SHOULD NOT be collected by default unless there is sanitization that excludes sensitive data, e.g. by redacting all literal values present in the query text. See [Sanitization of `db.query.text`](../database/database-spans.md#sanitization-of-dbquerytext).\nParameterized query text SHOULD be collected by default (the query parameter values themselves are opt-in, see [`db.operation.parameter.<key>`](../attributes-registry/db.md)).\n"
          },
          "sampling_relevant": true,
          "note": "For sanitization see [Sanitization of `db.query.text`](../database/database-spans.md#sanitization-of-dbquerytext).\nFor batch operations, if the individual operations are known to have the same query text then that query text SHOULD be used, otherwise all of the individual query texts SHOULD be concatenated with separator `; ` or some other database system specific separator if more applicable.\nEven though parameterized query text can potentially have sensitive data, by using a parameterized query the user is giving a strong signal that any sensitive data will be passed as parameter values, and the benefit to observability of capturing the static part of the query text by default outweighs the risk.\n",
          "stability": "release_candidate"
        },
        {
          "name": "db.namespace",
          "type": "string",
          "brief": "The database associated with the connection, qualified by the instance name.\n",
          "examples": [
            "instance1.products",
            "customers"
          ],
          "requirement_level": {
            "conditionally_required": "If available without an additional network call."
          },
          "sampling_relevant": true,
          "note": "When connected to a default instance, `db.namespace` SHOULD be set to the name of\nthe database. When connected to a [named instance](https://learn.microsoft.com/sql/connect/jdbc/building-the-connection-url#named-and-multiple-sql-server-instances),\n`db.namespace` SHOULD be set to the combination of instance and database name following the `{instance_name}.{database_name}` pattern.\n\nA connection's currently associated database may change during its lifetime, e.g. from executing `USE <database>`.\n\nIf instrumentation is unable to capture the connection's currently associated database on each query\nwithout triggering an additional query to be executed (e.g. `SELECT DB_NAME()`),\nthen it is RECOMMENDED to fallback and use the database provided when the connection was established.\n\nInstrumentation SHOULD document if `db.namespace` reflects the database provided when the connection was established.\n\nIt is RECOMMENDED to capture the value as provided by the application without attempting to do any case normalization.\n",
          "stability": "release_candidate"
        },
        {
          "name": "db.response.status_code",
          "type": "string",
          "brief": "[Microsoft SQL Server error](https://learn.microsoft.com/sql/relational-databases/errors-events/database-engine-events-and-errors) number represented as a string.\n",
          "examples": [
            "102",
            "40020"
          ],
          "requirement_level": {
            "conditionally_required": "If response has ended with warning or an error."
          },
          "note": "Microsoft SQL Server does not report SQLSTATE.\nInstrumentations SHOULD use [error severity](https://learn.microsoft.com/sql/relational-databases/errors-events/database-engine-error-severities) returned along with the status code to determine the status of the span. Response codes with severity 11 or higher SHOULD be considered errors.\n",
          "stability": "release_candidate"
        }
      ],
      "span_kind": "client",
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/database/spans.yaml",
        "attributes": {
          "db.namespace": {
            "source_group": "registry.db",
            "inherited_fields": [
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "db.operation.batch.size": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "db.operation.parameter": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "db.query.summary": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "db.query.text": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "db.response.returned_rows": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "db.response.status_code": {
            "source_group": "registry.db",
            "inherited_fields": [
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level"
            ]
          },
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "sampling_relevant"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ]
          }
        }
      }
    },
    {
      "id": "span.db.postgresql.client",
      "type": "span",
      "brief": "Attributes for PostgreSQL\n",
      "stability": "development",
      "attributes": [
        {
          "name": "db.operation.batch.size",
          "type": "int",
          "brief": "The number of queries included in a batch operation.",
          "examples": [
            2,
            3,
            4
          ],
          "requirement_level": "recommended",
          "note": "Operations are only considered batches when they contain two or more operations, and so `db.operation.batch.size` SHOULD never be `1`.\n",
          "stability": "release_candidate"
        },
        {
          "name": "db.response.returned_rows",
          "type": "int",
          "brief": "Number of rows returned by the operation.",
          "examples": [
            10,
            30,
            1000
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "timeout",
            "java.net.UnknownHostException",
            "server_certificate_invalid",
            "500"
          ],
          "requirement_level": {
            "conditionally_required": "If and only if the operation failed."
          },
          "note": "The `error.type` SHOULD match the `db.response.status_code` returned by the database or the client library, or the canonical name of exception that occurred.\nWhen using canonical exception type name, instrumentation SHOULD do the best effort to report the most relevant type. For example, if the original exception is wrapped into a generic one, the original exception SHOULD be preferred.\nInstrumentations SHOULD document how `error.type` is populated.\n",
          "stability": "stable"
        },
        {
          "name": "server.address",
          "type": "string",
          "brief": "Name of the database host.\n",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "recommended",
          "sampling_relevant": true,
          "note": "When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": {
            "conditionally_required": "If using a port other than the default port for this DBMS and if `server.address` is set."
          },
          "sampling_relevant": true,
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "db.operation.parameter",
          "type": "template[string]",
          "brief": "A database operation parameter, with `<key>` being the parameter name, and the attribute value being a string representation of the parameter value.\n",
          "examples": [
            "someval",
            "55"
          ],
          "requirement_level": "opt_in",
          "note": "If a parameter has no name and instead is referenced only by index, then `<key>` SHOULD be the 0-based index.\nIf `db.query.text` is also captured, then `db.operation.parameter.<key>` SHOULD match up with the parameterized placeholders present in `db.query.text`.\n",
          "stability": "release_candidate"
        },
        {
          "name": "db.query.summary",
          "type": "string",
          "brief": "Low cardinality representation of a database query text.\n",
          "examples": [
            "SELECT wuser_table",
            "INSERT shipping_details SELECT orders",
            "get user by id"
          ],
          "requirement_level": {
            "recommended": "if readily available or if instrumentation supports query summarization."
          },
          "sampling_relevant": true,
          "note": "`db.query.summary` provides static summary of the query text. It describes a class of database queries and is useful as a grouping key, especially when analyzing telemetry for database calls involving complex queries.\nSummary may be available to the instrumentation through instrumentation hooks or other means. If it is not available, instrumentations that support query parsing SHOULD generate a summary following [Generating query summary](../database/database-spans.md#generating-a-summary-of-the-query-text) section.\n",
          "stability": "release_candidate"
        },
        {
          "name": "db.query.text",
          "type": "string",
          "brief": "The database query being executed.\n",
          "examples": [
            "SELECT * FROM wuser_table where username = ?",
            "SET mykey ?"
          ],
          "requirement_level": {
            "recommended": "Non-parameterized query text SHOULD NOT be collected by default unless there is sanitization that excludes sensitive data, e.g. by redacting all literal values present in the query text. See [Sanitization of `db.query.text`](../database/database-spans.md#sanitization-of-dbquerytext).\nParameterized query text SHOULD be collected by default (the query parameter values themselves are opt-in, see [`db.operation.parameter.<key>`](../attributes-registry/db.md)).\n"
          },
          "sampling_relevant": true,
          "note": "For sanitization see [Sanitization of `db.query.text`](../database/database-spans.md#sanitization-of-dbquerytext).\nFor batch operations, if the individual operations are known to have the same query text then that query text SHOULD be used, otherwise all of the individual query texts SHOULD be concatenated with separator `; ` or some other database system specific separator if more applicable.\nEven though parameterized query text can potentially have sensitive data, by using a parameterized query the user is giving a strong signal that any sensitive data will be passed as parameter values, and the benefit to observability of capturing the static part of the query text by default outweighs the risk.\n",
          "stability": "release_candidate"
        },
        {
          "name": "db.namespace",
          "type": "string",
          "brief": "The schema associated with the connection, qualified by the database name.\n",
          "examples": [
            "mydatabase.products",
            "mydatabase.customers"
          ],
          "requirement_level": {
            "conditionally_required": "If available without an additional network call."
          },
          "sampling_relevant": true,
          "note": "`db.namespace` SHOULD be set to the combination of database and schema name following the `{database}.{schema}` pattern.\n\nA connection's currently associated database may change during its lifetime, e.g. from executing `SET search_path TO <schema>`.\nIf the search path has multiple schemas, the first schema in the search path SHOULD be used.\n\nIf instrumentation is unable to capture the connection's currently associated schema on each query\nwithout triggering an additional query to be executed (e.g. `SELECT current_schema()`),\nthen it is RECOMMENDED to fallback and use the schema provided when the connection was established.\n\nInstrumentation SHOULD document if `db.namespace` reflects the schema provided when the connection was established.\n\nInstrumentation MAY use the user name when the connection was established as a stand-in for the schema name.\n\nInstrumentation SHOULD document if `db.namespace` reflects the user provided when the connection was established.\n\nIt is RECOMMENDED to capture the value as provided by the application without attempting to do any case normalization.\n",
          "stability": "release_candidate"
        },
        {
          "name": "db.response.status_code",
          "type": "string",
          "brief": "[PostgreSQL error code](https://www.postgresql.org/docs/current/errcodes-appendix.html).\n",
          "examples": [
            "08000",
            "08P01"
          ],
          "requirement_level": {
            "conditionally_required": "If response has ended with warning or an error."
          },
          "note": "PostgreSQL follows SQL standard conventions for [SQLSTATE](https://wikipedia.org/wiki/SQLSTATE). Response codes of \"Class 02\" or higher SHOULD be considered errors.\n",
          "stability": "release_candidate"
        }
      ],
      "span_kind": "client",
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/database/spans.yaml",
        "attributes": {
          "db.namespace": {
            "source_group": "registry.db",
            "inherited_fields": [
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "db.operation.batch.size": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "db.operation.parameter": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "db.query.summary": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "db.query.text": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "db.response.returned_rows": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "db.response.status_code": {
            "source_group": "registry.db",
            "inherited_fields": [
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level"
            ]
          },
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "sampling_relevant"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ]
          }
        }
      }
    },
    {
      "id": "span.db.mysql.client",
      "type": "span",
      "brief": "Attributes for MySQL\n",
      "stability": "development",
      "attributes": [
        {
          "name": "db.operation.batch.size",
          "type": "int",
          "brief": "The number of queries included in a batch operation.",
          "examples": [
            2,
            3,
            4
          ],
          "requirement_level": "recommended",
          "note": "Operations are only considered batches when they contain two or more operations, and so `db.operation.batch.size` SHOULD never be `1`.\n",
          "stability": "release_candidate"
        },
        {
          "name": "db.response.returned_rows",
          "type": "int",
          "brief": "Number of rows returned by the operation.",
          "examples": [
            10,
            30,
            1000
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "timeout",
            "java.net.UnknownHostException",
            "server_certificate_invalid",
            "500"
          ],
          "requirement_level": {
            "conditionally_required": "If and only if the operation failed."
          },
          "note": "The `error.type` SHOULD match the `db.response.status_code` returned by the database or the client library, or the canonical name of exception that occurred.\nWhen using canonical exception type name, instrumentation SHOULD do the best effort to report the most relevant type. For example, if the original exception is wrapped into a generic one, the original exception SHOULD be preferred.\nInstrumentations SHOULD document how `error.type` is populated.\n",
          "stability": "stable"
        },
        {
          "name": "server.address",
          "type": "string",
          "brief": "Name of the database host.\n",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "recommended",
          "sampling_relevant": true,
          "note": "When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": {
            "conditionally_required": "If using a port other than the default port for this DBMS and if `server.address` is set."
          },
          "sampling_relevant": true,
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "db.operation.parameter",
          "type": "template[string]",
          "brief": "A database operation parameter, with `<key>` being the parameter name, and the attribute value being a string representation of the parameter value.\n",
          "examples": [
            "someval",
            "55"
          ],
          "requirement_level": "opt_in",
          "note": "If a parameter has no name and instead is referenced only by index, then `<key>` SHOULD be the 0-based index.\nIf `db.query.text` is also captured, then `db.operation.parameter.<key>` SHOULD match up with the parameterized placeholders present in `db.query.text`.\n",
          "stability": "release_candidate"
        },
        {
          "name": "db.query.summary",
          "type": "string",
          "brief": "Low cardinality representation of a database query text.\n",
          "examples": [
            "SELECT wuser_table",
            "INSERT shipping_details SELECT orders",
            "get user by id"
          ],
          "requirement_level": {
            "recommended": "if readily available or if instrumentation supports query summarization."
          },
          "sampling_relevant": true,
          "note": "`db.query.summary` provides static summary of the query text. It describes a class of database queries and is useful as a grouping key, especially when analyzing telemetry for database calls involving complex queries.\nSummary may be available to the instrumentation through instrumentation hooks or other means. If it is not available, instrumentations that support query parsing SHOULD generate a summary following [Generating query summary](../database/database-spans.md#generating-a-summary-of-the-query-text) section.\n",
          "stability": "release_candidate"
        },
        {
          "name": "db.query.text",
          "type": "string",
          "brief": "The database query being executed.\n",
          "examples": [
            "SELECT * FROM wuser_table where username = ?",
            "SET mykey ?"
          ],
          "requirement_level": {
            "recommended": "Non-parameterized query text SHOULD NOT be collected by default unless there is sanitization that excludes sensitive data, e.g. by redacting all literal values present in the query text. See [Sanitization of `db.query.text`](../database/database-spans.md#sanitization-of-dbquerytext).\nParameterized query text SHOULD be collected by default (the query parameter values themselves are opt-in, see [`db.operation.parameter.<key>`](../attributes-registry/db.md)).\n"
          },
          "sampling_relevant": true,
          "note": "For sanitization see [Sanitization of `db.query.text`](../database/database-spans.md#sanitization-of-dbquerytext).\nFor batch operations, if the individual operations are known to have the same query text then that query text SHOULD be used, otherwise all of the individual query texts SHOULD be concatenated with separator `; ` or some other database system specific separator if more applicable.\nEven though parameterized query text can potentially have sensitive data, by using a parameterized query the user is giving a strong signal that any sensitive data will be passed as parameter values, and the benefit to observability of capturing the static part of the query text by default outweighs the risk.\n",
          "stability": "release_candidate"
        },
        {
          "name": "db.namespace",
          "type": "string",
          "brief": "The database associated with the connection.",
          "examples": [
            "products",
            "customers"
          ],
          "requirement_level": {
            "conditionally_required": "If available without an additional network call."
          },
          "sampling_relevant": true,
          "note": "A connection's currently associated database may change during its lifetime, e.g. from executing `USE <database>`.\n\nIf instrumentation is unable to capture the connection's currently associated database on each query\nwithout triggering an additional query to be executed (e.g. `SELECT DATABASE()`),\nthen it is RECOMMENDED to fallback and use the database provided when the connection was established.\n\nInstrumentation SHOULD document if `db.namespace` reflects the database provided when the connection was established.\n\nIt is RECOMMENDED to capture the value as provided by the application without attempting to do any case normalization.\n",
          "stability": "release_candidate"
        },
        {
          "name": "db.response.status_code",
          "type": "string",
          "brief": "[MySQL error number](https://dev.mysql.com/doc/mysql-errors/9.0/en/error-reference-introduction.html) recorded as a string.\n",
          "examples": [
            "1005",
            "MY-010016"
          ],
          "requirement_level": {
            "conditionally_required": "If response has ended with warning or an error."
          },
          "note": "MySQL error codes are vendor specific error codes and don't follow [SQLSTATE](https://wikipedia.org/wiki/SQLSTATE) conventions. All MySQL error codes SHOULD be considered errors.\n",
          "stability": "release_candidate"
        }
      ],
      "span_kind": "client",
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/database/spans.yaml",
        "attributes": {
          "db.namespace": {
            "source_group": "registry.db",
            "inherited_fields": [
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "db.operation.batch.size": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "db.operation.parameter": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "db.query.summary": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "db.query.text": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "db.response.returned_rows": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "db.response.status_code": {
            "source_group": "registry.db",
            "inherited_fields": [
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level"
            ]
          },
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "sampling_relevant"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ]
          }
        }
      }
    },
    {
      "id": "span.db.mariadb.client",
      "type": "span",
      "brief": "Attributes for MariaDB\n",
      "stability": "development",
      "attributes": [
        {
          "name": "db.operation.batch.size",
          "type": "int",
          "brief": "The number of queries included in a batch operation.",
          "examples": [
            2,
            3,
            4
          ],
          "requirement_level": "recommended",
          "note": "Operations are only considered batches when they contain two or more operations, and so `db.operation.batch.size` SHOULD never be `1`.\n",
          "stability": "release_candidate"
        },
        {
          "name": "db.response.returned_rows",
          "type": "int",
          "brief": "Number of rows returned by the operation.",
          "examples": [
            10,
            30,
            1000
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "timeout",
            "java.net.UnknownHostException",
            "server_certificate_invalid",
            "500"
          ],
          "requirement_level": {
            "conditionally_required": "If and only if the operation failed."
          },
          "note": "The `error.type` SHOULD match the `db.response.status_code` returned by the database or the client library, or the canonical name of exception that occurred.\nWhen using canonical exception type name, instrumentation SHOULD do the best effort to report the most relevant type. For example, if the original exception is wrapped into a generic one, the original exception SHOULD be preferred.\nInstrumentations SHOULD document how `error.type` is populated.\n",
          "stability": "stable"
        },
        {
          "name": "server.address",
          "type": "string",
          "brief": "Name of the database host.\n",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "recommended",
          "sampling_relevant": true,
          "note": "When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": {
            "conditionally_required": "If using a port other than the default port for this DBMS and if `server.address` is set."
          },
          "sampling_relevant": true,
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "db.operation.parameter",
          "type": "template[string]",
          "brief": "A database operation parameter, with `<key>` being the parameter name, and the attribute value being a string representation of the parameter value.\n",
          "examples": [
            "someval",
            "55"
          ],
          "requirement_level": "opt_in",
          "note": "If a parameter has no name and instead is referenced only by index, then `<key>` SHOULD be the 0-based index.\nIf `db.query.text` is also captured, then `db.operation.parameter.<key>` SHOULD match up with the parameterized placeholders present in `db.query.text`.\n",
          "stability": "release_candidate"
        },
        {
          "name": "db.query.summary",
          "type": "string",
          "brief": "Low cardinality representation of a database query text.\n",
          "examples": [
            "SELECT wuser_table",
            "INSERT shipping_details SELECT orders",
            "get user by id"
          ],
          "requirement_level": {
            "recommended": "if readily available or if instrumentation supports query summarization."
          },
          "sampling_relevant": true,
          "note": "`db.query.summary` provides static summary of the query text. It describes a class of database queries and is useful as a grouping key, especially when analyzing telemetry for database calls involving complex queries.\nSummary may be available to the instrumentation through instrumentation hooks or other means. If it is not available, instrumentations that support query parsing SHOULD generate a summary following [Generating query summary](../database/database-spans.md#generating-a-summary-of-the-query-text) section.\n",
          "stability": "release_candidate"
        },
        {
          "name": "db.query.text",
          "type": "string",
          "brief": "The database query being executed.\n",
          "examples": [
            "SELECT * FROM wuser_table where username = ?",
            "SET mykey ?"
          ],
          "requirement_level": {
            "recommended": "Non-parameterized query text SHOULD NOT be collected by default unless there is sanitization that excludes sensitive data, e.g. by redacting all literal values present in the query text. See [Sanitization of `db.query.text`](../database/database-spans.md#sanitization-of-dbquerytext).\nParameterized query text SHOULD be collected by default (the query parameter values themselves are opt-in, see [`db.operation.parameter.<key>`](../attributes-registry/db.md)).\n"
          },
          "sampling_relevant": true,
          "note": "For sanitization see [Sanitization of `db.query.text`](../database/database-spans.md#sanitization-of-dbquerytext).\nFor batch operations, if the individual operations are known to have the same query text then that query text SHOULD be used, otherwise all of the individual query texts SHOULD be concatenated with separator `; ` or some other database system specific separator if more applicable.\nEven though parameterized query text can potentially have sensitive data, by using a parameterized query the user is giving a strong signal that any sensitive data will be passed as parameter values, and the benefit to observability of capturing the static part of the query text by default outweighs the risk.\n",
          "stability": "release_candidate"
        },
        {
          "name": "db.namespace",
          "type": "string",
          "brief": "The database associated with the connection.",
          "examples": [
            "products",
            "customers"
          ],
          "requirement_level": {
            "conditionally_required": "If available without an additional network call."
          },
          "sampling_relevant": true,
          "note": "A connection's currently associated database may change during its lifetime, e.g. from executing `USE <database>`.\n\nIf instrumentation is unable to capture the connection's currently associated database on each query\nwithout triggering an additional query to be executed (e.g. `SELECT DATABASE()`),\nthen it is RECOMMENDED to fallback and use the database provided when the connection was established.\n\nInstrumentation SHOULD document if `db.namespace` reflects the database provided when the connection was established.\n\nIt is RECOMMENDED to capture the value as provided by the application without attempting to do any case normalization.\n",
          "stability": "release_candidate"
        },
        {
          "name": "db.response.status_code",
          "type": "string",
          "brief": "[Maria DB error code](https://mariadb.com/kb/en/mariadb-error-code-reference/) represented as a string.\n",
          "examples": [
            "1008",
            "3058"
          ],
          "requirement_level": {
            "conditionally_required": "If response has ended with warning or an error."
          },
          "note": "MariaDB uses vendor-specific error codes on all errors and reports [SQLSTATE](https://mariadb.com/kb/en/sqlstate/) in some cases.\nMariaDB error codes are more granular than SQLSTATE, so MariaDB instrumentations SHOULD set the `db.response.status_code` to this known error code.\nWhen SQLSTATE is available, SQLSTATE of \"Class 02\" or higher SHOULD be considered errors. When SQLSTATE is not available, all MariaDB error codes SHOULD be considered errors.\n",
          "stability": "release_candidate"
        }
      ],
      "span_kind": "client",
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/database/spans.yaml",
        "attributes": {
          "db.namespace": {
            "source_group": "registry.db",
            "inherited_fields": [
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "db.operation.batch.size": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "db.operation.parameter": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "db.query.summary": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "db.query.text": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "db.response.returned_rows": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "db.response.status_code": {
            "source_group": "registry.db",
            "inherited_fields": [
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level"
            ]
          },
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "sampling_relevant"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ]
          }
        }
      }
    },
    {
      "id": "span.db.cassandra.client",
      "type": "span",
      "brief": "Attributes for Cassandra\n",
      "stability": "development",
      "attributes": [
        {
          "name": "cassandra.coordinator.dc",
          "type": "string",
          "brief": "The data center of the coordinating node for a query.\n",
          "examples": "us-west-2",
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "cassandra.coordinator.id",
          "type": "string",
          "brief": "The ID of the coordinating node for a query.\n",
          "examples": "be13faa2-8574-4d71-926d-27f16cf8a7af",
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "cassandra.consistency.level",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "all",
                "value": "all",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "each_quorum",
                "value": "each_quorum",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "quorum",
                "value": "quorum",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "local_quorum",
                "value": "local_quorum",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "one",
                "value": "one",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "two",
                "value": "two",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "three",
                "value": "three",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "local_one",
                "value": "local_one",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "any",
                "value": "any",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "serial",
                "value": "serial",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "local_serial",
                "value": "local_serial",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n",
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "cassandra.query.idempotent",
          "type": "boolean",
          "brief": "Whether or not the query is idempotent.\n",
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "cassandra.page.size",
          "type": "int",
          "brief": "The fetch size used for paging, i.e. how many rows will be returned at once.\n",
          "examples": [
            5000
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "cassandra.speculative_execution.count",
          "type": "int",
          "brief": "The number of times a query was speculatively executed. Not set or `0` if the query was not executed speculatively.\n",
          "examples": [
            0,
            2
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "db.operation.batch.size",
          "type": "int",
          "brief": "The number of queries included in a batch operation.",
          "examples": [
            2,
            3,
            4
          ],
          "requirement_level": "recommended",
          "note": "Operations are only considered batches when they contain two or more operations, and so `db.operation.batch.size` SHOULD never be `1`.\n",
          "stability": "release_candidate"
        },
        {
          "name": "db.response.returned_rows",
          "type": "int",
          "brief": "Number of rows returned by the operation.",
          "examples": [
            10,
            30,
            1000
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "db.operation.name",
          "type": "string",
          "brief": "The name of the operation or command being executed.\n",
          "examples": [
            "findAndModify",
            "HMSET",
            "SELECT"
          ],
          "requirement_level": {
            "conditionally_required": "If readily available and if there is a single operation name that describes the database call.\n"
          },
          "sampling_relevant": true,
          "note": "It is RECOMMENDED to capture the value as provided by the application\nwithout attempting to do any case normalization.\n\nThe operation name SHOULD NOT be extracted from `db.query.text`,\nwhen the database system supports cross-table queries in non-batch operations.\n\nFor batch operations, if the individual operations are known to have the same operation name\nthen that operation name SHOULD be used prepended by `BATCH `,\notherwise `db.operation.name` SHOULD be `BATCH` or some other database\nsystem specific term if more applicable.\n",
          "stability": "release_candidate"
        },
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "timeout",
            "java.net.UnknownHostException",
            "server_certificate_invalid",
            "500"
          ],
          "requirement_level": {
            "conditionally_required": "If and only if the operation failed."
          },
          "note": "The `error.type` SHOULD match the `db.response.status_code` returned by the database or the client library, or the canonical name of exception that occurred.\nWhen using canonical exception type name, instrumentation SHOULD do the best effort to report the most relevant type. For example, if the original exception is wrapped into a generic one, the original exception SHOULD be preferred.\nInstrumentations SHOULD document how `error.type` is populated.\n",
          "stability": "stable"
        },
        {
          "name": "server.address",
          "type": "string",
          "brief": "Name of the database host.\n",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "recommended",
          "sampling_relevant": true,
          "note": "When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": {
            "conditionally_required": "If using a port other than the default port for this DBMS and if `server.address` is set."
          },
          "sampling_relevant": true,
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "db.operation.parameter",
          "type": "template[string]",
          "brief": "A database operation parameter, with `<key>` being the parameter name, and the attribute value being a string representation of the parameter value.\n",
          "examples": [
            "someval",
            "55"
          ],
          "requirement_level": "opt_in",
          "note": "If a parameter has no name and instead is referenced only by index, then `<key>` SHOULD be the 0-based index.\nIf `db.query.text` is also captured, then `db.operation.parameter.<key>` SHOULD match up with the parameterized placeholders present in `db.query.text`.\n",
          "stability": "release_candidate"
        },
        {
          "name": "db.query.summary",
          "type": "string",
          "brief": "Low cardinality representation of a database query text.\n",
          "examples": [
            "SELECT wuser_table",
            "INSERT shipping_details SELECT orders",
            "get user by id"
          ],
          "requirement_level": {
            "recommended": "if readily available or if instrumentation supports query summarization."
          },
          "sampling_relevant": true,
          "note": "`db.query.summary` provides static summary of the query text. It describes a class of database queries and is useful as a grouping key, especially when analyzing telemetry for database calls involving complex queries.\nSummary may be available to the instrumentation through instrumentation hooks or other means. If it is not available, instrumentations that support query parsing SHOULD generate a summary following [Generating query summary](../database/database-spans.md#generating-a-summary-of-the-query-text) section.\n",
          "stability": "release_candidate"
        },
        {
          "name": "db.query.text",
          "type": "string",
          "brief": "The database query being executed.\n",
          "examples": [
            "SELECT * FROM wuser_table where username = ?",
            "SET mykey ?"
          ],
          "requirement_level": {
            "recommended": "Non-parameterized query text SHOULD NOT be collected by default unless there is sanitization that excludes sensitive data, e.g. by redacting all literal values present in the query text. See [Sanitization of `db.query.text`](../database/database-spans.md#sanitization-of-dbquerytext).\nParameterized query text SHOULD be collected by default (the query parameter values themselves are opt-in, see [`db.operation.parameter.<key>`](../attributes-registry/db.md)).\n"
          },
          "sampling_relevant": true,
          "note": "For sanitization see [Sanitization of `db.query.text`](../database/database-spans.md#sanitization-of-dbquerytext).\nFor batch operations, if the individual operations are known to have the same query text then that query text SHOULD be used, otherwise all of the individual query texts SHOULD be concatenated with separator `; ` or some other database system specific separator if more applicable.\nEven though parameterized query text can potentially have sensitive data, by using a parameterized query the user is giving a strong signal that any sensitive data will be passed as parameter values, and the benefit to observability of capturing the static part of the query text by default outweighs the risk.\n",
          "stability": "release_candidate"
        },
        {
          "name": "network.peer.port",
          "type": "int",
          "brief": "Peer port number of the network connection.",
          "examples": [
            65123
          ],
          "requirement_level": {
            "recommended": "if and only if `network.peer.address` is set."
          },
          "stability": "stable"
        },
        {
          "name": "db.collection.name",
          "type": "string",
          "brief": "The name of the Cassandra table that the operation is acting upon.",
          "examples": [
            "public.users",
            "customers"
          ],
          "requirement_level": {
            "conditionally_required": "If readily available and if a database call is performed on a single collection.\n"
          },
          "sampling_relevant": true,
          "note": "It is RECOMMENDED to capture the value as provided by the application\nwithout attempting to do any case normalization.\n\nFor batch operations, if the individual operations are known to have the same collection name\nthen that collection name SHOULD be used.\n",
          "stability": "release_candidate"
        },
        {
          "name": "db.namespace",
          "type": "string",
          "brief": "The keyspace associated with the session.",
          "examples": [
            "mykeyspace"
          ],
          "requirement_level": {
            "conditionally_required": "If available."
          },
          "sampling_relevant": true,
          "note": "If a database system has multiple namespace components, they SHOULD be concatenated (potentially using database system specific conventions) from most general to most specific namespace component, and more specific namespaces SHOULD NOT be captured without the more general namespaces, to ensure that \"startswith\" queries for the more general namespaces will be valid.\nSemantic conventions for individual database systems SHOULD document what `db.namespace` means in the context of that system.\nIt is RECOMMENDED to capture the value as provided by the application without attempting to do any case normalization.\n",
          "stability": "release_candidate"
        },
        {
          "name": "db.response.status_code",
          "type": "string",
          "brief": "[Cassandra protocol error code](https://github.com/apache/cassandra/blob/cassandra-5.0/doc/native_protocol_v5.spec) represented as a string.\n",
          "examples": [
            "102",
            "40020"
          ],
          "requirement_level": {
            "conditionally_required": "If the operation failed and status code is available."
          },
          "note": "All Cassandra protocol error codes SHOULD be considered errors.\n",
          "stability": "release_candidate"
        },
        {
          "name": "network.peer.address",
          "type": "string",
          "brief": "Peer address of the database node where the operation was performed.",
          "examples": [
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "recommended",
          "note": "If a database operation involved multiple network calls (for example retries), the address of the last contacted node SHOULD be used.\n",
          "stability": "stable"
        }
      ],
      "span_kind": "client",
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/database/spans.yaml",
        "attributes": {
          "cassandra.consistency.level": {
            "source_group": "registry.cassandra",
            "inherited_fields": [
              "brief",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "cassandra.coordinator.dc": {
            "source_group": "registry.cassandra",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "cassandra.coordinator.id": {
            "source_group": "registry.cassandra",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "cassandra.page.size": {
            "source_group": "registry.cassandra",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "cassandra.query.idempotent": {
            "source_group": "registry.cassandra",
            "inherited_fields": [
              "brief",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "cassandra.speculative_execution.count": {
            "source_group": "registry.cassandra",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "db.collection.name": {
            "source_group": "registry.db",
            "inherited_fields": [
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "note",
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "db.namespace": {
            "source_group": "registry.db",
            "inherited_fields": [
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples",
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "db.operation.batch.size": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "db.operation.name": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "db.operation.parameter": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "db.query.summary": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "db.query.text": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "db.response.returned_rows": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "db.response.status_code": {
            "source_group": "registry.db",
            "inherited_fields": [
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level"
            ]
          },
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ]
          },
          "network.peer.address": {
            "source_group": "registry.network",
            "inherited_fields": [
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "note",
              "requirement_level"
            ]
          },
          "network.peer.port": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "sampling_relevant"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ]
          }
        }
      }
    },
    {
      "id": "span.db.hbase.client",
      "type": "span",
      "brief": "Attributes for HBase\n",
      "stability": "development",
      "attributes": [
        {
          "name": "db.operation.batch.size",
          "type": "int",
          "brief": "The number of queries included in a batch operation.",
          "examples": [
            2,
            3,
            4
          ],
          "requirement_level": "recommended",
          "note": "Operations are only considered batches when they contain two or more operations, and so `db.operation.batch.size` SHOULD never be `1`.\n",
          "stability": "release_candidate"
        },
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "timeout",
            "java.net.UnknownHostException",
            "server_certificate_invalid",
            "500"
          ],
          "requirement_level": {
            "conditionally_required": "If and only if the operation failed."
          },
          "note": "The `error.type` SHOULD match the `db.response.status_code` returned by the database or the client library, or the canonical name of exception that occurred.\nWhen using canonical exception type name, instrumentation SHOULD do the best effort to report the most relevant type. For example, if the original exception is wrapped into a generic one, the original exception SHOULD be preferred.\nInstrumentations SHOULD document how `error.type` is populated.\n",
          "stability": "stable"
        },
        {
          "name": "server.address",
          "type": "string",
          "brief": "Name of the database host.\n",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "recommended",
          "sampling_relevant": true,
          "note": "When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": {
            "conditionally_required": "If using a port other than the default port for this DBMS and if `server.address` is set."
          },
          "sampling_relevant": true,
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "db.collection.name",
          "type": "string",
          "brief": "The HBase table name.",
          "examples": [
            "mytable",
            "ns:table"
          ],
          "requirement_level": {
            "conditionally_required": "If applicable."
          },
          "sampling_relevant": true,
          "note": "It is RECOMMENDED to capture the value as provided by the application without attempting to do any case normalization. If table name includes the namespace, the `db.collection.name` SHOULD be set to the full table name.\n",
          "stability": "release_candidate"
        },
        {
          "name": "db.namespace",
          "type": "string",
          "brief": "The HBase namespace.",
          "examples": [
            "mynamespace"
          ],
          "requirement_level": {
            "conditionally_required": "If applicable."
          },
          "sampling_relevant": true,
          "note": "If a database system has multiple namespace components, they SHOULD be concatenated (potentially using database system specific conventions) from most general to most specific namespace component, and more specific namespaces SHOULD NOT be captured without the more general namespaces, to ensure that \"startswith\" queries for the more general namespaces will be valid.\nSemantic conventions for individual database systems SHOULD document what `db.namespace` means in the context of that system.\nIt is RECOMMENDED to capture the value as provided by the application without attempting to do any case normalization.\n",
          "stability": "release_candidate"
        },
        {
          "name": "db.operation.name",
          "type": "string",
          "brief": "The name of the operation or command being executed.\n",
          "examples": [
            "findAndModify",
            "HMSET",
            "SELECT"
          ],
          "requirement_level": {
            "conditionally_required": "If readily available."
          },
          "sampling_relevant": true,
          "note": "It is RECOMMENDED to capture the value as provided by the application\nwithout attempting to do any case normalization.\n\nFor batch operations, if the individual operations are known to have the same operation name\nthen that operation name SHOULD be used prepended by `BATCH `,\notherwise `db.operation.name` SHOULD be `BATCH`.\n",
          "stability": "release_candidate"
        },
        {
          "name": "db.response.status_code",
          "type": "string",
          "brief": "Protocol-specific response code recorded as a string.\n",
          "examples": [
            "200",
            "409",
            "14"
          ],
          "requirement_level": {
            "conditionally_required": "If response was received."
          },
          "note": "The status code returned by the database. Usually it represents an error code, but may also represent partial success, warning, or differentiate between various types of successful outcomes.\nSemantic conventions for individual database systems SHOULD document what `db.response.status_code` means in the context of that system.\n",
          "stability": "release_candidate"
        }
      ],
      "span_kind": "client",
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/database/spans.yaml",
        "attributes": {
          "db.collection.name": {
            "source_group": "registry.db",
            "inherited_fields": [
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "db.namespace": {
            "source_group": "registry.db",
            "inherited_fields": [
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples",
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "db.operation.batch.size": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "db.operation.name": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "db.response.status_code": {
            "source_group": "registry.db",
            "inherited_fields": [
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples",
              "requirement_level"
            ]
          },
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "sampling_relevant"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ]
          }
        }
      }
    },
    {
      "id": "span.db.couchdb.client",
      "type": "span",
      "brief": "Attributes for CouchDB\n",
      "stability": "development",
      "attributes": [
        {
          "name": "db.operation.batch.size",
          "type": "int",
          "brief": "The number of queries included in a batch operation.",
          "examples": [
            2,
            3,
            4
          ],
          "requirement_level": "recommended",
          "note": "Operations are only considered batches when they contain two or more operations, and so `db.operation.batch.size` SHOULD never be `1`.\n",
          "stability": "release_candidate"
        },
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "timeout",
            "java.net.UnknownHostException",
            "server_certificate_invalid",
            "500"
          ],
          "requirement_level": {
            "conditionally_required": "If and only if the operation failed."
          },
          "note": "The `error.type` SHOULD match the `db.response.status_code` returned by the database or the client library, or the canonical name of exception that occurred.\nWhen using canonical exception type name, instrumentation SHOULD do the best effort to report the most relevant type. For example, if the original exception is wrapped into a generic one, the original exception SHOULD be preferred.\nInstrumentations SHOULD document how `error.type` is populated.\n",
          "stability": "stable"
        },
        {
          "name": "server.address",
          "type": "string",
          "brief": "Name of the database host.\n",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "recommended",
          "sampling_relevant": true,
          "note": "When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": {
            "conditionally_required": "If using a port other than the default port for this DBMS and if `server.address` is set."
          },
          "sampling_relevant": true,
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "db.namespace",
          "type": "string",
          "brief": "The name of the database, fully qualified within the server address and port.\n",
          "examples": [
            "customers",
            "test.users"
          ],
          "requirement_level": {
            "conditionally_required": "If available."
          },
          "sampling_relevant": true,
          "stability": "release_candidate"
        },
        {
          "name": "db.operation.name",
          "type": "string",
          "brief": "The HTTP method + the target REST route.\n",
          "examples": [
            "GET /{db}/{docid}"
          ],
          "requirement_level": {
            "conditionally_required": "If readily available."
          },
          "sampling_relevant": true,
          "note": "In **CouchDB**, `db.operation.name` should be set to the HTTP method + the target REST route according to the API reference documentation. For example, when retrieving a document, `db.operation.name` would be set to (literally, i.e., without replacing the placeholders with concrete values): [`GET /{db}/{docid}`](https://docs.couchdb.org/en/stable/api/document/common.html#get--db-docid).\n",
          "stability": "release_candidate"
        },
        {
          "name": "db.response.status_code",
          "type": "string",
          "brief": "The HTTP response code returned by the Couch DB recorded as a string.\n",
          "examples": [
            "200",
            "201",
            "429"
          ],
          "requirement_level": {
            "conditionally_required": "If response was received and the HTTP response code is available."
          },
          "note": "HTTP response codes in the 4xx and 5xx range SHOULD be considered errors.\n",
          "stability": "release_candidate"
        }
      ],
      "span_kind": "client",
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/database/spans.yaml",
        "attributes": {
          "db.namespace": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "db.operation.batch.size": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "db.operation.name": {
            "source_group": "registry.db",
            "inherited_fields": [
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "db.response.status_code": {
            "source_group": "registry.db",
            "inherited_fields": [
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level"
            ]
          },
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "sampling_relevant"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ]
          }
        }
      }
    },
    {
      "id": "span.db.redis.client",
      "type": "span",
      "brief": "Attributes for Redis\n",
      "stability": "development",
      "attributes": [
        {
          "name": "db.operation.batch.size",
          "type": "int",
          "brief": "The number of queries included in a batch operation.",
          "examples": [
            2,
            3,
            4
          ],
          "requirement_level": "recommended",
          "note": "Operations are only considered batches when they contain two or more operations, and so `db.operation.batch.size` SHOULD never be `1`.\n",
          "stability": "release_candidate"
        },
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "timeout",
            "java.net.UnknownHostException",
            "server_certificate_invalid",
            "500"
          ],
          "requirement_level": {
            "conditionally_required": "If and only if the operation failed."
          },
          "note": "The `error.type` SHOULD match the `db.response.status_code` returned by the database or the client library, or the canonical name of exception that occurred.\nWhen using canonical exception type name, instrumentation SHOULD do the best effort to report the most relevant type. For example, if the original exception is wrapped into a generic one, the original exception SHOULD be preferred.\nInstrumentations SHOULD document how `error.type` is populated.\n",
          "stability": "stable"
        },
        {
          "name": "server.address",
          "type": "string",
          "brief": "Name of the database host.\n",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "recommended",
          "sampling_relevant": true,
          "note": "When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": {
            "conditionally_required": "If using a port other than the default port for this DBMS and if `server.address` is set."
          },
          "sampling_relevant": true,
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "db.operation.parameter",
          "type": "template[string]",
          "brief": "A database operation parameter, with `<key>` being the parameter name, and the attribute value being a string representation of the parameter value.\n",
          "examples": [
            "someval",
            "55"
          ],
          "requirement_level": "opt_in",
          "note": "If a parameter has no name and instead is referenced only by index, then `<key>` SHOULD be the 0-based index.\nIf `db.query.text` is also captured, then `db.operation.parameter.<key>` SHOULD match up with the parameterized placeholders present in `db.query.text`.\n",
          "stability": "release_candidate"
        },
        {
          "name": "network.peer.port",
          "type": "int",
          "brief": "Peer port number of the network connection.",
          "examples": [
            65123
          ],
          "requirement_level": {
            "recommended": "if and only if `network.peer.address` is set."
          },
          "stability": "stable"
        },
        {
          "name": "network.peer.address",
          "type": "string",
          "brief": "Peer address of the database node where the operation was performed.",
          "examples": [
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "recommended",
          "note": "If a database operation involved multiple network calls (for example retries), the address of the last contacted node SHOULD be used.\n",
          "stability": "stable"
        },
        {
          "name": "db.namespace",
          "type": "string",
          "brief": "The [database index] associated with the connection, represented as a string.\n",
          "examples": [
            "0",
            "1",
            "15"
          ],
          "requirement_level": {
            "conditionally_required": "If and only if it can be captured reliably."
          },
          "sampling_relevant": true,
          "note": "A connection's currently associated database index may change during its lifetime, e.g. from executing `SELECT <index>`.\n\nIf instrumentation is unable to capture the connection's currently associated database index on each query\nwithout triggering an additional query to be executed,\nthen it is RECOMMENDED to fallback and use the database index provided when the connection was established.\n\nInstrumentation SHOULD document if `db.namespace` reflects the database index provided when the connection was established.\n",
          "stability": "release_candidate"
        },
        {
          "name": "db.operation.name",
          "type": "string",
          "brief": "The Redis command name.\n",
          "examples": [
            "HMSET",
            "GET",
            "SET"
          ],
          "requirement_level": {
            "conditionally_required": "If readily available and if there is a single operation name that describes the database call.\n"
          },
          "sampling_relevant": true,
          "note": "It is RECOMMENDED to capture the value as provided by the application without attempting to do any case normalization.\nFor [transactions and pipelined calls](https://redis.io/docs/latest/develop/clients/redis-py/transpipe/), if the individual operations are known to have the same command then that command SHOULD be used prepended by `MULTI ` or `PIPELINE `. Otherwise `db.operation.name` SHOULD be `MULTI` or `PIPELINE`.\n",
          "stability": "release_candidate"
        },
        {
          "name": "db.query.text",
          "type": "string",
          "brief": "The full syntax of the Redis CLI command.\n",
          "examples": [
            "HMSET myhash field1 'Hello' field2 'World'"
          ],
          "requirement_level": {
            "recommended": "Non-parameterized query text SHOULD NOT be collected by default unless there is sanitization that excludes sensitive data, e.g. by redacting all literal values present in the query text.\nSee [Sanitization of `db.query.text`](../database/database-spans.md#sanitization-of-dbquerytext).\nParameterized query text SHOULD be collected by default (the query parameter values themselves are opt-in, see [`db.operation.parameter.<key>`](../attributes-registry/db.md)).\n"
          },
          "sampling_relevant": true,
          "note": "For **Redis**, the value provided for `db.query.text` SHOULD correspond to the syntax of the Redis CLI. If, for example, the [`HMSET` command](https://redis.io/docs/latest/commands/hmset) is invoked, `\"HMSET myhash field1 'Hello' field2 'World'\"` would be a suitable value for `db.query.text`.\n",
          "stability": "release_candidate"
        },
        {
          "name": "db.response.status_code",
          "type": "string",
          "brief": "The Redis [simple error](https://redis.io/docs/latest/develop/reference/protocol-spec/#simple-errors) prefix.\n",
          "examples": [
            "ERR",
            "WRONGTYPE",
            "CLUSTERDOWN"
          ],
          "requirement_level": {
            "conditionally_required": "If the operation failed and status code is available."
          },
          "note": "All Redis error prefixes SHOULD be considered errors.\n",
          "stability": "release_candidate"
        }
      ],
      "span_kind": "client",
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/database/spans.yaml",
        "attributes": {
          "db.namespace": {
            "source_group": "registry.db",
            "inherited_fields": [
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "db.operation.batch.size": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "db.operation.name": {
            "source_group": "registry.db",
            "inherited_fields": [
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "db.operation.parameter": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "db.query.text": {
            "source_group": "registry.db",
            "inherited_fields": [
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "db.response.status_code": {
            "source_group": "registry.db",
            "inherited_fields": [
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level"
            ]
          },
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ]
          },
          "network.peer.address": {
            "source_group": "registry.network",
            "inherited_fields": [
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "note",
              "requirement_level"
            ]
          },
          "network.peer.port": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "sampling_relevant"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ]
          }
        }
      }
    },
    {
      "id": "span.db.mongodb.client",
      "type": "span",
      "brief": "Attributes for MongoDB\n",
      "stability": "development",
      "attributes": [
        {
          "name": "db.operation.batch.size",
          "type": "int",
          "brief": "The number of queries included in a batch operation.",
          "examples": [
            2,
            3,
            4
          ],
          "requirement_level": "recommended",
          "note": "Operations are only considered batches when they contain two or more operations, and so `db.operation.batch.size` SHOULD never be `1`.\n",
          "stability": "release_candidate"
        },
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "timeout",
            "java.net.UnknownHostException",
            "server_certificate_invalid",
            "500"
          ],
          "requirement_level": {
            "conditionally_required": "If and only if the operation failed."
          },
          "note": "The `error.type` SHOULD match the `db.response.status_code` returned by the database or the client library, or the canonical name of exception that occurred.\nWhen using canonical exception type name, instrumentation SHOULD do the best effort to report the most relevant type. For example, if the original exception is wrapped into a generic one, the original exception SHOULD be preferred.\nInstrumentations SHOULD document how `error.type` is populated.\n",
          "stability": "stable"
        },
        {
          "name": "server.address",
          "type": "string",
          "brief": "Name of the database host.\n",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "recommended",
          "sampling_relevant": true,
          "note": "When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": {
            "conditionally_required": "If using a port other than the default port for this DBMS and if `server.address` is set."
          },
          "sampling_relevant": true,
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "db.collection.name",
          "type": "string",
          "brief": "The MongoDB collection being accessed within the database stated in `db.namespace`.",
          "examples": [
            "public.users",
            "customers"
          ],
          "requirement_level": "required",
          "sampling_relevant": true,
          "note": "It is RECOMMENDED to capture the value as provided by the application without attempting to do any case normalization.\nFor batch operations, if the individual operations are known to have the same collection name then that collection name SHOULD be used.\n",
          "stability": "release_candidate"
        },
        {
          "name": "db.namespace",
          "type": "string",
          "brief": "The MongoDB database name.",
          "examples": [
            "customers",
            "test.users"
          ],
          "requirement_level": {
            "conditionally_required": "If available."
          },
          "sampling_relevant": true,
          "stability": "release_candidate"
        },
        {
          "name": "db.operation.name",
          "type": "string",
          "brief": "The name of the [MongoDB command](https://www.mongodb.com/docs/manual/reference/command/) being executed.\n",
          "examples": [
            "findAndModify",
            "getMore",
            "insertMany",
            "bulkWrite"
          ],
          "requirement_level": {
            "conditionally_required": "If readily available."
          },
          "sampling_relevant": true,
          "stability": "release_candidate"
        },
        {
          "name": "db.response.status_code",
          "type": "string",
          "brief": "[MongoDB error code](https://www.mongodb.com/docs/manual/reference/error-codes/) represented as a string.\n",
          "examples": [
            "36",
            "11602"
          ],
          "requirement_level": {
            "conditionally_required": "If the operation failed and error code is available."
          },
          "note": "All MongoDB error codes SHOULD be considered errors.\n",
          "stability": "release_candidate"
        }
      ],
      "span_kind": "client",
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/database/spans.yaml",
        "attributes": {
          "db.collection.name": {
            "source_group": "registry.db",
            "inherited_fields": [
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "note",
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "db.namespace": {
            "source_group": "registry.db",
            "inherited_fields": [
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "note",
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "db.operation.batch.size": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "db.operation.name": {
            "source_group": "registry.db",
            "inherited_fields": [
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "db.response.status_code": {
            "source_group": "registry.db",
            "inherited_fields": [
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level"
            ]
          },
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "sampling_relevant"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ]
          }
        }
      }
    },
    {
      "id": "span.db.elasticsearch.client",
      "type": "span",
      "brief": "Attributes for Elasticsearch\n",
      "stability": "development",
      "attributes": [
        {
          "name": "db.operation.batch.size",
          "type": "int",
          "brief": "The number of queries included in a batch operation.",
          "examples": [
            2,
            3,
            4
          ],
          "requirement_level": "recommended",
          "note": "Operations are only considered batches when they contain two or more operations, and so `db.operation.batch.size` SHOULD never be `1`.\n",
          "stability": "release_candidate"
        },
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "timeout",
            "java.net.UnknownHostException",
            "server_certificate_invalid",
            "500"
          ],
          "requirement_level": {
            "conditionally_required": "If and only if the operation failed."
          },
          "note": "The `error.type` SHOULD match the `db.response.status_code` returned by the database or the client library, or the canonical name of exception that occurred.\nWhen using canonical exception type name, instrumentation SHOULD do the best effort to report the most relevant type. For example, if the original exception is wrapped into a generic one, the original exception SHOULD be preferred.\nInstrumentations SHOULD document how `error.type` is populated.\n",
          "stability": "stable"
        },
        {
          "name": "server.address",
          "type": "string",
          "brief": "Name of the database host.\n",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "recommended",
          "sampling_relevant": true,
          "note": "When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": {
            "conditionally_required": "If using a port other than the default port for this DBMS and if `server.address` is set."
          },
          "sampling_relevant": true,
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "db.collection.name",
          "type": "string",
          "brief": "The index or data stream against which the query is executed.",
          "examples": [
            "my_index",
            "index1, index2"
          ],
          "requirement_level": "recommended",
          "sampling_relevant": true,
          "note": "The query may target multiple indices or data streams, in which case it SHOULD be a comma separated list of those. If the query doesn't target a specific index, this field MUST NOT be set.\n",
          "stability": "release_candidate"
        },
        {
          "name": "db.namespace",
          "type": "string",
          "brief": "The name of the Elasticsearch cluster which the client connects to.",
          "examples": [
            "customers",
            "test.users"
          ],
          "requirement_level": "recommended",
          "sampling_relevant": true,
          "note": "When communicating with an Elastic Cloud deployment, this should be collected from the \"X-Found-Handling-Cluster\" HTTP response header.\n",
          "stability": "release_candidate"
        },
        {
          "name": "db.operation.name",
          "type": "string",
          "brief": "The name of the operation or command being executed.\n",
          "examples": [
            "search",
            "ml.close_job",
            "cat.aliases"
          ],
          "requirement_level": "required",
          "sampling_relevant": true,
          "note": "The `db.operation.name` SHOULD match the endpoint identifier provided in the request (see the [Elasticsearch schema](https://raw.githubusercontent.com/elastic/elasticsearch-specification/main/output/schema/schema.json)).\nFor batch operations, if the individual operations are known to have the same operation name then that operation name SHOULD be used prepended by `bulk `, otherwise `db.operation.name` SHOULD be `bulk`.\n",
          "stability": "release_candidate"
        },
        {
          "name": "db.operation.parameter",
          "type": "template[string]",
          "brief": "A dynamic value in the url path.\n",
          "examples": [
            "db.operation.parameter.index=\"test-index\"",
            "db.operation.parameter=\"123\""
          ],
          "requirement_level": {
            "conditionally_required": "when the url has path parameters"
          },
          "note": "Many Elasticsearch url paths allow dynamic values. These SHOULD be recorded in span attributes in the format `db.operation.parameter.<key>`, where `<key>` is the path parameter name. The implementation SHOULD reference the [elasticsearch schema](https://raw.githubusercontent.com/elastic/elasticsearch-specification/main/output/schema/schema.json) in order to map the path parameter values to their names.\n",
          "stability": "development"
        },
        {
          "name": "db.query.text",
          "type": "string",
          "brief": "The request body for a [search-type query](https://www.elastic.co/guide/en/elasticsearch/reference/current/search.html), as a json string.",
          "examples": [
            "\"{\\\"query\\\":{\\\"term\\\":{\\\"user.id\\\":\\\"kimchy\\\"}}}\""
          ],
          "requirement_level": {
            "recommended": "Should be collected by default for search-type queries and only if there is sanitization that excludes sensitive information.\n"
          },
          "sampling_relevant": true,
          "note": "For sanitization see [Sanitization of `db.query.text`](../database/database-spans.md#sanitization-of-dbquerytext).\nFor batch operations, if the individual operations are known to have the same query text then that query text SHOULD be used, otherwise all of the individual query texts SHOULD be concatenated with separator `; ` or some other database system specific separator if more applicable.\nEven though parameterized query text can potentially have sensitive data, by using a parameterized query the user is giving a strong signal that any sensitive data will be passed as parameter values, and the benefit to observability of capturing the static part of the query text by default outweighs the risk.\n",
          "stability": "release_candidate"
        },
        {
          "name": "db.response.status_code",
          "type": "string",
          "brief": "The HTTP response code returned by the Elasticsearch cluster.\n",
          "examples": [
            "200",
            "201",
            "429"
          ],
          "requirement_level": {
            "conditionally_required": "If response was received."
          },
          "note": "HTTP response codes in the 4xx and 5xx range SHOULD be considered errors.\n",
          "stability": "release_candidate"
        },
        {
          "name": "elasticsearch.node.name",
          "type": "string",
          "brief": "Represents the human-readable identifier of the node/instance to which a request was routed.\n",
          "examples": [
            "instance-0000000001"
          ],
          "requirement_level": "recommended",
          "note": "When communicating with an Elastic Cloud deployment, this should be collected from the \"X-Found-Handling-Instance\" HTTP response header.\n",
          "stability": "development"
        },
        {
          "name": "http.request.method",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "connect",
                "value": "CONNECT",
                "brief": "CONNECT method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "delete",
                "value": "DELETE",
                "brief": "DELETE method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "get",
                "value": "GET",
                "brief": "GET method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "head",
                "value": "HEAD",
                "brief": "HEAD method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "options",
                "value": "OPTIONS",
                "brief": "OPTIONS method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "patch",
                "value": "PATCH",
                "brief": "PATCH method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "post",
                "value": "POST",
                "brief": "POST method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "put",
                "value": "PUT",
                "brief": "PUT method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "trace",
                "value": "TRACE",
                "brief": "TRACE method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "Any HTTP method that the instrumentation has no prior knowledge of.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "HTTP request method.",
          "examples": [
            "GET",
            "POST",
            "HEAD"
          ],
          "requirement_level": "required",
          "sampling_relevant": true,
          "note": "HTTP request method value SHOULD be \"known\" to the instrumentation.\nBy default, this convention defines \"known\" methods as the ones listed in [RFC9110](https://www.rfc-editor.org/rfc/rfc9110.html#name-methods)\nand the PATCH method defined in [RFC5789](https://www.rfc-editor.org/rfc/rfc5789.html).\n\nIf the HTTP request method is not known to instrumentation, it MUST set the `http.request.method` attribute to `_OTHER`.\n\nIf the HTTP instrumentation could end up converting valid HTTP request methods to `_OTHER`, then it MUST provide a way to override\nthe list of known HTTP methods. If this override is done via environment variable, then the environment variable MUST be named\nOTEL_INSTRUMENTATION_HTTP_KNOWN_METHODS and support a comma-separated list of case-sensitive known HTTP methods\n(this list MUST be a full override of the default known method, it is not a list of known methods in addition to the defaults).\n\nHTTP method names are case-sensitive and `http.request.method` attribute value MUST match a known HTTP method name exactly.\nInstrumentations for specific web frameworks that consider HTTP methods to be case insensitive, SHOULD populate a canonical equivalent.\nTracing instrumentations that do so, MUST also set `http.request.method_original` to the original value.\n",
          "stability": "stable"
        },
        {
          "name": "url.full",
          "type": "string",
          "brief": "Absolute URL describing a network resource according to [RFC3986](https://www.rfc-editor.org/rfc/rfc3986)",
          "examples": [
            "https://localhost:9200/index/_search?q=user.id:kimchy"
          ],
          "requirement_level": "required",
          "sampling_relevant": true,
          "note": "For network calls, URL usually has `scheme://host[:port][path][?query][#fragment]` format, where the fragment\nis not transmitted over HTTP, but if it is known, it SHOULD be included nevertheless.\n\n`url.full` MUST NOT contain credentials passed via URL in form of `https://username:password@www.example.com/`.\nIn such case username and password SHOULD be redacted and attribute's value SHOULD be `https://REDACTED:REDACTED@www.example.com/`.\n\n`url.full` SHOULD capture the absolute URL when it is available (or can be reconstructed).\n\nSensitive content provided in `url.full` SHOULD be scrubbed when instrumentations can identify it.\n\n![Development](https://img.shields.io/badge/-development-blue)\nQuery string values for the following keys SHOULD be redacted by default and replaced by the\nvalue `REDACTED`:\n\n* [`AWSAccessKeyId`](https://docs.aws.amazon.com/AmazonS3/latest/userguide/RESTAuthentication.html#RESTAuthenticationQueryStringAuth)\n* [`Signature`](https://docs.aws.amazon.com/AmazonS3/latest/userguide/RESTAuthentication.html#RESTAuthenticationQueryStringAuth)\n* [`sig`](https://learn.microsoft.com/azure/storage/common/storage-sas-overview#sas-token)\n* [`X-Goog-Signature`](https://cloud.google.com/storage/docs/access-control/signed-urls)\n\nThis list is subject to change over time.\n\nWhen a query string value is redacted, the query string key SHOULD still be preserved, e.g.\n`https://www.example.com/path?color=blue&sig=REDACTED`.\n",
          "stability": "stable"
        }
      ],
      "span_kind": "client",
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/database/spans.yaml",
        "attributes": {
          "db.collection.name": {
            "source_group": "registry.db",
            "inherited_fields": [
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "db.namespace": {
            "source_group": "registry.db",
            "inherited_fields": [
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "note",
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "db.operation.batch.size": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "db.operation.name": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "note",
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "db.operation.parameter": {
            "source_group": "registry.db",
            "locally_overridden_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "db.query.text": {
            "source_group": "registry.db",
            "inherited_fields": [
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples",
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "db.response.status_code": {
            "source_group": "registry.db",
            "inherited_fields": [
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level"
            ]
          },
          "elasticsearch.node.name": {
            "source_group": "registry.elasticsearch",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ]
          },
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ]
          },
          "http.request.method": {
            "source_group": "registry.http",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "sampling_relevant"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "url.full": {
            "source_group": "registry.url",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level",
              "sampling_relevant"
            ]
          }
        }
      }
    },
    {
      "id": "span.db.sql.client",
      "type": "span",
      "brief": "Attributes for SQL databases\n",
      "stability": "development",
      "attributes": [
        {
          "name": "db.operation.batch.size",
          "type": "int",
          "brief": "The number of queries included in a batch operation.",
          "examples": [
            2,
            3,
            4
          ],
          "requirement_level": "recommended",
          "note": "Operations are only considered batches when they contain two or more operations, and so `db.operation.batch.size` SHOULD never be `1`.\n",
          "stability": "release_candidate"
        },
        {
          "name": "db.response.returned_rows",
          "type": "int",
          "brief": "Number of rows returned by the operation.",
          "examples": [
            10,
            30,
            1000
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "timeout",
            "java.net.UnknownHostException",
            "server_certificate_invalid",
            "500"
          ],
          "requirement_level": {
            "conditionally_required": "If and only if the operation failed."
          },
          "note": "The `error.type` SHOULD match the `db.response.status_code` returned by the database or the client library, or the canonical name of exception that occurred.\nWhen using canonical exception type name, instrumentation SHOULD do the best effort to report the most relevant type. For example, if the original exception is wrapped into a generic one, the original exception SHOULD be preferred.\nInstrumentations SHOULD document how `error.type` is populated.\n",
          "stability": "stable"
        },
        {
          "name": "server.address",
          "type": "string",
          "brief": "Name of the database host.\n",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "recommended",
          "sampling_relevant": true,
          "note": "When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": {
            "conditionally_required": "If using a port other than the default port for this DBMS and if `server.address` is set."
          },
          "sampling_relevant": true,
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "db.operation.parameter",
          "type": "template[string]",
          "brief": "A database operation parameter, with `<key>` being the parameter name, and the attribute value being a string representation of the parameter value.\n",
          "examples": [
            "someval",
            "55"
          ],
          "requirement_level": "opt_in",
          "note": "If a parameter has no name and instead is referenced only by index, then `<key>` SHOULD be the 0-based index.\nIf `db.query.text` is also captured, then `db.operation.parameter.<key>` SHOULD match up with the parameterized placeholders present in `db.query.text`.\n",
          "stability": "release_candidate"
        },
        {
          "name": "db.query.summary",
          "type": "string",
          "brief": "Low cardinality representation of a database query text.\n",
          "examples": [
            "SELECT wuser_table",
            "INSERT shipping_details SELECT orders",
            "get user by id"
          ],
          "requirement_level": {
            "recommended": "if readily available or if instrumentation supports query summarization."
          },
          "sampling_relevant": true,
          "note": "`db.query.summary` provides static summary of the query text. It describes a class of database queries and is useful as a grouping key, especially when analyzing telemetry for database calls involving complex queries.\nSummary may be available to the instrumentation through instrumentation hooks or other means. If it is not available, instrumentations that support query parsing SHOULD generate a summary following [Generating query summary](../database/database-spans.md#generating-a-summary-of-the-query-text) section.\n",
          "stability": "release_candidate"
        },
        {
          "name": "db.query.text",
          "type": "string",
          "brief": "The database query being executed.\n",
          "examples": [
            "SELECT * FROM wuser_table where username = ?",
            "SET mykey ?"
          ],
          "requirement_level": {
            "recommended": "Non-parameterized query text SHOULD NOT be collected by default unless there is sanitization that excludes sensitive data, e.g. by redacting all literal values present in the query text. See [Sanitization of `db.query.text`](../database/database-spans.md#sanitization-of-dbquerytext).\nParameterized query text SHOULD be collected by default (the query parameter values themselves are opt-in, see [`db.operation.parameter.<key>`](../attributes-registry/db.md)).\n"
          },
          "sampling_relevant": true,
          "note": "For sanitization see [Sanitization of `db.query.text`](../database/database-spans.md#sanitization-of-dbquerytext).\nFor batch operations, if the individual operations are known to have the same query text then that query text SHOULD be used, otherwise all of the individual query texts SHOULD be concatenated with separator `; ` or some other database system specific separator if more applicable.\nEven though parameterized query text can potentially have sensitive data, by using a parameterized query the user is giving a strong signal that any sensitive data will be passed as parameter values, and the benefit to observability of capturing the static part of the query text by default outweighs the risk.\n",
          "stability": "release_candidate"
        },
        {
          "name": "db.namespace",
          "type": "string",
          "brief": "The database associated with the connection, fully qualified within the server address and port.\n",
          "examples": [
            "customers",
            "test.users"
          ],
          "requirement_level": {
            "conditionally_required": "If available without an additional network call."
          },
          "note": "If a database system has multiple namespace components (e.g. schema name and database name), they SHOULD be concatenated\n(potentially using database system specific conventions) from most general to most\nspecific namespace component, and more specific namespaces SHOULD NOT be captured without\nthe more general namespaces, to ensure that \"startswith\" queries for the more general namespaces will be valid.\n\nUnless specified by the system-specific semantic convention, the `db.namespace` attribute matches\nthe name of the database being accessed.\n\nA connection's currently associated database may change during its lifetime, e.g. from executing `USE <database>`.\n\nIf instrumentation is unable to capture the connection's currently associated database on each query\nwithout triggering an additional query to be executed (e.g. `SELECT DATABASE()`),\nthen it is RECOMMENDED to fallback and use the database provided when the connection was established.\n\nInstrumentation SHOULD document if `db.namespace` reflects the database provided when the connection was established.\n\nIt is RECOMMENDED to capture the value as provided by the application without attempting to do any case normalization.\n",
          "stability": "release_candidate"
        },
        {
          "name": "db.response.status_code",
          "type": "string",
          "brief": "Database response code recorded as a string.\n",
          "examples": [
            "ORA-17027",
            "1052",
            "2201B"
          ],
          "requirement_level": {
            "conditionally_required": "If response has ended with warning or an error."
          },
          "note": "SQL defines [SQLSTATE](https://wikipedia.org/wiki/SQLSTATE) as a database\nreturn code which is adopted by some database systems like PostgreSQL.\nSee [PostgreSQL error codes](https://www.postgresql.org/docs/current/errcodes-appendix.html)\nfor the details.\n\nOther systems like MySQL, Oracle, or MS SQL Server define vendor-specific\nerror codes. Database SQL drivers usually provide access to both properties.\nFor example, in Java, the [`SQLException`](https://docs.oracle.com/javase/8/docs/api/java/sql/SQLException.html)\nclass reports them with `getSQLState()` and `getErrorCode()` methods.\n\nInstrumentations SHOULD populate the `db.response.status_code` with the\nthe most specific code available to them.\n\nHere's a non-exhaustive list of databases that report vendor-specific\ncodes with granularity higher than SQLSTATE (or don't report SQLSTATE\nat all):\n\n- [DB2 SQL codes](https://www.ibm.com/docs/db2-for-zos/12?topic=codes-sql).\n- [Maria DB error codes](https://mariadb.com/kb/en/mariadb-error-code-reference/)\n- [Microsoft SQL Server errors](https://docs.microsoft.com/sql/relational-databases/errors-events/database-engine-events-and-errors)\n- [MySQL error codes](https://dev.mysql.com/doc/mysql-errors/9.0/en/error-reference-introduction.html)\n- [Oracle error codes](https://docs.oracle.com/cd/B28359_01/server.111/b28278/toc.htm)\n- [SQLite result codes](https://www.sqlite.org/rescode.html)\n\nThese systems SHOULD set the `db.response.status_code` to a\nknown vendor-specific error code. If only SQLSTATE is available,\nit SHOULD be used.\n\nWhen multiple error codes are available and specificity is unclear,\ninstrumentation SHOULD set the `db.response.status_code` to the\nconcatenated string of all codes with '/' used as a separator.\n\nFor example, generic DB instrumentation that detected an error and has\nSQLSTATE `\"42000\"` and vendor-specific `1071` should set\n`db.response.status_code` to `\"42000/1071\"`.\"\n",
          "stability": "release_candidate"
        }
      ],
      "span_kind": "client",
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/database/spans.yaml",
        "attributes": {
          "db.namespace": {
            "source_group": "registry.db",
            "inherited_fields": [
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "note",
              "requirement_level"
            ]
          },
          "db.operation.batch.size": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "db.operation.parameter": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "db.query.summary": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "db.query.text": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "db.response.returned_rows": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "db.response.status_code": {
            "source_group": "registry.db",
            "inherited_fields": [
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level"
            ]
          },
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "sampling_relevant"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ]
          }
        }
      }
    },
    {
      "id": "span.azure.cosmosdb.client",
      "type": "span",
      "brief": "Attributes for Cosmos DB.\n",
      "stability": "development",
      "attributes": [
        {
          "name": "db.operation.batch.size",
          "type": "int",
          "brief": "The number of queries included in a batch operation.",
          "examples": [
            2,
            3,
            4
          ],
          "requirement_level": "recommended",
          "note": "Operations are only considered batches when they contain two or more operations, and so `db.operation.batch.size` SHOULD never be `1`.\n",
          "stability": "release_candidate"
        },
        {
          "name": "azure.client.id",
          "type": "string",
          "brief": "The unique identifier of the client instance.",
          "examples": [
            "3ba4827d-4422-483f-b59f-85b74211c11d",
            "storage-client-1"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "azure.cosmosdb.request.body.size",
          "type": "int",
          "brief": "Request payload size in bytes.",
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "timeout",
            "java.net.UnknownHostException",
            "server_certificate_invalid",
            "500"
          ],
          "requirement_level": {
            "conditionally_required": "If and only if the operation failed."
          },
          "note": "The `error.type` SHOULD match the `db.response.status_code` returned by the database or the client library, or the canonical name of exception that occurred.\nWhen using canonical exception type name, instrumentation SHOULD do the best effort to report the most relevant type. For example, if the original exception is wrapped into a generic one, the original exception SHOULD be preferred.\nInstrumentations SHOULD document how `error.type` is populated.\n",
          "stability": "stable"
        },
        {
          "name": "server.address",
          "type": "string",
          "brief": "Name of the database host.\n",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "recommended",
          "sampling_relevant": true,
          "note": "When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "db.operation.parameter",
          "type": "template[string]",
          "brief": "A database operation parameter, with `<key>` being the parameter name, and the attribute value being a string representation of the parameter value.\n",
          "examples": [
            "someval",
            "55"
          ],
          "requirement_level": "opt_in",
          "note": "If a parameter has no name and instead is referenced only by index, then `<key>` SHOULD be the 0-based index.\nIf `db.query.text` is also captured, then `db.operation.parameter.<key>` SHOULD match up with the parameterized placeholders present in `db.query.text`.\n",
          "stability": "release_candidate"
        },
        {
          "name": "db.query.summary",
          "type": "string",
          "brief": "Low cardinality representation of a database query text.\n",
          "examples": [
            "SELECT wuser_table",
            "INSERT shipping_details SELECT orders",
            "get user by id"
          ],
          "requirement_level": {
            "recommended": "if readily available or if instrumentation supports query summarization."
          },
          "sampling_relevant": true,
          "note": "`db.query.summary` provides static summary of the query text. It describes a class of database queries and is useful as a grouping key, especially when analyzing telemetry for database calls involving complex queries.\nSummary may be available to the instrumentation through instrumentation hooks or other means. If it is not available, instrumentations that support query parsing SHOULD generate a summary following [Generating query summary](../database/database-spans.md#generating-a-summary-of-the-query-text) section.\n",
          "stability": "release_candidate"
        },
        {
          "name": "db.query.text",
          "type": "string",
          "brief": "The database query being executed.\n",
          "examples": [
            "SELECT * FROM wuser_table where username = ?",
            "SET mykey ?"
          ],
          "requirement_level": {
            "recommended": "Non-parameterized query text SHOULD NOT be collected by default unless there is sanitization that excludes sensitive data, e.g. by redacting all literal values present in the query text. See [Sanitization of `db.query.text`](../database/database-spans.md#sanitization-of-dbquerytext).\nParameterized query text SHOULD be collected by default (the query parameter values themselves are opt-in, see [`db.operation.parameter.<key>`](../attributes-registry/db.md)).\n"
          },
          "sampling_relevant": true,
          "note": "For sanitization see [Sanitization of `db.query.text`](../database/database-spans.md#sanitization-of-dbquerytext).\nFor batch operations, if the individual operations are known to have the same query text then that query text SHOULD be used, otherwise all of the individual query texts SHOULD be concatenated with separator `; ` or some other database system specific separator if more applicable.\nEven though parameterized query text can potentially have sensitive data, by using a parameterized query the user is giving a strong signal that any sensitive data will be passed as parameter values, and the benefit to observability of capturing the static part of the query text by default outweighs the risk.\n",
          "stability": "release_candidate"
        },
        {
          "name": "db.namespace",
          "type": "string",
          "brief": "The name of the database, fully qualified within the server address and port.\n",
          "examples": [
            "customers",
            "test.users"
          ],
          "requirement_level": {
            "conditionally_required": "If available."
          },
          "sampling_relevant": true,
          "stability": "release_candidate"
        },
        {
          "name": "az.namespace",
          "type": "string",
          "brief": "[Azure Resource Provider Namespace](https://learn.microsoft.com/azure/azure-resource-manager/management/azure-services-resource-providers) as recognized by the client.\n",
          "examples": [
            "Microsoft.DocumentDB"
          ],
          "requirement_level": "recommended",
          "note": "When `az.namespace` attribute is populated, it MUST be set to `Microsoft.DocumentDB` for all operations performed by Cosmos DB client.\n",
          "stability": "development"
        },
        {
          "name": "azure.cosmosdb.connection.mode",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "gateway",
                "value": "gateway",
                "brief": "Gateway (HTTP) connection.",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "direct",
                "value": "direct",
                "brief": "Direct connection.",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "Cosmos client connection mode.",
          "requirement_level": {
            "conditionally_required": "if not `gateway` (the default value is assumed to be `gateway`)."
          },
          "stability": "development"
        },
        {
          "name": "azure.cosmosdb.consistency.level",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "strong",
                "value": "Strong",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "bounded_staleness",
                "value": "BoundedStaleness",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "session",
                "value": "Session",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "eventual",
                "value": "Eventual",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "consistent_prefix",
                "value": "ConsistentPrefix",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "Account or request [consistency level](https://learn.microsoft.com/azure/cosmos-db/consistency-levels).",
          "examples": [
            "Eventual",
            "ConsistentPrefix",
            "BoundedStaleness",
            "Strong",
            "Session"
          ],
          "requirement_level": {
            "conditionally_required": "If available."
          },
          "stability": "development"
        },
        {
          "name": "azure.cosmosdb.operation.contacted_regions",
          "type": "string[]",
          "brief": "List of regions contacted during operation in the order that they were contacted. If there is more than one region listed, it indicates that the operation was performed on multiple regions i.e. cross-regional call.\n",
          "examples": [
            [
              "North Central US",
              "Australia East",
              "Australia Southeast"
            ]
          ],
          "requirement_level": {
            "conditionally_required": "If available."
          },
          "note": "Region name matches the format of `displayName` in [Azure Location API](https://learn.microsoft.com/rest/api/subscription/subscriptions/list-locations?view=rest-subscription-2021-10-01&tabs=HTTP#location)\n",
          "stability": "development"
        },
        {
          "name": "azure.cosmosdb.operation.request_charge",
          "type": "double",
          "brief": "The number of request units consumed by the operation.\n",
          "examples": [
            46.18,
            1.0
          ],
          "requirement_level": {
            "conditionally_required": "when available"
          },
          "stability": "development"
        },
        {
          "name": "azure.cosmosdb.response.sub_status_code",
          "type": "int",
          "brief": "Cosmos DB sub status code.",
          "examples": [
            1000,
            1002
          ],
          "requirement_level": {
            "conditionally_required": "when response was received and contained sub-code."
          },
          "stability": "development"
        },
        {
          "name": "db.collection.name",
          "type": "string",
          "brief": "Cosmos DB container name.\n",
          "examples": [
            "public.users",
            "customers"
          ],
          "requirement_level": {
            "conditionally_required": "if available"
          },
          "sampling_relevant": true,
          "note": "It is RECOMMENDED to capture the value as provided by the application without attempting to do any case normalization.\n",
          "stability": "release_candidate"
        },
        {
          "name": "db.operation.name",
          "type": "string",
          "brief": "The name of the operation or command being executed.\n",
          "examples": [
            "create_item",
            "query_items",
            "read_item"
          ],
          "requirement_level": {
            "conditionally_required": "If readily available and if there is a single operation name that describes the database call.\n"
          },
          "sampling_relevant": true,
          "note": "The `db.operation.name` has the following list of well-known values.\nIf one of them applies, then the respective value MUST be used.\n\nBatch operations:\n\n- `execute_batch`\n\nBulk operations:\n\n- `execute_bulk` SHOULD be used on spans reported for methods like\n  [`executeBulkOperations`](https://javadoc.io/doc/com.azure/azure-cosmos/latest/com/azure/cosmos/CosmosAsyncContainer.html#executeBulkOperations)).\n  which represents a bulk execution of multiple operations.\n- `bulk_{operation name}` (`bulk_create_item`, `bulk_upsert_item`, etc) SHOULD be used on spans describing individual operations (when they are reported)\n  within the bulk. This pattern SHOULD be used when instrumentation creates span per each operation, but operations are buffered and then performed in bulk.\n  For example, this applies when [`AllowBulkExecution`](https://learn.microsoft.com/dotnet/api/microsoft.azure.cosmos.cosmosclientoptions.allowbulkexecution)\n  property is configured on the `Microsoft.Azure.Cosmos` client.\n\nChange feed operations:\n\n- `query_change_feed`\n\nConflicts operations:\n\n- `delete_conflict`\n- `query_conflicts`\n- `read_all_conflicts`\n- `read_conflict`\n\nContainer operations:\n\n- `create_container`\n- `create_container_if_not_exists`\n- `delete_container`\n- `query_containers`\n- `read_all_containers`\n- `read_container`\n- `read_container_throughput`\n- `replace_container`\n- `replace_container_throughput`\n\nDatabase operations:\n\n- `create_database`\n- `create_database_if_not_exists`\n- `delete_database`\n- `query_databases`\n- `read_all_databases`\n- `read_database`\n- `read_database_throughput`\n- `replace_database_throughput`\n\nEncryption key operations:\n\n- `create_client_encryption_key`\n- `query_client_encryption_keys`\n- `read_all_client_encryption_keys`\n- `read_client_encryption_key`\n- `replace_client_encryption_key`\n\nItem operations:\n\n- `create_item`\n- `delete_all_items_by_partition_key`\n- `delete_item`\n- `patch_item`\n- `query_items`\n- `read_all_items`\n- `read_all_items_of_logical_partition`\n- `read_many_items`\n- `read_item`\n- `replace_item`\n- `upsert_item`\n\nPermission operations:\n\n- `create_permission`\n- `delete_permission`\n- `query_permissions`\n- `read_all_permissions`\n- `read_permission`\n- `replace_permission`\n- `upsert_permission`\n\nStored procedure operations:\n\n- `create_stored_procedure`\n- `delete_stored_procedure`\n- `execute_stored_procedure`\n- `query_stored_procedures`\n- `read_all_stored_procedures`\n- `read_stored_procedure`\n- `replace_stored_procedure`\n\nTrigger operations:\n\n- `create_trigger`\n- `delete_trigger`\n- `query_triggers`\n- `read_all_triggers`\n- `read_trigger`\n- `replace_trigger`\n\nUser operations:\n\n- `create_user`\n- `delete_user`\n- `query_users`\n- `read_all_users`\n- `read_user`\n- `replace_user`\n- `upsert_user`\n\nUser-defined function operations:\n\n- `create_user_defined_function`\n- `delete_user_defined_function`\n- `query_user_defined_functions`\n- `read_all_user_defined_functions`\n- `read_user_defined_function`\n\nIf none of them applies, it's RECOMMENDED to use language-agnostic representation of\nclient method name in snake_case. Instrumentations SHOULD document\nadditional values when introducing new operations.\n",
          "stability": "release_candidate"
        },
        {
          "name": "db.response.returned_rows",
          "type": "int",
          "brief": "Cosmos DB row count in result set.\n",
          "examples": [
            10,
            20
          ],
          "requirement_level": {
            "conditionally_required": "if response was received and returned any rows"
          },
          "stability": "development"
        },
        {
          "name": "db.response.status_code",
          "type": "string",
          "brief": "Cosmos DB status code.\n",
          "examples": [
            "200",
            "201"
          ],
          "requirement_level": {
            "conditionally_required": "if response was received"
          },
          "note": "Response codes in the 4xx and 5xx range SHOULD be considered errors.\n",
          "stability": "release_candidate"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": {
            "conditionally_required": "If not default (443)."
          },
          "sampling_relevant": true,
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "user_agent.original",
          "type": "string",
          "brief": "Full user-agent string is generated by Cosmos DB SDK",
          "examples": [
            "cosmos-netstandard-sdk/3.23.0\\|3.23.1\\|1\\|X64\\|Linux 5.4.0-1098-azure 104 18\\|.NET Core 3.1.32\\|S\\|"
          ],
          "requirement_level": "recommended",
          "note": "The user-agent value is generated by SDK which is a combination of<br> `sdk_version` : Current version of SDK. e.g. 'cosmos-netstandard-sdk/3.23.0'<br> `direct_pkg_version` : Direct package version used by Cosmos DB SDK. e.g. '3.23.1'<br> `number_of_client_instances` : Number of cosmos client instances created by the application. e.g. '1'<br> `type_of_machine_architecture` : Machine architecture. e.g. 'X64'<br> `operating_system` : Operating System. e.g. 'Linux 5.4.0-1098-azure 104 18'<br> `runtime_framework` : Runtime Framework. e.g. '.NET Core 3.1.32'<br> `failover_information` : Generated key to determine if region failover enabled.\n   Format Reg-{D (Disabled discovery)}-S(application region)|L(List of preferred regions)|N(None, user did not configure it).\n   Default value is \"NS\".\n",
          "stability": "stable"
        }
      ],
      "span_kind": "client",
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/database/spans.yaml",
        "attributes": {
          "az.namespace": {
            "source_group": "registry.azure.client.sdk",
            "inherited_fields": [
              "brief",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "note"
            ]
          },
          "azure.client.id": {
            "source_group": "registry.azure.client.sdk",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "azure.cosmosdb.connection.mode": {
            "source_group": "registry.azure.cosmosdb",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "azure.cosmosdb.consistency.level": {
            "source_group": "registry.azure.cosmosdb",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "azure.cosmosdb.operation.contacted_regions": {
            "source_group": "registry.azure.cosmosdb",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "azure.cosmosdb.operation.request_charge": {
            "source_group": "registry.azure.cosmosdb",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "azure.cosmosdb.request.body.size": {
            "source_group": "registry.azure.cosmosdb",
            "inherited_fields": [
              "brief",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "azure.cosmosdb.response.sub_status_code": {
            "source_group": "registry.azure.cosmosdb",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "db.collection.name": {
            "source_group": "registry.db",
            "inherited_fields": [
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "note",
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "db.namespace": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "db.operation.batch.size": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "db.operation.name": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "note",
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "db.operation.parameter": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "db.query.summary": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "db.query.text": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "db.response.returned_rows": {
            "source_group": "registry.db",
            "inherited_fields": [
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples",
              "requirement_level"
            ]
          },
          "db.response.status_code": {
            "source_group": "registry.db",
            "inherited_fields": [
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level"
            ]
          },
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "sampling_relevant"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "user_agent.original": {
            "source_group": "registry.user_agent",
            "inherited_fields": [
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples",
              "note"
            ]
          }
        }
      }
    },
    {
      "id": "registry.feature_flag",
      "type": "attribute_group",
      "brief": "This document defines attributes for Feature Flags.\n",
      "stability": "development",
      "attributes": [
        {
          "name": "feature_flag.key",
          "type": "string",
          "brief": "The lookup key of the feature flag.",
          "examples": [
            "logo-color"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "feature_flag.provider_name",
          "type": "string",
          "brief": "Identifies the feature flag provider.",
          "examples": [
            "Flag Manager"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "feature_flag.variant",
          "type": "string",
          "brief": "A semantic identifier for an evaluated flag value.\n",
          "examples": [
            "red",
            "true",
            "on"
          ],
          "requirement_level": "recommended",
          "note": "A semantic identifier, commonly referred to as a variant, provides a means\nfor referring to a value without including the value itself. This can\nprovide additional context for understanding the meaning behind a value.\nFor example, the variant `red` maybe be used for the value `#c05543`.",
          "stability": "development"
        },
        {
          "name": "feature_flag.context.id",
          "type": "string",
          "brief": "The unique identifier for the flag evaluation context. For example, the targeting key.\n",
          "examples": [
            "5157782b-2203-4c80-a857-dbbd5e7761db"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "feature_flag.version",
          "type": "string",
          "brief": "The version of the ruleset used during the evaluation. This may be any stable value which uniquely identifies the ruleset.\n",
          "examples": [
            "1",
            "01ABCDEF"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "feature_flag.set.id",
          "type": "string",
          "brief": "The identifier of the [flag set](https://openfeature.dev/specification/glossary/#flag-set) to which the feature flag belongs.\n",
          "examples": [
            "proj-1",
            "ab98sgs",
            "service1/dev"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "feature_flag.evaluation.reason",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "static",
                "value": "static",
                "brief": "The resolved value is static (no dynamic evaluation).",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "default",
                "value": "default",
                "brief": "The resolved value fell back to a pre-configured value (no dynamic evaluation occurred or dynamic evaluation yielded no result).",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "targeting_match",
                "value": "targeting_match",
                "brief": "The resolved value was the result of a dynamic evaluation, such as a rule or specific user-targeting.",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "split",
                "value": "split",
                "brief": "The resolved value was the result of pseudorandom assignment.",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "cached",
                "value": "cached",
                "brief": "The resolved value was retrieved from cache.",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "disabled",
                "value": "disabled",
                "brief": "The resolved value was the result of the flag being disabled in the management system.",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "unknown",
                "value": "unknown",
                "brief": "The reason for the resolved value could not be determined.",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "stale",
                "value": "stale",
                "brief": "The resolved value is non-authoritative or possibly out of date",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "error",
                "value": "error",
                "brief": "The resolved value was the result of an error.",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The reason code which shows how a feature flag value was determined.\n",
          "examples": [
            "static",
            "targeting_match",
            "error",
            "default"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "feature_flag.evaluation.error.message",
          "type": "string",
          "brief": "A message explaining the nature of an error occurring during flag evaluation.",
          "examples": [
            "Flag `header-color` expected type `string` but found type `number`"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/feature-flags/registry.yaml"
      },
      "display_name": "Feature Flag Attributes"
    },
    {
      "id": "registry.geo",
      "type": "attribute_group",
      "brief": "Geo fields can carry data about a specific location related to an event. This geolocation information can be derived from techniques such as Geo IP, or be user-supplied.\nNote: Geo attributes are typically used under another namespace, such as client.* and describe the location of the corresponding entity (device, end-user, etc). Semantic conventions that reference geo attributes (as a root namespace) or embed them (under their own namespace) SHOULD document what geo attributes describe in the scope of that convention.\n",
      "attributes": [
        {
          "name": "geo.locality.name",
          "type": "string",
          "brief": "Locality name. Represents the name of a city, town, village, or similar populated place.\n",
          "examples": [
            "Montreal",
            "Berlin"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "geo.continent.code",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "af",
                "value": "AF",
                "brief": "Africa",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "an",
                "value": "AN",
                "brief": "Antarctica",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "as",
                "value": "AS",
                "brief": "Asia",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "eu",
                "value": "EU",
                "brief": "Europe",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "na",
                "value": "NA",
                "brief": "North America",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "oc",
                "value": "OC",
                "brief": "Oceania",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "sa",
                "value": "SA",
                "brief": "South America",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "Two-letter code representing continent’s name.\n",
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "geo.country.iso_code",
          "type": "string",
          "brief": "Two-letter ISO Country Code ([ISO 3166-1 alpha2](https://wikipedia.org/wiki/ISO_3166-1#Codes)).\n",
          "examples": [
            "CA"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "geo.location.lon",
          "type": "double",
          "brief": "Longitude of the geo location in [WGS84](https://wikipedia.org/wiki/World_Geodetic_System#WGS84).\n",
          "examples": [
            -73.61483
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "geo.location.lat",
          "type": "double",
          "brief": "Latitude of the geo location in [WGS84](https://wikipedia.org/wiki/World_Geodetic_System#WGS84).\n",
          "examples": [
            45.505918
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "geo.postal_code",
          "type": "string",
          "brief": "Postal code associated with the location. Values appropriate for this field may also be known as a postcode or ZIP code and will vary widely from country to country.\n",
          "examples": [
            "94040"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "geo.region.iso_code",
          "type": "string",
          "brief": "Region ISO code ([ISO 3166-2](https://wikipedia.org/wiki/ISO_3166-2)).\n",
          "examples": [
            "CA-QC"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/geo/registry.yaml"
      }
    },
    {
      "id": "metric.jvm.buffer.memory.usage",
      "type": "metric",
      "brief": "Deprecated, use `jvm.buffer.memory.used` instead.",
      "stability": "development",
      "deprecated": {
        "reason": "uncategorized",
        "note": "Replaced by `jvm.buffer.memory.used`."
      },
      "attributes": [
        {
          "name": "jvm.buffer.pool.name",
          "type": "string",
          "brief": "Name of the buffer pool.",
          "examples": [
            "mapped",
            "direct"
          ],
          "requirement_level": "recommended",
          "note": "Pool names are generally obtained via [BufferPoolMXBean#getName()](https://docs.oracle.com/en/java/javase/11/docs/api/java.management/java/lang/management/BufferPoolMXBean.html#getName()).\n",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "jvm.buffer.memory.usage",
      "instrument": "updowncounter",
      "unit": "By",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/jvm/deprecated/metrics-deprecated.yaml",
        "attributes": {
          "jvm.buffer.pool.name": {
            "source_group": "registry.jvm",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "registry.destination",
      "type": "attribute_group",
      "brief": "These attributes may be used to describe the receiver of a network exchange/packet. These should be used when there is no client/server relationship between the two sides, or when that relationship is unknown. This covers low-level network interactions (e.g. packet tracing) where you don't know if there was a connection or which side initiated it. This also covers unidirectional UDP flows and peer-to-peer communication where the \"user-facing\" surface of the protocol / API doesn't expose a clear notion of client and server.\n",
      "attributes": [
        {
          "name": "destination.address",
          "type": "string",
          "brief": "Destination address - domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "destination.example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "recommended",
          "note": "When observed from the source side, and when communicating through an intermediary, `destination.address` SHOULD represent the destination address behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "development"
        },
        {
          "name": "destination.port",
          "type": "int",
          "brief": "Destination port number",
          "examples": [
            3389,
            2888
          ],
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/destination/registry.yaml"
      },
      "display_name": "Destination Attributes"
    },
    {
      "id": "registry.otel.library.deprecated",
      "type": "attribute_group",
      "brief": "Describes deprecated otel.library attributes.",
      "attributes": [
        {
          "name": "otel.library.name",
          "type": "string",
          "brief": "Deprecated. Use the `otel.scope.name` attribute",
          "examples": [
            "io.opentelemetry.contrib.mongodb"
          ],
          "requirement_level": "recommended",
          "stability": "development",
          "deprecated": {
            "reason": "uncategorized",
            "note": "Use the `otel.scope.name` attribute."
          }
        },
        {
          "name": "otel.library.version",
          "type": "string",
          "brief": "Deprecated. Use the `otel.scope.version` attribute.",
          "examples": [
            "1.0.0"
          ],
          "requirement_level": "recommended",
          "stability": "development",
          "deprecated": {
            "reason": "uncategorized",
            "note": "Use the `otel.scope.version` attribute."
          }
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/otel/deprecated/registry-deprecated.yaml"
      },
      "display_name": "Deprecated OTel Library Attributes"
    },
    {
      "id": "metric.dotnet.process.cpu.count",
      "type": "metric",
      "brief": "The number of processors available to the process.",
      "note": "Meter name: `System.Runtime`; Added in: .NET 9.0.\nThis metric reports the same values as accessing [`Environment.ProcessorCount`](https://learn.microsoft.com/dotnet/api/system.environment.processorcount).\n",
      "stability": "stable",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "dotnet.process.cpu.count",
      "instrument": "updowncounter",
      "unit": "{cpu}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/dotnet/runtime-metrics.yaml"
      }
    },
    {
      "id": "metric.dotnet.process.cpu.time",
      "type": "metric",
      "brief": "CPU time used by the process.",
      "note": "Meter name: `System.Runtime`; Added in: .NET 9.0.\nThis metric reports the same values as accessing the corresponding processor time properties on [`System.Diagnostics.Process`](https://learn.microsoft.com/dotnet/api/system.diagnostics.process).\n",
      "stability": "stable",
      "attributes": [
        {
          "name": "cpu.mode",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "user",
                "value": "user",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "system",
                "value": "system",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "nice",
                "value": "nice",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "idle",
                "value": "idle",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "iowait",
                "value": "iowait",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "interrupt",
                "value": "interrupt",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "steal",
                "value": "steal",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "kernel",
                "value": "kernel",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The mode of the CPU",
          "examples": [
            "user",
            "system"
          ],
          "requirement_level": "required",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "dotnet.process.cpu.time",
      "instrument": "counter",
      "unit": "s",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/dotnet/runtime-metrics.yaml",
        "attributes": {
          "cpu.mode": {
            "source_group": "registry.cpu",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.dotnet.process.memory.working_set",
      "type": "metric",
      "brief": "The number of bytes of physical memory mapped to the process context.",
      "note": "Meter name: `System.Runtime`; Added in: .NET 9.0.\nThis metric reports the same values as calling [`Environment.WorkingSet`](https://learn.microsoft.com/dotnet/api/system.environment.workingset).\n",
      "stability": "stable",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "dotnet.process.memory.working_set",
      "instrument": "updowncounter",
      "unit": "By",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/dotnet/runtime-metrics.yaml"
      }
    },
    {
      "id": "metric.dotnet.gc.collections",
      "type": "metric",
      "brief": "The number of garbage collections that have occurred since the process has started.",
      "note": "Meter name: `System.Runtime`; Added in: .NET 9.0.\nThis metric uses the [`GC.CollectionCount(int generation)`](https://learn.microsoft.com/dotnet/api/system.gc.collectioncount) API to calculate exclusive collections per generation.\n",
      "stability": "stable",
      "attributes": [
        {
          "name": "dotnet.gc.heap.generation",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "gen0",
                "value": "gen0",
                "brief": "Generation 0",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "gen1",
                "value": "gen1",
                "brief": "Generation 1",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "gen2",
                "value": "gen2",
                "brief": "Generation 2",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "loh",
                "value": "loh",
                "brief": "Large Object Heap",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "poh",
                "value": "poh",
                "brief": "Pinned Object Heap",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Name of the garbage collector managed heap generation.",
          "examples": [
            "gen0",
            "gen1",
            "gen2"
          ],
          "requirement_level": "required",
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "dotnet.gc.collections",
      "instrument": "counter",
      "unit": "{collection}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/dotnet/runtime-metrics.yaml",
        "attributes": {
          "dotnet.gc.heap.generation": {
            "source_group": "registry.dotnet",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.dotnet.gc.heap.total_allocated",
      "type": "metric",
      "brief": "The *approximate* number of bytes allocated on the managed GC heap since the process has started. The returned value does not include any native allocations.\n",
      "note": "Meter name: `System.Runtime`; Added in: .NET 9.0.\nThis metric reports the same values as calling [`GC.GetTotalAllocatedBytes()`](https://learn.microsoft.com/dotnet/api/system.gc.gettotalallocatedbytes).\n",
      "stability": "stable",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "dotnet.gc.heap.total_allocated",
      "instrument": "counter",
      "unit": "By",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/dotnet/runtime-metrics.yaml"
      }
    },
    {
      "id": "metric.dotnet.gc.last_collection.memory.committed_size",
      "type": "metric",
      "brief": "The amount of committed virtual memory in use by the .NET GC, as observed during the latest garbage collection.\n",
      "note": "Meter name: `System.Runtime`; Added in: .NET 9.0.\nThis metric reports the same values as calling [`GC.GetGCMemoryInfo().TotalCommittedBytes`](https://learn.microsoft.com/dotnet/api/system.gcmemoryinfo.totalcommittedbytes). Committed virtual memory may be larger than the heap size because it includes both memory for storing existing objects (the heap size) and some extra memory that is ready to handle newly allocated objects in the future.\n",
      "stability": "stable",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "dotnet.gc.last_collection.memory.committed_size",
      "instrument": "updowncounter",
      "unit": "By",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/dotnet/runtime-metrics.yaml"
      }
    },
    {
      "id": "metric.dotnet.gc.last_collection.heap.size",
      "type": "metric",
      "brief": "The managed GC heap size (including fragmentation), as observed during the latest garbage collection.\n",
      "note": "Meter name: `System.Runtime`; Added in: .NET 9.0.\nThis metric reports the same values as calling [`GC.GetGCMemoryInfo().GenerationInfo.SizeAfterBytes`](https://learn.microsoft.com/dotnet/api/system.gcgenerationinfo.sizeafterbytes).\n",
      "stability": "stable",
      "attributes": [
        {
          "name": "dotnet.gc.heap.generation",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "gen0",
                "value": "gen0",
                "brief": "Generation 0",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "gen1",
                "value": "gen1",
                "brief": "Generation 1",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "gen2",
                "value": "gen2",
                "brief": "Generation 2",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "loh",
                "value": "loh",
                "brief": "Large Object Heap",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "poh",
                "value": "poh",
                "brief": "Pinned Object Heap",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Name of the garbage collector managed heap generation.",
          "examples": [
            "gen0",
            "gen1",
            "gen2"
          ],
          "requirement_level": "required",
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "dotnet.gc.last_collection.heap.size",
      "instrument": "updowncounter",
      "unit": "By",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/dotnet/runtime-metrics.yaml",
        "attributes": {
          "dotnet.gc.heap.generation": {
            "source_group": "registry.dotnet",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.dotnet.gc.last_collection.heap.fragmentation.size",
      "type": "metric",
      "brief": "The heap fragmentation, as observed during the latest garbage collection.\n",
      "note": "Meter name: `System.Runtime`; Added in: .NET 9.0.\nThis metric reports the same values as calling [`GC.GetGCMemoryInfo().GenerationInfo.FragmentationAfterBytes`](https://learn.microsoft.com/dotnet/api/system.gcgenerationinfo.fragmentationafterbytes).\n",
      "stability": "stable",
      "attributes": [
        {
          "name": "dotnet.gc.heap.generation",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "gen0",
                "value": "gen0",
                "brief": "Generation 0",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "gen1",
                "value": "gen1",
                "brief": "Generation 1",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "gen2",
                "value": "gen2",
                "brief": "Generation 2",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "loh",
                "value": "loh",
                "brief": "Large Object Heap",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "poh",
                "value": "poh",
                "brief": "Pinned Object Heap",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Name of the garbage collector managed heap generation.",
          "examples": [
            "gen0",
            "gen1",
            "gen2"
          ],
          "requirement_level": "required",
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "dotnet.gc.last_collection.heap.fragmentation.size",
      "instrument": "updowncounter",
      "unit": "By",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/dotnet/runtime-metrics.yaml",
        "attributes": {
          "dotnet.gc.heap.generation": {
            "source_group": "registry.dotnet",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.dotnet.gc.pause.time",
      "type": "metric",
      "brief": "The total amount of time paused in GC since the process has started.",
      "note": "Meter name: `System.Runtime`; Added in: .NET 9.0.\nThis metric reports the same values as calling [`GC.GetTotalPauseDuration()`](https://learn.microsoft.com/dotnet/api/system.gc.gettotalpauseduration).\n",
      "stability": "stable",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "dotnet.gc.pause.time",
      "instrument": "counter",
      "unit": "s",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/dotnet/runtime-metrics.yaml"
      }
    },
    {
      "id": "metric.dotnet.jit.compiled_il.size",
      "type": "metric",
      "brief": "Count of bytes of intermediate language that have been compiled since the process has started.",
      "note": "Meter name: `System.Runtime`; Added in: .NET 9.0.\nThis metric reports the same values as calling [`JitInfo.GetCompiledILBytes()`](https://learn.microsoft.com/dotnet/api/system.runtime.jitinfo.getcompiledilbytes).\n",
      "stability": "stable",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "dotnet.jit.compiled_il.size",
      "instrument": "counter",
      "unit": "By",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/dotnet/runtime-metrics.yaml"
      }
    },
    {
      "id": "metric.dotnet.jit.compiled_methods",
      "type": "metric",
      "brief": "The number of times the JIT compiler (re)compiled methods since the process has started.\n",
      "note": "Meter name: `System.Runtime`; Added in: .NET 9.0.\nThis metric reports the same values as calling [`JitInfo.GetCompiledMethodCount()`](https://learn.microsoft.com/dotnet/api/system.runtime.jitinfo.getcompiledmethodcount).\n",
      "stability": "stable",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "dotnet.jit.compiled_methods",
      "instrument": "counter",
      "unit": "{method}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/dotnet/runtime-metrics.yaml"
      }
    },
    {
      "id": "metric.dotnet.jit.compilation.time",
      "type": "metric",
      "brief": "The amount of time the JIT compiler has spent compiling methods since the process has started.\n",
      "note": "Meter name: `System.Runtime`; Added in: .NET 9.0.\nThis metric reports the same values as calling [`JitInfo.GetCompilationTime()`](https://learn.microsoft.com/dotnet/api/system.runtime.jitinfo.getcompilationtime).\n",
      "stability": "stable",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "dotnet.jit.compilation.time",
      "instrument": "counter",
      "unit": "s",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/dotnet/runtime-metrics.yaml"
      }
    },
    {
      "id": "metric.dotnet.monitor.lock_contentions",
      "type": "metric",
      "brief": "The number of times there was contention when trying to acquire a monitor lock since the process has started.\n",
      "note": "Meter name: `System.Runtime`; Added in: .NET 9.0.\nThis metric reports the same values as calling [`Monitor.LockContentionCount`](https://learn.microsoft.com/dotnet/api/system.threading.monitor.lockcontentioncount).\n",
      "stability": "stable",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "dotnet.monitor.lock_contentions",
      "instrument": "counter",
      "unit": "{contention}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/dotnet/runtime-metrics.yaml"
      }
    },
    {
      "id": "metric.dotnet.thread_pool.thread.count",
      "type": "metric",
      "brief": "The number of thread pool threads that currently exist.",
      "note": "Meter name: `System.Runtime`; Added in: .NET 9.0.\nThis metric reports the same values as calling [`ThreadPool.ThreadCount`](https://learn.microsoft.com/dotnet/api/system.threading.threadpool.threadcount).\n",
      "stability": "stable",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "dotnet.thread_pool.thread.count",
      "instrument": "updowncounter",
      "unit": "{thread}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/dotnet/runtime-metrics.yaml"
      }
    },
    {
      "id": "metric.dotnet.thread_pool.work_item.count",
      "type": "metric",
      "brief": "The number of work items that the thread pool has completed since the process has started.\n",
      "note": "Meter name: `System.Runtime`; Added in: .NET 9.0.\nThis metric reports the same values as calling [`ThreadPool.CompletedWorkItemCount`](https://learn.microsoft.com/dotnet/api/system.threading.threadpool.completedworkitemcount).\n",
      "stability": "stable",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "dotnet.thread_pool.work_item.count",
      "instrument": "counter",
      "unit": "{work_item}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/dotnet/runtime-metrics.yaml"
      }
    },
    {
      "id": "metric.dotnet.thread_pool.queue.length",
      "type": "metric",
      "brief": "The number of work items that are currently queued to be processed by the thread pool.\n",
      "note": "Meter name: `System.Runtime`; Added in: .NET 9.0.\nThis metric reports the same values as calling [`ThreadPool.PendingWorkItemCount`](https://learn.microsoft.com/dotnet/api/system.threading.threadpool.pendingworkitemcount).\n",
      "stability": "stable",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "dotnet.thread_pool.queue.length",
      "instrument": "updowncounter",
      "unit": "{work_item}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/dotnet/runtime-metrics.yaml"
      }
    },
    {
      "id": "metric.dotnet.timer.count",
      "type": "metric",
      "brief": "The number of timer instances that are currently active.",
      "note": "Meter name: `System.Runtime`; Added in: .NET 9.0.\nThis metric reports the same values as calling [`Timer.ActiveCount`](https://learn.microsoft.com/dotnet/api/system.threading.timer.activecount).\n",
      "stability": "stable",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "dotnet.timer.count",
      "instrument": "updowncounter",
      "unit": "{timer}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/dotnet/runtime-metrics.yaml"
      }
    },
    {
      "id": "metric.dotnet.assembly.count",
      "type": "metric",
      "brief": "The number of .NET assemblies that are currently loaded.",
      "note": "Meter name: `System.Runtime`; Added in: .NET 9.0.\nThis metric reports the same values as calling [`AppDomain.CurrentDomain.GetAssemblies().Length`](https://learn.microsoft.com/dotnet/api/system.appdomain.getassemblies).\n",
      "stability": "stable",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "dotnet.assembly.count",
      "instrument": "updowncounter",
      "unit": "{assembly}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/dotnet/runtime-metrics.yaml"
      }
    },
    {
      "id": "metric.dotnet.exceptions",
      "type": "metric",
      "brief": "The number of exceptions that have been thrown in managed code.",
      "note": "Meter name: `System.Runtime`; Added in: .NET 9.0.\nThis metric reports the same values as counting calls to [`AppDomain.CurrentDomain.FirstChanceException`](https://learn.microsoft.com/dotnet/api/system.appdomain.firstchanceexception).\n",
      "stability": "stable",
      "attributes": [
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "System.OperationCanceledException",
            "Contoso.MyException"
          ],
          "requirement_level": "required",
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "dotnet.exceptions",
      "instrument": "counter",
      "unit": "{exception}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/dotnet/runtime-metrics.yaml",
        "attributes": {
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "brief",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "note",
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "registry.profile.frame",
      "type": "attribute_group",
      "brief": "Describes the origin of a single frame in a Profile.\n",
      "attributes": [
        {
          "name": "profile.frame.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "dotnet",
                "value": "dotnet",
                "brief": "[.NET](https://wikipedia.org/wiki/.NET)\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "jvm",
                "value": "jvm",
                "brief": "[JVM](https://wikipedia.org/wiki/Java_virtual_machine)\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "kernel",
                "value": "kernel",
                "brief": "[Kernel](https://wikipedia.org/wiki/Kernel_(operating_system))\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "native",
                "value": "native",
                "brief": "[C](https://wikipedia.org/wiki/C_(programming_language)), [C++](https://wikipedia.org/wiki/C%2B%2B), [Go](https://wikipedia.org/wiki/Go_(programming_language)), [Rust](https://wikipedia.org/wiki/Rust_(programming_language))\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "perl",
                "value": "perl",
                "brief": "[Perl](https://wikipedia.org/wiki/Perl)\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "php",
                "value": "php",
                "brief": "[PHP](https://wikipedia.org/wiki/PHP)\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "cpython",
                "value": "cpython",
                "brief": "[Python](https://wikipedia.org/wiki/Python_(programming_language))\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "ruby",
                "value": "ruby",
                "brief": "[Ruby](https://wikipedia.org/wiki/Ruby_(programming_language))\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "v8js",
                "value": "v8js",
                "brief": "[V8JS](https://wikipedia.org/wiki/V8_(JavaScript_engine))\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "beam",
                "value": "beam",
                "brief": "[Erlang](https://en.wikipedia.org/wiki/BEAM_(Erlang_virtual_machine))\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes the interpreter or compiler of a single frame.\n",
          "examples": [
            "cpython"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/profile/registry.yaml"
      },
      "display_name": "Profile Frame Attributes"
    },
    {
      "id": "registry.cassandra",
      "type": "attribute_group",
      "brief": "This section defines attributes for Cassandra.\n",
      "attributes": [
        {
          "name": "cassandra.coordinator.dc",
          "type": "string",
          "brief": "The data center of the coordinating node for a query.\n",
          "examples": "us-west-2",
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "cassandra.coordinator.id",
          "type": "string",
          "brief": "The ID of the coordinating node for a query.\n",
          "examples": "be13faa2-8574-4d71-926d-27f16cf8a7af",
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "cassandra.consistency.level",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "all",
                "value": "all",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "each_quorum",
                "value": "each_quorum",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "quorum",
                "value": "quorum",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "local_quorum",
                "value": "local_quorum",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "one",
                "value": "one",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "two",
                "value": "two",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "three",
                "value": "three",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "local_one",
                "value": "local_one",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "any",
                "value": "any",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "serial",
                "value": "serial",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "local_serial",
                "value": "local_serial",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n",
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "cassandra.query.idempotent",
          "type": "boolean",
          "brief": "Whether or not the query is idempotent.\n",
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "cassandra.page.size",
          "type": "int",
          "brief": "The fetch size used for paging, i.e. how many rows will be returned at once.\n",
          "examples": [
            5000
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "cassandra.speculative_execution.count",
          "type": "int",
          "brief": "The number of times a query was speculatively executed. Not set or `0` if the query was not executed speculatively.\n",
          "examples": [
            0,
            2
          ],
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/cassandra/registry.yaml"
      },
      "display_name": "Cassandra Attributes"
    },
    {
      "id": "resource.android",
      "type": "resource",
      "brief": "The Android platform on which the Android application is running.\n",
      "stability": "development",
      "attributes": [
        {
          "name": "android.os.api_level",
          "type": "string",
          "brief": "Uniquely identifies the framework API revision offered by a version (`os.version`) of the android operating system. More information can be found [here](https://developer.android.com/guide/topics/manifest/uses-sdk-element#ApiLevels).\n",
          "examples": [
            "33",
            "32"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": "android",
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/android/resources.yaml",
        "attributes": {
          "android.os.api_level": {
            "source_group": "registry.android",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "log.record",
      "type": "attribute_group",
      "brief": "The attributes described in this section are rather generic. They may be used in any Log Record they apply to.\n",
      "attributes": [
        {
          "name": "log.record.uid",
          "type": "string",
          "brief": "A unique identifier for the Log Record.\n",
          "examples": [
            "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          ],
          "requirement_level": "opt_in",
          "note": "If an id is provided, other log records with the same id will be considered duplicates and can be removed safely. This means, that two distinguishable log records MUST have different values.\nThe id MAY be an [Universally Unique Lexicographically Sortable Identifier (ULID)](https://github.com/ulid/spec), but other identifiers (e.g. UUID) may be used as needed.\n",
          "stability": "development"
        },
        {
          "name": "log.record.original",
          "type": "string",
          "brief": "The complete original Log Record.\n",
          "examples": [
            "77 <86>1 2015-08-06T21:58:59.694Z 192.168.2.133 inactive - - - Something happened",
            "[INFO] 8/3/24 12:34:56 Something happened"
          ],
          "requirement_level": "opt_in",
          "note": "This value MAY be added when processing a Log Record which was originally transmitted as a string or equivalent data type AND the Body field of the Log Record does not contain the same value. (e.g. a syslog or a log record read from a file.)\n",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/log/common.yaml",
        "attributes": {
          "log.record.original": {
            "source_group": "registry.log.record",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "log.record.uid": {
            "source_group": "registry.log.record",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "attributes.log",
      "type": "attribute_group",
      "brief": "Describes Log attributes",
      "attributes": [
        {
          "name": "log.iostream",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "stdout",
                "value": "stdout",
                "brief": "Logs from stdout stream",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "stderr",
                "value": "stderr",
                "brief": "Events from stderr stream",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The stream associated with the log. See below for a list of well-known values.\n",
          "requirement_level": "opt_in",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/log/common.yaml",
        "attributes": {
          "log.iostream": {
            "source_group": "registry.log",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "attributes.log.file",
      "type": "attribute_group",
      "brief": "A file to which log was emitted.\n",
      "attributes": [
        {
          "name": "log.file.name",
          "type": "string",
          "brief": "The basename of the file.\n",
          "examples": [
            "audit.log"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "log.file.path",
          "type": "string",
          "brief": "The full path to the file.\n",
          "examples": [
            "/var/log/mysql/audit.log"
          ],
          "requirement_level": "opt_in",
          "stability": "development"
        },
        {
          "name": "log.file.name_resolved",
          "type": "string",
          "brief": "The basename of the file, with symlinks resolved.\n",
          "examples": [
            "uuid.log"
          ],
          "requirement_level": "opt_in",
          "stability": "development"
        },
        {
          "name": "log.file.path_resolved",
          "type": "string",
          "brief": "The full path to the file, with symlinks resolved.\n",
          "examples": [
            "/var/lib/docker/uuid.log"
          ],
          "requirement_level": "opt_in",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/log/common.yaml",
        "attributes": {
          "log.file.name": {
            "source_group": "registry.log.file",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "log.file.name_resolved": {
            "source_group": "registry.log.file",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "log.file.path": {
            "source_group": "registry.log.file",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "log.file.path_resolved": {
            "source_group": "registry.log.file",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "registry.os",
      "type": "attribute_group",
      "brief": "The operating system (OS) on which the process represented by this resource is running.\n",
      "note": "In case of virtualized environments, this is the operating system as it is observed by the process, i.e., the virtualized guest rather than the underlying host.\n",
      "attributes": [
        {
          "name": "os.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "windows",
                "value": "windows",
                "brief": "Microsoft Windows",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "linux",
                "value": "linux",
                "brief": "Linux",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "darwin",
                "value": "darwin",
                "brief": "Apple Darwin",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "freebsd",
                "value": "freebsd",
                "brief": "FreeBSD",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "netbsd",
                "value": "netbsd",
                "brief": "NetBSD",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "openbsd",
                "value": "openbsd",
                "brief": "OpenBSD",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "dragonflybsd",
                "value": "dragonflybsd",
                "brief": "DragonFly BSD",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "hpux",
                "value": "hpux",
                "brief": "HP-UX (Hewlett Packard Unix)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "aix",
                "value": "aix",
                "brief": "AIX (Advanced Interactive eXecutive)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "solaris",
                "value": "solaris",
                "brief": "SunOS, Oracle Solaris",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "z_os",
                "value": "z_os",
                "brief": "IBM z/OS",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The operating system type.\n",
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "os.description",
          "type": "string",
          "brief": "Human readable (not intended to be parsed) OS version information, like e.g. reported by `ver` or `lsb_release -a` commands.\n",
          "examples": [
            "Microsoft Windows [Version 10.0.18363.778]",
            "Ubuntu 18.04.1 LTS"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "os.name",
          "type": "string",
          "brief": "Human readable operating system name.",
          "examples": [
            "iOS",
            "Android",
            "Ubuntu"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "os.version",
          "type": "string",
          "brief": "The version string of the operating system as defined in [Version Attributes](/docs/resource/README.md#version-attributes).\n",
          "examples": [
            "14.2.1",
            "18.04.1"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "os.build_id",
          "type": "string",
          "brief": "Unique identifier for a particular build or compilation of the operating system.",
          "examples": [
            "TQ3C.230805.001.B2",
            "20E247",
            "22621"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/os/registry.yaml"
      },
      "display_name": "Operating System Attributes"
    },
    {
      "id": "registry.telemetry",
      "type": "attribute_group",
      "brief": "This document defines attributes for telemetry SDK.\n",
      "attributes": [
        {
          "name": "telemetry.sdk.name",
          "type": "string",
          "brief": "The name of the telemetry SDK as defined above.\n",
          "examples": [
            "opentelemetry"
          ],
          "requirement_level": "recommended",
          "note": "The OpenTelemetry SDK MUST set the `telemetry.sdk.name` attribute to `opentelemetry`.\nIf another SDK, like a fork or a vendor-provided implementation, is used, this SDK MUST set the\n`telemetry.sdk.name` attribute to the fully-qualified class or module name of this SDK's main entry point\nor another suitable identifier depending on the language.\nThe identifier `opentelemetry` is reserved and MUST NOT be used in this case.\nAll custom identifiers SHOULD be stable across different versions of an implementation.\n",
          "stability": "stable"
        },
        {
          "name": "telemetry.sdk.language",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "cpp",
                "value": "cpp",
                "brief": null,
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "dotnet",
                "value": "dotnet",
                "brief": null,
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "erlang",
                "value": "erlang",
                "brief": null,
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "go",
                "value": "go",
                "brief": null,
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "java",
                "value": "java",
                "brief": null,
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "nodejs",
                "value": "nodejs",
                "brief": null,
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "php",
                "value": "php",
                "brief": null,
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "python",
                "value": "python",
                "brief": null,
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "ruby",
                "value": "ruby",
                "brief": null,
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "rust",
                "value": "rust",
                "brief": null,
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "swift",
                "value": "swift",
                "brief": null,
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "webjs",
                "value": "webjs",
                "brief": null,
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "The language of the telemetry SDK.\n",
          "requirement_level": "recommended",
          "stability": "stable"
        },
        {
          "name": "telemetry.sdk.version",
          "type": "string",
          "brief": "The version string of the telemetry SDK.\n",
          "examples": [
            "1.2.3"
          ],
          "requirement_level": "recommended",
          "stability": "stable"
        },
        {
          "name": "telemetry.distro.name",
          "type": "string",
          "brief": "The name of the auto instrumentation agent or distribution, if used.\n",
          "examples": [
            "parts-unlimited-java"
          ],
          "requirement_level": "recommended",
          "note": "Official auto instrumentation agents and distributions SHOULD set the `telemetry.distro.name` attribute to\na string starting with `opentelemetry-`, e.g. `opentelemetry-java-instrumentation`.\n",
          "stability": "development"
        },
        {
          "name": "telemetry.distro.version",
          "type": "string",
          "brief": "The version string of the auto instrumentation agent or distribution, if used.\n",
          "examples": [
            "1.2.3"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/telemetry/registry.yaml"
      },
      "display_name": "Telemetry Attributes"
    },
    {
      "id": "rpc",
      "type": "attribute_group",
      "brief": "This document defines semantic conventions for remote procedure calls.",
      "attributes": [
        {
          "name": "rpc.method",
          "type": "string",
          "brief": "The name of the (logical) method being called, must be equal to the $method part in the span name.",
          "examples": "exampleMethod",
          "requirement_level": "recommended",
          "note": "This is the logical name of the method from the RPC interface perspective, which can be different from the name of any implementing method/function. The `code.function.name` attribute may be used to store the latter (e.g., method actually executing the call on the server side, RPC client stub method on the client side).\n",
          "stability": "development"
        },
        {
          "name": "rpc.service",
          "type": "string",
          "brief": "The full (logical) name of the service being called, including its package name, if applicable.",
          "examples": "myservice.EchoService",
          "requirement_level": "recommended",
          "note": "This is the logical name of the service from the RPC interface perspective, which can be different from the name of any implementing class. The `code.namespace` attribute may be used to store the latter (despite the attribute name, it may include a class name; e.g., class with method actually executing the call on the server side, RPC client stub class on the client side).\n",
          "stability": "development"
        },
        {
          "name": "network.transport",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "tcp",
                "value": "tcp",
                "brief": "TCP",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "udp",
                "value": "udp",
                "brief": "UDP",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "pipe",
                "value": "pipe",
                "brief": "Named or anonymous pipe.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "unix",
                "value": "unix",
                "brief": "Unix domain socket",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "quic",
                "value": "quic",
                "brief": "QUIC",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "[OSI transport layer](https://wikipedia.org/wiki/Transport_layer) or [inter-process communication method](https://wikipedia.org/wiki/Inter-process_communication).\n",
          "examples": [
            "tcp",
            "udp"
          ],
          "requirement_level": "recommended",
          "note": "The value SHOULD be normalized to lowercase.\n\nConsider always setting the transport when setting a port number, since\na port number is ambiguous without knowing the transport. For example\ndifferent processes could be listening on TCP port 12345 and UDP port 12345.\n",
          "stability": "stable"
        },
        {
          "name": "network.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "ipv4",
                "value": "ipv4",
                "brief": "IPv4",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "ipv6",
                "value": "ipv6",
                "brief": "IPv6",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "[OSI network layer](https://wikipedia.org/wiki/Network_layer) or non-OSI equivalent.",
          "examples": [
            "ipv4",
            "ipv6"
          ],
          "requirement_level": "recommended",
          "note": "The value SHOULD be normalized to lowercase.",
          "stability": "stable"
        },
        {
          "name": "rpc.system",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "grpc",
                "value": "grpc",
                "brief": "gRPC",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "java_rmi",
                "value": "java_rmi",
                "brief": "Java RMI",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "dotnet_wcf",
                "value": "dotnet_wcf",
                "brief": ".NET WCF",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "apache_dubbo",
                "value": "apache_dubbo",
                "brief": "Apache Dubbo",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "connect_rpc",
                "value": "connect_rpc",
                "brief": "Connect RPC",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "A string identifying the remoting system. See below for a list of well-known identifiers.",
          "requirement_level": "required",
          "stability": "development"
        },
        {
          "name": "server.address",
          "type": "string",
          "brief": "RPC server [host name](https://grpc.github.io/grpc/core/md_doc_naming.html).\n",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "required",
          "note": "May contain server IP address, DNS name, or local socket name. When host component is an IP address, instrumentations SHOULD NOT do a reverse proxy lookup to obtain DNS name and SHOULD set `server.address` to the IP address provided in the host component.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": {
            "conditionally_required": "if the port is supported by the network transport used for communication."
          },
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/rpc/spans.yaml",
        "attributes": {
          "network.transport": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "network.type": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "rpc.method": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "rpc.service": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "rpc.system": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "note",
              "requirement_level"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "span.rpc.client",
      "type": "span",
      "brief": "This document defines semantic conventions for remote procedure call client spans.",
      "stability": "development",
      "attributes": [
        {
          "name": "rpc.method",
          "type": "string",
          "brief": "The name of the (logical) method being called, must be equal to the $method part in the span name.",
          "examples": "exampleMethod",
          "requirement_level": "recommended",
          "note": "This is the logical name of the method from the RPC interface perspective, which can be different from the name of any implementing method/function. The `code.function.name` attribute may be used to store the latter (e.g., method actually executing the call on the server side, RPC client stub method on the client side).\n",
          "stability": "development"
        },
        {
          "name": "rpc.service",
          "type": "string",
          "brief": "The full (logical) name of the service being called, including its package name, if applicable.",
          "examples": "myservice.EchoService",
          "requirement_level": "recommended",
          "note": "This is the logical name of the service from the RPC interface perspective, which can be different from the name of any implementing class. The `code.namespace` attribute may be used to store the latter (despite the attribute name, it may include a class name; e.g., class with method actually executing the call on the server side, RPC client stub class on the client side).\n",
          "stability": "development"
        },
        {
          "name": "network.peer.address",
          "type": "string",
          "brief": "Peer address of the network connection - IP address or Unix domain socket name.",
          "examples": [
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "recommended",
          "stability": "stable"
        },
        {
          "name": "network.transport",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "tcp",
                "value": "tcp",
                "brief": "TCP",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "udp",
                "value": "udp",
                "brief": "UDP",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "pipe",
                "value": "pipe",
                "brief": "Named or anonymous pipe.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "unix",
                "value": "unix",
                "brief": "Unix domain socket",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "quic",
                "value": "quic",
                "brief": "QUIC",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "[OSI transport layer](https://wikipedia.org/wiki/Transport_layer) or [inter-process communication method](https://wikipedia.org/wiki/Inter-process_communication).\n",
          "examples": [
            "tcp",
            "udp"
          ],
          "requirement_level": "recommended",
          "note": "The value SHOULD be normalized to lowercase.\n\nConsider always setting the transport when setting a port number, since\na port number is ambiguous without knowing the transport. For example\ndifferent processes could be listening on TCP port 12345 and UDP port 12345.\n",
          "stability": "stable"
        },
        {
          "name": "network.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "ipv4",
                "value": "ipv4",
                "brief": "IPv4",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "ipv6",
                "value": "ipv6",
                "brief": "IPv6",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "[OSI network layer](https://wikipedia.org/wiki/Network_layer) or non-OSI equivalent.",
          "examples": [
            "ipv4",
            "ipv6"
          ],
          "requirement_level": "recommended",
          "note": "The value SHOULD be normalized to lowercase.",
          "stability": "stable"
        },
        {
          "name": "rpc.system",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "grpc",
                "value": "grpc",
                "brief": "gRPC",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "java_rmi",
                "value": "java_rmi",
                "brief": "Java RMI",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "dotnet_wcf",
                "value": "dotnet_wcf",
                "brief": ".NET WCF",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "apache_dubbo",
                "value": "apache_dubbo",
                "brief": "Apache Dubbo",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "connect_rpc",
                "value": "connect_rpc",
                "brief": "Connect RPC",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "A string identifying the remoting system. See below for a list of well-known identifiers.",
          "requirement_level": "required",
          "stability": "development"
        },
        {
          "name": "server.address",
          "type": "string",
          "brief": "RPC server [host name](https://grpc.github.io/grpc/core/md_doc_naming.html).\n",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "required",
          "note": "May contain server IP address, DNS name, or local socket name. When host component is an IP address, instrumentations SHOULD NOT do a reverse proxy lookup to obtain DNS name and SHOULD set `server.address` to the IP address provided in the host component.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": {
            "conditionally_required": "if the port is supported by the network transport used for communication."
          },
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "network.peer.port",
          "type": "int",
          "brief": "Peer port number of the network connection.",
          "examples": [
            65123
          ],
          "requirement_level": {
            "recommended": "If `network.peer.address` is set."
          },
          "stability": "stable"
        }
      ],
      "span_kind": "client",
      "events": [
        "rpc.message"
      ],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/rpc/spans.yaml",
        "attributes": {
          "network.peer.address": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "network.peer.port": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "network.transport": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "network.type": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "rpc.method": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "rpc.service": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "rpc.system": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "note",
              "requirement_level"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "span.rpc.server",
      "type": "span",
      "brief": "Semantic Convention for RPC server spans",
      "stability": "development",
      "attributes": [
        {
          "name": "client.address",
          "type": "string",
          "brief": "Client address - domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "client.example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "recommended",
          "note": "When observed from the server side, and when communicating through an intermediary, `client.address` SHOULD represent the client address behind any intermediaries,  for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "client.port",
          "type": "int",
          "brief": "Client port number.",
          "examples": [
            65123
          ],
          "requirement_level": "recommended",
          "note": "When observed from the server side, and when communicating through an intermediary, `client.port` SHOULD represent the client port behind any intermediaries,  for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "rpc.method",
          "type": "string",
          "brief": "The name of the (logical) method being called, must be equal to the $method part in the span name.",
          "examples": "exampleMethod",
          "requirement_level": "recommended",
          "note": "This is the logical name of the method from the RPC interface perspective, which can be different from the name of any implementing method/function. The `code.function.name` attribute may be used to store the latter (e.g., method actually executing the call on the server side, RPC client stub method on the client side).\n",
          "stability": "development"
        },
        {
          "name": "rpc.service",
          "type": "string",
          "brief": "The full (logical) name of the service being called, including its package name, if applicable.",
          "examples": "myservice.EchoService",
          "requirement_level": "recommended",
          "note": "This is the logical name of the service from the RPC interface perspective, which can be different from the name of any implementing class. The `code.namespace` attribute may be used to store the latter (despite the attribute name, it may include a class name; e.g., class with method actually executing the call on the server side, RPC client stub class on the client side).\n",
          "stability": "development"
        },
        {
          "name": "network.peer.address",
          "type": "string",
          "brief": "Peer address of the network connection - IP address or Unix domain socket name.",
          "examples": [
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "recommended",
          "stability": "stable"
        },
        {
          "name": "network.transport",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "tcp",
                "value": "tcp",
                "brief": "TCP",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "udp",
                "value": "udp",
                "brief": "UDP",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "pipe",
                "value": "pipe",
                "brief": "Named or anonymous pipe.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "unix",
                "value": "unix",
                "brief": "Unix domain socket",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "quic",
                "value": "quic",
                "brief": "QUIC",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "[OSI transport layer](https://wikipedia.org/wiki/Transport_layer) or [inter-process communication method](https://wikipedia.org/wiki/Inter-process_communication).\n",
          "examples": [
            "tcp",
            "udp"
          ],
          "requirement_level": "recommended",
          "note": "The value SHOULD be normalized to lowercase.\n\nConsider always setting the transport when setting a port number, since\na port number is ambiguous without knowing the transport. For example\ndifferent processes could be listening on TCP port 12345 and UDP port 12345.\n",
          "stability": "stable"
        },
        {
          "name": "network.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "ipv4",
                "value": "ipv4",
                "brief": "IPv4",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "ipv6",
                "value": "ipv6",
                "brief": "IPv6",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "[OSI network layer](https://wikipedia.org/wiki/Network_layer) or non-OSI equivalent.",
          "examples": [
            "ipv4",
            "ipv6"
          ],
          "requirement_level": "recommended",
          "note": "The value SHOULD be normalized to lowercase.",
          "stability": "stable"
        },
        {
          "name": "rpc.system",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "grpc",
                "value": "grpc",
                "brief": "gRPC",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "java_rmi",
                "value": "java_rmi",
                "brief": "Java RMI",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "dotnet_wcf",
                "value": "dotnet_wcf",
                "brief": ".NET WCF",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "apache_dubbo",
                "value": "apache_dubbo",
                "brief": "Apache Dubbo",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "connect_rpc",
                "value": "connect_rpc",
                "brief": "Connect RPC",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "A string identifying the remoting system. See below for a list of well-known identifiers.",
          "requirement_level": "required",
          "stability": "development"
        },
        {
          "name": "server.address",
          "type": "string",
          "brief": "RPC server [host name](https://grpc.github.io/grpc/core/md_doc_naming.html).\n",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "required",
          "note": "May contain server IP address, DNS name, or local socket name. When host component is an IP address, instrumentations SHOULD NOT do a reverse proxy lookup to obtain DNS name and SHOULD set `server.address` to the IP address provided in the host component.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": {
            "conditionally_required": "if the port is supported by the network transport used for communication."
          },
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "network.peer.port",
          "type": "int",
          "brief": "Peer port number of the network connection.",
          "examples": [
            65123
          ],
          "requirement_level": {
            "recommended": "If `network.peer.address` is set."
          },
          "stability": "stable"
        }
      ],
      "span_kind": "server",
      "events": [
        "rpc.message"
      ],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/rpc/spans.yaml",
        "attributes": {
          "client.address": {
            "source_group": "registry.client",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "client.port": {
            "source_group": "registry.client",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "network.peer.address": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "network.peer.port": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "network.transport": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "network.type": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "rpc.method": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "rpc.service": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "rpc.system": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "note",
              "requirement_level"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "rpc.grpc.attributes",
      "type": "attribute_group",
      "brief": "Tech-specific attributes for gRPC.",
      "stability": "development",
      "attributes": [
        {
          "name": "rpc.grpc.status_code",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "ok",
                "value": 0,
                "brief": "OK",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "cancelled",
                "value": 1,
                "brief": "CANCELLED",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "unknown",
                "value": 2,
                "brief": "UNKNOWN",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "invalid_argument",
                "value": 3,
                "brief": "INVALID_ARGUMENT",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "deadline_exceeded",
                "value": 4,
                "brief": "DEADLINE_EXCEEDED",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "not_found",
                "value": 5,
                "brief": "NOT_FOUND",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "already_exists",
                "value": 6,
                "brief": "ALREADY_EXISTS",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "permission_denied",
                "value": 7,
                "brief": "PERMISSION_DENIED",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "resource_exhausted",
                "value": 8,
                "brief": "RESOURCE_EXHAUSTED",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "failed_precondition",
                "value": 9,
                "brief": "FAILED_PRECONDITION",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "aborted",
                "value": 10,
                "brief": "ABORTED",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "out_of_range",
                "value": 11,
                "brief": "OUT_OF_RANGE",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "unimplemented",
                "value": 12,
                "brief": "UNIMPLEMENTED",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "internal",
                "value": 13,
                "brief": "INTERNAL",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "unavailable",
                "value": 14,
                "brief": "UNAVAILABLE",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "data_loss",
                "value": 15,
                "brief": "DATA_LOSS",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "unauthenticated",
                "value": 16,
                "brief": "UNAUTHENTICATED",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.",
          "requirement_level": "required",
          "stability": "development"
        },
        {
          "name": "rpc.grpc.request.metadata",
          "type": "template[string[]]",
          "brief": "gRPC request metadata, `<key>` being the normalized gRPC Metadata key (lowercase), the value being the metadata values.\n",
          "examples": [
            "rpc.grpc.request.metadata.my-custom-metadata-attribute=[\"1.2.3.4\", \"1.2.3.5\"]"
          ],
          "requirement_level": "opt_in",
          "note": "Instrumentations SHOULD require an explicit configuration of which metadata values are to be captured. Including all request metadata values can be a security risk - explicit configuration helps avoid leaking sensitive information.\n",
          "stability": "development"
        },
        {
          "name": "rpc.grpc.response.metadata",
          "type": "template[string[]]",
          "brief": "gRPC response metadata, `<key>` being the normalized gRPC Metadata key (lowercase), the value being the metadata values.\n",
          "examples": [
            "rpc.grpc.response.metadata.my-custom-metadata-attribute=[\"attribute_value\"]"
          ],
          "requirement_level": "opt_in",
          "note": "Instrumentations SHOULD require an explicit configuration of which metadata values are to be captured. Including all response metadata values can be a security risk - explicit configuration helps avoid leaking sensitive information.\n",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/rpc/spans.yaml",
        "attributes": {
          "rpc.grpc.request.metadata": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "rpc.grpc.response.metadata": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "rpc.grpc.status_code": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "rpc.jsonrpc.attributes",
      "type": "attribute_group",
      "brief": "Tech-specific attributes for [JSON RPC](https://www.jsonrpc.org/).",
      "stability": "development",
      "attributes": [
        {
          "name": "rpc.jsonrpc.error_message",
          "type": "string",
          "brief": "`error.message` property of response if it is an error response.",
          "examples": [
            "Parse error",
            "User already exists"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "rpc.jsonrpc.request_id",
          "type": "string",
          "brief": "`id` property of request or response. Since protocol allows id to be int, string, `null` or missing (for notifications), value is expected to be cast to string for simplicity. Use empty string in case of `null` value. Omit entirely if this is a notification.\n",
          "examples": [
            "10",
            "request-7",
            ""
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "rpc.jsonrpc.version",
          "type": "string",
          "brief": "Protocol version as in `jsonrpc` property of request/response. Since JSON-RPC 1.0 doesn't specify this, the value can be omitted.",
          "examples": [
            "2.0",
            "1.0"
          ],
          "requirement_level": {
            "conditionally_required": "If other than the default version (`1.0`)"
          },
          "stability": "development"
        },
        {
          "name": "rpc.jsonrpc.error_code",
          "type": "int",
          "brief": "`error.code` property of response if it is an error response.",
          "examples": [
            -32700,
            100
          ],
          "requirement_level": {
            "conditionally_required": "If response is not successful."
          },
          "stability": "development"
        },
        {
          "name": "rpc.method",
          "type": "string",
          "brief": "The name of the (logical) method being called, must be equal to the $method part in the span name.",
          "examples": "exampleMethod",
          "requirement_level": "required",
          "note": "This is always required for jsonrpc. See the note in the general RPC conventions for more information.\n",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/rpc/spans.yaml",
        "attributes": {
          "rpc.jsonrpc.error_code": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "rpc.jsonrpc.error_message": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "rpc.jsonrpc.request_id": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "rpc.jsonrpc.version": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "rpc.method": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "event.rpc.message",
      "type": "event",
      "brief": "Describes a message sent or received within the context of an RPC call.",
      "note": "In the lifetime of an RPC stream, an event for each message sent/received on client and server spans SHOULD be created. In case of unary calls only one sent and one received message will be recorded for both client and server spans.\n",
      "stability": "development",
      "attributes": [
        {
          "name": "rpc.message.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "sent",
                "value": "SENT",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "received",
                "value": "RECEIVED",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "Whether this is a received or sent message.",
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "rpc.message.id",
          "type": "int",
          "brief": "MUST be calculated as two different counters starting from `1` one for sent messages and one for received message.",
          "requirement_level": "recommended",
          "note": "This way we guarantee that the values will be consistent between different implementations.",
          "stability": "development"
        },
        {
          "name": "rpc.message.compressed_size",
          "type": "int",
          "brief": "Compressed size of the message in bytes.",
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "rpc.message.uncompressed_size",
          "type": "int",
          "brief": "Uncompressed size of the message in bytes.",
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": "rpc.message",
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/rpc/spans.yaml",
        "attributes": {
          "rpc.message.compressed_size": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "rpc.message.id": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "rpc.message.type": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "rpc.message.uncompressed_size": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "rpc.connect_rpc.attributes",
      "type": "attribute_group",
      "brief": "Tech-specific attributes for Connect RPC.",
      "stability": "development",
      "attributes": [
        {
          "name": "rpc.connect_rpc.error_code",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "cancelled",
                "value": "cancelled",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "unknown",
                "value": "unknown",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "invalid_argument",
                "value": "invalid_argument",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "deadline_exceeded",
                "value": "deadline_exceeded",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "not_found",
                "value": "not_found",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "already_exists",
                "value": "already_exists",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "permission_denied",
                "value": "permission_denied",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "resource_exhausted",
                "value": "resource_exhausted",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "failed_precondition",
                "value": "failed_precondition",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "aborted",
                "value": "aborted",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "out_of_range",
                "value": "out_of_range",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "unimplemented",
                "value": "unimplemented",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "internal",
                "value": "internal",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "unavailable",
                "value": "unavailable",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "data_loss",
                "value": "data_loss",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "unauthenticated",
                "value": "unauthenticated",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The [error codes](https://connectrpc.com//docs/protocol/#error-codes) of the Connect request. Error codes are always string values.",
          "requirement_level": {
            "conditionally_required": "If response is not successful and if error code available."
          },
          "stability": "development"
        },
        {
          "name": "rpc.connect_rpc.request.metadata",
          "type": "template[string[]]",
          "brief": "Connect request metadata, `<key>` being the normalized Connect Metadata key (lowercase), the value being the metadata values.\n",
          "examples": [
            "rpc.request.metadata.my-custom-metadata-attribute=[\"1.2.3.4\", \"1.2.3.5\"]"
          ],
          "requirement_level": "opt_in",
          "note": "Instrumentations SHOULD require an explicit configuration of which metadata values are to be captured. Including all request metadata values can be a security risk - explicit configuration helps avoid leaking sensitive information.\n",
          "stability": "development"
        },
        {
          "name": "rpc.connect_rpc.response.metadata",
          "type": "template[string[]]",
          "brief": "Connect response metadata, `<key>` being the normalized Connect Metadata key (lowercase), the value being the metadata values.\n",
          "examples": [
            "rpc.response.metadata.my-custom-metadata-attribute=[\"attribute_value\"]"
          ],
          "requirement_level": "opt_in",
          "note": "Instrumentations SHOULD require an explicit configuration of which metadata values are to be captured. Including all response metadata values can be a security risk - explicit configuration helps avoid leaking sensitive information.\n",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/rpc/spans.yaml",
        "attributes": {
          "rpc.connect_rpc.error_code": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "rpc.connect_rpc.request.metadata": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "rpc.connect_rpc.response.metadata": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.messaging.publish.duration",
      "type": "metric",
      "brief": "Deprecated. Use `messaging.client.operation.duration` instead.",
      "stability": "development",
      "deprecated": {
        "reason": "uncategorized",
        "note": "Replaced by `messaging.client.operation.duration`."
      },
      "attributes": [
        {
          "name": "server.port",
          "type": "int",
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": "recommended",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "server.address",
          "type": "string",
          "brief": "Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": {
            "conditionally_required": "If available."
          },
          "note": "Server domain name of the broker if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.\n",
          "stability": "stable"
        },
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "amqp:decode-error",
            "KAFKA_STORAGE_ERROR",
            "channel-error"
          ],
          "requirement_level": {
            "conditionally_required": "If and only if the messaging operation has failed."
          },
          "note": "The `error.type` SHOULD be predictable, and SHOULD have low cardinality.\n\nWhen `error.type` is set to a type (e.g., an exception type), its\ncanonical class name identifying the type within the artifact SHOULD be used.\n\nInstrumentations SHOULD document the list of errors they report.\n\nThe cardinality of `error.type` within one instrumentation library SHOULD be low.\nTelemetry consumers that aggregate data from multiple instrumentation libraries and applications\nshould be prepared for `error.type` to have high cardinality at query time when no\nadditional filters are applied.\n\nIf the operation has completed successfully, instrumentations SHOULD NOT set `error.type`.\n\nIf a specific domain defines its own set of error identifiers (such as HTTP or gRPC status codes),\nit's RECOMMENDED to:\n\n- Use a domain-specific attribute\n- Set `error.type` to capture all errors, regardless of whether they are defined within the domain-specific set or not.\n",
          "stability": "stable"
        },
        {
          "name": "messaging.operation.name",
          "type": "string",
          "brief": "The system-specific name of the messaging operation.\n",
          "examples": [
            "ack",
            "nack",
            "send"
          ],
          "requirement_level": "required",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "messaging.publish.duration",
      "instrument": "histogram",
      "unit": "s",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/messaging/deprecated/metrics-deprecated.yaml",
        "attributes": {
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ]
          },
          "messaging.operation.name": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "metric.messaging.receive.duration",
      "type": "metric",
      "brief": "Deprecated. Use `messaging.client.operation.duration` instead.",
      "stability": "development",
      "deprecated": {
        "reason": "uncategorized",
        "note": "Replaced by `messaging.client.operation.duration`."
      },
      "attributes": [
        {
          "name": "server.port",
          "type": "int",
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": "recommended",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "server.address",
          "type": "string",
          "brief": "Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": {
            "conditionally_required": "If available."
          },
          "note": "Server domain name of the broker if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.\n",
          "stability": "stable"
        },
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "amqp:decode-error",
            "KAFKA_STORAGE_ERROR",
            "channel-error"
          ],
          "requirement_level": {
            "conditionally_required": "If and only if the messaging operation has failed."
          },
          "note": "The `error.type` SHOULD be predictable, and SHOULD have low cardinality.\n\nWhen `error.type` is set to a type (e.g., an exception type), its\ncanonical class name identifying the type within the artifact SHOULD be used.\n\nInstrumentations SHOULD document the list of errors they report.\n\nThe cardinality of `error.type` within one instrumentation library SHOULD be low.\nTelemetry consumers that aggregate data from multiple instrumentation libraries and applications\nshould be prepared for `error.type` to have high cardinality at query time when no\nadditional filters are applied.\n\nIf the operation has completed successfully, instrumentations SHOULD NOT set `error.type`.\n\nIf a specific domain defines its own set of error identifiers (such as HTTP or gRPC status codes),\nit's RECOMMENDED to:\n\n- Use a domain-specific attribute\n- Set `error.type` to capture all errors, regardless of whether they are defined within the domain-specific set or not.\n",
          "stability": "stable"
        },
        {
          "name": "messaging.operation.name",
          "type": "string",
          "brief": "The system-specific name of the messaging operation.\n",
          "examples": [
            "ack",
            "nack",
            "send"
          ],
          "requirement_level": "required",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "messaging.receive.duration",
      "instrument": "histogram",
      "unit": "s",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/messaging/deprecated/metrics-deprecated.yaml",
        "attributes": {
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ]
          },
          "messaging.operation.name": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "metric.messaging.process.messages",
      "type": "metric",
      "brief": "Deprecated. Use `messaging.client.consumed.messages` instead.",
      "stability": "development",
      "deprecated": {
        "reason": "uncategorized",
        "note": "Replaced by `messaging.client.consumed.messages`."
      },
      "attributes": [
        {
          "name": "server.port",
          "type": "int",
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": "recommended",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "server.address",
          "type": "string",
          "brief": "Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": {
            "conditionally_required": "If available."
          },
          "note": "Server domain name of the broker if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.\n",
          "stability": "stable"
        },
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "amqp:decode-error",
            "KAFKA_STORAGE_ERROR",
            "channel-error"
          ],
          "requirement_level": {
            "conditionally_required": "If and only if the messaging operation has failed."
          },
          "note": "The `error.type` SHOULD be predictable, and SHOULD have low cardinality.\n\nWhen `error.type` is set to a type (e.g., an exception type), its\ncanonical class name identifying the type within the artifact SHOULD be used.\n\nInstrumentations SHOULD document the list of errors they report.\n\nThe cardinality of `error.type` within one instrumentation library SHOULD be low.\nTelemetry consumers that aggregate data from multiple instrumentation libraries and applications\nshould be prepared for `error.type` to have high cardinality at query time when no\nadditional filters are applied.\n\nIf the operation has completed successfully, instrumentations SHOULD NOT set `error.type`.\n\nIf a specific domain defines its own set of error identifiers (such as HTTP or gRPC status codes),\nit's RECOMMENDED to:\n\n- Use a domain-specific attribute\n- Set `error.type` to capture all errors, regardless of whether they are defined within the domain-specific set or not.\n",
          "stability": "stable"
        },
        {
          "name": "messaging.operation.name",
          "type": "string",
          "brief": "The system-specific name of the messaging operation.\n",
          "examples": [
            "ack",
            "nack",
            "send"
          ],
          "requirement_level": "required",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "messaging.process.messages",
      "instrument": "counter",
      "unit": "{message}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/messaging/deprecated/metrics-deprecated.yaml",
        "attributes": {
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ]
          },
          "messaging.operation.name": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "metric.messaging.publish.messages",
      "type": "metric",
      "brief": "Deprecated. Use `messaging.client.produced.messages` instead.",
      "stability": "development",
      "deprecated": {
        "reason": "uncategorized",
        "note": "Replaced by `messaging.client.produced.messages`."
      },
      "attributes": [
        {
          "name": "server.port",
          "type": "int",
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": "recommended",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "server.address",
          "type": "string",
          "brief": "Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": {
            "conditionally_required": "If available."
          },
          "note": "Server domain name of the broker if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.\n",
          "stability": "stable"
        },
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "amqp:decode-error",
            "KAFKA_STORAGE_ERROR",
            "channel-error"
          ],
          "requirement_level": {
            "conditionally_required": "If and only if the messaging operation has failed."
          },
          "note": "The `error.type` SHOULD be predictable, and SHOULD have low cardinality.\n\nWhen `error.type` is set to a type (e.g., an exception type), its\ncanonical class name identifying the type within the artifact SHOULD be used.\n\nInstrumentations SHOULD document the list of errors they report.\n\nThe cardinality of `error.type` within one instrumentation library SHOULD be low.\nTelemetry consumers that aggregate data from multiple instrumentation libraries and applications\nshould be prepared for `error.type` to have high cardinality at query time when no\nadditional filters are applied.\n\nIf the operation has completed successfully, instrumentations SHOULD NOT set `error.type`.\n\nIf a specific domain defines its own set of error identifiers (such as HTTP or gRPC status codes),\nit's RECOMMENDED to:\n\n- Use a domain-specific attribute\n- Set `error.type` to capture all errors, regardless of whether they are defined within the domain-specific set or not.\n",
          "stability": "stable"
        },
        {
          "name": "messaging.operation.name",
          "type": "string",
          "brief": "The system-specific name of the messaging operation.\n",
          "examples": [
            "ack",
            "nack",
            "send"
          ],
          "requirement_level": "required",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "messaging.publish.messages",
      "instrument": "counter",
      "unit": "{message}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/messaging/deprecated/metrics-deprecated.yaml",
        "attributes": {
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ]
          },
          "messaging.operation.name": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "metric.messaging.receive.messages",
      "type": "metric",
      "brief": "Deprecated. Use `messaging.client.consumed.messages` instead.",
      "stability": "development",
      "deprecated": {
        "reason": "uncategorized",
        "note": "Replaced by `messaging.client.consumed.messages`."
      },
      "attributes": [
        {
          "name": "server.port",
          "type": "int",
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": "recommended",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "server.address",
          "type": "string",
          "brief": "Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": {
            "conditionally_required": "If available."
          },
          "note": "Server domain name of the broker if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.\n",
          "stability": "stable"
        },
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "amqp:decode-error",
            "KAFKA_STORAGE_ERROR",
            "channel-error"
          ],
          "requirement_level": {
            "conditionally_required": "If and only if the messaging operation has failed."
          },
          "note": "The `error.type` SHOULD be predictable, and SHOULD have low cardinality.\n\nWhen `error.type` is set to a type (e.g., an exception type), its\ncanonical class name identifying the type within the artifact SHOULD be used.\n\nInstrumentations SHOULD document the list of errors they report.\n\nThe cardinality of `error.type` within one instrumentation library SHOULD be low.\nTelemetry consumers that aggregate data from multiple instrumentation libraries and applications\nshould be prepared for `error.type` to have high cardinality at query time when no\nadditional filters are applied.\n\nIf the operation has completed successfully, instrumentations SHOULD NOT set `error.type`.\n\nIf a specific domain defines its own set of error identifiers (such as HTTP or gRPC status codes),\nit's RECOMMENDED to:\n\n- Use a domain-specific attribute\n- Set `error.type` to capture all errors, regardless of whether they are defined within the domain-specific set or not.\n",
          "stability": "stable"
        },
        {
          "name": "messaging.operation.name",
          "type": "string",
          "brief": "The system-specific name of the messaging operation.\n",
          "examples": [
            "ack",
            "nack",
            "send"
          ],
          "requirement_level": "required",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "messaging.receive.messages",
      "instrument": "counter",
      "unit": "{message}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/messaging/deprecated/metrics-deprecated.yaml",
        "attributes": {
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ]
          },
          "messaging.operation.name": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "metric.messaging.client.published.messages",
      "type": "metric",
      "brief": "Deprecated. Use `messaging.client.sent.messages` instead.",
      "stability": "development",
      "deprecated": {
        "reason": "uncategorized",
        "note": "Replaced by `messaging.client.sent.messages`."
      },
      "attributes": [
        {
          "name": "server.port",
          "type": "int",
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": "recommended",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "server.address",
          "type": "string",
          "brief": "Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": {
            "conditionally_required": "If available."
          },
          "note": "Server domain name of the broker if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.\n",
          "stability": "stable"
        },
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "amqp:decode-error",
            "KAFKA_STORAGE_ERROR",
            "channel-error"
          ],
          "requirement_level": {
            "conditionally_required": "If and only if the messaging operation has failed."
          },
          "note": "The `error.type` SHOULD be predictable, and SHOULD have low cardinality.\n\nWhen `error.type` is set to a type (e.g., an exception type), its\ncanonical class name identifying the type within the artifact SHOULD be used.\n\nInstrumentations SHOULD document the list of errors they report.\n\nThe cardinality of `error.type` within one instrumentation library SHOULD be low.\nTelemetry consumers that aggregate data from multiple instrumentation libraries and applications\nshould be prepared for `error.type` to have high cardinality at query time when no\nadditional filters are applied.\n\nIf the operation has completed successfully, instrumentations SHOULD NOT set `error.type`.\n\nIf a specific domain defines its own set of error identifiers (such as HTTP or gRPC status codes),\nit's RECOMMENDED to:\n\n- Use a domain-specific attribute\n- Set `error.type` to capture all errors, regardless of whether they are defined within the domain-specific set or not.\n",
          "stability": "stable"
        },
        {
          "name": "messaging.destination.partition.id",
          "type": "string",
          "brief": "The identifier of the partition messages are sent to or received from, unique within the `messaging.destination.name`.\n",
          "examples": "1",
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "messaging.operation.name",
          "type": "string",
          "brief": "The system-specific name of the messaging operation.\n",
          "examples": [
            "ack",
            "nack",
            "send"
          ],
          "requirement_level": "required",
          "stability": "development"
        },
        {
          "name": "messaging.destination.name",
          "type": "string",
          "brief": "The message destination name",
          "examples": [
            "MyQueue",
            "MyTopic"
          ],
          "requirement_level": {
            "conditionally_required": "if and only if `messaging.destination.name` is known to have low cardinality. Otherwise, `messaging.destination.template` MAY be populated."
          },
          "note": "Destination name SHOULD uniquely identify a specific queue, topic or other entity within the broker. If\nthe broker doesn't have such notion, the destination name SHOULD uniquely identify the broker.\n",
          "stability": "development"
        },
        {
          "name": "messaging.destination.template",
          "type": "string",
          "brief": "Low cardinality representation of the messaging destination name",
          "examples": [
            "/customers/{customerId}"
          ],
          "requirement_level": {
            "conditionally_required": "if available."
          },
          "note": "Destination names could be constructed from templates. An example would be a destination name involving a user name or product id. Although the destination name in this case is of high cardinality, the underlying template is of low cardinality and can be effectively used for grouping and aggregation.\n",
          "stability": "development"
        },
        {
          "name": "messaging.system",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "activemq",
                "value": "activemq",
                "brief": "Apache ActiveMQ",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "aws_sqs",
                "value": "aws_sqs",
                "brief": "Amazon Simple Queue Service (SQS)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "eventgrid",
                "value": "eventgrid",
                "brief": "Azure Event Grid",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "eventhubs",
                "value": "eventhubs",
                "brief": "Azure Event Hubs",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "servicebus",
                "value": "servicebus",
                "brief": "Azure Service Bus",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "gcp_pubsub",
                "value": "gcp_pubsub",
                "brief": "Google Cloud Pub/Sub",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "jms",
                "value": "jms",
                "brief": "Java Message Service",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "kafka",
                "value": "kafka",
                "brief": "Apache Kafka",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "rabbitmq",
                "value": "rabbitmq",
                "brief": "RabbitMQ",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "rocketmq",
                "value": "rocketmq",
                "brief": "Apache RocketMQ",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "pulsar",
                "value": "pulsar",
                "brief": "Apache Pulsar",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The messaging system as identified by the client instrumentation.",
          "requirement_level": "required",
          "note": "The actual messaging system may differ from the one known by the client. For example, when using Kafka client libraries to communicate with Azure Event Hubs, the `messaging.system` is set to `kafka` based on the instrumentation's best knowledge.\n",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "messaging.client.published.messages",
      "instrument": "counter",
      "unit": "{message}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/messaging/deprecated/metrics-deprecated.yaml",
        "attributes": {
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ]
          },
          "messaging.destination.name": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "messaging.destination.partition.id": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "messaging.destination.template": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "messaging.operation.name": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "messaging.system": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "resource.process",
      "type": "resource",
      "brief": "An operating system process.\n",
      "stability": "development",
      "attributes": [
        {
          "name": "process.pid",
          "type": "int",
          "brief": "Process identifier (PID).\n",
          "examples": [
            1234
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "process.parent_pid",
          "type": "int",
          "brief": "Parent Process identifier (PPID).\n",
          "examples": [
            111
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "process.owner",
          "type": "string",
          "brief": "The username of the user that owns the process.\n",
          "examples": [
            "root"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "process.linux.cgroup",
          "type": "string",
          "brief": "The control group associated with the process.",
          "examples": [
            "1:name=systemd:/user.slice/user-1000.slice/session-3.scope",
            "0::/user.slice/user-1000.slice/user@1000.service/tmux-spawn-0267755b-4639-4a27-90ed-f19f88e53748.scope"
          ],
          "requirement_level": "recommended",
          "note": "Control groups (cgroups) are a kernel feature used to organize and manage process resources. This attribute provides the path(s) to the cgroup(s) associated with the process, which should match the contents of the [/proc/\\[PID\\]/cgroup](https://man7.org/linux/man-pages/man7/cgroups.7.html) file.\n",
          "stability": "development"
        },
        {
          "name": "process.executable.name",
          "type": "string",
          "brief": "The name of the process executable. On Linux based systems, this SHOULD be set to the base name of the target of `/proc/[pid]/exe`. On Windows, this SHOULD be set to the base name of `GetProcessImageFileNameW`.\n",
          "examples": [
            "otelcol"
          ],
          "requirement_level": {
            "conditionally_required": "See [Selecting process attributes](#selecting-process-attributes) for details."
          },
          "stability": "development"
        },
        {
          "name": "process.executable.path",
          "type": "string",
          "brief": "The full path to the process executable. On Linux based systems, can be set to the target of `proc/[pid]/exe`. On Windows, can be set to the result of `GetProcessImageFileNameW`.\n",
          "examples": [
            "/usr/bin/cmd/otelcol"
          ],
          "requirement_level": {
            "conditionally_required": "See [Selecting process attributes](#selecting-process-attributes) for details."
          },
          "stability": "development"
        },
        {
          "name": "process.command",
          "type": "string",
          "brief": "The command used to launch the process (i.e. the command name). On Linux based systems, can be set to the zeroth string in `proc/[pid]/cmdline`. On Windows, can be set to the first parameter extracted from `GetCommandLineW`.\n",
          "examples": [
            "cmd/otelcol"
          ],
          "requirement_level": {
            "conditionally_required": "See [Selecting process attributes](#selecting-process-attributes) for details."
          },
          "stability": "development"
        },
        {
          "name": "process.command_line",
          "type": "string",
          "brief": "The full command used to launch the process as a single string representing the full command. On Windows, can be set to the result of `GetCommandLineW`. Do not set this if you have to assemble it just for monitoring; use `process.command_args` instead.\n",
          "examples": [
            "C:\\cmd\\otecol --config=\"my directory\\config.yaml\""
          ],
          "requirement_level": {
            "conditionally_required": "See [Selecting process attributes](#selecting-process-attributes) for details."
          },
          "stability": "development"
        },
        {
          "name": "process.command_args",
          "type": "string[]",
          "brief": "All the command arguments (including the command/executable itself) as received by the process. On Linux-based systems (and some other Unixoid systems supporting procfs), can be set according to the list of null-delimited strings extracted from `proc/[pid]/cmdline`. For libc-based executables, this would be the full argv vector passed to `main`.\n",
          "examples": [
            [
              "cmd/otecol",
              "--config=config.yaml"
            ]
          ],
          "requirement_level": {
            "conditionally_required": "See [Selecting process attributes](#selecting-process-attributes) for details."
          },
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": "process",
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/process/resources.yaml",
        "attributes": {
          "process.command": {
            "source_group": "registry.process",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "process.command_args": {
            "source_group": "registry.process",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "process.command_line": {
            "source_group": "registry.process",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "process.executable.name": {
            "source_group": "registry.process",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "process.executable.path": {
            "source_group": "registry.process",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "process.linux.cgroup": {
            "source_group": "registry.process.linux",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "process.owner": {
            "source_group": "registry.process",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "process.parent_pid": {
            "source_group": "registry.process",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "process.pid": {
            "source_group": "registry.process",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "resource.process.runtime",
      "type": "resource",
      "brief": "The single (language) runtime instance which is monitored.\n",
      "stability": "development",
      "attributes": [
        {
          "name": "process.runtime.name",
          "type": "string",
          "brief": "The name of the runtime of this process.\n",
          "examples": [
            "OpenJDK Runtime Environment"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "process.runtime.version",
          "type": "string",
          "brief": "The version of the runtime of this process, as returned by the runtime without modification.\n",
          "examples": "14.0.2",
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "process.runtime.description",
          "type": "string",
          "brief": "An additional description about the runtime of the process, for example a specific vendor customization of the runtime environment.\n",
          "examples": "Eclipse OpenJ9 Eclipse OpenJ9 VM openj9-0.21.0",
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": "process.runtime",
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/process/resources.yaml",
        "attributes": {
          "process.runtime.description": {
            "source_group": "registry.process",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "process.runtime.name": {
            "source_group": "registry.process",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "process.runtime.version": {
            "source_group": "registry.process",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "opentracing",
      "type": "attribute_group",
      "brief": "This document defines semantic conventions for the OpenTracing Shim",
      "note": "These conventions are used by the OpenTracing Shim layer.\n",
      "attributes": [
        {
          "name": "opentracing.ref_type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "child_of",
                "value": "child_of",
                "brief": "The parent Span depends on the child Span in some capacity",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "follows_from",
                "value": "follows_from",
                "brief": "The parent Span doesn't depend in any way on the result of the child Span",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "Parent-child Reference type",
          "requirement_level": "recommended",
          "note": "The causal relationship between a child Span and a parent Span.\n",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/opentracing/common.yaml",
        "attributes": {
          "opentracing.ref_type": {
            "source_group": "registry.opentracing",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.hw.attributes",
      "type": "attribute_group",
      "brief": "Attributes for hardware metrics",
      "attributes": [
        {
          "name": "hw.name",
          "type": "string",
          "brief": "An easily-recognizable name for the hardware component\n",
          "examples": [
            "eth0"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "hw.parent",
          "type": "string",
          "brief": "Unique identifier of the parent component (typically the `hw.id` attribute of the enclosure, or disk controller)\n",
          "examples": [
            "dellStorage_perc_0"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "hw.id",
          "type": "string",
          "brief": "An identifier for the hardware component, unique within the monitored host\n",
          "examples": [
            "win32battery_battery_testsysa33_1"
          ],
          "requirement_level": "required",
          "stability": "development"
        },
        {
          "name": "hw.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "battery",
                "value": "battery",
                "brief": "Battery",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "cpu",
                "value": "cpu",
                "brief": "CPU",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "disk_controller",
                "value": "disk_controller",
                "brief": "Disk controller",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "enclosure",
                "value": "enclosure",
                "brief": "Enclosure",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "fan",
                "value": "fan",
                "brief": "Fan",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "gpu",
                "value": "gpu",
                "brief": "GPU",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "logical_disk",
                "value": "logical_disk",
                "brief": "Logical disk",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "memory",
                "value": "memory",
                "brief": "Memory",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "network",
                "value": "network",
                "brief": "Network",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "physical_disk",
                "value": "physical_disk",
                "brief": "Physical disk",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "power_supply",
                "value": "power_supply",
                "brief": "Power supply",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "tape_drive",
                "value": "tape_drive",
                "brief": "Tape drive",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "temperature",
                "value": "temperature",
                "brief": "Temperature",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "voltage",
                "value": "voltage",
                "brief": "Voltage",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "Type of the component\n",
          "requirement_level": "required",
          "note": "Describes the category of the hardware component for which `hw.state` is being reported. For example, `hw.type=temperature` along with `hw.state=degraded` would indicate that the temperature of the hardware component has been reported as `degraded`.\n",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/hardware/common-metrics.yaml",
        "attributes": {
          "hw.id": {
            "source_group": "registry.hardware",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "hw.name": {
            "source_group": "registry.hardware",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "hw.parent": {
            "source_group": "registry.hardware",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "hw.type": {
            "source_group": "registry.hardware",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.hw.energy",
      "type": "metric",
      "brief": "Energy consumed by the component",
      "stability": "development",
      "attributes": [
        {
          "name": "hw.name",
          "type": "string",
          "brief": "An easily-recognizable name for the hardware component\n",
          "examples": [
            "eth0"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "hw.parent",
          "type": "string",
          "brief": "Unique identifier of the parent component (typically the `hw.id` attribute of the enclosure, or disk controller)\n",
          "examples": [
            "dellStorage_perc_0"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "hw.id",
          "type": "string",
          "brief": "An identifier for the hardware component, unique within the monitored host\n",
          "examples": [
            "win32battery_battery_testsysa33_1"
          ],
          "requirement_level": "required",
          "stability": "development"
        },
        {
          "name": "hw.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "battery",
                "value": "battery",
                "brief": "Battery",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "cpu",
                "value": "cpu",
                "brief": "CPU",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "disk_controller",
                "value": "disk_controller",
                "brief": "Disk controller",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "enclosure",
                "value": "enclosure",
                "brief": "Enclosure",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "fan",
                "value": "fan",
                "brief": "Fan",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "gpu",
                "value": "gpu",
                "brief": "GPU",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "logical_disk",
                "value": "logical_disk",
                "brief": "Logical disk",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "memory",
                "value": "memory",
                "brief": "Memory",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "network",
                "value": "network",
                "brief": "Network",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "physical_disk",
                "value": "physical_disk",
                "brief": "Physical disk",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "power_supply",
                "value": "power_supply",
                "brief": "Power supply",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "tape_drive",
                "value": "tape_drive",
                "brief": "Tape drive",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "temperature",
                "value": "temperature",
                "brief": "Temperature",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "voltage",
                "value": "voltage",
                "brief": "Voltage",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "Type of the component\n",
          "requirement_level": "required",
          "note": "Describes the category of the hardware component for which `hw.state` is being reported. For example, `hw.type=temperature` along with `hw.state=degraded` would indicate that the temperature of the hardware component has been reported as `degraded`.\n",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "hw.energy",
      "instrument": "counter",
      "unit": "J",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/hardware/common-metrics.yaml",
        "attributes": {
          "hw.id": {
            "source_group": "registry.hardware",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "hw.name": {
            "source_group": "registry.hardware",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "hw.parent": {
            "source_group": "registry.hardware",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "hw.type": {
            "source_group": "registry.hardware",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.hw.errors",
      "type": "metric",
      "brief": "Number of errors encountered by the component",
      "stability": "development",
      "attributes": [
        {
          "name": "hw.name",
          "type": "string",
          "brief": "An easily-recognizable name for the hardware component\n",
          "examples": [
            "eth0"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "hw.parent",
          "type": "string",
          "brief": "Unique identifier of the parent component (typically the `hw.id` attribute of the enclosure, or disk controller)\n",
          "examples": [
            "dellStorage_perc_0"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "hw.id",
          "type": "string",
          "brief": "An identifier for the hardware component, unique within the monitored host\n",
          "examples": [
            "win32battery_battery_testsysa33_1"
          ],
          "requirement_level": "required",
          "stability": "development"
        },
        {
          "name": "hw.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "battery",
                "value": "battery",
                "brief": "Battery",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "cpu",
                "value": "cpu",
                "brief": "CPU",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "disk_controller",
                "value": "disk_controller",
                "brief": "Disk controller",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "enclosure",
                "value": "enclosure",
                "brief": "Enclosure",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "fan",
                "value": "fan",
                "brief": "Fan",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "gpu",
                "value": "gpu",
                "brief": "GPU",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "logical_disk",
                "value": "logical_disk",
                "brief": "Logical disk",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "memory",
                "value": "memory",
                "brief": "Memory",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "network",
                "value": "network",
                "brief": "Network",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "physical_disk",
                "value": "physical_disk",
                "brief": "Physical disk",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "power_supply",
                "value": "power_supply",
                "brief": "Power supply",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "tape_drive",
                "value": "tape_drive",
                "brief": "Tape drive",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "temperature",
                "value": "temperature",
                "brief": "Temperature",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "voltage",
                "value": "voltage",
                "brief": "Voltage",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "Type of the component\n",
          "requirement_level": "required",
          "note": "Describes the category of the hardware component for which `hw.state` is being reported. For example, `hw.type=temperature` along with `hw.state=degraded` would indicate that the temperature of the hardware component has been reported as `degraded`.\n",
          "stability": "development"
        },
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "The type of error encountered by the component",
          "examples": [
            "uncorrected",
            "zero_buffer_credit",
            "crc",
            "bad_sector"
          ],
          "requirement_level": {
            "conditionally_required": "if and only if an error has occurred"
          },
          "note": "The `error.type` SHOULD match the error code reported by the component, the canonical name of the error, or another low-cardinality error identifier. Instrumentations SHOULD document the list of errors they report.\n",
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "hw.errors",
      "instrument": "counter",
      "unit": "{error}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/hardware/common-metrics.yaml",
        "attributes": {
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level"
            ]
          },
          "hw.id": {
            "source_group": "registry.hardware",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "hw.name": {
            "source_group": "registry.hardware",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "hw.parent": {
            "source_group": "registry.hardware",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "hw.type": {
            "source_group": "registry.hardware",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.hw.power",
      "type": "metric",
      "brief": "Instantaneous power consumed by the component",
      "note": "It is recommended to report `hw.energy` instead of `hw.power` when possible.\n",
      "stability": "development",
      "attributes": [
        {
          "name": "hw.name",
          "type": "string",
          "brief": "An easily-recognizable name for the hardware component\n",
          "examples": [
            "eth0"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "hw.parent",
          "type": "string",
          "brief": "Unique identifier of the parent component (typically the `hw.id` attribute of the enclosure, or disk controller)\n",
          "examples": [
            "dellStorage_perc_0"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "hw.id",
          "type": "string",
          "brief": "An identifier for the hardware component, unique within the monitored host\n",
          "examples": [
            "win32battery_battery_testsysa33_1"
          ],
          "requirement_level": "required",
          "stability": "development"
        },
        {
          "name": "hw.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "battery",
                "value": "battery",
                "brief": "Battery",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "cpu",
                "value": "cpu",
                "brief": "CPU",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "disk_controller",
                "value": "disk_controller",
                "brief": "Disk controller",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "enclosure",
                "value": "enclosure",
                "brief": "Enclosure",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "fan",
                "value": "fan",
                "brief": "Fan",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "gpu",
                "value": "gpu",
                "brief": "GPU",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "logical_disk",
                "value": "logical_disk",
                "brief": "Logical disk",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "memory",
                "value": "memory",
                "brief": "Memory",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "network",
                "value": "network",
                "brief": "Network",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "physical_disk",
                "value": "physical_disk",
                "brief": "Physical disk",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "power_supply",
                "value": "power_supply",
                "brief": "Power supply",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "tape_drive",
                "value": "tape_drive",
                "brief": "Tape drive",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "temperature",
                "value": "temperature",
                "brief": "Temperature",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "voltage",
                "value": "voltage",
                "brief": "Voltage",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "Type of the component\n",
          "requirement_level": "required",
          "note": "Describes the category of the hardware component for which `hw.state` is being reported. For example, `hw.type=temperature` along with `hw.state=degraded` would indicate that the temperature of the hardware component has been reported as `degraded`.\n",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "hw.power",
      "instrument": "gauge",
      "unit": "W",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/hardware/common-metrics.yaml",
        "attributes": {
          "hw.id": {
            "source_group": "registry.hardware",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "hw.name": {
            "source_group": "registry.hardware",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "hw.parent": {
            "source_group": "registry.hardware",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "hw.type": {
            "source_group": "registry.hardware",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.hw.status",
      "type": "metric",
      "brief": "Operational status: `1` (true) or `0` (false) for each of the possible states",
      "note": "`hw.status` is currently specified as an *UpDownCounter* but would ideally be represented using a [*StateSet* as defined in OpenMetrics](https://github.com/prometheus/OpenMetrics/blob/v1.0.0/specification/OpenMetrics.md#stateset). This semantic convention will be updated once *StateSet* is specified in OpenTelemetry. This planned change is not expected to have any consequence on the way users query their timeseries backend to retrieve the values of `hw.status` over time.\n",
      "stability": "development",
      "attributes": [
        {
          "name": "hw.name",
          "type": "string",
          "brief": "An easily-recognizable name for the hardware component\n",
          "examples": [
            "eth0"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "hw.parent",
          "type": "string",
          "brief": "Unique identifier of the parent component (typically the `hw.id` attribute of the enclosure, or disk controller)\n",
          "examples": [
            "dellStorage_perc_0"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "hw.id",
          "type": "string",
          "brief": "An identifier for the hardware component, unique within the monitored host\n",
          "examples": [
            "win32battery_battery_testsysa33_1"
          ],
          "requirement_level": "required",
          "stability": "development"
        },
        {
          "name": "hw.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "battery",
                "value": "battery",
                "brief": "Battery",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "cpu",
                "value": "cpu",
                "brief": "CPU",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "disk_controller",
                "value": "disk_controller",
                "brief": "Disk controller",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "enclosure",
                "value": "enclosure",
                "brief": "Enclosure",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "fan",
                "value": "fan",
                "brief": "Fan",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "gpu",
                "value": "gpu",
                "brief": "GPU",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "logical_disk",
                "value": "logical_disk",
                "brief": "Logical disk",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "memory",
                "value": "memory",
                "brief": "Memory",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "network",
                "value": "network",
                "brief": "Network",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "physical_disk",
                "value": "physical_disk",
                "brief": "Physical disk",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "power_supply",
                "value": "power_supply",
                "brief": "Power supply",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "tape_drive",
                "value": "tape_drive",
                "brief": "Tape drive",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "temperature",
                "value": "temperature",
                "brief": "Temperature",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "voltage",
                "value": "voltage",
                "brief": "Voltage",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "Type of the component\n",
          "requirement_level": "required",
          "note": "Describes the category of the hardware component for which `hw.state` is being reported. For example, `hw.type=temperature` along with `hw.state=degraded` would indicate that the temperature of the hardware component has been reported as `degraded`.\n",
          "stability": "development"
        },
        {
          "name": "hw.state",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "ok",
                "value": "ok",
                "brief": "Ok",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "degraded",
                "value": "degraded",
                "brief": "Degraded",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "failed",
                "value": "failed",
                "brief": "Failed",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The current state of the component\n",
          "requirement_level": "required",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "hw.status",
      "instrument": "updowncounter",
      "unit": "1",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/hardware/common-metrics.yaml",
        "attributes": {
          "hw.id": {
            "source_group": "registry.hardware",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "hw.name": {
            "source_group": "registry.hardware",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "hw.parent": {
            "source_group": "registry.hardware",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "hw.state": {
            "source_group": "registry.hardware",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "hw.type": {
            "source_group": "registry.hardware",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "registry.go",
      "type": "attribute_group",
      "brief": "This document defines Go related attributes.\n",
      "attributes": [
        {
          "name": "go.memory.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "stack",
                "value": "stack",
                "brief": "Memory allocated from the heap that is reserved for stack space, whether or not it is currently in-use.",
                "note": "Computed from `/memory/classes/heap/stacks:bytes`.\n",
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "other",
                "value": "other",
                "brief": "Memory used by the Go runtime, excluding other categories of memory usage described in this enumeration.",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The type of memory.",
          "examples": [
            "other",
            "stack"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/go/registry.yaml"
      },
      "display_name": "Go Attributes"
    },
    {
      "id": "registry.test",
      "type": "attribute_group",
      "brief": "This group describes attributes specific to [software tests](https://wikipedia.org/wiki/Software_testing).\n",
      "attributes": [
        {
          "name": "test.suite.name",
          "type": "string",
          "brief": "The human readable name of a [test suite](https://wikipedia.org/wiki/Test_suite).\n",
          "examples": [
            "TestSuite1"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "test.suite.run.status",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "success",
                "value": "success",
                "brief": "success",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "failure",
                "value": "failure",
                "brief": "failure",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "skipped",
                "value": "skipped",
                "brief": "skipped",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "aborted",
                "value": "aborted",
                "brief": "aborted",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "timed_out",
                "value": "timed_out",
                "brief": "timed_out",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "in_progress",
                "value": "in_progress",
                "brief": "in_progress",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The status of the test suite run.\n",
          "examples": [
            "success",
            "failure",
            "skipped",
            "aborted",
            "timed_out",
            "in_progress"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "test.case.name",
          "type": "string",
          "brief": "The fully qualified human readable name of the [test case](https://wikipedia.org/wiki/Test_case).\n",
          "examples": [
            "org.example.TestCase1.test1",
            "example/tests/TestCase1.test1",
            "ExampleTestCase1_test1"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "test.case.result.status",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "pass",
                "value": "pass",
                "brief": "pass",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "fail",
                "value": "fail",
                "brief": "fail",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The status of the actual test case result from test execution.\n",
          "examples": [
            "pass",
            "fail"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/test/registry.yaml"
      },
      "display_name": "Test Attributes"
    },
    {
      "id": "registry.user_agent",
      "type": "attribute_group",
      "brief": "Describes user-agent attributes.",
      "attributes": [
        {
          "name": "user_agent.original",
          "type": "string",
          "brief": "Value of the [HTTP User-Agent](https://www.rfc-editor.org/rfc/rfc9110.html#field.user-agent) header sent by the client.\n",
          "examples": [
            "CERN-LineMode/2.15 libwww/2.17b3",
            "Mozilla/5.0 (iPhone; CPU iPhone OS 14_7_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.1.2 Mobile/15E148 Safari/604.1",
            "YourApp/1.0.0 grpc-java-okhttp/1.27.2"
          ],
          "requirement_level": "recommended",
          "stability": "stable"
        },
        {
          "name": "user_agent.name",
          "type": "string",
          "brief": "Name of the user-agent extracted from original. Usually refers to the browser's name.\n",
          "examples": [
            "Safari",
            "YourApp"
          ],
          "requirement_level": "recommended",
          "note": "[Example](https://www.whatsmyua.info) of extracting browser's name from original string. In the case of using a user-agent for non-browser products, such as microservices with multiple names/versions inside the `user_agent.original`, the most significant name SHOULD be selected. In such a scenario it should align with `user_agent.version`\n",
          "stability": "development"
        },
        {
          "name": "user_agent.version",
          "type": "string",
          "brief": "Version of the user-agent extracted from original. Usually refers to the browser's version\n",
          "examples": [
            "14.1.2",
            "1.0.0"
          ],
          "requirement_level": "recommended",
          "note": "[Example](https://www.whatsmyua.info) of extracting browser's version from original string. In the case of using a user-agent for non-browser products, such as microservices with multiple names/versions inside the `user_agent.original`, the most significant version SHOULD be selected. In such a scenario it should align with `user_agent.name`\n",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/user-agent/registry.yaml"
      },
      "display_name": "User-agent Attributes"
    },
    {
      "id": "registry.user_agent.os",
      "type": "attribute_group",
      "brief": "Describes the OS user-agent attributes.",
      "attributes": [
        {
          "name": "user_agent.os.name",
          "type": "string",
          "brief": "Human readable operating system name.",
          "examples": [
            "iOS",
            "Android",
            "Ubuntu"
          ],
          "requirement_level": "recommended",
          "note": "For mapping user agent strings to OS names, libraries such as [ua-parser](https://github.com/ua-parser) can be utilized.\n",
          "stability": "development"
        },
        {
          "name": "user_agent.os.version",
          "type": "string",
          "brief": "The version string of the operating system as defined in [Version Attributes](/docs/resource/README.md#version-attributes).\n",
          "examples": [
            "14.2.1",
            "18.04.1"
          ],
          "requirement_level": "recommended",
          "note": "For mapping user agent strings to OS versions, libraries such as [ua-parser](https://github.com/ua-parser) can be utilized.\n",
          "stability": "development"
        },
        {
          "name": "user_agent.synthetic.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "bot",
                "value": "bot",
                "brief": "Bot source.",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "test",
                "value": "test",
                "brief": "Synthetic test source.",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "Specifies the category of synthetic traffic, such as tests or bots.\n",
          "requirement_level": "recommended",
          "note": "This attribute MAY be derived from the contents of the `user_agent.original` attribute. Components that populate the attribute are responsible for determining what they consider to be synthetic bot or test traffic. This attribute can either be set for self-identification purposes, or on telemetry detected to be generated as a result of a synthetic request. This attribute is useful for distinguishing between genuine client traffic and synthetic traffic generated by bots or tests.\n",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/user-agent/registry.yaml"
      },
      "display_name": "User-agent OS Attributes"
    },
    {
      "id": "registry.enduser.deprecated",
      "type": "attribute_group",
      "brief": "Describes deprecated enduser attributes.",
      "attributes": [
        {
          "name": "enduser.role",
          "type": "string",
          "brief": "Deprecated, use `user.roles` instead.",
          "examples": "admin",
          "requirement_level": "recommended",
          "stability": "development",
          "deprecated": {
            "reason": "uncategorized",
            "note": "Replaced by `user.roles` attribute."
          }
        },
        {
          "name": "enduser.scope",
          "type": "string",
          "brief": "Deprecated, no replacement at this time.",
          "examples": "read:message, write:files",
          "requirement_level": "recommended",
          "stability": "development",
          "deprecated": {
            "reason": "uncategorized",
            "note": "Removed."
          }
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/enduser/deprecated/registry-deprecated.yaml"
      },
      "display_name": "Deprecated End User Attributes"
    },
    {
      "id": "source",
      "type": "attribute_group",
      "brief": "General source attributes.\n",
      "attributes": [
        {
          "name": "source.address",
          "type": "string",
          "brief": "Source address - domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "source.example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "recommended",
          "note": "When observed from the destination side, and when communicating through an intermediary, `source.address` SHOULD represent the source address behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "development"
        },
        {
          "name": "source.port",
          "type": "int",
          "brief": "Source port number",
          "examples": [
            3389,
            2888
          ],
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/source/common.yaml",
        "attributes": {
          "source.address": {
            "source_group": "registry.source",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "source.port": {
            "source_group": "registry.source",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "metric.faas.invoke_duration",
      "type": "metric",
      "brief": "Measures the duration of the function's logic execution",
      "stability": "development",
      "attributes": [
        {
          "name": "faas.trigger",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "datasource",
                "value": "datasource",
                "brief": "A response to some data source operation such as a database or filesystem read/write",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "http",
                "value": "http",
                "brief": "To provide an answer to an inbound HTTP request",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "pubsub",
                "value": "pubsub",
                "brief": "A function is set to be executed when messages are sent to a messaging system",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "timer",
                "value": "timer",
                "brief": "A function is scheduled to be executed regularly",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "other",
                "value": "other",
                "brief": "If none of the others apply",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "Type of the trigger which caused this function invocation.\n",
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "faas.invoke_duration",
      "instrument": "histogram",
      "unit": "s",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/faas/metrics.yaml",
        "attributes": {
          "faas.trigger": {
            "source_group": "registry.faas",
            "inherited_fields": [
              "brief",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "metric.faas.init_duration",
      "type": "metric",
      "brief": "Measures the duration of the function's initialization, such as a cold start",
      "stability": "development",
      "attributes": [
        {
          "name": "faas.trigger",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "datasource",
                "value": "datasource",
                "brief": "A response to some data source operation such as a database or filesystem read/write",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "http",
                "value": "http",
                "brief": "To provide an answer to an inbound HTTP request",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "pubsub",
                "value": "pubsub",
                "brief": "A function is set to be executed when messages are sent to a messaging system",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "timer",
                "value": "timer",
                "brief": "A function is scheduled to be executed regularly",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "other",
                "value": "other",
                "brief": "If none of the others apply",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "Type of the trigger which caused this function invocation.\n",
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "faas.init_duration",
      "instrument": "histogram",
      "unit": "s",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/faas/metrics.yaml",
        "attributes": {
          "faas.trigger": {
            "source_group": "registry.faas",
            "inherited_fields": [
              "brief",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "metric.faas.coldstarts",
      "type": "metric",
      "brief": "Number of invocation cold starts",
      "stability": "development",
      "attributes": [
        {
          "name": "faas.trigger",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "datasource",
                "value": "datasource",
                "brief": "A response to some data source operation such as a database or filesystem read/write",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "http",
                "value": "http",
                "brief": "To provide an answer to an inbound HTTP request",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "pubsub",
                "value": "pubsub",
                "brief": "A function is set to be executed when messages are sent to a messaging system",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "timer",
                "value": "timer",
                "brief": "A function is scheduled to be executed regularly",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "other",
                "value": "other",
                "brief": "If none of the others apply",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "Type of the trigger which caused this function invocation.\n",
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "faas.coldstarts",
      "instrument": "counter",
      "unit": "{coldstart}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/faas/metrics.yaml",
        "attributes": {
          "faas.trigger": {
            "source_group": "registry.faas",
            "inherited_fields": [
              "brief",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "metric.faas.errors",
      "type": "metric",
      "brief": "Number of invocation errors",
      "stability": "development",
      "attributes": [
        {
          "name": "faas.trigger",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "datasource",
                "value": "datasource",
                "brief": "A response to some data source operation such as a database or filesystem read/write",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "http",
                "value": "http",
                "brief": "To provide an answer to an inbound HTTP request",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "pubsub",
                "value": "pubsub",
                "brief": "A function is set to be executed when messages are sent to a messaging system",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "timer",
                "value": "timer",
                "brief": "A function is scheduled to be executed regularly",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "other",
                "value": "other",
                "brief": "If none of the others apply",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "Type of the trigger which caused this function invocation.\n",
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "faas.errors",
      "instrument": "counter",
      "unit": "{error}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/faas/metrics.yaml",
        "attributes": {
          "faas.trigger": {
            "source_group": "registry.faas",
            "inherited_fields": [
              "brief",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "metric.faas.invocations",
      "type": "metric",
      "brief": "Number of successful invocations",
      "stability": "development",
      "attributes": [
        {
          "name": "faas.trigger",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "datasource",
                "value": "datasource",
                "brief": "A response to some data source operation such as a database or filesystem read/write",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "http",
                "value": "http",
                "brief": "To provide an answer to an inbound HTTP request",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "pubsub",
                "value": "pubsub",
                "brief": "A function is set to be executed when messages are sent to a messaging system",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "timer",
                "value": "timer",
                "brief": "A function is scheduled to be executed regularly",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "other",
                "value": "other",
                "brief": "If none of the others apply",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "Type of the trigger which caused this function invocation.\n",
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "faas.invocations",
      "instrument": "counter",
      "unit": "{invocation}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/faas/metrics.yaml",
        "attributes": {
          "faas.trigger": {
            "source_group": "registry.faas",
            "inherited_fields": [
              "brief",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "metric.faas.timeouts",
      "type": "metric",
      "brief": "Number of invocation timeouts",
      "stability": "development",
      "attributes": [
        {
          "name": "faas.trigger",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "datasource",
                "value": "datasource",
                "brief": "A response to some data source operation such as a database or filesystem read/write",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "http",
                "value": "http",
                "brief": "To provide an answer to an inbound HTTP request",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "pubsub",
                "value": "pubsub",
                "brief": "A function is set to be executed when messages are sent to a messaging system",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "timer",
                "value": "timer",
                "brief": "A function is scheduled to be executed regularly",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "other",
                "value": "other",
                "brief": "If none of the others apply",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "Type of the trigger which caused this function invocation.\n",
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "faas.timeouts",
      "instrument": "counter",
      "unit": "{timeout}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/faas/metrics.yaml",
        "attributes": {
          "faas.trigger": {
            "source_group": "registry.faas",
            "inherited_fields": [
              "brief",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "metric.faas.mem_usage",
      "type": "metric",
      "brief": "Distribution of max memory usage per invocation",
      "stability": "development",
      "attributes": [
        {
          "name": "faas.trigger",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "datasource",
                "value": "datasource",
                "brief": "A response to some data source operation such as a database or filesystem read/write",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "http",
                "value": "http",
                "brief": "To provide an answer to an inbound HTTP request",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "pubsub",
                "value": "pubsub",
                "brief": "A function is set to be executed when messages are sent to a messaging system",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "timer",
                "value": "timer",
                "brief": "A function is scheduled to be executed regularly",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "other",
                "value": "other",
                "brief": "If none of the others apply",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "Type of the trigger which caused this function invocation.\n",
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "faas.mem_usage",
      "instrument": "histogram",
      "unit": "By",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/faas/metrics.yaml",
        "attributes": {
          "faas.trigger": {
            "source_group": "registry.faas",
            "inherited_fields": [
              "brief",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "metric.faas.cpu_usage",
      "type": "metric",
      "brief": "Distribution of CPU usage per invocation",
      "stability": "development",
      "attributes": [
        {
          "name": "faas.trigger",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "datasource",
                "value": "datasource",
                "brief": "A response to some data source operation such as a database or filesystem read/write",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "http",
                "value": "http",
                "brief": "To provide an answer to an inbound HTTP request",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "pubsub",
                "value": "pubsub",
                "brief": "A function is set to be executed when messages are sent to a messaging system",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "timer",
                "value": "timer",
                "brief": "A function is scheduled to be executed regularly",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "other",
                "value": "other",
                "brief": "If none of the others apply",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "Type of the trigger which caused this function invocation.\n",
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "faas.cpu_usage",
      "instrument": "histogram",
      "unit": "s",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/faas/metrics.yaml",
        "attributes": {
          "faas.trigger": {
            "source_group": "registry.faas",
            "inherited_fields": [
              "brief",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "metric.faas.net_io",
      "type": "metric",
      "brief": "Distribution of net I/O usage per invocation",
      "stability": "development",
      "attributes": [
        {
          "name": "faas.trigger",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "datasource",
                "value": "datasource",
                "brief": "A response to some data source operation such as a database or filesystem read/write",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "http",
                "value": "http",
                "brief": "To provide an answer to an inbound HTTP request",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "pubsub",
                "value": "pubsub",
                "brief": "A function is set to be executed when messages are sent to a messaging system",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "timer",
                "value": "timer",
                "brief": "A function is scheduled to be executed regularly",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "other",
                "value": "other",
                "brief": "If none of the others apply",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "Type of the trigger which caused this function invocation.\n",
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "faas.net_io",
      "instrument": "histogram",
      "unit": "By",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/faas/metrics.yaml",
        "attributes": {
          "faas.trigger": {
            "source_group": "registry.faas",
            "inherited_fields": [
              "brief",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "attributes.jvm.memory",
      "type": "attribute_group",
      "brief": "Describes JVM memory metric attributes.",
      "attributes": [
        {
          "name": "jvm.memory.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "heap",
                "value": "heap",
                "brief": "Heap memory.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "non_heap",
                "value": "non_heap",
                "brief": "Non-heap memory",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "The type of memory.",
          "examples": [
            "heap",
            "non_heap"
          ],
          "requirement_level": "recommended",
          "stability": "stable"
        },
        {
          "name": "jvm.memory.pool.name",
          "type": "string",
          "brief": "Name of the memory pool.",
          "examples": [
            "G1 Old Gen",
            "G1 Eden space",
            "G1 Survivor Space"
          ],
          "requirement_level": "recommended",
          "note": "Pool names are generally obtained via [MemoryPoolMXBean#getName()](https://docs.oracle.com/en/java/javase/11/docs/api/java.management/java/lang/management/MemoryPoolMXBean.html#getName()).\n",
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/jvm/metrics.yaml",
        "attributes": {
          "jvm.memory.pool.name": {
            "source_group": "registry.jvm",
            "inherited_fields": [
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "requirement_level"
            ]
          },
          "jvm.memory.type": {
            "source_group": "registry.jvm",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.jvm.memory.used",
      "type": "metric",
      "brief": "Measure of memory used.",
      "stability": "stable",
      "attributes": [
        {
          "name": "jvm.memory.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "heap",
                "value": "heap",
                "brief": "Heap memory.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "non_heap",
                "value": "non_heap",
                "brief": "Non-heap memory",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "The type of memory.",
          "examples": [
            "heap",
            "non_heap"
          ],
          "requirement_level": "recommended",
          "stability": "stable"
        },
        {
          "name": "jvm.memory.pool.name",
          "type": "string",
          "brief": "Name of the memory pool.",
          "examples": [
            "G1 Old Gen",
            "G1 Eden space",
            "G1 Survivor Space"
          ],
          "requirement_level": "recommended",
          "note": "Pool names are generally obtained via [MemoryPoolMXBean#getName()](https://docs.oracle.com/en/java/javase/11/docs/api/java.management/java/lang/management/MemoryPoolMXBean.html#getName()).\n",
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "jvm.memory.used",
      "instrument": "updowncounter",
      "unit": "By",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/jvm/metrics.yaml",
        "attributes": {
          "jvm.memory.pool.name": {
            "source_group": "registry.jvm",
            "inherited_fields": [
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "requirement_level"
            ]
          },
          "jvm.memory.type": {
            "source_group": "registry.jvm",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.jvm.memory.committed",
      "type": "metric",
      "brief": "Measure of memory committed.",
      "stability": "stable",
      "attributes": [
        {
          "name": "jvm.memory.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "heap",
                "value": "heap",
                "brief": "Heap memory.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "non_heap",
                "value": "non_heap",
                "brief": "Non-heap memory",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "The type of memory.",
          "examples": [
            "heap",
            "non_heap"
          ],
          "requirement_level": "recommended",
          "stability": "stable"
        },
        {
          "name": "jvm.memory.pool.name",
          "type": "string",
          "brief": "Name of the memory pool.",
          "examples": [
            "G1 Old Gen",
            "G1 Eden space",
            "G1 Survivor Space"
          ],
          "requirement_level": "recommended",
          "note": "Pool names are generally obtained via [MemoryPoolMXBean#getName()](https://docs.oracle.com/en/java/javase/11/docs/api/java.management/java/lang/management/MemoryPoolMXBean.html#getName()).\n",
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "jvm.memory.committed",
      "instrument": "updowncounter",
      "unit": "By",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/jvm/metrics.yaml",
        "attributes": {
          "jvm.memory.pool.name": {
            "source_group": "registry.jvm",
            "inherited_fields": [
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "requirement_level"
            ]
          },
          "jvm.memory.type": {
            "source_group": "registry.jvm",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.jvm.memory.limit",
      "type": "metric",
      "brief": "Measure of max obtainable memory.",
      "stability": "stable",
      "attributes": [
        {
          "name": "jvm.memory.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "heap",
                "value": "heap",
                "brief": "Heap memory.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "non_heap",
                "value": "non_heap",
                "brief": "Non-heap memory",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "The type of memory.",
          "examples": [
            "heap",
            "non_heap"
          ],
          "requirement_level": "recommended",
          "stability": "stable"
        },
        {
          "name": "jvm.memory.pool.name",
          "type": "string",
          "brief": "Name of the memory pool.",
          "examples": [
            "G1 Old Gen",
            "G1 Eden space",
            "G1 Survivor Space"
          ],
          "requirement_level": "recommended",
          "note": "Pool names are generally obtained via [MemoryPoolMXBean#getName()](https://docs.oracle.com/en/java/javase/11/docs/api/java.management/java/lang/management/MemoryPoolMXBean.html#getName()).\n",
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "jvm.memory.limit",
      "instrument": "updowncounter",
      "unit": "By",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/jvm/metrics.yaml",
        "attributes": {
          "jvm.memory.pool.name": {
            "source_group": "registry.jvm",
            "inherited_fields": [
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "requirement_level"
            ]
          },
          "jvm.memory.type": {
            "source_group": "registry.jvm",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.jvm.memory.used_after_last_gc",
      "type": "metric",
      "brief": "Measure of memory used, as measured after the most recent garbage collection event on this pool.",
      "stability": "stable",
      "attributes": [
        {
          "name": "jvm.memory.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "heap",
                "value": "heap",
                "brief": "Heap memory.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "non_heap",
                "value": "non_heap",
                "brief": "Non-heap memory",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "The type of memory.",
          "examples": [
            "heap",
            "non_heap"
          ],
          "requirement_level": "recommended",
          "stability": "stable"
        },
        {
          "name": "jvm.memory.pool.name",
          "type": "string",
          "brief": "Name of the memory pool.",
          "examples": [
            "G1 Old Gen",
            "G1 Eden space",
            "G1 Survivor Space"
          ],
          "requirement_level": "recommended",
          "note": "Pool names are generally obtained via [MemoryPoolMXBean#getName()](https://docs.oracle.com/en/java/javase/11/docs/api/java.management/java/lang/management/MemoryPoolMXBean.html#getName()).\n",
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "jvm.memory.used_after_last_gc",
      "instrument": "updowncounter",
      "unit": "By",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/jvm/metrics.yaml",
        "attributes": {
          "jvm.memory.pool.name": {
            "source_group": "registry.jvm",
            "inherited_fields": [
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "requirement_level"
            ]
          },
          "jvm.memory.type": {
            "source_group": "registry.jvm",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.jvm.gc.duration",
      "type": "metric",
      "brief": "Duration of JVM garbage collection actions.",
      "stability": "stable",
      "attributes": [
        {
          "name": "jvm.gc.action",
          "type": "string",
          "brief": "Name of the garbage collector action.",
          "examples": [
            "end of minor GC",
            "end of major GC"
          ],
          "requirement_level": "recommended",
          "note": "Garbage collector action is generally obtained via [GarbageCollectionNotificationInfo#getGcAction()](https://docs.oracle.com/en/java/javase/11/docs/api/jdk.management/com/sun/management/GarbageCollectionNotificationInfo.html#getGcAction()).\n",
          "stability": "stable"
        },
        {
          "name": "jvm.gc.name",
          "type": "string",
          "brief": "Name of the garbage collector.",
          "examples": [
            "G1 Young Generation",
            "G1 Old Generation"
          ],
          "requirement_level": "recommended",
          "note": "Garbage collector name is generally obtained via [GarbageCollectionNotificationInfo#getGcName()](https://docs.oracle.com/en/java/javase/11/docs/api/jdk.management/com/sun/management/GarbageCollectionNotificationInfo.html#getGcName()).\n",
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "jvm.gc.duration",
      "instrument": "histogram",
      "unit": "s",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/jvm/metrics.yaml",
        "attributes": {
          "jvm.gc.action": {
            "source_group": "registry.jvm",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "jvm.gc.name": {
            "source_group": "registry.jvm",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.jvm.thread.count",
      "type": "metric",
      "brief": "Number of executing platform threads.",
      "stability": "stable",
      "attributes": [
        {
          "name": "jvm.thread.daemon",
          "type": "boolean",
          "brief": "Whether the thread is daemon or not.",
          "requirement_level": "recommended",
          "stability": "stable"
        },
        {
          "name": "jvm.thread.state",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "new",
                "value": "new",
                "brief": "A thread that has not yet started is in this state.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "runnable",
                "value": "runnable",
                "brief": "A thread executing in the Java virtual machine is in this state.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "blocked",
                "value": "blocked",
                "brief": "A thread that is blocked waiting for a monitor lock is in this state.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "waiting",
                "value": "waiting",
                "brief": "A thread that is waiting indefinitely for another thread to perform a particular action is in this state.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "timed_waiting",
                "value": "timed_waiting",
                "brief": "A thread that is waiting for another thread to perform an action for up to a specified waiting time is in this state.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "terminated",
                "value": "terminated",
                "brief": "A thread that has exited is in this state.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "State of the thread.",
          "examples": [
            "runnable",
            "blocked"
          ],
          "requirement_level": "recommended",
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "jvm.thread.count",
      "instrument": "updowncounter",
      "unit": "{thread}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/jvm/metrics.yaml",
        "attributes": {
          "jvm.thread.daemon": {
            "source_group": "registry.jvm",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "jvm.thread.state": {
            "source_group": "registry.jvm",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.jvm.class.loaded",
      "type": "metric",
      "brief": "Number of classes loaded since JVM start.",
      "stability": "stable",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "jvm.class.loaded",
      "instrument": "counter",
      "unit": "{class}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/jvm/metrics.yaml"
      }
    },
    {
      "id": "metric.jvm.class.unloaded",
      "type": "metric",
      "brief": "Number of classes unloaded since JVM start.",
      "stability": "stable",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "jvm.class.unloaded",
      "instrument": "counter",
      "unit": "{class}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/jvm/metrics.yaml"
      }
    },
    {
      "id": "metric.jvm.class.count",
      "type": "metric",
      "brief": "Number of classes currently loaded.",
      "stability": "stable",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "jvm.class.count",
      "instrument": "updowncounter",
      "unit": "{class}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/jvm/metrics.yaml"
      }
    },
    {
      "id": "metric.jvm.cpu.count",
      "type": "metric",
      "brief": "Number of processors available to the Java virtual machine.",
      "stability": "stable",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "jvm.cpu.count",
      "instrument": "updowncounter",
      "unit": "{cpu}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/jvm/metrics.yaml"
      }
    },
    {
      "id": "metric.jvm.cpu.time",
      "type": "metric",
      "brief": "CPU time used by the process as reported by the JVM.",
      "stability": "stable",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "jvm.cpu.time",
      "instrument": "counter",
      "unit": "s",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/jvm/metrics.yaml"
      }
    },
    {
      "id": "metric.jvm.cpu.recent_utilization",
      "type": "metric",
      "brief": "Recent CPU utilization for the process as reported by the JVM.",
      "note": "The value range is [0.0,1.0]. This utilization is not defined as being for the specific interval since last measurement (unlike `system.cpu.utilization`). [Reference](https://docs.oracle.com/en/java/javase/17/docs/api/jdk.management/com/sun/management/OperatingSystemMXBean.html#getProcessCpuLoad()).\n",
      "stability": "stable",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "jvm.cpu.recent_utilization",
      "instrument": "gauge",
      "unit": "1",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/jvm/metrics.yaml"
      }
    },
    {
      "id": "registry.otel",
      "type": "attribute_group",
      "brief": "Attributes reserved for OpenTelemetry",
      "attributes": [
        {
          "name": "otel.status_code",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "ok",
                "value": "OK",
                "brief": "The operation has been validated by an Application developer or Operator to have completed successfully.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "error",
                "value": "ERROR",
                "brief": "The operation contains an error.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Name of the code, either \"OK\" or \"ERROR\". MUST NOT be set if the status code is UNSET.",
          "requirement_level": "recommended",
          "stability": "stable"
        },
        {
          "name": "otel.status_description",
          "type": "string",
          "brief": "Description of the Status if it has a value, otherwise not set.",
          "examples": [
            "resource not found"
          ],
          "requirement_level": "recommended",
          "stability": "stable"
        },
        {
          "name": "otel.span.sampling_result",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "drop",
                "value": "DROP",
                "brief": "The span is not sampled and not recording",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "record_only",
                "value": "RECORD_ONLY",
                "brief": "The span is not sampled, but recording",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "record_and_sample",
                "value": "RECORD_AND_SAMPLE",
                "brief": "The span is sampled and recording",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The result value of the sampler for this span",
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/otel/registry.yaml"
      },
      "display_name": "OTel Attributes"
    },
    {
      "id": "registry.otel.scope",
      "type": "attribute_group",
      "brief": "Attributes used by non-OTLP exporters to represent OpenTelemetry Scope's concepts.",
      "attributes": [
        {
          "name": "otel.scope.name",
          "type": "string",
          "brief": "The name of the instrumentation scope - (`InstrumentationScope.Name` in OTLP).",
          "examples": [
            "io.opentelemetry.contrib.mongodb"
          ],
          "requirement_level": "recommended",
          "stability": "stable"
        },
        {
          "name": "otel.scope.version",
          "type": "string",
          "brief": "The version of the instrumentation scope - (`InstrumentationScope.Version` in OTLP).",
          "examples": [
            "1.0.0"
          ],
          "requirement_level": "recommended",
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/otel/registry.yaml"
      },
      "display_name": "OTel Scope Attributes"
    },
    {
      "id": "registry.otel.component",
      "type": "attribute_group",
      "brief": "Attributes used for OpenTelemetry component self-monitoring",
      "attributes": [
        {
          "name": "otel.component.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "batching_span_processor",
                "value": "batching_span_processor",
                "brief": "The builtin SDK Batching Span Processor\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "simple_span_processor",
                "value": "simple_span_processor",
                "brief": "The builtin SDK Simple Span Processor\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "otlp_grpc_span_exporter",
                "value": "otlp_grpc_span_exporter",
                "brief": "OTLP span exporter over gRPC with protobuf serialization\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "otlp_http_span_exporter",
                "value": "otlp_http_span_exporter",
                "brief": "OTLP span exporter over HTTP with protobuf serialization\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "otlp_http_json_span_exporter",
                "value": "otlp_http_json_span_exporter",
                "brief": "OTLP span exporter over HTTP with JSON serialization\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "A name identifying the type of the OpenTelemetry component.\n",
          "examples": [
            "batching_span_processor",
            "com.example.MySpanExporter"
          ],
          "requirement_level": "recommended",
          "note": "If none of the standardized values apply, implementations SHOULD use the language-defined name of the type.\nE.g. for Java the fully qualified classname SHOULD be used in this case.\n",
          "stability": "development"
        },
        {
          "name": "otel.component.name",
          "type": "string",
          "brief": "A name uniquely identifying the instance of the OpenTelemetry component within its containing SDK instance.\n",
          "examples": [
            "otlp_grpc_span_exporter/0",
            "custom-name"
          ],
          "requirement_level": "recommended",
          "note": "Implementations SHOULD ensure a low cardinality for this attribute, even across application or SDK restarts.\nE.g. implementations MUST NOT use UUIDs as values for this attribute.\n\nImplementations MAY achieve these goals by following a `<otel.component.type>/<instance-counter>` pattern, e.g. `batching_span_processor/0`.\nHereby `otel.component.type` refers to the corresponding attribute value of the component.\n\nThe value of `instance-counter` MAY be automatically assigned by the component and uniqueness within the enclosing SDK instance MUST be guaranteed.\nFor example, `<instance-counter>` MAY be implemented by using a monotonically increasing counter (starting with `0`), which is incremented every time an\ninstance of the given component type is started.\n\nWith this implementation, for example the first Batching Span Processor would have `batching_span_processor/0`\nas `otel.component.name`, the second one `batching_span_processor/1` and so on.\nThese values will therefore be reused in the case of an application restart.\n",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/otel/registry.yaml"
      },
      "display_name": "OTel Component Attributes"
    },
    {
      "id": "registry.exception.deprecated",
      "type": "attribute_group",
      "brief": "Deprecated exception attributes.\n",
      "attributes": [
        {
          "name": "exception.escaped",
          "type": "boolean",
          "brief": "Indicates that the exception is escaping the scope of the span.\n",
          "requirement_level": "recommended",
          "stability": "stable",
          "deprecated": {
            "reason": "uncategorized",
            "note": "It's no longer recommended to record exceptions that are handled and do not escape the scope of a span."
          }
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/exceptions/deprecated/registry-deprecated.yaml"
      },
      "display_name": "Deprecated Exception Attributes"
    },
    {
      "id": "metric.system.cpu.time",
      "type": "metric",
      "brief": "Deprecated. Use `cpu.time` instead.",
      "stability": "development",
      "deprecated": {
        "reason": "uncategorized",
        "note": "Replaced by `cpu.time`."
      },
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "system.cpu.time",
      "instrument": "counter",
      "unit": "s",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/system/deprecated/metrics-deprecated.yaml"
      }
    },
    {
      "id": "metric.system.cpu.utilization",
      "type": "metric",
      "brief": "Deprecated. Use `cpu.utilization` instead.",
      "stability": "development",
      "deprecated": {
        "reason": "uncategorized",
        "note": "Replaced by `cpu.utilization`."
      },
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "system.cpu.utilization",
      "instrument": "gauge",
      "unit": "1",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/system/deprecated/metrics-deprecated.yaml"
      }
    },
    {
      "id": "metric.system.cpu.frequency",
      "type": "metric",
      "brief": "Deprecated. Use `cpu.frequency` instead.",
      "stability": "development",
      "deprecated": {
        "reason": "uncategorized",
        "note": "Replaced by `cpu.frequency`."
      },
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "system.cpu.frequency",
      "instrument": "gauge",
      "unit": "{Hz}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/system/deprecated/metrics-deprecated.yaml"
      }
    },
    {
      "id": "registry.tls",
      "type": "attribute_group",
      "brief": "This document defines semantic convention attributes in the TLS namespace.",
      "attributes": [
        {
          "name": "tls.cipher",
          "type": "string",
          "brief": "String indicating the [cipher](https://datatracker.ietf.org/doc/html/rfc5246#appendix-A.5) used during the current connection.\n",
          "examples": [
            "TLS_RSA_WITH_3DES_EDE_CBC_SHA",
            "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256"
          ],
          "requirement_level": "recommended",
          "note": "The values allowed for `tls.cipher` MUST be one of the `Descriptions` of the [registered TLS Cipher Suits](https://www.iana.org/assignments/tls-parameters/tls-parameters.xhtml#table-tls-parameters-4).\n",
          "stability": "development"
        },
        {
          "name": "tls.client.certificate",
          "type": "string",
          "brief": "PEM-encoded stand-alone certificate offered by the client. This is usually mutually-exclusive of `client.certificate_chain` since this value also exists in that list.\n",
          "examples": [
            "MII..."
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "tls.client.certificate_chain",
          "type": "string[]",
          "brief": "Array of PEM-encoded certificates that make up the certificate chain offered by the client. This is usually mutually-exclusive of `client.certificate` since that value should be the first certificate in the chain.\n",
          "examples": [
            [
              "MII...",
              "MI..."
            ]
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "tls.client.hash.md5",
          "type": "string",
          "brief": "Certificate fingerprint using the MD5 digest of DER-encoded version of certificate offered by the client. For consistency with other hash values, this value should be formatted as an uppercase hash.\n",
          "examples": [
            "0F76C7F2C55BFD7D8E8B8F4BFBF0C9EC"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "tls.client.hash.sha1",
          "type": "string",
          "brief": "Certificate fingerprint using the SHA1 digest of DER-encoded version of certificate offered by the client. For consistency with other hash values, this value should be formatted as an uppercase hash.\n",
          "examples": [
            "9E393D93138888D288266C2D915214D1D1CCEB2A"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "tls.client.hash.sha256",
          "type": "string",
          "brief": "Certificate fingerprint using the SHA256 digest of DER-encoded version of certificate offered by the client. For consistency with other hash values, this value should be formatted as an uppercase hash.\n",
          "examples": [
            "0687F666A054EF17A08E2F2162EAB4CBC0D265E1D7875BE74BF3C712CA92DAF0"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "tls.client.issuer",
          "type": "string",
          "brief": "Distinguished name of [subject](https://datatracker.ietf.org/doc/html/rfc5280#section-4.1.2.6) of the issuer of the x.509 certificate presented by the client.",
          "examples": [
            "CN=Example Root CA, OU=Infrastructure Team, DC=example, DC=com"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "tls.client.ja3",
          "type": "string",
          "brief": "A hash that identifies clients based on how they perform an SSL/TLS handshake.",
          "examples": [
            "d4e5b18d6b55c71272893221c96ba240"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "tls.client.not_after",
          "type": "string",
          "brief": "Date/Time indicating when client certificate is no longer considered valid.",
          "examples": [
            "2021-01-01T00:00:00.000Z"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "tls.client.not_before",
          "type": "string",
          "brief": "Date/Time indicating when client certificate is first considered valid.",
          "examples": [
            "1970-01-01T00:00:00.000Z"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "tls.client.subject",
          "type": "string",
          "brief": "Distinguished name of subject of the x.509 certificate presented by the client.",
          "examples": [
            "CN=myclient, OU=Documentation Team, DC=example, DC=com"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "tls.client.supported_ciphers",
          "type": "string[]",
          "brief": "Array of ciphers offered by the client during the client hello.",
          "examples": [
            [
              "TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384",
              "TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384"
            ]
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "tls.curve",
          "type": "string",
          "brief": "String indicating the curve used for the given cipher, when applicable",
          "examples": [
            "secp256r1"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "tls.established",
          "type": "boolean",
          "brief": "Boolean flag indicating if the TLS negotiation was successful and transitioned to an encrypted tunnel.",
          "examples": [
            true
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "tls.next_protocol",
          "type": "string",
          "brief": "String indicating the protocol being tunneled. Per the values in the [IANA registry](https://www.iana.org/assignments/tls-extensiontype-values/tls-extensiontype-values.xhtml#alpn-protocol-ids), this string should be lower case.\n",
          "examples": [
            "http/1.1"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "tls.protocol.name",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "ssl",
                "value": "ssl",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "tls",
                "value": "tls",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "Normalized lowercase protocol name parsed from original string of the negotiated [SSL/TLS protocol version](https://docs.openssl.org/1.1.1/man3/SSL_get_version/#return-values)\n",
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "tls.protocol.version",
          "type": "string",
          "brief": "Numeric part of the version parsed from the original string of the negotiated [SSL/TLS protocol version](https://docs.openssl.org/1.1.1/man3/SSL_get_version/#return-values)\n",
          "examples": [
            "1.2",
            "3"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "tls.resumed",
          "type": "boolean",
          "brief": "Boolean flag indicating if this TLS connection was resumed from an existing TLS negotiation.",
          "examples": [
            true
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "tls.server.certificate",
          "type": "string",
          "brief": "PEM-encoded stand-alone certificate offered by the server. This is usually mutually-exclusive of `server.certificate_chain` since this value also exists in that list.\n",
          "examples": [
            "MII..."
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "tls.server.certificate_chain",
          "type": "string[]",
          "brief": "Array of PEM-encoded certificates that make up the certificate chain offered by the server. This is usually mutually-exclusive of `server.certificate` since that value should be the first certificate in the chain.\n",
          "examples": [
            [
              "MII...",
              "MI..."
            ]
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "tls.server.hash.md5",
          "type": "string",
          "brief": "Certificate fingerprint using the MD5 digest of DER-encoded version of certificate offered by the server. For consistency with other hash values, this value should be formatted as an uppercase hash.\n",
          "examples": [
            "0F76C7F2C55BFD7D8E8B8F4BFBF0C9EC"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "tls.server.hash.sha1",
          "type": "string",
          "brief": "Certificate fingerprint using the SHA1 digest of DER-encoded version of certificate offered by the server. For consistency with other hash values, this value should be formatted as an uppercase hash.\n",
          "examples": [
            "9E393D93138888D288266C2D915214D1D1CCEB2A"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "tls.server.hash.sha256",
          "type": "string",
          "brief": "Certificate fingerprint using the SHA256 digest of DER-encoded version of certificate offered by the server. For consistency with other hash values, this value should be formatted as an uppercase hash.\n",
          "examples": [
            "0687F666A054EF17A08E2F2162EAB4CBC0D265E1D7875BE74BF3C712CA92DAF0"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "tls.server.issuer",
          "type": "string",
          "brief": "Distinguished name of [subject](https://datatracker.ietf.org/doc/html/rfc5280#section-4.1.2.6) of the issuer of the x.509 certificate presented by the client.",
          "examples": [
            "CN=Example Root CA, OU=Infrastructure Team, DC=example, DC=com"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "tls.server.ja3s",
          "type": "string",
          "brief": "A hash that identifies servers based on how they perform an SSL/TLS handshake.",
          "examples": [
            "d4e5b18d6b55c71272893221c96ba240"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "tls.server.not_after",
          "type": "string",
          "brief": "Date/Time indicating when server certificate is no longer considered valid.",
          "examples": [
            "2021-01-01T00:00:00.000Z"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "tls.server.not_before",
          "type": "string",
          "brief": "Date/Time indicating when server certificate is first considered valid.",
          "examples": [
            "1970-01-01T00:00:00.000Z"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "tls.server.subject",
          "type": "string",
          "brief": "Distinguished name of subject of the x.509 certificate presented by the server.",
          "examples": [
            "CN=myserver, OU=Documentation Team, DC=example, DC=com"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/tls/registry.yaml"
      },
      "display_name": "TLS Attributes"
    },
    {
      "id": "registry.android",
      "type": "attribute_group",
      "brief": "The Android platform on which the Android application is running.\n",
      "attributes": [
        {
          "name": "android.os.api_level",
          "type": "string",
          "brief": "Uniquely identifies the framework API revision offered by a version (`os.version`) of the android operating system. More information can be found [here](https://developer.android.com/guide/topics/manifest/uses-sdk-element#ApiLevels).\n",
          "examples": [
            "33",
            "32"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "android.app.state",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "created",
                "value": "created",
                "brief": "Any time before Activity.onResume() or, if the app has no Activity, Context.startService() has been called in the app for the first time.\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "background",
                "value": "background",
                "brief": "Any time after Activity.onPause() or, if the app has no Activity, Context.stopService() has been called when the app was in the foreground state.\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "foreground",
                "value": "foreground",
                "brief": "Any time after Activity.onResume() or, if the app has no Activity, Context.startService() has been called when the app was in either the created or background states.\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "This attribute represents the state of the application.\n",
          "examples": [
            "created"
          ],
          "requirement_level": "recommended",
          "note": "The Android lifecycle states are defined in [Activity lifecycle callbacks](https://developer.android.com/guide/components/activities/activity-lifecycle#lc), and from which the `OS identifiers` are derived.\n",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/android/registry.yaml"
      },
      "display_name": "Android Attributes"
    },
    {
      "id": "registry.disk",
      "type": "attribute_group",
      "brief": "These attributes may be used for any disk related operation.\n",
      "attributes": [
        {
          "name": "disk.io.direction",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "read",
                "value": "read",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "write",
                "value": "write",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The disk IO operation direction.",
          "examples": [
            "read"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/disk/registry.yaml"
      },
      "display_name": "Disk Attributes"
    },
    {
      "id": "resource.os",
      "type": "resource",
      "brief": "The operating system (OS) on which the process represented by this resource is running.\n",
      "note": "In case of virtualized environments, this is the operating system as it is observed by the process, i.e., the virtualized guest rather than the underlying host.\n",
      "stability": "development",
      "attributes": [
        {
          "name": "os.description",
          "type": "string",
          "brief": "Human readable (not intended to be parsed) OS version information, like e.g. reported by `ver` or `lsb_release -a` commands.\n",
          "examples": [
            "Microsoft Windows [Version 10.0.18363.778]",
            "Ubuntu 18.04.1 LTS"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "os.name",
          "type": "string",
          "brief": "Human readable operating system name.",
          "examples": [
            "iOS",
            "Android",
            "Ubuntu"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "os.version",
          "type": "string",
          "brief": "The version string of the operating system as defined in [Version Attributes](/docs/resource/README.md#version-attributes).\n",
          "examples": [
            "14.2.1",
            "18.04.1"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "os.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "windows",
                "value": "windows",
                "brief": "Microsoft Windows",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "linux",
                "value": "linux",
                "brief": "Linux",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "darwin",
                "value": "darwin",
                "brief": "Apple Darwin",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "freebsd",
                "value": "freebsd",
                "brief": "FreeBSD",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "netbsd",
                "value": "netbsd",
                "brief": "NetBSD",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "openbsd",
                "value": "openbsd",
                "brief": "OpenBSD",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "dragonflybsd",
                "value": "dragonflybsd",
                "brief": "DragonFly BSD",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "hpux",
                "value": "hpux",
                "brief": "HP-UX (Hewlett Packard Unix)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "aix",
                "value": "aix",
                "brief": "AIX (Advanced Interactive eXecutive)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "solaris",
                "value": "solaris",
                "brief": "SunOS, Oracle Solaris",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "z_os",
                "value": "z_os",
                "brief": "IBM z/OS",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The operating system type.\n",
          "requirement_level": "required",
          "stability": "development"
        },
        {
          "name": "os.build_id",
          "type": "string",
          "brief": "Unique identifier for a particular build or compilation of the operating system.",
          "examples": [
            "TQ3C.230805.001.B2",
            "20E247",
            "22621"
          ],
          "requirement_level": "recommended",
          "note": "`build_id` values SHOULD be obtained from the following sources:\n\n| OS | Primary | Fallback |\n| ------- | ------- | ------- |\n| Windows | `CurrentBuildNumber` from registry `HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion` | - |\n| MacOS | `ProductBuildVersion` from `/System/Library/CoreServices/SystemVersion.plist` | `ProductBuildVersion` from `/System/Library/CoreServices/ServerVersion.plist` |\n| Linux | `BUILD_ID` from `/etc/os-release` | `BUILD_ID` from `/usr/lib/os-release`; <br> contents of `/proc/sys/kernel/osrelease`|\n",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": "os",
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/os/resources.yaml",
        "attributes": {
          "os.build_id": {
            "source_group": "registry.os",
            "inherited_fields": [
              "brief",
              "examples",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "note"
            ]
          },
          "os.description": {
            "source_group": "registry.os",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "os.name": {
            "source_group": "registry.os",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "os.type": {
            "source_group": "registry.os",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "os.version": {
            "source_group": "registry.os",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "registry.aws",
      "type": "attribute_group",
      "brief": "This section defines generic attributes for AWS services.\n",
      "attributes": [
        {
          "name": "aws.request_id",
          "type": "string",
          "brief": "The AWS request ID as returned in the response headers `x-amzn-requestid`, `x-amzn-request-id` or `x-amz-request-id`.",
          "examples": [
            "79b9da39-b7ae-508a-a6bc-864b2829c622",
            "C9ER4AJX75574TDJ"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "aws.extended_request_id",
          "type": "string",
          "brief": "The AWS extended request ID as returned in the response header `x-amz-id-2`.",
          "examples": [
            "wzHcyEWfmOGDIE5QOhTAqFDoDWP3y8IUvpNINCwL9N4TEHbUw0/gZJ+VZTmCNCWR7fezEN3eCiQ="
          ],
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/aws/registry.yaml"
      },
      "display_name": "General AWS Attributes"
    },
    {
      "id": "registry.aws.dynamodb",
      "type": "attribute_group",
      "brief": "This document defines attributes for AWS DynamoDB.\n",
      "attributes": [
        {
          "name": "aws.dynamodb.table_names",
          "type": "string[]",
          "brief": "The keys in the `RequestItems` object field.",
          "examples": [
            [
              "Users",
              "Cats"
            ]
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "aws.dynamodb.consumed_capacity",
          "type": "string[]",
          "brief": "The JSON-serialized value of each item in the `ConsumedCapacity` response field.",
          "examples": [
            [
              "{ \"CapacityUnits\": number, \"GlobalSecondaryIndexes\": { \"string\" : { \"CapacityUnits\": number, \"ReadCapacityUnits\": number, \"WriteCapacityUnits\": number } }, \"LocalSecondaryIndexes\": { \"string\" : { \"CapacityUnits\": number, \"ReadCapacityUnits\": number, \"WriteCapacityUnits\": number } }, \"ReadCapacityUnits\": number, \"Table\": { \"CapacityUnits\": number, \"ReadCapacityUnits\": number, \"WriteCapacityUnits\": number }, \"TableName\": \"string\", \"WriteCapacityUnits\": number }"
            ]
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "aws.dynamodb.item_collection_metrics",
          "type": "string",
          "brief": "The JSON-serialized value of the `ItemCollectionMetrics` response field.",
          "examples": [
            "{ \"string\" : [ { \"ItemCollectionKey\": { \"string\" : { \"B\": blob, \"BOOL\": boolean, \"BS\": [ blob ], \"L\": [ \"AttributeValue\" ], \"M\": { \"string\" : \"AttributeValue\" }, \"N\": \"string\", \"NS\": [ \"string\" ], \"NULL\": boolean, \"S\": \"string\", \"SS\": [ \"string\" ] } }, \"SizeEstimateRangeGB\": [ number ] } ] }"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "aws.dynamodb.provisioned_read_capacity",
          "type": "double",
          "brief": "The value of the `ProvisionedThroughput.ReadCapacityUnits` request parameter.",
          "examples": [
            1.0,
            2.0
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "aws.dynamodb.provisioned_write_capacity",
          "type": "double",
          "brief": "The value of the `ProvisionedThroughput.WriteCapacityUnits` request parameter.",
          "examples": [
            1.0,
            2.0
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "aws.dynamodb.consistent_read",
          "type": "boolean",
          "brief": "The value of the `ConsistentRead` request parameter.",
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "aws.dynamodb.projection",
          "type": "string",
          "brief": "The value of the `ProjectionExpression` request parameter.",
          "examples": [
            "Title",
            "Title, Price, Color",
            "Title, Description, RelatedItems, ProductReviews"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "aws.dynamodb.limit",
          "type": "int",
          "brief": "The value of the `Limit` request parameter.",
          "examples": [
            10
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "aws.dynamodb.attributes_to_get",
          "type": "string[]",
          "brief": "The value of the `AttributesToGet` request parameter.",
          "examples": [
            [
              "lives",
              "id"
            ]
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "aws.dynamodb.index_name",
          "type": "string",
          "brief": "The value of the `IndexName` request parameter.",
          "examples": [
            "name_to_group"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "aws.dynamodb.select",
          "type": "string",
          "brief": "The value of the `Select` request parameter.",
          "examples": [
            "ALL_ATTRIBUTES",
            "COUNT"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "aws.dynamodb.global_secondary_indexes",
          "type": "string[]",
          "brief": "The JSON-serialized value of each item of the `GlobalSecondaryIndexes` request field",
          "examples": [
            [
              "{ \"IndexName\": \"string\", \"KeySchema\": [ { \"AttributeName\": \"string\", \"KeyType\": \"string\" } ], \"Projection\": { \"NonKeyAttributes\": [ \"string\" ], \"ProjectionType\": \"string\" }, \"ProvisionedThroughput\": { \"ReadCapacityUnits\": number, \"WriteCapacityUnits\": number } }"
            ]
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "aws.dynamodb.local_secondary_indexes",
          "type": "string[]",
          "brief": "The JSON-serialized value of each item of the `LocalSecondaryIndexes` request field.",
          "examples": [
            [
              "{ \"IndexArn\": \"string\", \"IndexName\": \"string\", \"IndexSizeBytes\": number, \"ItemCount\": number, \"KeySchema\": [ { \"AttributeName\": \"string\", \"KeyType\": \"string\" } ], \"Projection\": { \"NonKeyAttributes\": [ \"string\" ], \"ProjectionType\": \"string\" } }"
            ]
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "aws.dynamodb.exclusive_start_table",
          "type": "string",
          "brief": "The value of the `ExclusiveStartTableName` request parameter.",
          "examples": [
            "Users",
            "CatsTable"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "aws.dynamodb.table_count",
          "type": "int",
          "brief": "The number of items in the `TableNames` response parameter.",
          "examples": [
            20
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "aws.dynamodb.scan_forward",
          "type": "boolean",
          "brief": "The value of the `ScanIndexForward` request parameter.",
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "aws.dynamodb.segment",
          "type": "int",
          "brief": "The value of the `Segment` request parameter.",
          "examples": [
            10
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "aws.dynamodb.total_segments",
          "type": "int",
          "brief": "The value of the `TotalSegments` request parameter.",
          "examples": [
            100
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "aws.dynamodb.count",
          "type": "int",
          "brief": "The value of the `Count` response parameter.",
          "examples": [
            10
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "aws.dynamodb.scanned_count",
          "type": "int",
          "brief": "The value of the `ScannedCount` response parameter.",
          "examples": [
            50
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "aws.dynamodb.attribute_definitions",
          "type": "string[]",
          "brief": "The JSON-serialized value of each item in the `AttributeDefinitions` request field.",
          "examples": [
            [
              "{ \"AttributeName\": \"string\", \"AttributeType\": \"string\" }"
            ]
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "aws.dynamodb.global_secondary_index_updates",
          "type": "string[]",
          "brief": "The JSON-serialized value of each item in the `GlobalSecondaryIndexUpdates` request field.",
          "examples": [
            [
              "{ \"Create\": { \"IndexName\": \"string\", \"KeySchema\": [ { \"AttributeName\": \"string\", \"KeyType\": \"string\" } ], \"Projection\": { \"NonKeyAttributes\": [ \"string\" ], \"ProjectionType\": \"string\" }, \"ProvisionedThroughput\": { \"ReadCapacityUnits\": number, \"WriteCapacityUnits\": number } }"
            ]
          ],
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/aws/registry.yaml"
      },
      "display_name": "Amazon DynamoDB Attributes"
    },
    {
      "id": "registry.aws.ecs",
      "type": "attribute_group",
      "brief": "This document defines attributes for AWS Elastic Container Service (ECS).\n",
      "attributes": [
        {
          "name": "aws.ecs.container.arn",
          "type": "string",
          "brief": "The Amazon Resource Name (ARN) of an [ECS container instance](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ECS_instances.html).\n",
          "examples": [
            "arn:aws:ecs:us-west-1:123456789123:container/32624152-9086-4f0e-acae-1a75b14fe4d9"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "aws.ecs.cluster.arn",
          "type": "string",
          "brief": "The ARN of an [ECS cluster](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/clusters.html).\n",
          "examples": [
            "arn:aws:ecs:us-west-2:123456789123:cluster/my-cluster"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "aws.ecs.launchtype",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "ec2",
                "value": "ec2",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "fargate",
                "value": "fargate",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The [launch type](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html) for an ECS task.\n",
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "aws.ecs.task.arn",
          "type": "string",
          "brief": "The ARN of a running [ECS task](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-account-settings.html#ecs-resource-ids).\n",
          "examples": [
            "arn:aws:ecs:us-west-1:123456789123:task/10838bed-421f-43ef-870a-f43feacbbb5b",
            "arn:aws:ecs:us-west-1:123456789123:task/my-cluster/task-id/23ebb8ac-c18f-46c6-8bbe-d55d0e37cfbd"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "aws.ecs.task.family",
          "type": "string",
          "brief": "The family name of the [ECS task definition](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definitions.html) used to create the ECS task.\n",
          "examples": [
            "opentelemetry-family"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "aws.ecs.task.id",
          "type": "string",
          "brief": "The ID of a running ECS task. The ID MUST be extracted from `task.arn`.\n",
          "examples": [
            "10838bed-421f-43ef-870a-f43feacbbb5b",
            "23ebb8ac-c18f-46c6-8bbe-d55d0e37cfbd"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "aws.ecs.task.revision",
          "type": "string",
          "brief": "The revision for the task definition used to create the ECS task.\n",
          "examples": [
            "8",
            "26"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/aws/registry.yaml"
      },
      "display_name": "Amazon ECS Attributes"
    },
    {
      "id": "registry.aws.eks",
      "type": "attribute_group",
      "brief": "This document defines attributes for AWS Elastic Kubernetes Service (EKS).\n",
      "attributes": [
        {
          "name": "aws.eks.cluster.arn",
          "type": "string",
          "brief": "The ARN of an EKS cluster.\n",
          "examples": [
            "arn:aws:ecs:us-west-2:123456789123:cluster/my-cluster"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/aws/registry.yaml"
      },
      "display_name": "Amazon EKS Attributes"
    },
    {
      "id": "registry.aws.log",
      "type": "attribute_group",
      "brief": "This document defines attributes for AWS Logs.\n",
      "attributes": [
        {
          "name": "aws.log.group.names",
          "type": "string[]",
          "brief": "The name(s) of the AWS log group(s) an application is writing to.\n",
          "examples": [
            [
              "/aws/lambda/my-function",
              "opentelemetry-service"
            ]
          ],
          "requirement_level": "recommended",
          "note": "Multiple log groups must be supported for cases like multi-container applications, where a single application has sidecar containers, and each write to their own log group.\n",
          "stability": "development"
        },
        {
          "name": "aws.log.group.arns",
          "type": "string[]",
          "brief": "The Amazon Resource Name(s) (ARN) of the AWS log group(s).\n",
          "examples": [
            [
              "arn:aws:logs:us-west-1:123456789012:log-group:/aws/my/group:*"
            ]
          ],
          "requirement_level": "recommended",
          "note": "See the [log group ARN format documentation](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/iam-access-control-overview-cwl.html#CWL_ARN_Format).\n",
          "stability": "development"
        },
        {
          "name": "aws.log.stream.names",
          "type": "string[]",
          "brief": "The name(s) of the AWS log stream(s) an application is writing to.\n",
          "examples": [
            [
              "logs/main/10838bed-421f-43ef-870a-f43feacbbb5b"
            ]
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "aws.log.stream.arns",
          "type": "string[]",
          "brief": "The ARN(s) of the AWS log stream(s).\n",
          "examples": [
            [
              "arn:aws:logs:us-west-1:123456789012:log-group:/aws/my/group:log-stream:logs/main/10838bed-421f-43ef-870a-f43feacbbb5b"
            ]
          ],
          "requirement_level": "recommended",
          "note": "See the [log stream ARN format documentation](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/iam-access-control-overview-cwl.html#CWL_ARN_Format). One log group can contain several log streams, so these ARNs necessarily identify both a log group and a log stream.\n",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/aws/registry.yaml"
      },
      "display_name": "Amazon Logs Attributes"
    },
    {
      "id": "registry.aws.lambda",
      "type": "attribute_group",
      "brief": "This document defines attributes for AWS Lambda.\n",
      "attributes": [
        {
          "name": "aws.lambda.invoked_arn",
          "type": "string",
          "brief": "The full invoked ARN as provided on the `Context` passed to the function (`Lambda-Runtime-Invoked-Function-Arn` header on the `/runtime/invocation/next` applicable).\n",
          "examples": [
            "arn:aws:lambda:us-east-1:123456:function:myfunction:myalias"
          ],
          "requirement_level": "recommended",
          "note": "This may be different from `cloud.resource_id` if an alias is involved.",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/aws/registry.yaml"
      },
      "display_name": "Amazon Lambda Attributes"
    },
    {
      "id": "registry.aws.s3",
      "type": "attribute_group",
      "brief": "This document defines attributes for AWS S3.\n",
      "attributes": [
        {
          "name": "aws.s3.bucket",
          "type": "string",
          "brief": "The S3 bucket name the request refers to. Corresponds to the `--bucket` parameter of the [S3 API](https://docs.aws.amazon.com/cli/latest/reference/s3api/index.html) operations.",
          "examples": [
            "some-bucket-name"
          ],
          "requirement_level": "recommended",
          "note": "The `bucket` attribute is applicable to all S3 operations that reference a bucket, i.e. that require the bucket name as a mandatory parameter.\nThis applies to almost all S3 operations except `list-buckets`.\n",
          "stability": "development"
        },
        {
          "name": "aws.s3.key",
          "type": "string",
          "brief": "The S3 object key the request refers to. Corresponds to the `--key` parameter of the [S3 API](https://docs.aws.amazon.com/cli/latest/reference/s3api/index.html) operations.",
          "examples": [
            "someFile.yml"
          ],
          "requirement_level": "recommended",
          "note": "The `key` attribute is applicable to all object-related S3 operations, i.e. that require the object key as a mandatory parameter.\nThis applies in particular to the following operations:\n\n- [copy-object](https://docs.aws.amazon.com/cli/latest/reference/s3api/copy-object.html)\n- [delete-object](https://docs.aws.amazon.com/cli/latest/reference/s3api/delete-object.html)\n- [get-object](https://docs.aws.amazon.com/cli/latest/reference/s3api/get-object.html)\n- [head-object](https://docs.aws.amazon.com/cli/latest/reference/s3api/head-object.html)\n- [put-object](https://docs.aws.amazon.com/cli/latest/reference/s3api/put-object.html)\n- [restore-object](https://docs.aws.amazon.com/cli/latest/reference/s3api/restore-object.html)\n- [select-object-content](https://docs.aws.amazon.com/cli/latest/reference/s3api/select-object-content.html)\n- [abort-multipart-upload](https://docs.aws.amazon.com/cli/latest/reference/s3api/abort-multipart-upload.html)\n- [complete-multipart-upload](https://docs.aws.amazon.com/cli/latest/reference/s3api/complete-multipart-upload.html)\n- [create-multipart-upload](https://docs.aws.amazon.com/cli/latest/reference/s3api/create-multipart-upload.html)\n- [list-parts](https://docs.aws.amazon.com/cli/latest/reference/s3api/list-parts.html)\n- [upload-part](https://docs.aws.amazon.com/cli/latest/reference/s3api/upload-part.html)\n- [upload-part-copy](https://docs.aws.amazon.com/cli/latest/reference/s3api/upload-part-copy.html)\n",
          "stability": "development"
        },
        {
          "name": "aws.s3.copy_source",
          "type": "string",
          "brief": "The source object (in the form `bucket`/`key`) for the copy operation.",
          "examples": [
            "someFile.yml"
          ],
          "requirement_level": "recommended",
          "note": "The `copy_source` attribute applies to S3 copy operations and corresponds to the `--copy-source` parameter\nof the [copy-object operation within the S3 API](https://docs.aws.amazon.com/cli/latest/reference/s3api/copy-object.html).\nThis applies in particular to the following operations:\n\n- [copy-object](https://docs.aws.amazon.com/cli/latest/reference/s3api/copy-object.html)\n- [upload-part-copy](https://docs.aws.amazon.com/cli/latest/reference/s3api/upload-part-copy.html)\n",
          "stability": "development"
        },
        {
          "name": "aws.s3.upload_id",
          "type": "string",
          "brief": "Upload ID that identifies the multipart upload.",
          "examples": [
            "dfRtDYWFbkRONycy.Yxwh66Yjlx.cph0gtNBtJ"
          ],
          "requirement_level": "recommended",
          "note": "The `upload_id` attribute applies to S3 multipart-upload operations and corresponds to the `--upload-id` parameter\nof the [S3 API](https://docs.aws.amazon.com/cli/latest/reference/s3api/index.html) multipart operations.\nThis applies in particular to the following operations:\n\n- [abort-multipart-upload](https://docs.aws.amazon.com/cli/latest/reference/s3api/abort-multipart-upload.html)\n- [complete-multipart-upload](https://docs.aws.amazon.com/cli/latest/reference/s3api/complete-multipart-upload.html)\n- [list-parts](https://docs.aws.amazon.com/cli/latest/reference/s3api/list-parts.html)\n- [upload-part](https://docs.aws.amazon.com/cli/latest/reference/s3api/upload-part.html)\n- [upload-part-copy](https://docs.aws.amazon.com/cli/latest/reference/s3api/upload-part-copy.html)\n",
          "stability": "development"
        },
        {
          "name": "aws.s3.delete",
          "type": "string",
          "brief": "The delete request container that specifies the objects to be deleted.",
          "examples": [
            "Objects=[{Key=string,VersionId=string},{Key=string,VersionId=string}],Quiet=boolean"
          ],
          "requirement_level": "recommended",
          "note": "The `delete` attribute is only applicable to the [delete-object](https://docs.aws.amazon.com/cli/latest/reference/s3api/delete-object.html) operation.\nThe `delete` attribute corresponds to the `--delete` parameter of the\n[delete-objects operation within the S3 API](https://docs.aws.amazon.com/cli/latest/reference/s3api/delete-objects.html).\n",
          "stability": "development"
        },
        {
          "name": "aws.s3.part_number",
          "type": "int",
          "brief": "The part number of the part being uploaded in a multipart-upload operation. This is a positive integer between 1 and 10,000.",
          "examples": [
            3456
          ],
          "requirement_level": "recommended",
          "note": "The `part_number` attribute is only applicable to the [upload-part](https://docs.aws.amazon.com/cli/latest/reference/s3api/upload-part.html)\nand [upload-part-copy](https://docs.aws.amazon.com/cli/latest/reference/s3api/upload-part-copy.html) operations.\nThe `part_number` attribute corresponds to the `--part-number` parameter of the\n[upload-part operation within the S3 API](https://docs.aws.amazon.com/cli/latest/reference/s3api/upload-part.html).\n",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/aws/registry.yaml"
      },
      "display_name": "Amazon S3 Attributes"
    },
    {
      "id": "client",
      "type": "attribute_group",
      "brief": "General client attributes.\n",
      "attributes": [
        {
          "name": "client.address",
          "type": "string",
          "brief": "Client address - domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "client.example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "recommended",
          "note": "When observed from the server side, and when communicating through an intermediary, `client.address` SHOULD represent the client address behind any intermediaries,  for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "client.port",
          "type": "int",
          "brief": "Client port number.",
          "examples": [
            65123
          ],
          "requirement_level": "recommended",
          "note": "When observed from the server side, and when communicating through an intermediary, `client.port` SHOULD represent the client port behind any intermediaries,  for example proxies, if it's available.\n",
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/client/common.yaml",
        "attributes": {
          "client.address": {
            "source_group": "registry.client",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "client.port": {
            "source_group": "registry.client",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "registry.session",
      "type": "attribute_group",
      "brief": "Session is defined as the period of time encompassing all activities performed by the application and the actions executed by the end user.\nConsequently, a Session is represented as a collection of Logs, Events, and Spans emitted by the Client Application throughout the Session's duration. Each Session is assigned a unique identifier, which is included as an attribute in the Logs, Events, and Spans generated during the Session's lifecycle.\nWhen a session reaches end of life, typically due to user inactivity or session timeout, a new session identifier will be assigned. The previous session identifier may be provided by the instrumentation so that telemetry backends can link the two sessions.\n",
      "attributes": [
        {
          "name": "session.id",
          "type": "string",
          "brief": "A unique id to identify a session.",
          "examples": "00112233-4455-6677-8899-aabbccddeeff",
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "session.previous_id",
          "type": "string",
          "brief": "The previous `session.id` for this user, when known.",
          "examples": "00112233-4455-6677-8899-aabbccddeeff",
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/session/registry.yaml"
      },
      "display_name": "Session Attributes"
    },
    {
      "id": "metric.db.client.operation.duration",
      "type": "metric",
      "brief": "Duration of database client operations.",
      "note": "Batch operations SHOULD be recorded as a single operation.\n",
      "stability": "release_candidate",
      "attributes": [
        {
          "name": "server.address",
          "type": "string",
          "brief": "Name of the database host.\n",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "recommended",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": {
            "conditionally_required": "If using a port other than the default port for this DBMS and if `server.address` is set."
          },
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "db.response.status_code",
          "type": "string",
          "brief": "Database response status code.",
          "examples": [
            "102",
            "ORA-17002",
            "08P01",
            "404"
          ],
          "requirement_level": {
            "conditionally_required": "If the operation failed and status code is available."
          },
          "note": "The status code returned by the database. Usually it represents an error code, but may also represent partial success, warning, or differentiate between various types of successful outcomes.\nSemantic conventions for individual database systems SHOULD document what `db.response.status_code` means in the context of that system.\n",
          "stability": "release_candidate"
        },
        {
          "name": "db.query.summary",
          "type": "string",
          "brief": "Low cardinality representation of a database query text.\n",
          "examples": [
            "SELECT wuser_table",
            "INSERT shipping_details SELECT orders",
            "get user by id"
          ],
          "requirement_level": {
            "recommended": "if readily available or if instrumentation supports query summarization."
          },
          "note": "`db.query.summary` provides static summary of the query text. It describes a class of database queries and is useful as a grouping key, especially when analyzing telemetry for database calls involving complex queries.\nSummary may be available to the instrumentation through instrumentation hooks or other means. If it is not available, instrumentations that support query parsing SHOULD generate a summary following [Generating query summary](../database/database-spans.md#generating-a-summary-of-the-query-text) section.\n",
          "stability": "release_candidate"
        },
        {
          "name": "db.collection.name",
          "type": "string",
          "brief": "The name of a collection (table, container) within the database.",
          "examples": [
            "public.users",
            "customers"
          ],
          "requirement_level": {
            "conditionally_required": "If readily available and if a database call is performed on a single collection.\n"
          },
          "note": "It is RECOMMENDED to capture the value as provided by the application\nwithout attempting to do any case normalization.\n\nThe collection name SHOULD NOT be extracted from `db.query.text`,\nwhen the database system supports cross-table queries in non-batch operations.\n\nFor batch operations, if the individual operations are known to have the same\ncollection name then that collection name SHOULD be used.\n",
          "stability": "release_candidate"
        },
        {
          "name": "db.operation.name",
          "type": "string",
          "brief": "The name of the operation or command being executed.\n",
          "examples": [
            "findAndModify",
            "HMSET",
            "SELECT"
          ],
          "requirement_level": {
            "conditionally_required": "If readily available and if there is a single operation name that describes the database call.\n"
          },
          "note": "It is RECOMMENDED to capture the value as provided by the application\nwithout attempting to do any case normalization.\n\nThe operation name SHOULD NOT be extracted from `db.query.text`,\nwhen the database system supports cross-table queries in non-batch operations.\n\nFor batch operations, if the individual operations are known to have the same operation name\nthen that operation name SHOULD be used prepended by `BATCH `,\notherwise `db.operation.name` SHOULD be `BATCH` or some other database\nsystem specific term if more applicable.\n",
          "stability": "release_candidate"
        },
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "timeout",
            "java.net.UnknownHostException",
            "server_certificate_invalid",
            "500"
          ],
          "requirement_level": {
            "conditionally_required": "If and only if the operation failed."
          },
          "note": "The `error.type` SHOULD match the `db.response.status_code` returned by the database or the client library, or the canonical name of exception that occurred.\nWhen using canonical exception type name, instrumentation SHOULD do the best effort to report the most relevant type. For example, if the original exception is wrapped into a generic one, the original exception SHOULD be preferred.\nInstrumentations SHOULD document how `error.type` is populated.\n",
          "stability": "stable"
        },
        {
          "name": "network.peer.address",
          "type": "string",
          "brief": "Peer address of the database node where the operation was performed.",
          "examples": [
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": {
            "recommended": "If applicable for this database system."
          },
          "note": "Semantic conventions for individual database systems SHOULD document whether `network.peer.*` attributes are applicable. Network peer address and port are useful when the application interacts with individual database nodes directly.\nIf a database operation involved multiple network calls (for example retries), the address of the last contacted node SHOULD be used.\n",
          "stability": "stable"
        },
        {
          "name": "db.namespace",
          "type": "string",
          "brief": "The name of the database, fully qualified within the server address and port.\n",
          "examples": [
            "customers",
            "test.users"
          ],
          "requirement_level": {
            "conditionally_required": "If available."
          },
          "note": "If a database system has multiple namespace components, they SHOULD be concatenated (potentially using database system specific conventions) from most general to most specific namespace component, and more specific namespaces SHOULD NOT be captured without the more general namespaces, to ensure that \"startswith\" queries for the more general namespaces will be valid.\nSemantic conventions for individual database systems SHOULD document what `db.namespace` means in the context of that system.\nIt is RECOMMENDED to capture the value as provided by the application without attempting to do any case normalization.\n",
          "stability": "release_candidate"
        },
        {
          "name": "db.query.text",
          "type": "string",
          "brief": "The database query being executed.\n",
          "examples": [
            "SELECT * FROM wuser_table where username = ?",
            "SET mykey ?"
          ],
          "requirement_level": "opt_in",
          "note": "For sanitization see [Sanitization of `db.query.text`](../database/database-spans.md#sanitization-of-dbquerytext).\nFor batch operations, if the individual operations are known to have the same query text then that query text SHOULD be used, otherwise all of the individual query texts SHOULD be concatenated with separator `; ` or some other database system specific separator if more applicable.\nEven though parameterized query text can potentially have sensitive data, by using a parameterized query the user is giving a strong signal that any sensitive data will be passed as parameter values, and the benefit to observability of capturing the static part of the query text by default outweighs the risk.\n",
          "stability": "release_candidate"
        },
        {
          "name": "db.system.name",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "other_sql",
                "value": "other_sql",
                "brief": "Some other SQL database. Fallback only.",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "softwareag.adabas",
                "value": "softwareag.adabas",
                "brief": "[Adabas (Adaptable Database System)](https://documentation.softwareag.com/?pf=adabas)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "actian.ingres",
                "value": "actian.ingres",
                "brief": "[Actian Ingres](https://www.actian.com/databases/ingres/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "aws.dynamodb",
                "value": "aws.dynamodb",
                "brief": "[Amazon DynamoDB](https://aws.amazon.com/pm/dynamodb/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "aws.redshift",
                "value": "aws.redshift",
                "brief": "[Amazon Redshift](https://aws.amazon.com/redshift/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "azure.cosmosdb",
                "value": "azure.cosmosdb",
                "brief": "[Azure Cosmos DB](https://learn.microsoft.com/azure/cosmos-db)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "intersystems.cache",
                "value": "intersystems.cache",
                "brief": "[InterSystems Caché](https://www.intersystems.com/products/cache/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "cassandra",
                "value": "cassandra",
                "brief": "[Apache Cassandra](https://cassandra.apache.org/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "clickhouse",
                "value": "clickhouse",
                "brief": "[ClickHouse](https://clickhouse.com/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "cockroachdb",
                "value": "cockroachdb",
                "brief": "[CockroachDB](https://www.cockroachlabs.com/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "couchbase",
                "value": "couchbase",
                "brief": "[Couchbase](https://www.couchbase.com/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "couchdb",
                "value": "couchdb",
                "brief": "[Apache CouchDB](https://couchdb.apache.org/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "derby",
                "value": "derby",
                "brief": "[Apache Derby](https://db.apache.org/derby/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "elasticsearch",
                "value": "elasticsearch",
                "brief": "[Elasticsearch](https://www.elastic.co/elasticsearch)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "firebirdsql",
                "value": "firebirdsql",
                "brief": "[Firebird](https://www.firebirdsql.org/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "gcp.spanner",
                "value": "gcp.spanner",
                "brief": "[Google Cloud Spanner](https://cloud.google.com/spanner)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "geode",
                "value": "geode",
                "brief": "[Apache Geode](https://geode.apache.org/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "h2database",
                "value": "h2database",
                "brief": "[H2 Database](https://h2database.com/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "hbase",
                "value": "hbase",
                "brief": "[Apache HBase](https://hbase.apache.org/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "hive",
                "value": "hive",
                "brief": "[Apache Hive](https://hive.apache.org/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "hsqldb",
                "value": "hsqldb",
                "brief": "[HyperSQL Database](https://hsqldb.org/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "ibm.db2",
                "value": "ibm.db2",
                "brief": "[IBM Db2](https://www.ibm.com/db2)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "ibm.informix",
                "value": "ibm.informix",
                "brief": "[IBM Informix](https://www.ibm.com/products/informix)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "ibm.netezza",
                "value": "ibm.netezza",
                "brief": "[IBM Netezza](https://www.ibm.com/products/netezza)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "influxdb",
                "value": "influxdb",
                "brief": "[InfluxDB](https://www.influxdata.com/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "instantdb",
                "value": "instantdb",
                "brief": "[Instant](https://www.instantdb.com/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "mariadb",
                "value": "mariadb",
                "brief": "[MariaDB](https://mariadb.org/)",
                "note": null,
                "stability": "release_candidate",
                "deprecated": null
              },
              {
                "id": "memcached",
                "value": "memcached",
                "brief": "[Memcached](https://memcached.org/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "mongodb",
                "value": "mongodb",
                "brief": "[MongoDB](https://www.mongodb.com/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "microsoft.sql_server",
                "value": "microsoft.sql_server",
                "brief": "[Microsoft SQL Server](https://www.microsoft.com/sql-server)",
                "note": null,
                "stability": "release_candidate",
                "deprecated": null
              },
              {
                "id": "mysql",
                "value": "mysql",
                "brief": "[MySQL](https://www.mysql.com/)",
                "note": null,
                "stability": "release_candidate",
                "deprecated": null
              },
              {
                "id": "neo4j",
                "value": "neo4j",
                "brief": "[Neo4j](https://neo4j.com/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "opensearch",
                "value": "opensearch",
                "brief": "[OpenSearch](https://opensearch.org/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "oracle.db",
                "value": "oracle.db",
                "brief": "[Oracle Database](https://www.oracle.com/database/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "postgresql",
                "value": "postgresql",
                "brief": "[PostgreSQL](https://www.postgresql.org/)",
                "note": null,
                "stability": "release_candidate",
                "deprecated": null
              },
              {
                "id": "redis",
                "value": "redis",
                "brief": "[Redis](https://redis.io/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "sap.hana",
                "value": "sap.hana",
                "brief": "[SAP HANA](https://www.sap.com/products/technology-platform/hana/what-is-sap-hana.html)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "sap.maxdb",
                "value": "sap.maxdb",
                "brief": "[SAP MaxDB](https://maxdb.sap.com/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "sqlite",
                "value": "sqlite",
                "brief": "[SQLite](https://www.sqlite.org/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "teradata",
                "value": "teradata",
                "brief": "[Teradata](https://www.teradata.com/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "trino",
                "value": "trino",
                "brief": "[Trino](https://trino.io/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The database management system (DBMS) product as identified by the client instrumentation.",
          "requirement_level": "required",
          "note": "The actual DBMS may differ from the one identified by the client. For example, when using PostgreSQL client libraries to connect to a CockroachDB, the `db.system.name` is set to `postgresql` based on the instrumentation's best knowledge.\n",
          "stability": "release_candidate"
        },
        {
          "name": "network.peer.port",
          "type": "int",
          "brief": "Peer port number of the network connection.",
          "examples": [
            65123
          ],
          "requirement_level": {
            "recommended": "If and only if `network.peer.address` is set."
          },
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "db.client.operation.duration",
      "instrument": "histogram",
      "unit": "s",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/database/metrics.yaml",
        "attributes": {
          "db.collection.name": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "db.namespace": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "db.operation.name": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "db.query.summary": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "db.query.text": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "db.response.status_code": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "db.system.name": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ]
          },
          "network.peer.address": {
            "source_group": "registry.network",
            "inherited_fields": [
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "note",
              "requirement_level"
            ]
          },
          "network.peer.port": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.db.client.connection.count",
      "type": "metric",
      "brief": "The number of connections that are currently in state described by the `state` attribute",
      "stability": "development",
      "attributes": [
        {
          "name": "db.client.connection.state",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "idle",
                "value": "idle",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "used",
                "value": "used",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The state of a connection in the pool",
          "examples": [
            "idle"
          ],
          "requirement_level": "required",
          "stability": "development"
        },
        {
          "name": "db.client.connection.pool.name",
          "type": "string",
          "brief": "The name of the connection pool; unique within the instrumented application. In case the connection pool implementation doesn't provide a name, instrumentation SHOULD use a combination of parameters that would make the name unique, for example, combining attributes `server.address`, `server.port`, and `db.namespace`, formatted as `server.address:server.port/db.namespace`. Instrumentations that generate connection pool name following different patterns SHOULD document it.\n",
          "examples": [
            "myDataSource"
          ],
          "requirement_level": "required",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "db.client.connection.count",
      "instrument": "updowncounter",
      "unit": "{connection}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/database/metrics.yaml",
        "attributes": {
          "db.client.connection.pool.name": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "db.client.connection.state": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.db.client.connection.idle.max",
      "type": "metric",
      "brief": "The maximum number of idle open connections allowed",
      "stability": "development",
      "attributes": [
        {
          "name": "db.client.connection.pool.name",
          "type": "string",
          "brief": "The name of the connection pool; unique within the instrumented application. In case the connection pool implementation doesn't provide a name, instrumentation SHOULD use a combination of parameters that would make the name unique, for example, combining attributes `server.address`, `server.port`, and `db.namespace`, formatted as `server.address:server.port/db.namespace`. Instrumentations that generate connection pool name following different patterns SHOULD document it.\n",
          "examples": [
            "myDataSource"
          ],
          "requirement_level": "required",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "db.client.connection.idle.max",
      "instrument": "updowncounter",
      "unit": "{connection}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/database/metrics.yaml",
        "attributes": {
          "db.client.connection.pool.name": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.db.client.connection.idle.min",
      "type": "metric",
      "brief": "The minimum number of idle open connections allowed",
      "stability": "development",
      "attributes": [
        {
          "name": "db.client.connection.pool.name",
          "type": "string",
          "brief": "The name of the connection pool; unique within the instrumented application. In case the connection pool implementation doesn't provide a name, instrumentation SHOULD use a combination of parameters that would make the name unique, for example, combining attributes `server.address`, `server.port`, and `db.namespace`, formatted as `server.address:server.port/db.namespace`. Instrumentations that generate connection pool name following different patterns SHOULD document it.\n",
          "examples": [
            "myDataSource"
          ],
          "requirement_level": "required",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "db.client.connection.idle.min",
      "instrument": "updowncounter",
      "unit": "{connection}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/database/metrics.yaml",
        "attributes": {
          "db.client.connection.pool.name": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.db.client.connection.max",
      "type": "metric",
      "brief": "The maximum number of open connections allowed",
      "stability": "development",
      "attributes": [
        {
          "name": "db.client.connection.pool.name",
          "type": "string",
          "brief": "The name of the connection pool; unique within the instrumented application. In case the connection pool implementation doesn't provide a name, instrumentation SHOULD use a combination of parameters that would make the name unique, for example, combining attributes `server.address`, `server.port`, and `db.namespace`, formatted as `server.address:server.port/db.namespace`. Instrumentations that generate connection pool name following different patterns SHOULD document it.\n",
          "examples": [
            "myDataSource"
          ],
          "requirement_level": "required",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "db.client.connection.max",
      "instrument": "updowncounter",
      "unit": "{connection}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/database/metrics.yaml",
        "attributes": {
          "db.client.connection.pool.name": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.db.client.connection.pending_requests",
      "type": "metric",
      "brief": "The number of current pending requests for an open connection",
      "stability": "development",
      "attributes": [
        {
          "name": "db.client.connection.pool.name",
          "type": "string",
          "brief": "The name of the connection pool; unique within the instrumented application. In case the connection pool implementation doesn't provide a name, instrumentation SHOULD use a combination of parameters that would make the name unique, for example, combining attributes `server.address`, `server.port`, and `db.namespace`, formatted as `server.address:server.port/db.namespace`. Instrumentations that generate connection pool name following different patterns SHOULD document it.\n",
          "examples": [
            "myDataSource"
          ],
          "requirement_level": "required",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "db.client.connection.pending_requests",
      "instrument": "updowncounter",
      "unit": "{request}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/database/metrics.yaml",
        "attributes": {
          "db.client.connection.pool.name": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.db.client.connection.timeouts",
      "type": "metric",
      "brief": "The number of connection timeouts that have occurred trying to obtain a connection from the pool",
      "stability": "development",
      "attributes": [
        {
          "name": "db.client.connection.pool.name",
          "type": "string",
          "brief": "The name of the connection pool; unique within the instrumented application. In case the connection pool implementation doesn't provide a name, instrumentation SHOULD use a combination of parameters that would make the name unique, for example, combining attributes `server.address`, `server.port`, and `db.namespace`, formatted as `server.address:server.port/db.namespace`. Instrumentations that generate connection pool name following different patterns SHOULD document it.\n",
          "examples": [
            "myDataSource"
          ],
          "requirement_level": "required",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "db.client.connection.timeouts",
      "instrument": "counter",
      "unit": "{timeout}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/database/metrics.yaml",
        "attributes": {
          "db.client.connection.pool.name": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.db.client.connection.create_time",
      "type": "metric",
      "brief": "The time it took to create a new connection",
      "stability": "development",
      "attributes": [
        {
          "name": "db.client.connection.pool.name",
          "type": "string",
          "brief": "The name of the connection pool; unique within the instrumented application. In case the connection pool implementation doesn't provide a name, instrumentation SHOULD use a combination of parameters that would make the name unique, for example, combining attributes `server.address`, `server.port`, and `db.namespace`, formatted as `server.address:server.port/db.namespace`. Instrumentations that generate connection pool name following different patterns SHOULD document it.\n",
          "examples": [
            "myDataSource"
          ],
          "requirement_level": "required",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "db.client.connection.create_time",
      "instrument": "histogram",
      "unit": "s",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/database/metrics.yaml",
        "attributes": {
          "db.client.connection.pool.name": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.db.client.connection.wait_time",
      "type": "metric",
      "brief": "The time it took to obtain an open connection from the pool",
      "stability": "development",
      "attributes": [
        {
          "name": "db.client.connection.pool.name",
          "type": "string",
          "brief": "The name of the connection pool; unique within the instrumented application. In case the connection pool implementation doesn't provide a name, instrumentation SHOULD use a combination of parameters that would make the name unique, for example, combining attributes `server.address`, `server.port`, and `db.namespace`, formatted as `server.address:server.port/db.namespace`. Instrumentations that generate connection pool name following different patterns SHOULD document it.\n",
          "examples": [
            "myDataSource"
          ],
          "requirement_level": "required",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "db.client.connection.wait_time",
      "instrument": "histogram",
      "unit": "s",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/database/metrics.yaml",
        "attributes": {
          "db.client.connection.pool.name": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.db.client.connection.use_time",
      "type": "metric",
      "brief": "The time between borrowing a connection and returning it to the pool",
      "stability": "development",
      "attributes": [
        {
          "name": "db.client.connection.pool.name",
          "type": "string",
          "brief": "The name of the connection pool; unique within the instrumented application. In case the connection pool implementation doesn't provide a name, instrumentation SHOULD use a combination of parameters that would make the name unique, for example, combining attributes `server.address`, `server.port`, and `db.namespace`, formatted as `server.address:server.port/db.namespace`. Instrumentations that generate connection pool name following different patterns SHOULD document it.\n",
          "examples": [
            "myDataSource"
          ],
          "requirement_level": "required",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "db.client.connection.use_time",
      "instrument": "histogram",
      "unit": "s",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/database/metrics.yaml",
        "attributes": {
          "db.client.connection.pool.name": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.db.client.response.returned_rows",
      "type": "metric",
      "brief": "The actual number of records returned by the database operation.",
      "stability": "development",
      "attributes": [
        {
          "name": "server.address",
          "type": "string",
          "brief": "Name of the database host.\n",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "recommended",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": {
            "conditionally_required": "If using a port other than the default port for this DBMS and if `server.address` is set."
          },
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "db.response.status_code",
          "type": "string",
          "brief": "Database response status code.",
          "examples": [
            "102",
            "ORA-17002",
            "08P01",
            "404"
          ],
          "requirement_level": {
            "conditionally_required": "If the operation failed and status code is available."
          },
          "note": "The status code returned by the database. Usually it represents an error code, but may also represent partial success, warning, or differentiate between various types of successful outcomes.\nSemantic conventions for individual database systems SHOULD document what `db.response.status_code` means in the context of that system.\n",
          "stability": "release_candidate"
        },
        {
          "name": "db.query.summary",
          "type": "string",
          "brief": "Low cardinality representation of a database query text.\n",
          "examples": [
            "SELECT wuser_table",
            "INSERT shipping_details SELECT orders",
            "get user by id"
          ],
          "requirement_level": {
            "recommended": "if readily available or if instrumentation supports query summarization."
          },
          "note": "`db.query.summary` provides static summary of the query text. It describes a class of database queries and is useful as a grouping key, especially when analyzing telemetry for database calls involving complex queries.\nSummary may be available to the instrumentation through instrumentation hooks or other means. If it is not available, instrumentations that support query parsing SHOULD generate a summary following [Generating query summary](../database/database-spans.md#generating-a-summary-of-the-query-text) section.\n",
          "stability": "release_candidate"
        },
        {
          "name": "db.collection.name",
          "type": "string",
          "brief": "The name of a collection (table, container) within the database.",
          "examples": [
            "public.users",
            "customers"
          ],
          "requirement_level": {
            "conditionally_required": "If readily available and if a database call is performed on a single collection.\n"
          },
          "note": "It is RECOMMENDED to capture the value as provided by the application\nwithout attempting to do any case normalization.\n\nThe collection name SHOULD NOT be extracted from `db.query.text`,\nwhen the database system supports cross-table queries in non-batch operations.\n\nFor batch operations, if the individual operations are known to have the same\ncollection name then that collection name SHOULD be used.\n",
          "stability": "release_candidate"
        },
        {
          "name": "db.operation.name",
          "type": "string",
          "brief": "The name of the operation or command being executed.\n",
          "examples": [
            "findAndModify",
            "HMSET",
            "SELECT"
          ],
          "requirement_level": {
            "conditionally_required": "If readily available and if there is a single operation name that describes the database call.\n"
          },
          "note": "It is RECOMMENDED to capture the value as provided by the application\nwithout attempting to do any case normalization.\n\nThe operation name SHOULD NOT be extracted from `db.query.text`,\nwhen the database system supports cross-table queries in non-batch operations.\n\nFor batch operations, if the individual operations are known to have the same operation name\nthen that operation name SHOULD be used prepended by `BATCH `,\notherwise `db.operation.name` SHOULD be `BATCH` or some other database\nsystem specific term if more applicable.\n",
          "stability": "release_candidate"
        },
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "timeout",
            "java.net.UnknownHostException",
            "server_certificate_invalid",
            "500"
          ],
          "requirement_level": {
            "conditionally_required": "If and only if the operation failed."
          },
          "note": "The `error.type` SHOULD match the `db.response.status_code` returned by the database or the client library, or the canonical name of exception that occurred.\nWhen using canonical exception type name, instrumentation SHOULD do the best effort to report the most relevant type. For example, if the original exception is wrapped into a generic one, the original exception SHOULD be preferred.\nInstrumentations SHOULD document how `error.type` is populated.\n",
          "stability": "stable"
        },
        {
          "name": "network.peer.address",
          "type": "string",
          "brief": "Peer address of the database node where the operation was performed.",
          "examples": [
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": {
            "recommended": "If applicable for this database system."
          },
          "note": "Semantic conventions for individual database systems SHOULD document whether `network.peer.*` attributes are applicable. Network peer address and port are useful when the application interacts with individual database nodes directly.\nIf a database operation involved multiple network calls (for example retries), the address of the last contacted node SHOULD be used.\n",
          "stability": "stable"
        },
        {
          "name": "db.namespace",
          "type": "string",
          "brief": "The name of the database, fully qualified within the server address and port.\n",
          "examples": [
            "customers",
            "test.users"
          ],
          "requirement_level": {
            "conditionally_required": "If available."
          },
          "note": "If a database system has multiple namespace components, they SHOULD be concatenated (potentially using database system specific conventions) from most general to most specific namespace component, and more specific namespaces SHOULD NOT be captured without the more general namespaces, to ensure that \"startswith\" queries for the more general namespaces will be valid.\nSemantic conventions for individual database systems SHOULD document what `db.namespace` means in the context of that system.\nIt is RECOMMENDED to capture the value as provided by the application without attempting to do any case normalization.\n",
          "stability": "release_candidate"
        },
        {
          "name": "db.query.text",
          "type": "string",
          "brief": "The database query being executed.\n",
          "examples": [
            "SELECT * FROM wuser_table where username = ?",
            "SET mykey ?"
          ],
          "requirement_level": "opt_in",
          "note": "For sanitization see [Sanitization of `db.query.text`](../database/database-spans.md#sanitization-of-dbquerytext).\nFor batch operations, if the individual operations are known to have the same query text then that query text SHOULD be used, otherwise all of the individual query texts SHOULD be concatenated with separator `; ` or some other database system specific separator if more applicable.\nEven though parameterized query text can potentially have sensitive data, by using a parameterized query the user is giving a strong signal that any sensitive data will be passed as parameter values, and the benefit to observability of capturing the static part of the query text by default outweighs the risk.\n",
          "stability": "release_candidate"
        },
        {
          "name": "db.system.name",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "other_sql",
                "value": "other_sql",
                "brief": "Some other SQL database. Fallback only.",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "softwareag.adabas",
                "value": "softwareag.adabas",
                "brief": "[Adabas (Adaptable Database System)](https://documentation.softwareag.com/?pf=adabas)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "actian.ingres",
                "value": "actian.ingres",
                "brief": "[Actian Ingres](https://www.actian.com/databases/ingres/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "aws.dynamodb",
                "value": "aws.dynamodb",
                "brief": "[Amazon DynamoDB](https://aws.amazon.com/pm/dynamodb/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "aws.redshift",
                "value": "aws.redshift",
                "brief": "[Amazon Redshift](https://aws.amazon.com/redshift/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "azure.cosmosdb",
                "value": "azure.cosmosdb",
                "brief": "[Azure Cosmos DB](https://learn.microsoft.com/azure/cosmos-db)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "intersystems.cache",
                "value": "intersystems.cache",
                "brief": "[InterSystems Caché](https://www.intersystems.com/products/cache/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "cassandra",
                "value": "cassandra",
                "brief": "[Apache Cassandra](https://cassandra.apache.org/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "clickhouse",
                "value": "clickhouse",
                "brief": "[ClickHouse](https://clickhouse.com/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "cockroachdb",
                "value": "cockroachdb",
                "brief": "[CockroachDB](https://www.cockroachlabs.com/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "couchbase",
                "value": "couchbase",
                "brief": "[Couchbase](https://www.couchbase.com/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "couchdb",
                "value": "couchdb",
                "brief": "[Apache CouchDB](https://couchdb.apache.org/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "derby",
                "value": "derby",
                "brief": "[Apache Derby](https://db.apache.org/derby/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "elasticsearch",
                "value": "elasticsearch",
                "brief": "[Elasticsearch](https://www.elastic.co/elasticsearch)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "firebirdsql",
                "value": "firebirdsql",
                "brief": "[Firebird](https://www.firebirdsql.org/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "gcp.spanner",
                "value": "gcp.spanner",
                "brief": "[Google Cloud Spanner](https://cloud.google.com/spanner)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "geode",
                "value": "geode",
                "brief": "[Apache Geode](https://geode.apache.org/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "h2database",
                "value": "h2database",
                "brief": "[H2 Database](https://h2database.com/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "hbase",
                "value": "hbase",
                "brief": "[Apache HBase](https://hbase.apache.org/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "hive",
                "value": "hive",
                "brief": "[Apache Hive](https://hive.apache.org/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "hsqldb",
                "value": "hsqldb",
                "brief": "[HyperSQL Database](https://hsqldb.org/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "ibm.db2",
                "value": "ibm.db2",
                "brief": "[IBM Db2](https://www.ibm.com/db2)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "ibm.informix",
                "value": "ibm.informix",
                "brief": "[IBM Informix](https://www.ibm.com/products/informix)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "ibm.netezza",
                "value": "ibm.netezza",
                "brief": "[IBM Netezza](https://www.ibm.com/products/netezza)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "influxdb",
                "value": "influxdb",
                "brief": "[InfluxDB](https://www.influxdata.com/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "instantdb",
                "value": "instantdb",
                "brief": "[Instant](https://www.instantdb.com/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "mariadb",
                "value": "mariadb",
                "brief": "[MariaDB](https://mariadb.org/)",
                "note": null,
                "stability": "release_candidate",
                "deprecated": null
              },
              {
                "id": "memcached",
                "value": "memcached",
                "brief": "[Memcached](https://memcached.org/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "mongodb",
                "value": "mongodb",
                "brief": "[MongoDB](https://www.mongodb.com/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "microsoft.sql_server",
                "value": "microsoft.sql_server",
                "brief": "[Microsoft SQL Server](https://www.microsoft.com/sql-server)",
                "note": null,
                "stability": "release_candidate",
                "deprecated": null
              },
              {
                "id": "mysql",
                "value": "mysql",
                "brief": "[MySQL](https://www.mysql.com/)",
                "note": null,
                "stability": "release_candidate",
                "deprecated": null
              },
              {
                "id": "neo4j",
                "value": "neo4j",
                "brief": "[Neo4j](https://neo4j.com/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "opensearch",
                "value": "opensearch",
                "brief": "[OpenSearch](https://opensearch.org/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "oracle.db",
                "value": "oracle.db",
                "brief": "[Oracle Database](https://www.oracle.com/database/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "postgresql",
                "value": "postgresql",
                "brief": "[PostgreSQL](https://www.postgresql.org/)",
                "note": null,
                "stability": "release_candidate",
                "deprecated": null
              },
              {
                "id": "redis",
                "value": "redis",
                "brief": "[Redis](https://redis.io/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "sap.hana",
                "value": "sap.hana",
                "brief": "[SAP HANA](https://www.sap.com/products/technology-platform/hana/what-is-sap-hana.html)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "sap.maxdb",
                "value": "sap.maxdb",
                "brief": "[SAP MaxDB](https://maxdb.sap.com/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "sqlite",
                "value": "sqlite",
                "brief": "[SQLite](https://www.sqlite.org/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "teradata",
                "value": "teradata",
                "brief": "[Teradata](https://www.teradata.com/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "trino",
                "value": "trino",
                "brief": "[Trino](https://trino.io/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The database management system (DBMS) product as identified by the client instrumentation.",
          "requirement_level": "required",
          "note": "The actual DBMS may differ from the one identified by the client. For example, when using PostgreSQL client libraries to connect to a CockroachDB, the `db.system.name` is set to `postgresql` based on the instrumentation's best knowledge.\n",
          "stability": "release_candidate"
        },
        {
          "name": "network.peer.port",
          "type": "int",
          "brief": "Peer port number of the network connection.",
          "examples": [
            65123
          ],
          "requirement_level": {
            "recommended": "If and only if `network.peer.address` is set."
          },
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "db.client.response.returned_rows",
      "instrument": "histogram",
      "unit": "{row}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/database/metrics.yaml",
        "attributes": {
          "db.collection.name": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "db.namespace": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "db.operation.name": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "db.query.summary": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "db.query.text": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "db.response.status_code": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "db.system.name": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ]
          },
          "network.peer.address": {
            "source_group": "registry.network",
            "inherited_fields": [
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "note",
              "requirement_level"
            ]
          },
          "network.peer.port": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "registry.nodejs",
      "type": "attribute_group",
      "brief": "Describes Node.js related attributes.",
      "attributes": [
        {
          "name": "nodejs.eventloop.state",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "active",
                "value": "active",
                "brief": "Active time.",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "idle",
                "value": "idle",
                "brief": "Idle time.",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The state of event loop time.",
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/nodejs/registry.yaml"
      },
      "display_name": "Node.js Attributes"
    },
    {
      "id": "resource.heroku",
      "type": "resource",
      "brief": "[Heroku dyno metadata](https://devcenter.heroku.com/articles/dyno-metadata)\n",
      "stability": "development",
      "attributes": [
        {
          "name": "heroku.release.creation_timestamp",
          "type": "string",
          "brief": "Time and date the release was created\n",
          "examples": [
            "2022-10-23T18:00:42Z"
          ],
          "requirement_level": "opt_in",
          "stability": "development"
        },
        {
          "name": "heroku.release.commit",
          "type": "string",
          "brief": "Commit hash for the current release\n",
          "examples": [
            "e6134959463efd8966b20e75b913cafe3f5ec"
          ],
          "requirement_level": "opt_in",
          "stability": "development"
        },
        {
          "name": "heroku.app.id",
          "type": "string",
          "brief": "Unique identifier for the application\n",
          "examples": [
            "2daa2797-e42b-4624-9322-ec3f968df4da"
          ],
          "requirement_level": "opt_in",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": "heroku",
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/heroku/resources.yaml",
        "attributes": {
          "heroku.app.id": {
            "source_group": "registry.heroku",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "heroku.release.commit": {
            "source_group": "registry.heroku",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "heroku.release.creation_timestamp": {
            "source_group": "registry.heroku",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "event.az.resource.log",
      "type": "event",
      "brief": "Describes Azure Resource Log event, see [Azure Resource Log Top-level Schema](https://learn.microsoft.com/azure/azure-monitor/essentials/resource-logs-schema#top-level-common-schema) for more details.\n",
      "stability": "development",
      "attributes": [
        {
          "name": "az.service_request_id",
          "type": "string",
          "brief": "The unique identifier of the service request. It's generated by the Azure service and returned with the response.",
          "examples": [
            "00000000-0000-0000-0000-000000000000"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "cloud.resource_id",
          "type": "string",
          "brief": "The [Fully Qualified Azure Resource ID](https://docs.microsoft.com/rest/api/resources/resources/get-by-id) the log is emitted for.",
          "examples": [
            "arn:aws:lambda:REGION:ACCOUNT_ID:function:my-function",
            "//run.googleapis.com/projects/PROJECT_ID/locations/LOCATION_ID/services/SERVICE_ID",
            "/subscriptions/<SUBSCRIPTION_GUID>/resourceGroups/<RG>/providers/Microsoft.Web/sites/<FUNCAPP>/functions/<FUNC>"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": "az.resource.log",
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/azure/events.yaml",
        "attributes": {
          "az.service_request_id": {
            "source_group": "registry.azure.client.sdk",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "cloud.resource_id": {
            "source_group": "registry.cloud",
            "inherited_fields": [
              "examples",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "note"
            ]
          }
        }
      },
      "body": {
        "type": "map",
        "id": "az.resource.log",
        "stability": "development",
        "requirement_level": "recommended",
        "fields": [
          {
            "type": "string",
            "id": "category",
            "brief": "The Azure category of the log entry.",
            "stability": "development",
            "examples": [
              "AuditEvent",
              "GatewayLogs",
              "ApplicationGatewayAccessLog"
            ],
            "requirement_level": "recommended"
          },
          {
            "type": "string",
            "id": "correlation.id",
            "brief": "The correlation ID of the log entry.",
            "stability": "development",
            "examples": [
              "607964b6-41a5-4e24-a5db-db7aab3b9b34"
            ],
            "requirement_level": "recommended"
          },
          {
            "type": "int",
            "id": "duration",
            "brief": "The duration of the operations in milliseconds.",
            "stability": "development",
            "examples": [
              1000
            ],
            "requirement_level": "recommended"
          },
          {
            "type": "undefined",
            "id": "identity",
            "brief": "\"A JSON blob that describes the identity of the user or application that performed the operation.\"\n",
            "note": "Typically, this field includes the authorization and claims or JWT token from Active Directory.\n\n> [!Warning]\n> This field contains sensitive (PII) information.\n",
            "stability": "development",
            "requirement_level": "opt_in"
          },
          {
            "type": "string",
            "id": "operation.name",
            "brief": "The name of the operation.",
            "stability": "development",
            "examples": [
              "SecretGet",
              "Microsoft.ApiManagement/GatewayLogs",
              "ApplicationGatewayAccess"
            ],
            "requirement_level": "recommended"
          },
          {
            "type": "string",
            "id": "operation.version",
            "brief": "The version of the operation.",
            "stability": "development",
            "examples": [
              "1.0"
            ],
            "requirement_level": "recommended"
          },
          {
            "type": "undefined",
            "id": "properties",
            "brief": "The properties provided in the Azure Resource Log.",
            "stability": "development",
            "requirement_level": "recommended"
          },
          {
            "type": "string",
            "id": "result.type",
            "brief": "The status associated with the logged event.",
            "stability": "development",
            "examples": [
              "Succeeded",
              "Failed",
              "Started"
            ],
            "requirement_level": "recommended"
          },
          {
            "type": "string",
            "id": "result.signature",
            "brief": "The substatus of associated with the logged event.",
            "stability": "development",
            "examples": [
              "OK"
            ],
            "requirement_level": "recommended"
          },
          {
            "type": "string",
            "id": "result.description",
            "brief": "The description of the result.",
            "stability": "development",
            "examples": [
              "The operation was successful",
              "The operation failed"
            ],
            "requirement_level": "recommended"
          },
          {
            "type": "string",
            "id": "tenant.id",
            "brief": "The tenant ID of the Active Directory tenant that this event is tied to.",
            "stability": "development",
            "examples": [
              "00000000-0000-0000-0000-000000000000"
            ],
            "requirement_level": {
              "conditionally_required": "if the event is tied to an Active Directory tenant."
            }
          }
        ]
      }
    },
    {
      "id": "registry.k8s",
      "type": "attribute_group",
      "brief": "Kubernetes resource attributes.\n",
      "attributes": [
        {
          "name": "k8s.cluster.name",
          "type": "string",
          "brief": "The name of the cluster.\n",
          "examples": [
            "opentelemetry-cluster"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "k8s.cluster.uid",
          "type": "string",
          "brief": "A pseudo-ID for the cluster, set to the UID of the `kube-system` namespace.\n",
          "examples": [
            "218fc5a9-a5f1-4b54-aa05-46717d0ab26d"
          ],
          "requirement_level": "recommended",
          "note": "K8s doesn't have support for obtaining a cluster ID. If this is ever\nadded, we will recommend collecting the `k8s.cluster.uid` through the\nofficial APIs. In the meantime, we are able to use the `uid` of the\n`kube-system` namespace as a proxy for cluster ID. Read on for the\nrationale.\n\nEvery object created in a K8s cluster is assigned a distinct UID. The\n`kube-system` namespace is used by Kubernetes itself and will exist\nfor the lifetime of the cluster. Using the `uid` of the `kube-system`\nnamespace is a reasonable proxy for the K8s ClusterID as it will only\nchange if the cluster is rebuilt. Furthermore, Kubernetes UIDs are\nUUIDs as standardized by\n[ISO/IEC 9834-8 and ITU-T X.667](https://www.itu.int/ITU-T/studygroups/com17/oid.html).\nWhich states:\n\n> If generated according to one of the mechanisms defined in Rec.\n> ITU-T X.667 | ISO/IEC 9834-8, a UUID is either guaranteed to be\n> different from all other UUIDs generated before 3603 A.D., or is\n> extremely likely to be different (depending on the mechanism chosen).\n\nTherefore, UIDs between clusters should be extremely unlikely to\nconflict.\n",
          "stability": "development"
        },
        {
          "name": "k8s.node.name",
          "type": "string",
          "brief": "The name of the Node.\n",
          "examples": [
            "node-1"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "k8s.node.uid",
          "type": "string",
          "brief": "The UID of the Node.\n",
          "examples": [
            "1eb3a0c6-0477-4080-a9cb-0cb7db65c6a2"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "k8s.namespace.name",
          "type": "string",
          "brief": "The name of the namespace that the pod is running in.\n",
          "examples": [
            "default"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "k8s.pod.uid",
          "type": "string",
          "brief": "The UID of the Pod.\n",
          "examples": [
            "275ecb36-5aa8-4c2a-9c47-d8bb681b9aff"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "k8s.pod.name",
          "type": "string",
          "brief": "The name of the Pod.\n",
          "examples": [
            "opentelemetry-pod-autoconf"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "k8s.pod.label",
          "type": "template[string]",
          "brief": "The label key-value pairs placed on the Pod, the `<key>` being the label name, the value being the label value.\n",
          "examples": [
            "k8s.pod.label.app=my-app",
            "k8s.pod.label.mycompany.io/arch=x64",
            "k8s.pod.label.data="
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "k8s.pod.annotation",
          "type": "template[string]",
          "brief": "The annotation key-value pairs placed on the Pod, the `<key>` being the annotation name, the value being the annotation value.\n",
          "examples": [
            "k8s.pod.annotation.kubernetes.io/enforce-mountable-secrets=true",
            "k8s.pod.annotation.mycompany.io/arch=x64",
            "k8s.pod.annotation.data="
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "k8s.container.name",
          "type": "string",
          "brief": "The name of the Container from Pod specification, must be unique within a Pod. Container runtime usually uses different globally unique name (`container.name`).\n",
          "examples": [
            "redis"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "k8s.container.restart_count",
          "type": "int",
          "brief": "Number of times the container was restarted. This attribute can be used to identify a particular container (running or stopped) within a container spec.\n",
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "k8s.container.status.last_terminated_reason",
          "type": "string",
          "brief": "Last terminated reason of the Container.\n",
          "examples": [
            "Evicted",
            "Error"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "k8s.replicaset.uid",
          "type": "string",
          "brief": "The UID of the ReplicaSet.\n",
          "examples": [
            "275ecb36-5aa8-4c2a-9c47-d8bb681b9aff"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "k8s.replicaset.name",
          "type": "string",
          "brief": "The name of the ReplicaSet.\n",
          "examples": [
            "opentelemetry"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "k8s.replicationcontroller.uid",
          "type": "string",
          "brief": "The UID of the replication controller.\n",
          "examples": [
            "275ecb36-5aa8-4c2a-9c47-d8bb681b9aff"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "k8s.replicationcontroller.name",
          "type": "string",
          "brief": "The name of the replication controller.\n",
          "examples": [
            "opentelemetry"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "k8s.resourcequota.uid",
          "type": "string",
          "brief": "The UID of the resource quota.\n",
          "examples": [
            "275ecb36-5aa8-4c2a-9c47-d8bb681b9aff"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "k8s.resourcequota.name",
          "type": "string",
          "brief": "The name of the resource quota.\n",
          "examples": [
            "opentelemetry"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "k8s.deployment.uid",
          "type": "string",
          "brief": "The UID of the Deployment.\n",
          "examples": [
            "275ecb36-5aa8-4c2a-9c47-d8bb681b9aff"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "k8s.deployment.name",
          "type": "string",
          "brief": "The name of the Deployment.\n",
          "examples": [
            "opentelemetry"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "k8s.statefulset.uid",
          "type": "string",
          "brief": "The UID of the StatefulSet.\n",
          "examples": [
            "275ecb36-5aa8-4c2a-9c47-d8bb681b9aff"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "k8s.statefulset.name",
          "type": "string",
          "brief": "The name of the StatefulSet.\n",
          "examples": [
            "opentelemetry"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "k8s.daemonset.uid",
          "type": "string",
          "brief": "The UID of the DaemonSet.\n",
          "examples": [
            "275ecb36-5aa8-4c2a-9c47-d8bb681b9aff"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "k8s.daemonset.name",
          "type": "string",
          "brief": "The name of the DaemonSet.\n",
          "examples": [
            "opentelemetry"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "k8s.hpa.uid",
          "type": "string",
          "brief": "The UID of the horizontal pod autoscaler.\n",
          "examples": [
            "275ecb36-5aa8-4c2a-9c47-d8bb681b9aff"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "k8s.hpa.name",
          "type": "string",
          "brief": "The name of the horizontal pod autoscaler.\n",
          "examples": [
            "opentelemetry"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "k8s.job.uid",
          "type": "string",
          "brief": "The UID of the Job.\n",
          "examples": [
            "275ecb36-5aa8-4c2a-9c47-d8bb681b9aff"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "k8s.job.name",
          "type": "string",
          "brief": "The name of the Job.\n",
          "examples": [
            "opentelemetry"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "k8s.cronjob.uid",
          "type": "string",
          "brief": "The UID of the CronJob.\n",
          "examples": [
            "275ecb36-5aa8-4c2a-9c47-d8bb681b9aff"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "k8s.cronjob.name",
          "type": "string",
          "brief": "The name of the CronJob.\n",
          "examples": [
            "opentelemetry"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "k8s.volume.name",
          "type": "string",
          "brief": "The name of the K8s volume.\n",
          "examples": [
            "volume0"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "k8s.volume.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "persistent_volume_claim",
                "value": "persistentVolumeClaim",
                "brief": "A [persistentVolumeClaim](https://v1-30.docs.kubernetes.io/docs/concepts/storage/volumes/#persistentvolumeclaim) volume",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "config_map",
                "value": "configMap",
                "brief": "A [configMap](https://v1-30.docs.kubernetes.io/docs/concepts/storage/volumes/#configmap) volume",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "downward_api",
                "value": "downwardAPI",
                "brief": "A [downwardAPI](https://v1-30.docs.kubernetes.io/docs/concepts/storage/volumes/#downwardapi) volume",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "empty_dir",
                "value": "emptyDir",
                "brief": "An [emptyDir](https://v1-30.docs.kubernetes.io/docs/concepts/storage/volumes/#emptydir) volume",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "secret",
                "value": "secret",
                "brief": "A [secret](https://v1-30.docs.kubernetes.io/docs/concepts/storage/volumes/#secret) volume",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "local",
                "value": "local",
                "brief": "A [local](https://v1-30.docs.kubernetes.io/docs/concepts/storage/volumes/#local) volume",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The type of the K8s volume.\n",
          "examples": [
            "emptyDir",
            "persistentVolumeClaim"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "k8s.namespace.phase",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "active",
                "value": "active",
                "brief": "Active namespace phase as described by [K8s API](https://pkg.go.dev/k8s.io/api@v0.31.3/core/v1#NamespacePhase)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "terminating",
                "value": "terminating",
                "brief": "Terminating namespace phase as described by [K8s API](https://pkg.go.dev/k8s.io/api@v0.31.3/core/v1#NamespacePhase)",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The phase of the K8s namespace.\n",
          "examples": [
            "active",
            "terminating"
          ],
          "requirement_level": "recommended",
          "note": "This attribute aligns with the `phase` field of the\n[K8s NamespaceStatus](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#namespacestatus-v1-core)\n",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/k8s/registry.yaml"
      },
      "display_name": "Kubernetes Attributes"
    },
    {
      "id": "registry.security_rule",
      "type": "attribute_group",
      "brief": "Describes security rule attributes. Rule fields are used to capture the specifics of any observer or agent rules that generate alerts or other notable events.\n",
      "attributes": [
        {
          "name": "security_rule.category",
          "type": "string",
          "brief": "A categorization value keyword used by the entity using the rule for detection of this event\n",
          "examples": [
            "Attempted Information Leak"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "security_rule.description",
          "type": "string",
          "brief": "The description of the rule generating the event.\n",
          "examples": [
            "Block requests to public DNS over HTTPS / TLS protocols"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "security_rule.license",
          "type": "string",
          "brief": "Name of the license under which the rule used to generate this event is made available.\n",
          "examples": [
            "Apache 2.0"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "security_rule.name",
          "type": "string",
          "brief": "The name of the rule or signature generating the event.\n",
          "examples": [
            "BLOCK_DNS_over_TLS"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "security_rule.reference",
          "type": "string",
          "brief": "Reference URL to additional information about the rule used to generate this event.\n",
          "examples": [
            "https://en.wikipedia.org/wiki/DNS_over_TLS"
          ],
          "requirement_level": "recommended",
          "note": "The URL can point to the vendor’s documentation about the rule. If that’s not available, it can also be a link to a more general page describing this type of alert.\n",
          "stability": "development"
        },
        {
          "name": "security_rule.ruleset.name",
          "type": "string",
          "brief": "Name of the ruleset, policy, group, or parent category in which the rule used to generate this event is a member.\n",
          "examples": [
            "Standard_Protocol_Filters"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "security_rule.uuid",
          "type": "string",
          "brief": "A rule ID that is unique within the scope of a set or group of agents, observers, or other entities using the rule for detection of this event.\n",
          "examples": [
            "550e8400-e29b-41d4-a716-446655440000",
            "1100110011"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "security_rule.version",
          "type": "string",
          "brief": "The version / revision of the rule being used for analysis.\n",
          "examples": [
            "1.0.0"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/security-rule/registry.yaml"
      },
      "display_name": "Security Rule"
    },
    {
      "id": "registry.server",
      "type": "attribute_group",
      "brief": "These attributes may be used to describe the server in a connection-based network interaction where there is one side that initiates the connection (the client is the side that initiates the connection). This covers all TCP network interactions since TCP is connection-based and one side initiates the connection (an exception is made for peer-to-peer communication over TCP where the \"user-facing\" surface of the protocol / API doesn't expose a clear notion of client and server). This also covers UDP network interactions where one side initiates the interaction, e.g. QUIC (HTTP/3) and DNS.\n",
      "attributes": [
        {
          "name": "server.address",
          "type": "string",
          "brief": "Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "recommended",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": "recommended",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/server/registry.yaml"
      },
      "display_name": "Server Attributes"
    },
    {
      "id": "gcp.client.attributes",
      "type": "attribute_group",
      "brief": "Conventions for official Google Cloud client libraries.",
      "stability": "development",
      "attributes": [
        {
          "name": "gcp.client.service",
          "type": "string",
          "brief": "Identifies the Google Cloud service for which the official client library is intended.",
          "examples": [
            "appengine",
            "run",
            "firestore",
            "alloydb",
            "spanner"
          ],
          "requirement_level": {
            "conditionally_required": "Required if and only if the instrumentation library is an official, Google-provided GCP and/or Firebase client library."
          },
          "note": "Intended to be a stable identifier for Google Cloud client libraries that is uniform across implementation languages. The value should be derived from the canonical service domain for the service; for example, 'foo.googleapis.com' should result in a value of 'foo'.\n",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/gcp/common.yml",
        "attributes": {
          "gcp.client.service": {
            "source_group": "registry.gcp.client",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "log-exception",
      "type": "attribute_group",
      "brief": "This document defines attributes for exceptions represented using Log Records.\n",
      "attributes": [
        {
          "name": "exception.stacktrace",
          "type": "string",
          "brief": "A stacktrace as a string in the natural representation for the language runtime. The representation is to be determined and documented by each language SIG.\n",
          "examples": "Exception in thread \"main\" java.lang.RuntimeException: Test exception\\n at com.example.GenerateTrace.methodB(GenerateTrace.java:13)\\n at com.example.GenerateTrace.methodA(GenerateTrace.java:9)\\n at com.example.GenerateTrace.main(GenerateTrace.java:5)\n",
          "requirement_level": "recommended",
          "stability": "stable"
        },
        {
          "name": "exception.type",
          "type": "string",
          "brief": "The type of the exception (its fully-qualified class name, if applicable). The dynamic type of the exception should be preferred over the static type in languages that support it.\n",
          "examples": [
            "java.net.ConnectException",
            "OSError"
          ],
          "requirement_level": {
            "conditionally_required": "Required if `exception.message` is not set, recommended otherwise."
          },
          "stability": "stable"
        },
        {
          "name": "exception.message",
          "type": "string",
          "brief": "The exception message.",
          "examples": [
            "Division by zero",
            "Can't convert 'int' object to str implicitly"
          ],
          "requirement_level": {
            "conditionally_required": "Required if `exception.type` is not set, recommended otherwise."
          },
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/exceptions/logs.yaml",
        "attributes": {
          "exception.message": {
            "source_group": "registry.exception",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "exception.stacktrace": {
            "source_group": "registry.exception",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "exception.type": {
            "source_group": "registry.exception",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "registry.ios",
      "type": "attribute_group",
      "brief": "This group describes iOS-specific attributes.\n",
      "attributes": [
        {
          "name": "ios.app.state",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "active",
                "value": "active",
                "brief": "The app has become `active`. Associated with UIKit notification `applicationDidBecomeActive`.\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "inactive",
                "value": "inactive",
                "brief": "The app is now `inactive`. Associated with UIKit notification `applicationWillResignActive`.\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "background",
                "value": "background",
                "brief": "The app is now in the background. This value is associated with UIKit notification `applicationDidEnterBackground`.\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "foreground",
                "value": "foreground",
                "brief": "The app is now in the foreground. This value is associated with UIKit notification `applicationWillEnterForeground`.\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "terminate",
                "value": "terminate",
                "brief": "The app is about to terminate. Associated with UIKit notification `applicationWillTerminate`.\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "This attribute represents the state of the application.\n",
          "requirement_level": "recommended",
          "note": "The iOS lifecycle states are defined in the [UIApplicationDelegate documentation](https://developer.apple.com/documentation/uikit/uiapplicationdelegate), and from which the `OS terminology` column values are derived.\n",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/ios/registry.yaml"
      },
      "display_name": "iOS Attributes"
    },
    {
      "id": "metric.container.uptime",
      "type": "metric",
      "brief": "The time the container has been running",
      "note": "Instrumentations SHOULD use a gauge with type `double` and measure uptime in seconds as a floating point number with the highest precision available.\nThe actual accuracy would depend on the instrumentation and operating system.\n",
      "stability": "development",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "container.uptime",
      "instrument": "gauge",
      "unit": "s",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/container/metrics.yaml"
      }
    },
    {
      "id": "metric.container.cpu.time",
      "type": "metric",
      "brief": "Total CPU time consumed",
      "note": "Total CPU time consumed by the specific container on all available CPU cores\n",
      "stability": "development",
      "attributes": [
        {
          "name": "cpu.mode",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "user",
                "value": "user",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "system",
                "value": "system",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "nice",
                "value": "nice",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "idle",
                "value": "idle",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "iowait",
                "value": "iowait",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "interrupt",
                "value": "interrupt",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "steal",
                "value": "steal",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "kernel",
                "value": "kernel",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The CPU mode for this data point. A container's CPU metric SHOULD be characterized _either_ by data points with no `mode` labels, _or only_ data points with `mode` labels.",
          "examples": [
            "user",
            "system"
          ],
          "requirement_level": {
            "conditionally_required": "Required if mode is available, i.e. metrics coming from the Docker Stats API."
          },
          "note": "Following states SHOULD be used: `user`, `system`, `kernel`",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "container.cpu.time",
      "instrument": "counter",
      "unit": "s",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/container/metrics.yaml",
        "attributes": {
          "cpu.mode": {
            "source_group": "registry.cpu",
            "inherited_fields": [
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "note",
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.container.cpu.usage",
      "type": "metric",
      "brief": "Container's CPU usage, measured in cpus. Range from 0 to the number of allocatable CPUs",
      "note": "CPU usage of the specific container on all available CPU cores, averaged over the sample window\n",
      "stability": "development",
      "attributes": [
        {
          "name": "cpu.mode",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "user",
                "value": "user",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "system",
                "value": "system",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "nice",
                "value": "nice",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "idle",
                "value": "idle",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "iowait",
                "value": "iowait",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "interrupt",
                "value": "interrupt",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "steal",
                "value": "steal",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "kernel",
                "value": "kernel",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The CPU mode for this data point. A container's CPU metric SHOULD be characterized _either_ by data points with no `mode` labels, _or only_ data points with `mode` labels.",
          "examples": [
            "user",
            "system"
          ],
          "requirement_level": {
            "conditionally_required": "Required if mode is available, i.e. metrics coming from the Docker Stats API."
          },
          "note": "Following states SHOULD be used: `user`, `system`, `kernel`",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "container.cpu.usage",
      "instrument": "gauge",
      "unit": "{cpu}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/container/metrics.yaml",
        "attributes": {
          "cpu.mode": {
            "source_group": "registry.cpu",
            "inherited_fields": [
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "note",
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.container.memory.usage",
      "type": "metric",
      "brief": "Memory usage of the container.",
      "note": "Memory usage of the container.\n",
      "stability": "development",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "container.memory.usage",
      "instrument": "counter",
      "unit": "By",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/container/metrics.yaml"
      }
    },
    {
      "id": "metric.container.disk.io",
      "type": "metric",
      "brief": "Disk bytes for the container.",
      "note": "The total number of bytes read/written successfully (aggregated from all disks).\n",
      "stability": "development",
      "attributes": [
        {
          "name": "disk.io.direction",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "read",
                "value": "read",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "write",
                "value": "write",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The disk IO operation direction.",
          "examples": [
            "read"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "system.device",
          "type": "string",
          "brief": "The device identifier",
          "examples": [
            "(identifier)"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "container.disk.io",
      "instrument": "counter",
      "unit": "By",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/container/metrics.yaml",
        "attributes": {
          "disk.io.direction": {
            "source_group": "registry.disk",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "system.device": {
            "source_group": "registry.system",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "metric.container.network.io",
      "type": "metric",
      "brief": "Network bytes for the container.",
      "note": "The number of bytes sent/received on all network interfaces by the container.\n",
      "stability": "development",
      "attributes": [
        {
          "name": "network.io.direction",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "transmit",
                "value": "transmit",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "receive",
                "value": "receive",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The network IO operation direction.",
          "examples": [
            "transmit"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "network.interface.name",
          "type": "string",
          "brief": "The network interface name.",
          "examples": [
            "lo",
            "eth0"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "container.network.io",
      "instrument": "counter",
      "unit": "By",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/container/metrics.yaml",
        "attributes": {
          "network.interface.name": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "network.io.direction": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "resource.browser",
      "type": "resource",
      "brief": "The web browser in which the application represented by the resource is running. The `browser.*` attributes MUST be used only for resources that represent applications running in a web browser (regardless of whether running on a mobile or desktop device).\n",
      "stability": "development",
      "attributes": [
        {
          "name": "user_agent.original",
          "type": "string",
          "brief": "Full user-agent string provided by the browser",
          "examples": [
            "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.54 Safari/537.36"
          ],
          "requirement_level": "recommended",
          "note": "The user-agent value SHOULD be provided only from browsers that do not have a mechanism to retrieve brands and platform individually from the User-Agent Client Hints API. To retrieve the value, the legacy `navigator.userAgent` API can be used.\n",
          "stability": "stable"
        },
        {
          "name": "browser.brands",
          "type": "string[]",
          "brief": "Array of brand name and version separated by a space",
          "examples": [
            [
              " Not A;Brand 99",
              "Chromium 99",
              "Chrome 99"
            ]
          ],
          "requirement_level": "recommended",
          "note": "This value is intended to be taken from the [UA client hints API](https://wicg.github.io/ua-client-hints/#interface) (`navigator.userAgentData.brands`).\n",
          "stability": "development"
        },
        {
          "name": "browser.platform",
          "type": "string",
          "brief": "The platform on which the browser is running",
          "examples": [
            "Windows",
            "macOS",
            "Android"
          ],
          "requirement_level": "recommended",
          "note": "This value is intended to be taken from the [UA client hints API](https://wicg.github.io/ua-client-hints/#interface) (`navigator.userAgentData.platform`). If unavailable, the legacy `navigator.platform` API SHOULD NOT be used instead and this attribute SHOULD be left unset in order for the values to be consistent.\nThe list of possible values is defined in the [W3C User-Agent Client Hints specification](https://wicg.github.io/ua-client-hints/#sec-ch-ua-platform). Note that some (but not all) of these values can overlap with values in the [`os.type` and `os.name` attributes](./os.md). However, for consistency, the values in the `browser.platform` attribute should capture the exact value that the user agent provides.\n",
          "stability": "development"
        },
        {
          "name": "browser.mobile",
          "type": "boolean",
          "brief": "A boolean that is true if the browser is running on a mobile device",
          "requirement_level": "recommended",
          "note": "This value is intended to be taken from the [UA client hints API](https://wicg.github.io/ua-client-hints/#interface) (`navigator.userAgentData.mobile`). If unavailable, this attribute SHOULD be left unset.\n",
          "stability": "development"
        },
        {
          "name": "browser.language",
          "type": "string",
          "brief": "Preferred language of the user using the browser",
          "examples": [
            "en",
            "en-US",
            "fr",
            "fr-FR"
          ],
          "requirement_level": "recommended",
          "note": "This value is intended to be taken from the Navigator API `navigator.language`.\n",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": "browser",
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/browser/resources.yaml",
        "attributes": {
          "browser.brands": {
            "source_group": "registry.browser",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "browser.language": {
            "source_group": "registry.browser",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "browser.mobile": {
            "source_group": "registry.browser",
            "inherited_fields": [
              "brief",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "browser.platform": {
            "source_group": "registry.browser",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "user_agent.original": {
            "source_group": "registry.user_agent",
            "inherited_fields": [
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples",
              "note"
            ]
          }
        }
      }
    },
    {
      "id": "metric_attributes.http.server",
      "type": "attribute_group",
      "brief": "HTTP server attributes",
      "attributes": [
        {
          "name": "server.address",
          "type": "string",
          "brief": "Name of the local HTTP server that received the request.\n",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "opt_in",
          "note": "See [Setting `server.address` and `server.port` attributes](/docs/http/http-spans.md#setting-serveraddress-and-serverport-attributes).\n> **Warning**\n> Since this attribute is based on HTTP headers, opting in to it may allow an attacker\n> to trigger cardinality limits, degrading the usefulness of the metric.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "Port of the local HTTP server that received the request.\n",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": "opt_in",
          "note": "See [Setting `server.address` and `server.port` attributes](/docs/http/http-spans.md#setting-serveraddress-and-serverport-attributes).\n> **Warning**\n> Since this attribute is based on HTTP headers, opting in to it may allow an attacker\n> to trigger cardinality limits, degrading the usefulness of the metric.\n",
          "stability": "stable"
        },
        {
          "name": "user_agent.synthetic.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "bot",
                "value": "bot",
                "brief": "Bot source.",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "test",
                "value": "test",
                "brief": "Synthetic test source.",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "Specifies the category of synthetic traffic, such as tests or bots.\n",
          "requirement_level": "opt_in",
          "note": "This attribute MAY be derived from the contents of the `user_agent.original` attribute. Components that populate the attribute are responsible for determining what they consider to be synthetic bot or test traffic. This attribute can either be set for self-identification purposes, or on telemetry detected to be generated as a result of a synthetic request. This attribute is useful for distinguishing between genuine client traffic and synthetic traffic generated by bots or tests.\n",
          "stability": "development"
        },
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "timeout",
            "java.net.UnknownHostException",
            "server_certificate_invalid",
            "500"
          ],
          "requirement_level": {
            "conditionally_required": "If request has ended with an error."
          },
          "note": "If the request fails with an error before response status code was sent or received,\n`error.type` SHOULD be set to exception type (its fully-qualified class name, if applicable)\nor a component-specific low cardinality error identifier.\n\nIf response status code was sent or received and status indicates an error according to [HTTP span status definition](/docs/http/http-spans.md),\n`error.type` SHOULD be set to the status code number (represented as a string), an exception type (if thrown) or a component-specific error identifier.\n\nThe `error.type` value SHOULD be predictable and SHOULD have low cardinality.\nInstrumentations SHOULD document the list of errors they report.\n\nThe cardinality of `error.type` within one instrumentation library SHOULD be low, but\ntelemetry consumers that aggregate data from multiple instrumentation libraries and applications\nshould be prepared for `error.type` to have high cardinality at query time, when no\nadditional filters are applied.\n\nIf the request has completed successfully, instrumentations SHOULD NOT set `error.type`.\n",
          "stability": "stable"
        },
        {
          "name": "http.request.method",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "connect",
                "value": "CONNECT",
                "brief": "CONNECT method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "delete",
                "value": "DELETE",
                "brief": "DELETE method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "get",
                "value": "GET",
                "brief": "GET method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "head",
                "value": "HEAD",
                "brief": "HEAD method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "options",
                "value": "OPTIONS",
                "brief": "OPTIONS method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "patch",
                "value": "PATCH",
                "brief": "PATCH method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "post",
                "value": "POST",
                "brief": "POST method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "put",
                "value": "PUT",
                "brief": "PUT method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "trace",
                "value": "TRACE",
                "brief": "TRACE method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "Any HTTP method that the instrumentation has no prior knowledge of.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "HTTP request method.",
          "examples": [
            "GET",
            "POST",
            "HEAD"
          ],
          "requirement_level": "required",
          "note": "HTTP request method value SHOULD be \"known\" to the instrumentation.\nBy default, this convention defines \"known\" methods as the ones listed in [RFC9110](https://www.rfc-editor.org/rfc/rfc9110.html#name-methods)\nand the PATCH method defined in [RFC5789](https://www.rfc-editor.org/rfc/rfc5789.html).\n\nIf the HTTP request method is not known to instrumentation, it MUST set the `http.request.method` attribute to `_OTHER`.\n\nIf the HTTP instrumentation could end up converting valid HTTP request methods to `_OTHER`, then it MUST provide a way to override\nthe list of known HTTP methods. If this override is done via environment variable, then the environment variable MUST be named\nOTEL_INSTRUMENTATION_HTTP_KNOWN_METHODS and support a comma-separated list of case-sensitive known HTTP methods\n(this list MUST be a full override of the default known method, it is not a list of known methods in addition to the defaults).\n\nHTTP method names are case-sensitive and `http.request.method` attribute value MUST match a known HTTP method name exactly.\nInstrumentations for specific web frameworks that consider HTTP methods to be case insensitive, SHOULD populate a canonical equivalent.\nTracing instrumentations that do so, MUST also set `http.request.method_original` to the original value.\n",
          "stability": "stable"
        },
        {
          "name": "http.response.status_code",
          "type": "int",
          "brief": "[HTTP response status code](https://tools.ietf.org/html/rfc7231#section-6).",
          "examples": [
            200
          ],
          "requirement_level": {
            "conditionally_required": "If and only if one was received/sent."
          },
          "stability": "stable"
        },
        {
          "name": "http.route",
          "type": "string",
          "brief": "The matched route, that is, the path template in the format used by the respective server framework.\n",
          "examples": [
            "/users/:userID?",
            "{controller}/{action}/{id?}"
          ],
          "requirement_level": {
            "conditionally_required": "If and only if it's available"
          },
          "note": "MUST NOT be populated when this is not supported by the HTTP server framework as the route attribute should have low-cardinality and the URI path can NOT substitute it.\nSHOULD include the [application root](/docs/http/http-spans.md#http-server-definitions) if there is one.\n",
          "stability": "stable"
        },
        {
          "name": "network.protocol.name",
          "type": "string",
          "brief": "[OSI application layer](https://wikipedia.org/wiki/Application_layer) or non-OSI equivalent.",
          "examples": [
            "http",
            "spdy"
          ],
          "requirement_level": {
            "conditionally_required": "If not `http` and `network.protocol.version` is set."
          },
          "note": "The value SHOULD be normalized to lowercase.",
          "stability": "stable"
        },
        {
          "name": "network.protocol.version",
          "type": "string",
          "brief": "The actual version of the protocol used for network communication.",
          "examples": [
            "1.0",
            "1.1",
            "2",
            "3"
          ],
          "requirement_level": "recommended",
          "note": "If protocol version is subject to negotiation (for example using [ALPN](https://www.rfc-editor.org/rfc/rfc7301.html)), this attribute SHOULD be set to the negotiated version. If the actual protocol version is not known, this attribute SHOULD NOT be set.\n",
          "stability": "stable"
        },
        {
          "name": "url.scheme",
          "type": "string",
          "brief": "The [URI scheme](https://www.rfc-editor.org/rfc/rfc3986#section-3.1) component identifying the used protocol.\n",
          "examples": [
            "http",
            "https"
          ],
          "requirement_level": "required",
          "note": "The scheme of the original client request, if known (e.g. from [Forwarded#proto](https://developer.mozilla.org/docs/Web/HTTP/Headers/Forwarded#proto), [X-Forwarded-Proto](https://developer.mozilla.org/docs/Web/HTTP/Headers/X-Forwarded-Proto), or a similar header). Otherwise, the scheme of the immediate peer request.\n",
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/http/metrics.yaml",
        "attributes": {
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "brief",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "note",
              "requirement_level"
            ]
          },
          "http.request.method": {
            "source_group": "registry.http",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "http.response.status_code": {
            "source_group": "registry.http",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "http.route": {
            "source_group": "registry.http",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "network.protocol.name": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ]
          },
          "network.protocol.version": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "note",
              "requirement_level"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "note",
              "requirement_level"
            ]
          },
          "url.scheme": {
            "source_group": "registry.url",
            "inherited_fields": [
              "brief",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "note",
              "requirement_level"
            ]
          },
          "user_agent.synthetic.type": {
            "source_group": "registry.user_agent.os",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric_attributes.http.client",
      "type": "attribute_group",
      "brief": "HTTP client attributes",
      "attributes": [
        {
          "name": "server.address",
          "type": "string",
          "brief": "Host identifier of the [\"URI origin\"](https://www.rfc-editor.org/rfc/rfc9110.html#name-uri-origin) HTTP request is sent to.\n",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "required",
          "note": "If an HTTP client request is explicitly made to an IP address, e.g. `http://x.x.x.x:8080`, then `server.address` SHOULD be the IP address `x.x.x.x`. A DNS lookup SHOULD NOT be used.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "Port identifier of the [\"URI origin\"](https://www.rfc-editor.org/rfc/rfc9110.html#name-uri-origin) HTTP request is sent to.\n",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": "required",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "timeout",
            "java.net.UnknownHostException",
            "server_certificate_invalid",
            "500"
          ],
          "requirement_level": {
            "conditionally_required": "If request has ended with an error."
          },
          "note": "If the request fails with an error before response status code was sent or received,\n`error.type` SHOULD be set to exception type (its fully-qualified class name, if applicable)\nor a component-specific low cardinality error identifier.\n\nIf response status code was sent or received and status indicates an error according to [HTTP span status definition](/docs/http/http-spans.md),\n`error.type` SHOULD be set to the status code number (represented as a string), an exception type (if thrown) or a component-specific error identifier.\n\nThe `error.type` value SHOULD be predictable and SHOULD have low cardinality.\nInstrumentations SHOULD document the list of errors they report.\n\nThe cardinality of `error.type` within one instrumentation library SHOULD be low, but\ntelemetry consumers that aggregate data from multiple instrumentation libraries and applications\nshould be prepared for `error.type` to have high cardinality at query time, when no\nadditional filters are applied.\n\nIf the request has completed successfully, instrumentations SHOULD NOT set `error.type`.\n",
          "stability": "stable"
        },
        {
          "name": "http.request.method",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "connect",
                "value": "CONNECT",
                "brief": "CONNECT method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "delete",
                "value": "DELETE",
                "brief": "DELETE method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "get",
                "value": "GET",
                "brief": "GET method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "head",
                "value": "HEAD",
                "brief": "HEAD method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "options",
                "value": "OPTIONS",
                "brief": "OPTIONS method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "patch",
                "value": "PATCH",
                "brief": "PATCH method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "post",
                "value": "POST",
                "brief": "POST method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "put",
                "value": "PUT",
                "brief": "PUT method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "trace",
                "value": "TRACE",
                "brief": "TRACE method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "Any HTTP method that the instrumentation has no prior knowledge of.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "HTTP request method.",
          "examples": [
            "GET",
            "POST",
            "HEAD"
          ],
          "requirement_level": "required",
          "note": "HTTP request method value SHOULD be \"known\" to the instrumentation.\nBy default, this convention defines \"known\" methods as the ones listed in [RFC9110](https://www.rfc-editor.org/rfc/rfc9110.html#name-methods)\nand the PATCH method defined in [RFC5789](https://www.rfc-editor.org/rfc/rfc5789.html).\n\nIf the HTTP request method is not known to instrumentation, it MUST set the `http.request.method` attribute to `_OTHER`.\n\nIf the HTTP instrumentation could end up converting valid HTTP request methods to `_OTHER`, then it MUST provide a way to override\nthe list of known HTTP methods. If this override is done via environment variable, then the environment variable MUST be named\nOTEL_INSTRUMENTATION_HTTP_KNOWN_METHODS and support a comma-separated list of case-sensitive known HTTP methods\n(this list MUST be a full override of the default known method, it is not a list of known methods in addition to the defaults).\n\nHTTP method names are case-sensitive and `http.request.method` attribute value MUST match a known HTTP method name exactly.\nInstrumentations for specific web frameworks that consider HTTP methods to be case insensitive, SHOULD populate a canonical equivalent.\nTracing instrumentations that do so, MUST also set `http.request.method_original` to the original value.\n",
          "stability": "stable"
        },
        {
          "name": "http.response.status_code",
          "type": "int",
          "brief": "[HTTP response status code](https://tools.ietf.org/html/rfc7231#section-6).",
          "examples": [
            200
          ],
          "requirement_level": {
            "conditionally_required": "If and only if one was received/sent."
          },
          "stability": "stable"
        },
        {
          "name": "network.protocol.name",
          "type": "string",
          "brief": "[OSI application layer](https://wikipedia.org/wiki/Application_layer) or non-OSI equivalent.",
          "examples": [
            "http",
            "spdy"
          ],
          "requirement_level": {
            "conditionally_required": "If not `http` and `network.protocol.version` is set."
          },
          "note": "The value SHOULD be normalized to lowercase.",
          "stability": "stable"
        },
        {
          "name": "network.protocol.version",
          "type": "string",
          "brief": "The actual version of the protocol used for network communication.",
          "examples": [
            "1.0",
            "1.1",
            "2",
            "3"
          ],
          "requirement_level": "recommended",
          "note": "If protocol version is subject to negotiation (for example using [ALPN](https://www.rfc-editor.org/rfc/rfc7301.html)), this attribute SHOULD be set to the negotiated version. If the actual protocol version is not known, this attribute SHOULD NOT be set.\n",
          "stability": "stable"
        },
        {
          "name": "url.scheme",
          "type": "string",
          "brief": "The [URI scheme](https://www.rfc-editor.org/rfc/rfc3986#section-3.1) component identifying the used protocol.\n",
          "examples": [
            "http",
            "https"
          ],
          "requirement_level": "opt_in",
          "stability": "stable"
        },
        {
          "name": "url.template",
          "type": "string",
          "brief": "The low-cardinality template of an [absolute path reference](https://www.rfc-editor.org/rfc/rfc3986#section-4.2).\n",
          "examples": [
            "/users/{id}",
            "/users/:id",
            "/users?id={id}"
          ],
          "requirement_level": "opt_in",
          "note": "The `url.template` MUST have low cardinality. It is not usually available on HTTP clients, but may be known by the application or specialized HTTP instrumentation.\n",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/http/metrics.yaml",
        "attributes": {
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "brief",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "note",
              "requirement_level"
            ]
          },
          "http.request.method": {
            "source_group": "registry.http",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "http.response.status_code": {
            "source_group": "registry.http",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "network.protocol.name": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ]
          },
          "network.protocol.version": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "note",
              "requirement_level"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "requirement_level"
            ]
          },
          "url.scheme": {
            "source_group": "registry.url",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ]
          },
          "url.template": {
            "source_group": "registry.url",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric_attributes.http.client.experimental",
      "type": "attribute_group",
      "brief": "HTTP client experimental attributes",
      "attributes": [
        {
          "name": "server.address",
          "type": "string",
          "brief": "Host identifier of the [\"URI origin\"](https://www.rfc-editor.org/rfc/rfc9110.html#name-uri-origin) HTTP request is sent to.\n",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "required",
          "note": "If an HTTP client request is explicitly made to an IP address, e.g. `http://x.x.x.x:8080`, then `server.address` SHOULD be the IP address `x.x.x.x`. A DNS lookup SHOULD NOT be used.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "Port identifier of the [\"URI origin\"](https://www.rfc-editor.org/rfc/rfc9110.html#name-uri-origin) HTTP request is sent to.\n",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": "required",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "timeout",
            "java.net.UnknownHostException",
            "server_certificate_invalid",
            "500"
          ],
          "requirement_level": {
            "conditionally_required": "If request has ended with an error."
          },
          "note": "If the request fails with an error before response status code was sent or received,\n`error.type` SHOULD be set to exception type (its fully-qualified class name, if applicable)\nor a component-specific low cardinality error identifier.\n\nIf response status code was sent or received and status indicates an error according to [HTTP span status definition](/docs/http/http-spans.md),\n`error.type` SHOULD be set to the status code number (represented as a string), an exception type (if thrown) or a component-specific error identifier.\n\nThe `error.type` value SHOULD be predictable and SHOULD have low cardinality.\nInstrumentations SHOULD document the list of errors they report.\n\nThe cardinality of `error.type` within one instrumentation library SHOULD be low, but\ntelemetry consumers that aggregate data from multiple instrumentation libraries and applications\nshould be prepared for `error.type` to have high cardinality at query time, when no\nadditional filters are applied.\n\nIf the request has completed successfully, instrumentations SHOULD NOT set `error.type`.\n",
          "stability": "stable"
        },
        {
          "name": "http.request.method",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "connect",
                "value": "CONNECT",
                "brief": "CONNECT method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "delete",
                "value": "DELETE",
                "brief": "DELETE method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "get",
                "value": "GET",
                "brief": "GET method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "head",
                "value": "HEAD",
                "brief": "HEAD method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "options",
                "value": "OPTIONS",
                "brief": "OPTIONS method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "patch",
                "value": "PATCH",
                "brief": "PATCH method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "post",
                "value": "POST",
                "brief": "POST method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "put",
                "value": "PUT",
                "brief": "PUT method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "trace",
                "value": "TRACE",
                "brief": "TRACE method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "Any HTTP method that the instrumentation has no prior knowledge of.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "HTTP request method.",
          "examples": [
            "GET",
            "POST",
            "HEAD"
          ],
          "requirement_level": "required",
          "note": "HTTP request method value SHOULD be \"known\" to the instrumentation.\nBy default, this convention defines \"known\" methods as the ones listed in [RFC9110](https://www.rfc-editor.org/rfc/rfc9110.html#name-methods)\nand the PATCH method defined in [RFC5789](https://www.rfc-editor.org/rfc/rfc5789.html).\n\nIf the HTTP request method is not known to instrumentation, it MUST set the `http.request.method` attribute to `_OTHER`.\n\nIf the HTTP instrumentation could end up converting valid HTTP request methods to `_OTHER`, then it MUST provide a way to override\nthe list of known HTTP methods. If this override is done via environment variable, then the environment variable MUST be named\nOTEL_INSTRUMENTATION_HTTP_KNOWN_METHODS and support a comma-separated list of case-sensitive known HTTP methods\n(this list MUST be a full override of the default known method, it is not a list of known methods in addition to the defaults).\n\nHTTP method names are case-sensitive and `http.request.method` attribute value MUST match a known HTTP method name exactly.\nInstrumentations for specific web frameworks that consider HTTP methods to be case insensitive, SHOULD populate a canonical equivalent.\nTracing instrumentations that do so, MUST also set `http.request.method_original` to the original value.\n",
          "stability": "stable"
        },
        {
          "name": "http.response.status_code",
          "type": "int",
          "brief": "[HTTP response status code](https://tools.ietf.org/html/rfc7231#section-6).",
          "examples": [
            200
          ],
          "requirement_level": {
            "conditionally_required": "If and only if one was received/sent."
          },
          "stability": "stable"
        },
        {
          "name": "network.protocol.name",
          "type": "string",
          "brief": "[OSI application layer](https://wikipedia.org/wiki/Application_layer) or non-OSI equivalent.",
          "examples": [
            "http",
            "spdy"
          ],
          "requirement_level": {
            "conditionally_required": "If not `http` and `network.protocol.version` is set."
          },
          "note": "The value SHOULD be normalized to lowercase.",
          "stability": "stable"
        },
        {
          "name": "network.protocol.version",
          "type": "string",
          "brief": "The actual version of the protocol used for network communication.",
          "examples": [
            "1.0",
            "1.1",
            "2",
            "3"
          ],
          "requirement_level": "recommended",
          "note": "If protocol version is subject to negotiation (for example using [ALPN](https://www.rfc-editor.org/rfc/rfc7301.html)), this attribute SHOULD be set to the negotiated version. If the actual protocol version is not known, this attribute SHOULD NOT be set.\n",
          "stability": "stable"
        },
        {
          "name": "url.scheme",
          "type": "string",
          "brief": "The [URI scheme](https://www.rfc-editor.org/rfc/rfc3986#section-3.1) component identifying the used protocol.\n",
          "examples": [
            "http",
            "https"
          ],
          "requirement_level": "opt_in",
          "stability": "stable"
        },
        {
          "name": "url.template",
          "type": "string",
          "brief": "The low-cardinality template of an [absolute path reference](https://www.rfc-editor.org/rfc/rfc3986#section-4.2).\n",
          "examples": [
            "/users/{id}",
            "/users/:id",
            "/users?id={id}"
          ],
          "requirement_level": {
            "conditionally_required": "If available."
          },
          "note": "The `url.template` MUST have low cardinality. It is not usually available on HTTP clients, but may be known by the application or specialized HTTP instrumentation.\n",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/http/metrics.yaml",
        "attributes": {
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "brief",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "note",
              "requirement_level"
            ]
          },
          "http.request.method": {
            "source_group": "registry.http",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "http.response.status_code": {
            "source_group": "registry.http",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "network.protocol.name": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ]
          },
          "network.protocol.version": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "note",
              "requirement_level"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "requirement_level"
            ]
          },
          "url.scheme": {
            "source_group": "registry.url",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ]
          },
          "url.template": {
            "source_group": "registry.url",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.http.server.request.duration",
      "type": "metric",
      "brief": "Duration of HTTP server requests.",
      "stability": "stable",
      "attributes": [
        {
          "name": "server.address",
          "type": "string",
          "brief": "Name of the local HTTP server that received the request.\n",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "opt_in",
          "note": "See [Setting `server.address` and `server.port` attributes](/docs/http/http-spans.md#setting-serveraddress-and-serverport-attributes).\n> **Warning**\n> Since this attribute is based on HTTP headers, opting in to it may allow an attacker\n> to trigger cardinality limits, degrading the usefulness of the metric.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "Port of the local HTTP server that received the request.\n",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": "opt_in",
          "note": "See [Setting `server.address` and `server.port` attributes](/docs/http/http-spans.md#setting-serveraddress-and-serverport-attributes).\n> **Warning**\n> Since this attribute is based on HTTP headers, opting in to it may allow an attacker\n> to trigger cardinality limits, degrading the usefulness of the metric.\n",
          "stability": "stable"
        },
        {
          "name": "user_agent.synthetic.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "bot",
                "value": "bot",
                "brief": "Bot source.",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "test",
                "value": "test",
                "brief": "Synthetic test source.",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "Specifies the category of synthetic traffic, such as tests or bots.\n",
          "requirement_level": "opt_in",
          "note": "This attribute MAY be derived from the contents of the `user_agent.original` attribute. Components that populate the attribute are responsible for determining what they consider to be synthetic bot or test traffic. This attribute can either be set for self-identification purposes, or on telemetry detected to be generated as a result of a synthetic request. This attribute is useful for distinguishing between genuine client traffic and synthetic traffic generated by bots or tests.\n",
          "stability": "development"
        },
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "timeout",
            "java.net.UnknownHostException",
            "server_certificate_invalid",
            "500"
          ],
          "requirement_level": {
            "conditionally_required": "If request has ended with an error."
          },
          "note": "If the request fails with an error before response status code was sent or received,\n`error.type` SHOULD be set to exception type (its fully-qualified class name, if applicable)\nor a component-specific low cardinality error identifier.\n\nIf response status code was sent or received and status indicates an error according to [HTTP span status definition](/docs/http/http-spans.md),\n`error.type` SHOULD be set to the status code number (represented as a string), an exception type (if thrown) or a component-specific error identifier.\n\nThe `error.type` value SHOULD be predictable and SHOULD have low cardinality.\nInstrumentations SHOULD document the list of errors they report.\n\nThe cardinality of `error.type` within one instrumentation library SHOULD be low, but\ntelemetry consumers that aggregate data from multiple instrumentation libraries and applications\nshould be prepared for `error.type` to have high cardinality at query time, when no\nadditional filters are applied.\n\nIf the request has completed successfully, instrumentations SHOULD NOT set `error.type`.\n",
          "stability": "stable"
        },
        {
          "name": "http.request.method",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "connect",
                "value": "CONNECT",
                "brief": "CONNECT method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "delete",
                "value": "DELETE",
                "brief": "DELETE method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "get",
                "value": "GET",
                "brief": "GET method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "head",
                "value": "HEAD",
                "brief": "HEAD method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "options",
                "value": "OPTIONS",
                "brief": "OPTIONS method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "patch",
                "value": "PATCH",
                "brief": "PATCH method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "post",
                "value": "POST",
                "brief": "POST method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "put",
                "value": "PUT",
                "brief": "PUT method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "trace",
                "value": "TRACE",
                "brief": "TRACE method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "Any HTTP method that the instrumentation has no prior knowledge of.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "HTTP request method.",
          "examples": [
            "GET",
            "POST",
            "HEAD"
          ],
          "requirement_level": "required",
          "note": "HTTP request method value SHOULD be \"known\" to the instrumentation.\nBy default, this convention defines \"known\" methods as the ones listed in [RFC9110](https://www.rfc-editor.org/rfc/rfc9110.html#name-methods)\nand the PATCH method defined in [RFC5789](https://www.rfc-editor.org/rfc/rfc5789.html).\n\nIf the HTTP request method is not known to instrumentation, it MUST set the `http.request.method` attribute to `_OTHER`.\n\nIf the HTTP instrumentation could end up converting valid HTTP request methods to `_OTHER`, then it MUST provide a way to override\nthe list of known HTTP methods. If this override is done via environment variable, then the environment variable MUST be named\nOTEL_INSTRUMENTATION_HTTP_KNOWN_METHODS and support a comma-separated list of case-sensitive known HTTP methods\n(this list MUST be a full override of the default known method, it is not a list of known methods in addition to the defaults).\n\nHTTP method names are case-sensitive and `http.request.method` attribute value MUST match a known HTTP method name exactly.\nInstrumentations for specific web frameworks that consider HTTP methods to be case insensitive, SHOULD populate a canonical equivalent.\nTracing instrumentations that do so, MUST also set `http.request.method_original` to the original value.\n",
          "stability": "stable"
        },
        {
          "name": "http.response.status_code",
          "type": "int",
          "brief": "[HTTP response status code](https://tools.ietf.org/html/rfc7231#section-6).",
          "examples": [
            200
          ],
          "requirement_level": {
            "conditionally_required": "If and only if one was received/sent."
          },
          "stability": "stable"
        },
        {
          "name": "http.route",
          "type": "string",
          "brief": "The matched route, that is, the path template in the format used by the respective server framework.\n",
          "examples": [
            "/users/:userID?",
            "{controller}/{action}/{id?}"
          ],
          "requirement_level": {
            "conditionally_required": "If and only if it's available"
          },
          "note": "MUST NOT be populated when this is not supported by the HTTP server framework as the route attribute should have low-cardinality and the URI path can NOT substitute it.\nSHOULD include the [application root](/docs/http/http-spans.md#http-server-definitions) if there is one.\n",
          "stability": "stable"
        },
        {
          "name": "network.protocol.name",
          "type": "string",
          "brief": "[OSI application layer](https://wikipedia.org/wiki/Application_layer) or non-OSI equivalent.",
          "examples": [
            "http",
            "spdy"
          ],
          "requirement_level": {
            "conditionally_required": "If not `http` and `network.protocol.version` is set."
          },
          "note": "The value SHOULD be normalized to lowercase.",
          "stability": "stable"
        },
        {
          "name": "network.protocol.version",
          "type": "string",
          "brief": "The actual version of the protocol used for network communication.",
          "examples": [
            "1.0",
            "1.1",
            "2",
            "3"
          ],
          "requirement_level": "recommended",
          "note": "If protocol version is subject to negotiation (for example using [ALPN](https://www.rfc-editor.org/rfc/rfc7301.html)), this attribute SHOULD be set to the negotiated version. If the actual protocol version is not known, this attribute SHOULD NOT be set.\n",
          "stability": "stable"
        },
        {
          "name": "url.scheme",
          "type": "string",
          "brief": "The [URI scheme](https://www.rfc-editor.org/rfc/rfc3986#section-3.1) component identifying the used protocol.\n",
          "examples": [
            "http",
            "https"
          ],
          "requirement_level": "required",
          "note": "The scheme of the original client request, if known (e.g. from [Forwarded#proto](https://developer.mozilla.org/docs/Web/HTTP/Headers/Forwarded#proto), [X-Forwarded-Proto](https://developer.mozilla.org/docs/Web/HTTP/Headers/X-Forwarded-Proto), or a similar header). Otherwise, the scheme of the immediate peer request.\n",
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "http.server.request.duration",
      "instrument": "histogram",
      "unit": "s",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/http/metrics.yaml",
        "attributes": {
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "brief",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "note",
              "requirement_level"
            ]
          },
          "http.request.method": {
            "source_group": "registry.http",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "http.response.status_code": {
            "source_group": "registry.http",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "http.route": {
            "source_group": "registry.http",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "network.protocol.name": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ]
          },
          "network.protocol.version": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "note",
              "requirement_level"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "note",
              "requirement_level"
            ]
          },
          "url.scheme": {
            "source_group": "registry.url",
            "inherited_fields": [
              "brief",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "note",
              "requirement_level"
            ]
          },
          "user_agent.synthetic.type": {
            "source_group": "registry.user_agent.os",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.http.server.active_requests",
      "type": "metric",
      "brief": "Number of active HTTP server requests.",
      "stability": "development",
      "attributes": [
        {
          "name": "server.address",
          "type": "string",
          "brief": "Name of the local HTTP server that received the request.\n",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "opt_in",
          "note": "See [Setting `server.address` and `server.port` attributes](/docs/http/http-spans.md#setting-serveraddress-and-serverport-attributes).\n> **Warning**\n> Since this attribute is based on HTTP headers, opting in to it may allow an attacker\n> to trigger cardinality limits, degrading the usefulness of the metric.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "Port of the local HTTP server that received the request.\n",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": "opt_in",
          "note": "See [Setting `server.address` and `server.port` attributes](/docs/http/http-spans.md#setting-serveraddress-and-serverport-attributes).\n> **Warning**\n> Since this attribute is based on HTTP headers, opting in to it may allow an attacker\n> to trigger cardinality limits, degrading the usefulness of the metric.\n",
          "stability": "stable"
        },
        {
          "name": "http.request.method",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "connect",
                "value": "CONNECT",
                "brief": "CONNECT method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "delete",
                "value": "DELETE",
                "brief": "DELETE method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "get",
                "value": "GET",
                "brief": "GET method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "head",
                "value": "HEAD",
                "brief": "HEAD method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "options",
                "value": "OPTIONS",
                "brief": "OPTIONS method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "patch",
                "value": "PATCH",
                "brief": "PATCH method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "post",
                "value": "POST",
                "brief": "POST method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "put",
                "value": "PUT",
                "brief": "PUT method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "trace",
                "value": "TRACE",
                "brief": "TRACE method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "Any HTTP method that the instrumentation has no prior knowledge of.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "HTTP request method.",
          "examples": [
            "GET",
            "POST",
            "HEAD"
          ],
          "requirement_level": "required",
          "note": "HTTP request method value SHOULD be \"known\" to the instrumentation.\nBy default, this convention defines \"known\" methods as the ones listed in [RFC9110](https://www.rfc-editor.org/rfc/rfc9110.html#name-methods)\nand the PATCH method defined in [RFC5789](https://www.rfc-editor.org/rfc/rfc5789.html).\n\nIf the HTTP request method is not known to instrumentation, it MUST set the `http.request.method` attribute to `_OTHER`.\n\nIf the HTTP instrumentation could end up converting valid HTTP request methods to `_OTHER`, then it MUST provide a way to override\nthe list of known HTTP methods. If this override is done via environment variable, then the environment variable MUST be named\nOTEL_INSTRUMENTATION_HTTP_KNOWN_METHODS and support a comma-separated list of case-sensitive known HTTP methods\n(this list MUST be a full override of the default known method, it is not a list of known methods in addition to the defaults).\n\nHTTP method names are case-sensitive and `http.request.method` attribute value MUST match a known HTTP method name exactly.\nInstrumentations for specific web frameworks that consider HTTP methods to be case insensitive, SHOULD populate a canonical equivalent.\nTracing instrumentations that do so, MUST also set `http.request.method_original` to the original value.\n",
          "stability": "stable"
        },
        {
          "name": "url.scheme",
          "type": "string",
          "brief": "The [URI scheme](https://www.rfc-editor.org/rfc/rfc3986#section-3.1) component identifying the used protocol.\n",
          "examples": [
            "http",
            "https"
          ],
          "requirement_level": "required",
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "http.server.active_requests",
      "instrument": "updowncounter",
      "unit": "{request}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/http/metrics.yaml",
        "attributes": {
          "http.request.method": {
            "source_group": "registry.http",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "note",
              "requirement_level"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "note",
              "requirement_level"
            ]
          },
          "url.scheme": {
            "source_group": "registry.url",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.http.server.request.body.size",
      "type": "metric",
      "brief": "Size of HTTP server request bodies.",
      "note": "The size of the request payload body in bytes. This is the number of bytes transferred excluding headers and is often, but not always, present as the [Content-Length](https://www.rfc-editor.org/rfc/rfc9110.html#field.content-length) header. For requests using transport encoding, this should be the compressed size.\n",
      "stability": "development",
      "attributes": [
        {
          "name": "server.address",
          "type": "string",
          "brief": "Name of the local HTTP server that received the request.\n",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "opt_in",
          "note": "See [Setting `server.address` and `server.port` attributes](/docs/http/http-spans.md#setting-serveraddress-and-serverport-attributes).\n> **Warning**\n> Since this attribute is based on HTTP headers, opting in to it may allow an attacker\n> to trigger cardinality limits, degrading the usefulness of the metric.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "Port of the local HTTP server that received the request.\n",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": "opt_in",
          "note": "See [Setting `server.address` and `server.port` attributes](/docs/http/http-spans.md#setting-serveraddress-and-serverport-attributes).\n> **Warning**\n> Since this attribute is based on HTTP headers, opting in to it may allow an attacker\n> to trigger cardinality limits, degrading the usefulness of the metric.\n",
          "stability": "stable"
        },
        {
          "name": "user_agent.synthetic.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "bot",
                "value": "bot",
                "brief": "Bot source.",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "test",
                "value": "test",
                "brief": "Synthetic test source.",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "Specifies the category of synthetic traffic, such as tests or bots.\n",
          "requirement_level": "opt_in",
          "note": "This attribute MAY be derived from the contents of the `user_agent.original` attribute. Components that populate the attribute are responsible for determining what they consider to be synthetic bot or test traffic. This attribute can either be set for self-identification purposes, or on telemetry detected to be generated as a result of a synthetic request. This attribute is useful for distinguishing between genuine client traffic and synthetic traffic generated by bots or tests.\n",
          "stability": "development"
        },
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "timeout",
            "java.net.UnknownHostException",
            "server_certificate_invalid",
            "500"
          ],
          "requirement_level": {
            "conditionally_required": "If request has ended with an error."
          },
          "note": "If the request fails with an error before response status code was sent or received,\n`error.type` SHOULD be set to exception type (its fully-qualified class name, if applicable)\nor a component-specific low cardinality error identifier.\n\nIf response status code was sent or received and status indicates an error according to [HTTP span status definition](/docs/http/http-spans.md),\n`error.type` SHOULD be set to the status code number (represented as a string), an exception type (if thrown) or a component-specific error identifier.\n\nThe `error.type` value SHOULD be predictable and SHOULD have low cardinality.\nInstrumentations SHOULD document the list of errors they report.\n\nThe cardinality of `error.type` within one instrumentation library SHOULD be low, but\ntelemetry consumers that aggregate data from multiple instrumentation libraries and applications\nshould be prepared for `error.type` to have high cardinality at query time, when no\nadditional filters are applied.\n\nIf the request has completed successfully, instrumentations SHOULD NOT set `error.type`.\n",
          "stability": "stable"
        },
        {
          "name": "http.request.method",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "connect",
                "value": "CONNECT",
                "brief": "CONNECT method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "delete",
                "value": "DELETE",
                "brief": "DELETE method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "get",
                "value": "GET",
                "brief": "GET method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "head",
                "value": "HEAD",
                "brief": "HEAD method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "options",
                "value": "OPTIONS",
                "brief": "OPTIONS method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "patch",
                "value": "PATCH",
                "brief": "PATCH method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "post",
                "value": "POST",
                "brief": "POST method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "put",
                "value": "PUT",
                "brief": "PUT method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "trace",
                "value": "TRACE",
                "brief": "TRACE method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "Any HTTP method that the instrumentation has no prior knowledge of.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "HTTP request method.",
          "examples": [
            "GET",
            "POST",
            "HEAD"
          ],
          "requirement_level": "required",
          "note": "HTTP request method value SHOULD be \"known\" to the instrumentation.\nBy default, this convention defines \"known\" methods as the ones listed in [RFC9110](https://www.rfc-editor.org/rfc/rfc9110.html#name-methods)\nand the PATCH method defined in [RFC5789](https://www.rfc-editor.org/rfc/rfc5789.html).\n\nIf the HTTP request method is not known to instrumentation, it MUST set the `http.request.method` attribute to `_OTHER`.\n\nIf the HTTP instrumentation could end up converting valid HTTP request methods to `_OTHER`, then it MUST provide a way to override\nthe list of known HTTP methods. If this override is done via environment variable, then the environment variable MUST be named\nOTEL_INSTRUMENTATION_HTTP_KNOWN_METHODS and support a comma-separated list of case-sensitive known HTTP methods\n(this list MUST be a full override of the default known method, it is not a list of known methods in addition to the defaults).\n\nHTTP method names are case-sensitive and `http.request.method` attribute value MUST match a known HTTP method name exactly.\nInstrumentations for specific web frameworks that consider HTTP methods to be case insensitive, SHOULD populate a canonical equivalent.\nTracing instrumentations that do so, MUST also set `http.request.method_original` to the original value.\n",
          "stability": "stable"
        },
        {
          "name": "http.response.status_code",
          "type": "int",
          "brief": "[HTTP response status code](https://tools.ietf.org/html/rfc7231#section-6).",
          "examples": [
            200
          ],
          "requirement_level": {
            "conditionally_required": "If and only if one was received/sent."
          },
          "stability": "stable"
        },
        {
          "name": "http.route",
          "type": "string",
          "brief": "The matched route, that is, the path template in the format used by the respective server framework.\n",
          "examples": [
            "/users/:userID?",
            "{controller}/{action}/{id?}"
          ],
          "requirement_level": {
            "conditionally_required": "If and only if it's available"
          },
          "note": "MUST NOT be populated when this is not supported by the HTTP server framework as the route attribute should have low-cardinality and the URI path can NOT substitute it.\nSHOULD include the [application root](/docs/http/http-spans.md#http-server-definitions) if there is one.\n",
          "stability": "stable"
        },
        {
          "name": "network.protocol.name",
          "type": "string",
          "brief": "[OSI application layer](https://wikipedia.org/wiki/Application_layer) or non-OSI equivalent.",
          "examples": [
            "http",
            "spdy"
          ],
          "requirement_level": {
            "conditionally_required": "If not `http` and `network.protocol.version` is set."
          },
          "note": "The value SHOULD be normalized to lowercase.",
          "stability": "stable"
        },
        {
          "name": "network.protocol.version",
          "type": "string",
          "brief": "The actual version of the protocol used for network communication.",
          "examples": [
            "1.0",
            "1.1",
            "2",
            "3"
          ],
          "requirement_level": "recommended",
          "note": "If protocol version is subject to negotiation (for example using [ALPN](https://www.rfc-editor.org/rfc/rfc7301.html)), this attribute SHOULD be set to the negotiated version. If the actual protocol version is not known, this attribute SHOULD NOT be set.\n",
          "stability": "stable"
        },
        {
          "name": "url.scheme",
          "type": "string",
          "brief": "The [URI scheme](https://www.rfc-editor.org/rfc/rfc3986#section-3.1) component identifying the used protocol.\n",
          "examples": [
            "http",
            "https"
          ],
          "requirement_level": "required",
          "note": "The scheme of the original client request, if known (e.g. from [Forwarded#proto](https://developer.mozilla.org/docs/Web/HTTP/Headers/Forwarded#proto), [X-Forwarded-Proto](https://developer.mozilla.org/docs/Web/HTTP/Headers/X-Forwarded-Proto), or a similar header). Otherwise, the scheme of the immediate peer request.\n",
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "http.server.request.body.size",
      "instrument": "histogram",
      "unit": "By",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/http/metrics.yaml",
        "attributes": {
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "brief",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "note",
              "requirement_level"
            ]
          },
          "http.request.method": {
            "source_group": "registry.http",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "http.response.status_code": {
            "source_group": "registry.http",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "http.route": {
            "source_group": "registry.http",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "network.protocol.name": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ]
          },
          "network.protocol.version": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "note",
              "requirement_level"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "note",
              "requirement_level"
            ]
          },
          "url.scheme": {
            "source_group": "registry.url",
            "inherited_fields": [
              "brief",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "note",
              "requirement_level"
            ]
          },
          "user_agent.synthetic.type": {
            "source_group": "registry.user_agent.os",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.http.server.response.body.size",
      "type": "metric",
      "brief": "Size of HTTP server response bodies.",
      "note": "The size of the response payload body in bytes. This is the number of bytes transferred excluding headers and is often, but not always, present as the [Content-Length](https://www.rfc-editor.org/rfc/rfc9110.html#field.content-length) header. For requests using transport encoding, this should be the compressed size.\n",
      "stability": "development",
      "attributes": [
        {
          "name": "server.address",
          "type": "string",
          "brief": "Name of the local HTTP server that received the request.\n",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "opt_in",
          "note": "See [Setting `server.address` and `server.port` attributes](/docs/http/http-spans.md#setting-serveraddress-and-serverport-attributes).\n> **Warning**\n> Since this attribute is based on HTTP headers, opting in to it may allow an attacker\n> to trigger cardinality limits, degrading the usefulness of the metric.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "Port of the local HTTP server that received the request.\n",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": "opt_in",
          "note": "See [Setting `server.address` and `server.port` attributes](/docs/http/http-spans.md#setting-serveraddress-and-serverport-attributes).\n> **Warning**\n> Since this attribute is based on HTTP headers, opting in to it may allow an attacker\n> to trigger cardinality limits, degrading the usefulness of the metric.\n",
          "stability": "stable"
        },
        {
          "name": "user_agent.synthetic.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "bot",
                "value": "bot",
                "brief": "Bot source.",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "test",
                "value": "test",
                "brief": "Synthetic test source.",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "Specifies the category of synthetic traffic, such as tests or bots.\n",
          "requirement_level": "opt_in",
          "note": "This attribute MAY be derived from the contents of the `user_agent.original` attribute. Components that populate the attribute are responsible for determining what they consider to be synthetic bot or test traffic. This attribute can either be set for self-identification purposes, or on telemetry detected to be generated as a result of a synthetic request. This attribute is useful for distinguishing between genuine client traffic and synthetic traffic generated by bots or tests.\n",
          "stability": "development"
        },
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "timeout",
            "java.net.UnknownHostException",
            "server_certificate_invalid",
            "500"
          ],
          "requirement_level": {
            "conditionally_required": "If request has ended with an error."
          },
          "note": "If the request fails with an error before response status code was sent or received,\n`error.type` SHOULD be set to exception type (its fully-qualified class name, if applicable)\nor a component-specific low cardinality error identifier.\n\nIf response status code was sent or received and status indicates an error according to [HTTP span status definition](/docs/http/http-spans.md),\n`error.type` SHOULD be set to the status code number (represented as a string), an exception type (if thrown) or a component-specific error identifier.\n\nThe `error.type` value SHOULD be predictable and SHOULD have low cardinality.\nInstrumentations SHOULD document the list of errors they report.\n\nThe cardinality of `error.type` within one instrumentation library SHOULD be low, but\ntelemetry consumers that aggregate data from multiple instrumentation libraries and applications\nshould be prepared for `error.type` to have high cardinality at query time, when no\nadditional filters are applied.\n\nIf the request has completed successfully, instrumentations SHOULD NOT set `error.type`.\n",
          "stability": "stable"
        },
        {
          "name": "http.request.method",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "connect",
                "value": "CONNECT",
                "brief": "CONNECT method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "delete",
                "value": "DELETE",
                "brief": "DELETE method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "get",
                "value": "GET",
                "brief": "GET method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "head",
                "value": "HEAD",
                "brief": "HEAD method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "options",
                "value": "OPTIONS",
                "brief": "OPTIONS method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "patch",
                "value": "PATCH",
                "brief": "PATCH method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "post",
                "value": "POST",
                "brief": "POST method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "put",
                "value": "PUT",
                "brief": "PUT method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "trace",
                "value": "TRACE",
                "brief": "TRACE method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "Any HTTP method that the instrumentation has no prior knowledge of.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "HTTP request method.",
          "examples": [
            "GET",
            "POST",
            "HEAD"
          ],
          "requirement_level": "required",
          "note": "HTTP request method value SHOULD be \"known\" to the instrumentation.\nBy default, this convention defines \"known\" methods as the ones listed in [RFC9110](https://www.rfc-editor.org/rfc/rfc9110.html#name-methods)\nand the PATCH method defined in [RFC5789](https://www.rfc-editor.org/rfc/rfc5789.html).\n\nIf the HTTP request method is not known to instrumentation, it MUST set the `http.request.method` attribute to `_OTHER`.\n\nIf the HTTP instrumentation could end up converting valid HTTP request methods to `_OTHER`, then it MUST provide a way to override\nthe list of known HTTP methods. If this override is done via environment variable, then the environment variable MUST be named\nOTEL_INSTRUMENTATION_HTTP_KNOWN_METHODS and support a comma-separated list of case-sensitive known HTTP methods\n(this list MUST be a full override of the default known method, it is not a list of known methods in addition to the defaults).\n\nHTTP method names are case-sensitive and `http.request.method` attribute value MUST match a known HTTP method name exactly.\nInstrumentations for specific web frameworks that consider HTTP methods to be case insensitive, SHOULD populate a canonical equivalent.\nTracing instrumentations that do so, MUST also set `http.request.method_original` to the original value.\n",
          "stability": "stable"
        },
        {
          "name": "http.response.status_code",
          "type": "int",
          "brief": "[HTTP response status code](https://tools.ietf.org/html/rfc7231#section-6).",
          "examples": [
            200
          ],
          "requirement_level": {
            "conditionally_required": "If and only if one was received/sent."
          },
          "stability": "stable"
        },
        {
          "name": "http.route",
          "type": "string",
          "brief": "The matched route, that is, the path template in the format used by the respective server framework.\n",
          "examples": [
            "/users/:userID?",
            "{controller}/{action}/{id?}"
          ],
          "requirement_level": {
            "conditionally_required": "If and only if it's available"
          },
          "note": "MUST NOT be populated when this is not supported by the HTTP server framework as the route attribute should have low-cardinality and the URI path can NOT substitute it.\nSHOULD include the [application root](/docs/http/http-spans.md#http-server-definitions) if there is one.\n",
          "stability": "stable"
        },
        {
          "name": "network.protocol.name",
          "type": "string",
          "brief": "[OSI application layer](https://wikipedia.org/wiki/Application_layer) or non-OSI equivalent.",
          "examples": [
            "http",
            "spdy"
          ],
          "requirement_level": {
            "conditionally_required": "If not `http` and `network.protocol.version` is set."
          },
          "note": "The value SHOULD be normalized to lowercase.",
          "stability": "stable"
        },
        {
          "name": "network.protocol.version",
          "type": "string",
          "brief": "The actual version of the protocol used for network communication.",
          "examples": [
            "1.0",
            "1.1",
            "2",
            "3"
          ],
          "requirement_level": "recommended",
          "note": "If protocol version is subject to negotiation (for example using [ALPN](https://www.rfc-editor.org/rfc/rfc7301.html)), this attribute SHOULD be set to the negotiated version. If the actual protocol version is not known, this attribute SHOULD NOT be set.\n",
          "stability": "stable"
        },
        {
          "name": "url.scheme",
          "type": "string",
          "brief": "The [URI scheme](https://www.rfc-editor.org/rfc/rfc3986#section-3.1) component identifying the used protocol.\n",
          "examples": [
            "http",
            "https"
          ],
          "requirement_level": "required",
          "note": "The scheme of the original client request, if known (e.g. from [Forwarded#proto](https://developer.mozilla.org/docs/Web/HTTP/Headers/Forwarded#proto), [X-Forwarded-Proto](https://developer.mozilla.org/docs/Web/HTTP/Headers/X-Forwarded-Proto), or a similar header). Otherwise, the scheme of the immediate peer request.\n",
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "http.server.response.body.size",
      "instrument": "histogram",
      "unit": "By",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/http/metrics.yaml",
        "attributes": {
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "brief",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "note",
              "requirement_level"
            ]
          },
          "http.request.method": {
            "source_group": "registry.http",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "http.response.status_code": {
            "source_group": "registry.http",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "http.route": {
            "source_group": "registry.http",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "network.protocol.name": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ]
          },
          "network.protocol.version": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "note",
              "requirement_level"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "note",
              "requirement_level"
            ]
          },
          "url.scheme": {
            "source_group": "registry.url",
            "inherited_fields": [
              "brief",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "note",
              "requirement_level"
            ]
          },
          "user_agent.synthetic.type": {
            "source_group": "registry.user_agent.os",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.http.client.request.duration",
      "type": "metric",
      "brief": "Duration of HTTP client requests.",
      "stability": "stable",
      "attributes": [
        {
          "name": "server.address",
          "type": "string",
          "brief": "Host identifier of the [\"URI origin\"](https://www.rfc-editor.org/rfc/rfc9110.html#name-uri-origin) HTTP request is sent to.\n",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "required",
          "note": "If an HTTP client request is explicitly made to an IP address, e.g. `http://x.x.x.x:8080`, then `server.address` SHOULD be the IP address `x.x.x.x`. A DNS lookup SHOULD NOT be used.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "Port identifier of the [\"URI origin\"](https://www.rfc-editor.org/rfc/rfc9110.html#name-uri-origin) HTTP request is sent to.\n",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": "required",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "timeout",
            "java.net.UnknownHostException",
            "server_certificate_invalid",
            "500"
          ],
          "requirement_level": {
            "conditionally_required": "If request has ended with an error."
          },
          "note": "If the request fails with an error before response status code was sent or received,\n`error.type` SHOULD be set to exception type (its fully-qualified class name, if applicable)\nor a component-specific low cardinality error identifier.\n\nIf response status code was sent or received and status indicates an error according to [HTTP span status definition](/docs/http/http-spans.md),\n`error.type` SHOULD be set to the status code number (represented as a string), an exception type (if thrown) or a component-specific error identifier.\n\nThe `error.type` value SHOULD be predictable and SHOULD have low cardinality.\nInstrumentations SHOULD document the list of errors they report.\n\nThe cardinality of `error.type` within one instrumentation library SHOULD be low, but\ntelemetry consumers that aggregate data from multiple instrumentation libraries and applications\nshould be prepared for `error.type` to have high cardinality at query time, when no\nadditional filters are applied.\n\nIf the request has completed successfully, instrumentations SHOULD NOT set `error.type`.\n",
          "stability": "stable"
        },
        {
          "name": "http.request.method",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "connect",
                "value": "CONNECT",
                "brief": "CONNECT method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "delete",
                "value": "DELETE",
                "brief": "DELETE method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "get",
                "value": "GET",
                "brief": "GET method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "head",
                "value": "HEAD",
                "brief": "HEAD method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "options",
                "value": "OPTIONS",
                "brief": "OPTIONS method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "patch",
                "value": "PATCH",
                "brief": "PATCH method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "post",
                "value": "POST",
                "brief": "POST method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "put",
                "value": "PUT",
                "brief": "PUT method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "trace",
                "value": "TRACE",
                "brief": "TRACE method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "Any HTTP method that the instrumentation has no prior knowledge of.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "HTTP request method.",
          "examples": [
            "GET",
            "POST",
            "HEAD"
          ],
          "requirement_level": "required",
          "note": "HTTP request method value SHOULD be \"known\" to the instrumentation.\nBy default, this convention defines \"known\" methods as the ones listed in [RFC9110](https://www.rfc-editor.org/rfc/rfc9110.html#name-methods)\nand the PATCH method defined in [RFC5789](https://www.rfc-editor.org/rfc/rfc5789.html).\n\nIf the HTTP request method is not known to instrumentation, it MUST set the `http.request.method` attribute to `_OTHER`.\n\nIf the HTTP instrumentation could end up converting valid HTTP request methods to `_OTHER`, then it MUST provide a way to override\nthe list of known HTTP methods. If this override is done via environment variable, then the environment variable MUST be named\nOTEL_INSTRUMENTATION_HTTP_KNOWN_METHODS and support a comma-separated list of case-sensitive known HTTP methods\n(this list MUST be a full override of the default known method, it is not a list of known methods in addition to the defaults).\n\nHTTP method names are case-sensitive and `http.request.method` attribute value MUST match a known HTTP method name exactly.\nInstrumentations for specific web frameworks that consider HTTP methods to be case insensitive, SHOULD populate a canonical equivalent.\nTracing instrumentations that do so, MUST also set `http.request.method_original` to the original value.\n",
          "stability": "stable"
        },
        {
          "name": "http.response.status_code",
          "type": "int",
          "brief": "[HTTP response status code](https://tools.ietf.org/html/rfc7231#section-6).",
          "examples": [
            200
          ],
          "requirement_level": {
            "conditionally_required": "If and only if one was received/sent."
          },
          "stability": "stable"
        },
        {
          "name": "network.protocol.name",
          "type": "string",
          "brief": "[OSI application layer](https://wikipedia.org/wiki/Application_layer) or non-OSI equivalent.",
          "examples": [
            "http",
            "spdy"
          ],
          "requirement_level": {
            "conditionally_required": "If not `http` and `network.protocol.version` is set."
          },
          "note": "The value SHOULD be normalized to lowercase.",
          "stability": "stable"
        },
        {
          "name": "network.protocol.version",
          "type": "string",
          "brief": "The actual version of the protocol used for network communication.",
          "examples": [
            "1.0",
            "1.1",
            "2",
            "3"
          ],
          "requirement_level": "recommended",
          "note": "If protocol version is subject to negotiation (for example using [ALPN](https://www.rfc-editor.org/rfc/rfc7301.html)), this attribute SHOULD be set to the negotiated version. If the actual protocol version is not known, this attribute SHOULD NOT be set.\n",
          "stability": "stable"
        },
        {
          "name": "url.scheme",
          "type": "string",
          "brief": "The [URI scheme](https://www.rfc-editor.org/rfc/rfc3986#section-3.1) component identifying the used protocol.\n",
          "examples": [
            "http",
            "https"
          ],
          "requirement_level": "opt_in",
          "stability": "stable"
        },
        {
          "name": "url.template",
          "type": "string",
          "brief": "The low-cardinality template of an [absolute path reference](https://www.rfc-editor.org/rfc/rfc3986#section-4.2).\n",
          "examples": [
            "/users/{id}",
            "/users/:id",
            "/users?id={id}"
          ],
          "requirement_level": "opt_in",
          "note": "The `url.template` MUST have low cardinality. It is not usually available on HTTP clients, but may be known by the application or specialized HTTP instrumentation.\n",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "http.client.request.duration",
      "instrument": "histogram",
      "unit": "s",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/http/metrics.yaml",
        "attributes": {
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "brief",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "note",
              "requirement_level"
            ]
          },
          "http.request.method": {
            "source_group": "registry.http",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "http.response.status_code": {
            "source_group": "registry.http",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "network.protocol.name": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ]
          },
          "network.protocol.version": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "note",
              "requirement_level"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "requirement_level"
            ]
          },
          "url.scheme": {
            "source_group": "registry.url",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ]
          },
          "url.template": {
            "source_group": "registry.url",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.http.client.request.body.size",
      "type": "metric",
      "brief": "Size of HTTP client request bodies.",
      "note": "The size of the request payload body in bytes. This is the number of bytes transferred excluding headers and is often, but not always, present as the [Content-Length](https://www.rfc-editor.org/rfc/rfc9110.html#field.content-length) header. For requests using transport encoding, this should be the compressed size.\n",
      "stability": "development",
      "attributes": [
        {
          "name": "server.address",
          "type": "string",
          "brief": "Host identifier of the [\"URI origin\"](https://www.rfc-editor.org/rfc/rfc9110.html#name-uri-origin) HTTP request is sent to.\n",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "required",
          "note": "If an HTTP client request is explicitly made to an IP address, e.g. `http://x.x.x.x:8080`, then `server.address` SHOULD be the IP address `x.x.x.x`. A DNS lookup SHOULD NOT be used.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "Port identifier of the [\"URI origin\"](https://www.rfc-editor.org/rfc/rfc9110.html#name-uri-origin) HTTP request is sent to.\n",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": "required",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "timeout",
            "java.net.UnknownHostException",
            "server_certificate_invalid",
            "500"
          ],
          "requirement_level": {
            "conditionally_required": "If request has ended with an error."
          },
          "note": "If the request fails with an error before response status code was sent or received,\n`error.type` SHOULD be set to exception type (its fully-qualified class name, if applicable)\nor a component-specific low cardinality error identifier.\n\nIf response status code was sent or received and status indicates an error according to [HTTP span status definition](/docs/http/http-spans.md),\n`error.type` SHOULD be set to the status code number (represented as a string), an exception type (if thrown) or a component-specific error identifier.\n\nThe `error.type` value SHOULD be predictable and SHOULD have low cardinality.\nInstrumentations SHOULD document the list of errors they report.\n\nThe cardinality of `error.type` within one instrumentation library SHOULD be low, but\ntelemetry consumers that aggregate data from multiple instrumentation libraries and applications\nshould be prepared for `error.type` to have high cardinality at query time, when no\nadditional filters are applied.\n\nIf the request has completed successfully, instrumentations SHOULD NOT set `error.type`.\n",
          "stability": "stable"
        },
        {
          "name": "http.request.method",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "connect",
                "value": "CONNECT",
                "brief": "CONNECT method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "delete",
                "value": "DELETE",
                "brief": "DELETE method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "get",
                "value": "GET",
                "brief": "GET method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "head",
                "value": "HEAD",
                "brief": "HEAD method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "options",
                "value": "OPTIONS",
                "brief": "OPTIONS method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "patch",
                "value": "PATCH",
                "brief": "PATCH method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "post",
                "value": "POST",
                "brief": "POST method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "put",
                "value": "PUT",
                "brief": "PUT method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "trace",
                "value": "TRACE",
                "brief": "TRACE method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "Any HTTP method that the instrumentation has no prior knowledge of.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "HTTP request method.",
          "examples": [
            "GET",
            "POST",
            "HEAD"
          ],
          "requirement_level": "required",
          "note": "HTTP request method value SHOULD be \"known\" to the instrumentation.\nBy default, this convention defines \"known\" methods as the ones listed in [RFC9110](https://www.rfc-editor.org/rfc/rfc9110.html#name-methods)\nand the PATCH method defined in [RFC5789](https://www.rfc-editor.org/rfc/rfc5789.html).\n\nIf the HTTP request method is not known to instrumentation, it MUST set the `http.request.method` attribute to `_OTHER`.\n\nIf the HTTP instrumentation could end up converting valid HTTP request methods to `_OTHER`, then it MUST provide a way to override\nthe list of known HTTP methods. If this override is done via environment variable, then the environment variable MUST be named\nOTEL_INSTRUMENTATION_HTTP_KNOWN_METHODS and support a comma-separated list of case-sensitive known HTTP methods\n(this list MUST be a full override of the default known method, it is not a list of known methods in addition to the defaults).\n\nHTTP method names are case-sensitive and `http.request.method` attribute value MUST match a known HTTP method name exactly.\nInstrumentations for specific web frameworks that consider HTTP methods to be case insensitive, SHOULD populate a canonical equivalent.\nTracing instrumentations that do so, MUST also set `http.request.method_original` to the original value.\n",
          "stability": "stable"
        },
        {
          "name": "http.response.status_code",
          "type": "int",
          "brief": "[HTTP response status code](https://tools.ietf.org/html/rfc7231#section-6).",
          "examples": [
            200
          ],
          "requirement_level": {
            "conditionally_required": "If and only if one was received/sent."
          },
          "stability": "stable"
        },
        {
          "name": "network.protocol.name",
          "type": "string",
          "brief": "[OSI application layer](https://wikipedia.org/wiki/Application_layer) or non-OSI equivalent.",
          "examples": [
            "http",
            "spdy"
          ],
          "requirement_level": {
            "conditionally_required": "If not `http` and `network.protocol.version` is set."
          },
          "note": "The value SHOULD be normalized to lowercase.",
          "stability": "stable"
        },
        {
          "name": "network.protocol.version",
          "type": "string",
          "brief": "The actual version of the protocol used for network communication.",
          "examples": [
            "1.0",
            "1.1",
            "2",
            "3"
          ],
          "requirement_level": "recommended",
          "note": "If protocol version is subject to negotiation (for example using [ALPN](https://www.rfc-editor.org/rfc/rfc7301.html)), this attribute SHOULD be set to the negotiated version. If the actual protocol version is not known, this attribute SHOULD NOT be set.\n",
          "stability": "stable"
        },
        {
          "name": "url.scheme",
          "type": "string",
          "brief": "The [URI scheme](https://www.rfc-editor.org/rfc/rfc3986#section-3.1) component identifying the used protocol.\n",
          "examples": [
            "http",
            "https"
          ],
          "requirement_level": "opt_in",
          "stability": "stable"
        },
        {
          "name": "url.template",
          "type": "string",
          "brief": "The low-cardinality template of an [absolute path reference](https://www.rfc-editor.org/rfc/rfc3986#section-4.2).\n",
          "examples": [
            "/users/{id}",
            "/users/:id",
            "/users?id={id}"
          ],
          "requirement_level": {
            "conditionally_required": "If available."
          },
          "note": "The `url.template` MUST have low cardinality. It is not usually available on HTTP clients, but may be known by the application or specialized HTTP instrumentation.\n",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "http.client.request.body.size",
      "instrument": "histogram",
      "unit": "By",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/http/metrics.yaml",
        "attributes": {
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "brief",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "note",
              "requirement_level"
            ]
          },
          "http.request.method": {
            "source_group": "registry.http",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "http.response.status_code": {
            "source_group": "registry.http",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "network.protocol.name": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ]
          },
          "network.protocol.version": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "note",
              "requirement_level"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "requirement_level"
            ]
          },
          "url.scheme": {
            "source_group": "registry.url",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ]
          },
          "url.template": {
            "source_group": "registry.url",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.http.client.response.body.size",
      "type": "metric",
      "brief": "Size of HTTP client response bodies.",
      "note": "The size of the response payload body in bytes. This is the number of bytes transferred excluding headers and is often, but not always, present as the [Content-Length](https://www.rfc-editor.org/rfc/rfc9110.html#field.content-length) header. For requests using transport encoding, this should be the compressed size.\n",
      "stability": "development",
      "attributes": [
        {
          "name": "server.address",
          "type": "string",
          "brief": "Host identifier of the [\"URI origin\"](https://www.rfc-editor.org/rfc/rfc9110.html#name-uri-origin) HTTP request is sent to.\n",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "required",
          "note": "If an HTTP client request is explicitly made to an IP address, e.g. `http://x.x.x.x:8080`, then `server.address` SHOULD be the IP address `x.x.x.x`. A DNS lookup SHOULD NOT be used.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "Port identifier of the [\"URI origin\"](https://www.rfc-editor.org/rfc/rfc9110.html#name-uri-origin) HTTP request is sent to.\n",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": "required",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "timeout",
            "java.net.UnknownHostException",
            "server_certificate_invalid",
            "500"
          ],
          "requirement_level": {
            "conditionally_required": "If request has ended with an error."
          },
          "note": "If the request fails with an error before response status code was sent or received,\n`error.type` SHOULD be set to exception type (its fully-qualified class name, if applicable)\nor a component-specific low cardinality error identifier.\n\nIf response status code was sent or received and status indicates an error according to [HTTP span status definition](/docs/http/http-spans.md),\n`error.type` SHOULD be set to the status code number (represented as a string), an exception type (if thrown) or a component-specific error identifier.\n\nThe `error.type` value SHOULD be predictable and SHOULD have low cardinality.\nInstrumentations SHOULD document the list of errors they report.\n\nThe cardinality of `error.type` within one instrumentation library SHOULD be low, but\ntelemetry consumers that aggregate data from multiple instrumentation libraries and applications\nshould be prepared for `error.type` to have high cardinality at query time, when no\nadditional filters are applied.\n\nIf the request has completed successfully, instrumentations SHOULD NOT set `error.type`.\n",
          "stability": "stable"
        },
        {
          "name": "http.request.method",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "connect",
                "value": "CONNECT",
                "brief": "CONNECT method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "delete",
                "value": "DELETE",
                "brief": "DELETE method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "get",
                "value": "GET",
                "brief": "GET method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "head",
                "value": "HEAD",
                "brief": "HEAD method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "options",
                "value": "OPTIONS",
                "brief": "OPTIONS method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "patch",
                "value": "PATCH",
                "brief": "PATCH method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "post",
                "value": "POST",
                "brief": "POST method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "put",
                "value": "PUT",
                "brief": "PUT method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "trace",
                "value": "TRACE",
                "brief": "TRACE method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "Any HTTP method that the instrumentation has no prior knowledge of.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "HTTP request method.",
          "examples": [
            "GET",
            "POST",
            "HEAD"
          ],
          "requirement_level": "required",
          "note": "HTTP request method value SHOULD be \"known\" to the instrumentation.\nBy default, this convention defines \"known\" methods as the ones listed in [RFC9110](https://www.rfc-editor.org/rfc/rfc9110.html#name-methods)\nand the PATCH method defined in [RFC5789](https://www.rfc-editor.org/rfc/rfc5789.html).\n\nIf the HTTP request method is not known to instrumentation, it MUST set the `http.request.method` attribute to `_OTHER`.\n\nIf the HTTP instrumentation could end up converting valid HTTP request methods to `_OTHER`, then it MUST provide a way to override\nthe list of known HTTP methods. If this override is done via environment variable, then the environment variable MUST be named\nOTEL_INSTRUMENTATION_HTTP_KNOWN_METHODS and support a comma-separated list of case-sensitive known HTTP methods\n(this list MUST be a full override of the default known method, it is not a list of known methods in addition to the defaults).\n\nHTTP method names are case-sensitive and `http.request.method` attribute value MUST match a known HTTP method name exactly.\nInstrumentations for specific web frameworks that consider HTTP methods to be case insensitive, SHOULD populate a canonical equivalent.\nTracing instrumentations that do so, MUST also set `http.request.method_original` to the original value.\n",
          "stability": "stable"
        },
        {
          "name": "http.response.status_code",
          "type": "int",
          "brief": "[HTTP response status code](https://tools.ietf.org/html/rfc7231#section-6).",
          "examples": [
            200
          ],
          "requirement_level": {
            "conditionally_required": "If and only if one was received/sent."
          },
          "stability": "stable"
        },
        {
          "name": "network.protocol.name",
          "type": "string",
          "brief": "[OSI application layer](https://wikipedia.org/wiki/Application_layer) or non-OSI equivalent.",
          "examples": [
            "http",
            "spdy"
          ],
          "requirement_level": {
            "conditionally_required": "If not `http` and `network.protocol.version` is set."
          },
          "note": "The value SHOULD be normalized to lowercase.",
          "stability": "stable"
        },
        {
          "name": "network.protocol.version",
          "type": "string",
          "brief": "The actual version of the protocol used for network communication.",
          "examples": [
            "1.0",
            "1.1",
            "2",
            "3"
          ],
          "requirement_level": "recommended",
          "note": "If protocol version is subject to negotiation (for example using [ALPN](https://www.rfc-editor.org/rfc/rfc7301.html)), this attribute SHOULD be set to the negotiated version. If the actual protocol version is not known, this attribute SHOULD NOT be set.\n",
          "stability": "stable"
        },
        {
          "name": "url.scheme",
          "type": "string",
          "brief": "The [URI scheme](https://www.rfc-editor.org/rfc/rfc3986#section-3.1) component identifying the used protocol.\n",
          "examples": [
            "http",
            "https"
          ],
          "requirement_level": "opt_in",
          "stability": "stable"
        },
        {
          "name": "url.template",
          "type": "string",
          "brief": "The low-cardinality template of an [absolute path reference](https://www.rfc-editor.org/rfc/rfc3986#section-4.2).\n",
          "examples": [
            "/users/{id}",
            "/users/:id",
            "/users?id={id}"
          ],
          "requirement_level": {
            "conditionally_required": "If available."
          },
          "note": "The `url.template` MUST have low cardinality. It is not usually available on HTTP clients, but may be known by the application or specialized HTTP instrumentation.\n",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "http.client.response.body.size",
      "instrument": "histogram",
      "unit": "By",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/http/metrics.yaml",
        "attributes": {
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "brief",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "note",
              "requirement_level"
            ]
          },
          "http.request.method": {
            "source_group": "registry.http",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "http.response.status_code": {
            "source_group": "registry.http",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "network.protocol.name": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ]
          },
          "network.protocol.version": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "note",
              "requirement_level"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "requirement_level"
            ]
          },
          "url.scheme": {
            "source_group": "registry.url",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ]
          },
          "url.template": {
            "source_group": "registry.url",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.http.client.open_connections",
      "type": "metric",
      "brief": "Number of outbound HTTP connections that are currently active or idle on the client.",
      "stability": "development",
      "attributes": [
        {
          "name": "server.port",
          "type": "int",
          "brief": "Port identifier of the [\"URI origin\"](https://www.rfc-editor.org/rfc/rfc9110.html#name-uri-origin) HTTP request is sent to.\n",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": "required",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "server.address",
          "type": "string",
          "brief": "Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "required",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "network.peer.address",
          "type": "string",
          "brief": "Peer address of the network connection - IP address or Unix domain socket name.",
          "examples": [
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "recommended",
          "stability": "stable"
        },
        {
          "name": "network.protocol.version",
          "type": "string",
          "brief": "The actual version of the protocol used for network communication.",
          "examples": [
            "1.1",
            "2"
          ],
          "requirement_level": "recommended",
          "note": "If protocol version is subject to negotiation (for example using [ALPN](https://www.rfc-editor.org/rfc/rfc7301.html)), this attribute SHOULD be set to the negotiated version. If the actual protocol version is not known, this attribute SHOULD NOT be set.\n",
          "stability": "stable"
        },
        {
          "name": "url.scheme",
          "type": "string",
          "brief": "The [URI scheme](https://www.rfc-editor.org/rfc/rfc3986#section-3.1) component identifying the used protocol.\n",
          "examples": [
            "http",
            "https"
          ],
          "requirement_level": "opt_in",
          "stability": "stable"
        },
        {
          "name": "http.connection.state",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "active",
                "value": "active",
                "brief": "active state.",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "idle",
                "value": "idle",
                "brief": "idle state.",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "State of the HTTP connection in the HTTP connection pool.",
          "examples": [
            "active",
            "idle"
          ],
          "requirement_level": "required",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "http.client.open_connections",
      "instrument": "updowncounter",
      "unit": "{connection}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/http/metrics.yaml",
        "attributes": {
          "http.connection.state": {
            "source_group": "registry.http",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "network.peer.address": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "network.protocol.version": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "requirement_level"
            ]
          },
          "url.scheme": {
            "source_group": "registry.url",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.http.client.connection.duration",
      "type": "metric",
      "brief": "The duration of the successfully established outbound HTTP connections.",
      "stability": "development",
      "attributes": [
        {
          "name": "server.port",
          "type": "int",
          "brief": "Port identifier of the [\"URI origin\"](https://www.rfc-editor.org/rfc/rfc9110.html#name-uri-origin) HTTP request is sent to.\n",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": "required",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "server.address",
          "type": "string",
          "brief": "Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "required",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "network.peer.address",
          "type": "string",
          "brief": "Peer address of the network connection - IP address or Unix domain socket name.",
          "examples": [
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "recommended",
          "stability": "stable"
        },
        {
          "name": "network.protocol.version",
          "type": "string",
          "brief": "The actual version of the protocol used for network communication.",
          "examples": [
            "1.1",
            "2"
          ],
          "requirement_level": "recommended",
          "note": "If protocol version is subject to negotiation (for example using [ALPN](https://www.rfc-editor.org/rfc/rfc7301.html)), this attribute SHOULD be set to the negotiated version. If the actual protocol version is not known, this attribute SHOULD NOT be set.\n",
          "stability": "stable"
        },
        {
          "name": "url.scheme",
          "type": "string",
          "brief": "The [URI scheme](https://www.rfc-editor.org/rfc/rfc3986#section-3.1) component identifying the used protocol.\n",
          "examples": [
            "http",
            "https"
          ],
          "requirement_level": "opt_in",
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "http.client.connection.duration",
      "instrument": "histogram",
      "unit": "s",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/http/metrics.yaml",
        "attributes": {
          "network.peer.address": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "network.protocol.version": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "requirement_level"
            ]
          },
          "url.scheme": {
            "source_group": "registry.url",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.http.client.active_requests",
      "type": "metric",
      "brief": "Number of active HTTP requests.",
      "stability": "development",
      "attributes": [
        {
          "name": "server.port",
          "type": "int",
          "brief": "Port identifier of the [\"URI origin\"](https://www.rfc-editor.org/rfc/rfc9110.html#name-uri-origin) HTTP request is sent to.\n",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": "required",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "server.address",
          "type": "string",
          "brief": "Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "required",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "http.request.method",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "connect",
                "value": "CONNECT",
                "brief": "CONNECT method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "delete",
                "value": "DELETE",
                "brief": "DELETE method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "get",
                "value": "GET",
                "brief": "GET method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "head",
                "value": "HEAD",
                "brief": "HEAD method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "options",
                "value": "OPTIONS",
                "brief": "OPTIONS method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "patch",
                "value": "PATCH",
                "brief": "PATCH method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "post",
                "value": "POST",
                "brief": "POST method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "put",
                "value": "PUT",
                "brief": "PUT method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "trace",
                "value": "TRACE",
                "brief": "TRACE method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "Any HTTP method that the instrumentation has no prior knowledge of.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "HTTP request method.",
          "examples": [
            "GET",
            "POST",
            "HEAD"
          ],
          "requirement_level": "recommended",
          "note": "HTTP request method value SHOULD be \"known\" to the instrumentation.\nBy default, this convention defines \"known\" methods as the ones listed in [RFC9110](https://www.rfc-editor.org/rfc/rfc9110.html#name-methods)\nand the PATCH method defined in [RFC5789](https://www.rfc-editor.org/rfc/rfc5789.html).\n\nIf the HTTP request method is not known to instrumentation, it MUST set the `http.request.method` attribute to `_OTHER`.\n\nIf the HTTP instrumentation could end up converting valid HTTP request methods to `_OTHER`, then it MUST provide a way to override\nthe list of known HTTP methods. If this override is done via environment variable, then the environment variable MUST be named\nOTEL_INSTRUMENTATION_HTTP_KNOWN_METHODS and support a comma-separated list of case-sensitive known HTTP methods\n(this list MUST be a full override of the default known method, it is not a list of known methods in addition to the defaults).\n\nHTTP method names are case-sensitive and `http.request.method` attribute value MUST match a known HTTP method name exactly.\nInstrumentations for specific web frameworks that consider HTTP methods to be case insensitive, SHOULD populate a canonical equivalent.\nTracing instrumentations that do so, MUST also set `http.request.method_original` to the original value.\n",
          "stability": "stable"
        },
        {
          "name": "url.scheme",
          "type": "string",
          "brief": "The [URI scheme](https://www.rfc-editor.org/rfc/rfc3986#section-3.1) component identifying the used protocol.\n",
          "examples": [
            "http",
            "https"
          ],
          "requirement_level": "opt_in",
          "stability": "stable"
        },
        {
          "name": "url.template",
          "type": "string",
          "brief": "The low-cardinality template of an [absolute path reference](https://www.rfc-editor.org/rfc/rfc3986#section-4.2).\n",
          "examples": [
            "/users/{id}",
            "/users/:id",
            "/users?id={id}"
          ],
          "requirement_level": {
            "conditionally_required": "If available."
          },
          "note": "The `url.template` MUST have low cardinality. It is not usually available on HTTP clients, but may be known by the application or specialized HTTP instrumentation.\n",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "http.client.active_requests",
      "instrument": "updowncounter",
      "unit": "{request}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/http/metrics.yaml",
        "attributes": {
          "http.request.method": {
            "source_group": "registry.http",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "requirement_level"
            ]
          },
          "url.scheme": {
            "source_group": "registry.url",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ]
          },
          "url.template": {
            "source_group": "registry.url",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "registry.device",
      "type": "attribute_group",
      "brief": "Describes device attributes.\n",
      "attributes": [
        {
          "name": "device.id",
          "type": "string",
          "brief": "A unique identifier representing the device\n",
          "examples": [
            "2ab2916d-a51f-4ac8-80ee-45ac31a28092"
          ],
          "requirement_level": "recommended",
          "note": "The device identifier MUST only be defined using the values outlined below. This value is not an advertising identifier and MUST NOT be used as such. On iOS (Swift or Objective-C), this value MUST be equal to the [vendor identifier](https://developer.apple.com/documentation/uikit/uidevice/1620059-identifierforvendor). On Android (Java or Kotlin), this value MUST be equal to the Firebase Installation ID or a globally unique UUID which is persisted across sessions in your application. More information can be found [here](https://developer.android.com/training/articles/user-data-ids) on best practices and exact implementation details. Caution should be taken when storing personal data or anything which can identify a user. GDPR and data protection laws may apply, ensure you do your own due diligence.\n",
          "stability": "development"
        },
        {
          "name": "device.manufacturer",
          "type": "string",
          "brief": "The name of the device manufacturer\n",
          "examples": [
            "Apple",
            "Samsung"
          ],
          "requirement_level": "recommended",
          "note": "The Android OS provides this field via [Build](https://developer.android.com/reference/android/os/Build#MANUFACTURER). iOS apps SHOULD hardcode the value `Apple`.\n",
          "stability": "development"
        },
        {
          "name": "device.model.identifier",
          "type": "string",
          "brief": "The model identifier for the device\n",
          "examples": [
            "iPhone3,4",
            "SM-G920F"
          ],
          "requirement_level": "recommended",
          "note": "It's recommended this value represents a machine-readable version of the model identifier rather than the market or consumer-friendly name of the device.\n",
          "stability": "development"
        },
        {
          "name": "device.model.name",
          "type": "string",
          "brief": "The marketing name for the device model\n",
          "examples": [
            "iPhone 6s Plus",
            "Samsung Galaxy S6"
          ],
          "requirement_level": "recommended",
          "note": "It's recommended this value represents a human-readable version of the device model rather than a machine-readable alternative.\n",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/device/registry.yaml"
      },
      "display_name": "Device Attributes"
    },
    {
      "id": "resource.aws.log",
      "type": "resource",
      "brief": "Resources specific to Amazon Web Services.\n",
      "stability": "development",
      "attributes": [
        {
          "name": "aws.log.group.names",
          "type": "string[]",
          "brief": "The name(s) of the AWS log group(s) an application is writing to.\n",
          "examples": [
            [
              "/aws/lambda/my-function",
              "opentelemetry-service"
            ]
          ],
          "requirement_level": "recommended",
          "note": "Multiple log groups must be supported for cases like multi-container applications, where a single application has sidecar containers, and each write to their own log group.\n",
          "stability": "development"
        },
        {
          "name": "aws.log.group.arns",
          "type": "string[]",
          "brief": "The Amazon Resource Name(s) (ARN) of the AWS log group(s).\n",
          "examples": [
            [
              "arn:aws:logs:us-west-1:123456789012:log-group:/aws/my/group:*"
            ]
          ],
          "requirement_level": "recommended",
          "note": "See the [log group ARN format documentation](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/iam-access-control-overview-cwl.html#CWL_ARN_Format).\n",
          "stability": "development"
        },
        {
          "name": "aws.log.stream.names",
          "type": "string[]",
          "brief": "The name(s) of the AWS log stream(s) an application is writing to.\n",
          "examples": [
            [
              "logs/main/10838bed-421f-43ef-870a-f43feacbbb5b"
            ]
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "aws.log.stream.arns",
          "type": "string[]",
          "brief": "The ARN(s) of the AWS log stream(s).\n",
          "examples": [
            [
              "arn:aws:logs:us-west-1:123456789012:log-group:/aws/my/group:log-stream:logs/main/10838bed-421f-43ef-870a-f43feacbbb5b"
            ]
          ],
          "requirement_level": "recommended",
          "note": "See the [log stream ARN format documentation](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/iam-access-control-overview-cwl.html#CWL_ARN_Format). One log group can contain several log streams, so these ARNs necessarily identify both a log group and a log stream.\n",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": "aws.log",
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/aws/logs-resources.yaml",
        "attributes": {
          "aws.log.group.arns": {
            "source_group": "registry.aws.log",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.log.group.names": {
            "source_group": "registry.aws.log",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.log.stream.arns": {
            "source_group": "registry.aws.log",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.log.stream.names": {
            "source_group": "registry.aws.log",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "registry.gen_ai",
      "type": "attribute_group",
      "brief": "This document defines the attributes used to describe telemetry in the context of Generative Artificial Intelligence (GenAI) Models requests and responses.\n",
      "attributes": [
        {
          "name": "gen_ai.system",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "openai",
                "value": "openai",
                "brief": "OpenAI",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "vertex_ai",
                "value": "vertex_ai",
                "brief": "Vertex AI",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "gemini",
                "value": "gemini",
                "brief": "Gemini",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "anthropic",
                "value": "anthropic",
                "brief": "Anthropic",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "cohere",
                "value": "cohere",
                "brief": "Cohere",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "az.ai.inference",
                "value": "az.ai.inference",
                "brief": "Azure AI Inference",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "az.ai.openai",
                "value": "az.ai.openai",
                "brief": "Azure OpenAI",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "ibm.watsonx.ai",
                "value": "ibm.watsonx.ai",
                "brief": "IBM Watsonx AI",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "aws.bedrock",
                "value": "aws.bedrock",
                "brief": "AWS Bedrock",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "perplexity",
                "value": "perplexity",
                "brief": "Perplexity",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "xai",
                "value": "xai",
                "brief": "xAI",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "deepseek",
                "value": "deepseek",
                "brief": "DeepSeek",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "groq",
                "value": "groq",
                "brief": "Groq",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "mistral_ai",
                "value": "mistral_ai",
                "brief": "Mistral AI",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The Generative AI product as identified by the client or server instrumentation.",
          "examples": "openai",
          "requirement_level": "recommended",
          "note": "The `gen_ai.system` describes a family of GenAI models with specific model identified\nby `gen_ai.request.model` and `gen_ai.response.model` attributes.\n\nThe actual GenAI product may differ from the one identified by the client.\nMultiple systems, including Azure OpenAI and Gemini, are accessible by OpenAI client\nlibraries. In such cases, the `gen_ai.system` is set to `openai` based on the\ninstrumentation's best knowledge, instead of the actual system. The `server.address`\nattribute may help identify the actual system in use for `openai`.\n\nFor custom model, a custom friendly name SHOULD be used.\nIf none of these options apply, the `gen_ai.system` SHOULD be set to `_OTHER`.\n",
          "stability": "development"
        },
        {
          "name": "gen_ai.request.model",
          "type": "string",
          "brief": "The name of the GenAI model a request is being made to.",
          "examples": "gpt-4",
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "gen_ai.request.max_tokens",
          "type": "int",
          "brief": "The maximum number of tokens the model generates for a request.",
          "examples": [
            100
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "gen_ai.request.choice.count",
          "type": "int",
          "brief": "The target number of candidate completions to return.",
          "examples": [
            3
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "gen_ai.request.temperature",
          "type": "double",
          "brief": "The temperature setting for the GenAI request.",
          "examples": [
            0.0
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "gen_ai.request.top_p",
          "type": "double",
          "brief": "The top_p sampling setting for the GenAI request.",
          "examples": [
            1.0
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "gen_ai.request.top_k",
          "type": "double",
          "brief": "The top_k sampling setting for the GenAI request.",
          "examples": [
            1.0
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "gen_ai.request.stop_sequences",
          "type": "string[]",
          "brief": "List of sequences that the model will use to stop generating further tokens.",
          "examples": [
            [
              "forest",
              "lived"
            ]
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "gen_ai.request.frequency_penalty",
          "type": "double",
          "brief": "The frequency penalty setting for the GenAI request.",
          "examples": [
            0.1
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "gen_ai.request.presence_penalty",
          "type": "double",
          "brief": "The presence penalty setting for the GenAI request.",
          "examples": [
            0.1
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "gen_ai.request.encoding_formats",
          "type": "string[]",
          "brief": "The encoding formats requested in an embeddings operation, if specified.",
          "examples": [
            [
              "base64"
            ],
            [
              "float",
              "binary"
            ]
          ],
          "requirement_level": "recommended",
          "note": "In some GenAI systems the encoding formats are called embedding types. Also, some GenAI systems only accept a single format per request.\n",
          "stability": "development"
        },
        {
          "name": "gen_ai.request.seed",
          "type": "int",
          "brief": "Requests with same seed value more likely to return same result.",
          "examples": [
            100
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "gen_ai.response.id",
          "type": "string",
          "brief": "The unique identifier for the completion.",
          "examples": [
            "chatcmpl-123"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "gen_ai.response.model",
          "type": "string",
          "brief": "The name of the model that generated the response.",
          "examples": [
            "gpt-4-0613"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "gen_ai.response.finish_reasons",
          "type": "string[]",
          "brief": "Array of reasons the model stopped generating tokens, corresponding to each generation received.",
          "examples": [
            [
              "stop"
            ],
            [
              "stop",
              "length"
            ]
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "gen_ai.usage.input_tokens",
          "type": "int",
          "brief": "The number of tokens used in the GenAI input (prompt).",
          "examples": [
            100
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "gen_ai.usage.output_tokens",
          "type": "int",
          "brief": "The number of tokens used in the GenAI response (completion).",
          "examples": [
            180
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "gen_ai.token.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "input",
                "value": "input",
                "brief": "Input tokens (prompt, input, etc.)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "completion",
                "value": "output",
                "brief": "Output tokens (completion, response, etc.)",
                "note": null,
                "stability": "development",
                "deprecated": "Replaced by `output`."
              },
              {
                "id": "output",
                "value": "output",
                "brief": "Output tokens (completion, response, etc.)",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The type of token being counted.",
          "examples": [
            "input",
            "output"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "gen_ai.agent.id",
          "type": "string",
          "brief": "The unique identifier of the GenAI agent.",
          "examples": [
            "asst_5j66UpCpwteGg4YSxUnt7lPY"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "gen_ai.agent.name",
          "type": "string",
          "brief": "Human-readable name of the GenAI agent provided by the application.",
          "examples": [
            "Math Tutor",
            "Fiction Writer"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "gen_ai.agent.description",
          "type": "string",
          "brief": "Free-form description of the GenAI agent provided by the application.",
          "examples": [
            "Helps with math problems",
            "Generates fiction stories"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "gen_ai.tool.name",
          "type": "string",
          "brief": "Name of the tool utilized by the agent.",
          "examples": [
            "Flights"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "gen_ai.tool.call.id",
          "type": "string",
          "brief": "The tool call identifier.",
          "examples": [
            "call_mszuSIzqtI65i1wAUOE8w5H4"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "gen_ai.tool.type",
          "type": "string",
          "brief": "Type of the tool utilized by the agent",
          "examples": [
            "function",
            "extension",
            "datastore"
          ],
          "requirement_level": "recommended",
          "note": "Extension: A tool executed on the agent-side to directly call external APIs, bridging the gap between the agent and real-world systems.\n  Agent-side operations involve actions that are performed by the agent on the server or within the agent's controlled environment.\nFunction: A tool executed on the client-side, where the agent generates parameters for a predefined function, and the client executes the logic.\n  Client-side operations are actions taken on the user's end or within the client application.\nDatastore: A tool used by the agent to access and query structured or unstructured external data for retrieval-augmented tasks or knowledge updates.\n",
          "stability": "development"
        },
        {
          "name": "gen_ai.operation.name",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "chat",
                "value": "chat",
                "brief": "Chat completion operation such as [OpenAI Chat API](https://platform.openai.com/docs/api-reference/chat)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "text_completion",
                "value": "text_completion",
                "brief": "Text completions operation such as [OpenAI Completions API (Legacy)](https://platform.openai.com/docs/api-reference/completions)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "embeddings",
                "value": "embeddings",
                "brief": "Embeddings operation such as [OpenAI Create embeddings API](https://platform.openai.com/docs/api-reference/embeddings/create)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "create_agent",
                "value": "create_agent",
                "brief": "Create GenAI agent",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "execute_tool",
                "value": "execute_tool",
                "brief": "Execute a tool",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The name of the operation being performed.",
          "requirement_level": "recommended",
          "note": "If one of the predefined values applies, but specific system uses a different name it's RECOMMENDED to document it in the semantic conventions for specific GenAI system and use system-specific name in the instrumentation. If a different name is not documented, instrumentation libraries SHOULD use applicable predefined value.\n",
          "stability": "development"
        },
        {
          "name": "gen_ai.output.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "text",
                "value": "text",
                "brief": "Plain text",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "json",
                "value": "json",
                "brief": "JSON object with known or unknown schema",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "image",
                "value": "image",
                "brief": "Image",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "speech",
                "value": "speech",
                "brief": "Speech",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "Represents the content type requested by the client.",
          "requirement_level": "recommended",
          "note": "This attribute SHOULD be used when the client requests output of a specific type. The model may return zero or more outputs of this type.\nThis attribute specifies the output modality and not the actual output format. For example, if an image is requested, the actual output could be a URL pointing to an image file.\nAdditional output format details may be recorded in the future in the `gen_ai.output.{type}.*` attributes.\n",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/gen-ai/registry.yaml"
      },
      "display_name": "GenAI Attributes"
    },
    {
      "id": "registry.gen_ai.openai",
      "type": "attribute_group",
      "brief": "This group defines attributes for OpenAI.\n",
      "attributes": [
        {
          "name": "gen_ai.openai.request.service_tier",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "auto",
                "value": "auto",
                "brief": "The system will utilize scale tier credits until they are exhausted.",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "default",
                "value": "default",
                "brief": "The system will utilize the default scale tier.",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The service tier requested. May be a specific tier, default, or auto.",
          "examples": [
            "auto",
            "default"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "gen_ai.openai.response.service_tier",
          "type": "string",
          "brief": "The service tier used for the response.",
          "examples": [
            "scale",
            "default"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "gen_ai.openai.response.system_fingerprint",
          "type": "string",
          "brief": "A fingerprint to track any eventual change in the Generative AI environment.",
          "examples": [
            "fp_44709d6fcb"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/gen-ai/registry.yaml"
      },
      "display_name": "OpenAI Attributes"
    },
    {
      "id": "registry.client",
      "type": "attribute_group",
      "brief": "These attributes may be used to describe the client in a connection-based network interaction where there is one side that initiates the connection (the client is the side that initiates the connection). This covers all TCP network interactions since TCP is connection-based and one side initiates the connection (an exception is made for peer-to-peer communication over TCP where the \"user-facing\" surface of the protocol / API doesn't expose a clear notion of client and server). This also covers UDP network interactions where one side initiates the interaction, e.g. QUIC (HTTP/3) and DNS.\n",
      "attributes": [
        {
          "name": "client.address",
          "type": "string",
          "brief": "Client address - domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "client.example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "recommended",
          "note": "When observed from the server side, and when communicating through an intermediary, `client.address` SHOULD represent the client address behind any intermediaries,  for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "client.port",
          "type": "int",
          "brief": "Client port number.",
          "examples": [
            65123
          ],
          "requirement_level": "recommended",
          "note": "When observed from the server side, and when communicating through an intermediary, `client.port` SHOULD represent the client port behind any intermediaries,  for example proxies, if it's available.\n",
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/client/registry.yaml"
      },
      "display_name": "Client Attributes"
    },
    {
      "id": "registry.process.deprecated",
      "type": "attribute_group",
      "brief": "Deprecated process attributes.",
      "attributes": [
        {
          "name": "process.cpu.state",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "system",
                "value": "system",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "user",
                "value": "user",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "wait",
                "value": "wait",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "Deprecated, use `cpu.mode` instead.",
          "requirement_level": "recommended",
          "stability": "development",
          "deprecated": {
            "reason": "uncategorized",
            "note": "Replaced by `cpu.mode`"
          }
        },
        {
          "name": "process.executable.build_id.profiling",
          "type": "string",
          "brief": "\"Deprecated, use `process.executable.build_id.htlhash` instead.\"\n",
          "examples": [
            "600DCAFE4A110000F2BF38C493F5FB92"
          ],
          "requirement_level": "recommended",
          "stability": "development",
          "deprecated": {
            "reason": "uncategorized",
            "note": "Replaced by `process.executable.build_id.htlhash`"
          }
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/process/deprecated/registry-deprecated.yaml"
      },
      "display_name": "Deprecated Process Attributes"
    },
    {
      "id": "registry.db",
      "type": "attribute_group",
      "brief": "This group defines the attributes used to describe telemetry in the context of databases.\n",
      "attributes": [
        {
          "name": "db.collection.name",
          "type": "string",
          "brief": "The name of a collection (table, container) within the database.",
          "examples": [
            "public.users",
            "customers"
          ],
          "requirement_level": "recommended",
          "note": "It is RECOMMENDED to capture the value as provided by the application\nwithout attempting to do any case normalization.\n\nThe collection name SHOULD NOT be extracted from `db.query.text`,\nwhen the database system supports cross-table queries in non-batch operations.\n\nFor batch operations, if the individual operations are known to have the same\ncollection name then that collection name SHOULD be used.\n",
          "stability": "release_candidate"
        },
        {
          "name": "db.namespace",
          "type": "string",
          "brief": "The name of the database, fully qualified within the server address and port.\n",
          "examples": [
            "customers",
            "test.users"
          ],
          "requirement_level": "recommended",
          "note": "If a database system has multiple namespace components, they SHOULD be concatenated (potentially using database system specific conventions) from most general to most specific namespace component, and more specific namespaces SHOULD NOT be captured without the more general namespaces, to ensure that \"startswith\" queries for the more general namespaces will be valid.\nSemantic conventions for individual database systems SHOULD document what `db.namespace` means in the context of that system.\nIt is RECOMMENDED to capture the value as provided by the application without attempting to do any case normalization.\n",
          "stability": "release_candidate"
        },
        {
          "name": "db.operation.name",
          "type": "string",
          "brief": "The name of the operation or command being executed.\n",
          "examples": [
            "findAndModify",
            "HMSET",
            "SELECT"
          ],
          "requirement_level": "recommended",
          "note": "It is RECOMMENDED to capture the value as provided by the application\nwithout attempting to do any case normalization.\n\nThe operation name SHOULD NOT be extracted from `db.query.text`,\nwhen the database system supports cross-table queries in non-batch operations.\n\nFor batch operations, if the individual operations are known to have the same operation name\nthen that operation name SHOULD be used prepended by `BATCH `,\notherwise `db.operation.name` SHOULD be `BATCH` or some other database\nsystem specific term if more applicable.\n",
          "stability": "release_candidate"
        },
        {
          "name": "db.query.text",
          "type": "string",
          "brief": "The database query being executed.\n",
          "examples": [
            "SELECT * FROM wuser_table where username = ?",
            "SET mykey ?"
          ],
          "requirement_level": "recommended",
          "note": "For sanitization see [Sanitization of `db.query.text`](../database/database-spans.md#sanitization-of-dbquerytext).\nFor batch operations, if the individual operations are known to have the same query text then that query text SHOULD be used, otherwise all of the individual query texts SHOULD be concatenated with separator `; ` or some other database system specific separator if more applicable.\nEven though parameterized query text can potentially have sensitive data, by using a parameterized query the user is giving a strong signal that any sensitive data will be passed as parameter values, and the benefit to observability of capturing the static part of the query text by default outweighs the risk.\n",
          "stability": "release_candidate"
        },
        {
          "name": "db.operation.parameter",
          "type": "template[string]",
          "brief": "A database operation parameter, with `<key>` being the parameter name, and the attribute value being a string representation of the parameter value.\n",
          "examples": [
            "someval",
            "55"
          ],
          "requirement_level": "recommended",
          "note": "If a parameter has no name and instead is referenced only by index, then `<key>` SHOULD be the 0-based index.\nIf `db.query.text` is also captured, then `db.operation.parameter.<key>` SHOULD match up with the parameterized placeholders present in `db.query.text`.\n",
          "stability": "release_candidate"
        },
        {
          "name": "db.query.summary",
          "type": "string",
          "brief": "Low cardinality representation of a database query text.\n",
          "examples": [
            "SELECT wuser_table",
            "INSERT shipping_details SELECT orders",
            "get user by id"
          ],
          "requirement_level": "recommended",
          "note": "`db.query.summary` provides static summary of the query text. It describes a class of database queries and is useful as a grouping key, especially when analyzing telemetry for database calls involving complex queries.\nSummary may be available to the instrumentation through instrumentation hooks or other means. If it is not available, instrumentations that support query parsing SHOULD generate a summary following [Generating query summary](../database/database-spans.md#generating-a-summary-of-the-query-text) section.\n",
          "stability": "release_candidate"
        },
        {
          "name": "db.operation.batch.size",
          "type": "int",
          "brief": "The number of queries included in a batch operation.",
          "examples": [
            2,
            3,
            4
          ],
          "requirement_level": "recommended",
          "note": "Operations are only considered batches when they contain two or more operations, and so `db.operation.batch.size` SHOULD never be `1`.\n",
          "stability": "release_candidate"
        },
        {
          "name": "db.response.status_code",
          "type": "string",
          "brief": "Database response status code.",
          "examples": [
            "102",
            "ORA-17002",
            "08P01",
            "404"
          ],
          "requirement_level": "recommended",
          "note": "The status code returned by the database. Usually it represents an error code, but may also represent partial success, warning, or differentiate between various types of successful outcomes.\nSemantic conventions for individual database systems SHOULD document what `db.response.status_code` means in the context of that system.\n",
          "stability": "release_candidate"
        },
        {
          "name": "db.response.returned_rows",
          "type": "int",
          "brief": "Number of rows returned by the operation.",
          "examples": [
            10,
            30,
            1000
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "db.system.name",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "other_sql",
                "value": "other_sql",
                "brief": "Some other SQL database. Fallback only.",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "softwareag.adabas",
                "value": "softwareag.adabas",
                "brief": "[Adabas (Adaptable Database System)](https://documentation.softwareag.com/?pf=adabas)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "actian.ingres",
                "value": "actian.ingres",
                "brief": "[Actian Ingres](https://www.actian.com/databases/ingres/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "aws.dynamodb",
                "value": "aws.dynamodb",
                "brief": "[Amazon DynamoDB](https://aws.amazon.com/pm/dynamodb/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "aws.redshift",
                "value": "aws.redshift",
                "brief": "[Amazon Redshift](https://aws.amazon.com/redshift/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "azure.cosmosdb",
                "value": "azure.cosmosdb",
                "brief": "[Azure Cosmos DB](https://learn.microsoft.com/azure/cosmos-db)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "intersystems.cache",
                "value": "intersystems.cache",
                "brief": "[InterSystems Caché](https://www.intersystems.com/products/cache/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "cassandra",
                "value": "cassandra",
                "brief": "[Apache Cassandra](https://cassandra.apache.org/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "clickhouse",
                "value": "clickhouse",
                "brief": "[ClickHouse](https://clickhouse.com/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "cockroachdb",
                "value": "cockroachdb",
                "brief": "[CockroachDB](https://www.cockroachlabs.com/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "couchbase",
                "value": "couchbase",
                "brief": "[Couchbase](https://www.couchbase.com/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "couchdb",
                "value": "couchdb",
                "brief": "[Apache CouchDB](https://couchdb.apache.org/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "derby",
                "value": "derby",
                "brief": "[Apache Derby](https://db.apache.org/derby/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "elasticsearch",
                "value": "elasticsearch",
                "brief": "[Elasticsearch](https://www.elastic.co/elasticsearch)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "firebirdsql",
                "value": "firebirdsql",
                "brief": "[Firebird](https://www.firebirdsql.org/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "gcp.spanner",
                "value": "gcp.spanner",
                "brief": "[Google Cloud Spanner](https://cloud.google.com/spanner)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "geode",
                "value": "geode",
                "brief": "[Apache Geode](https://geode.apache.org/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "h2database",
                "value": "h2database",
                "brief": "[H2 Database](https://h2database.com/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "hbase",
                "value": "hbase",
                "brief": "[Apache HBase](https://hbase.apache.org/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "hive",
                "value": "hive",
                "brief": "[Apache Hive](https://hive.apache.org/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "hsqldb",
                "value": "hsqldb",
                "brief": "[HyperSQL Database](https://hsqldb.org/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "ibm.db2",
                "value": "ibm.db2",
                "brief": "[IBM Db2](https://www.ibm.com/db2)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "ibm.informix",
                "value": "ibm.informix",
                "brief": "[IBM Informix](https://www.ibm.com/products/informix)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "ibm.netezza",
                "value": "ibm.netezza",
                "brief": "[IBM Netezza](https://www.ibm.com/products/netezza)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "influxdb",
                "value": "influxdb",
                "brief": "[InfluxDB](https://www.influxdata.com/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "instantdb",
                "value": "instantdb",
                "brief": "[Instant](https://www.instantdb.com/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "mariadb",
                "value": "mariadb",
                "brief": "[MariaDB](https://mariadb.org/)",
                "note": null,
                "stability": "release_candidate",
                "deprecated": null
              },
              {
                "id": "memcached",
                "value": "memcached",
                "brief": "[Memcached](https://memcached.org/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "mongodb",
                "value": "mongodb",
                "brief": "[MongoDB](https://www.mongodb.com/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "microsoft.sql_server",
                "value": "microsoft.sql_server",
                "brief": "[Microsoft SQL Server](https://www.microsoft.com/sql-server)",
                "note": null,
                "stability": "release_candidate",
                "deprecated": null
              },
              {
                "id": "mysql",
                "value": "mysql",
                "brief": "[MySQL](https://www.mysql.com/)",
                "note": null,
                "stability": "release_candidate",
                "deprecated": null
              },
              {
                "id": "neo4j",
                "value": "neo4j",
                "brief": "[Neo4j](https://neo4j.com/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "opensearch",
                "value": "opensearch",
                "brief": "[OpenSearch](https://opensearch.org/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "oracle.db",
                "value": "oracle.db",
                "brief": "[Oracle Database](https://www.oracle.com/database/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "postgresql",
                "value": "postgresql",
                "brief": "[PostgreSQL](https://www.postgresql.org/)",
                "note": null,
                "stability": "release_candidate",
                "deprecated": null
              },
              {
                "id": "redis",
                "value": "redis",
                "brief": "[Redis](https://redis.io/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "sap.hana",
                "value": "sap.hana",
                "brief": "[SAP HANA](https://www.sap.com/products/technology-platform/hana/what-is-sap-hana.html)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "sap.maxdb",
                "value": "sap.maxdb",
                "brief": "[SAP MaxDB](https://maxdb.sap.com/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "sqlite",
                "value": "sqlite",
                "brief": "[SQLite](https://www.sqlite.org/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "teradata",
                "value": "teradata",
                "brief": "[Teradata](https://www.teradata.com/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "trino",
                "value": "trino",
                "brief": "[Trino](https://trino.io/)",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The database management system (DBMS) product as identified by the client instrumentation.",
          "requirement_level": "recommended",
          "note": "The actual DBMS may differ from the one identified by the client. For example, when using PostgreSQL client libraries to connect to a CockroachDB, the `db.system.name` is set to `postgresql` based on the instrumentation's best knowledge.\n",
          "stability": "release_candidate"
        },
        {
          "name": "db.client.connection.state",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "idle",
                "value": "idle",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "used",
                "value": "used",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The state of a connection in the pool",
          "examples": [
            "idle"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "db.client.connection.pool.name",
          "type": "string",
          "brief": "The name of the connection pool; unique within the instrumented application. In case the connection pool implementation doesn't provide a name, instrumentation SHOULD use a combination of parameters that would make the name unique, for example, combining attributes `server.address`, `server.port`, and `db.namespace`, formatted as `server.address:server.port/db.namespace`. Instrumentations that generate connection pool name following different patterns SHOULD document it.\n",
          "examples": [
            "myDataSource"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/database/registry.yaml"
      },
      "display_name": "General Database Attributes"
    },
    {
      "id": "registry.host",
      "type": "attribute_group",
      "brief": "A host is defined as a computing instance. For example, physical servers, virtual machines, switches or disk array.\n",
      "attributes": [
        {
          "name": "host.id",
          "type": "string",
          "brief": "Unique host ID. For Cloud, this must be the instance_id assigned by the cloud provider. For non-containerized systems, this should be the `machine-id`. See the table below for the sources to use to determine the `machine-id` based on operating system.\n",
          "examples": [
            "fdbf79e8af94cb7f9e8df36789187052"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "host.name",
          "type": "string",
          "brief": "Name of the host. On Unix systems, it may contain what the hostname command returns, or the fully qualified hostname, or another name specified by the user.\n",
          "examples": [
            "opentelemetry-test"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "host.type",
          "type": "string",
          "brief": "Type of host. For Cloud, this must be the machine type.\n",
          "examples": [
            "n1-standard-1"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "host.arch",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "amd64",
                "value": "amd64",
                "brief": "AMD64",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "arm32",
                "value": "arm32",
                "brief": "ARM32",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "arm64",
                "value": "arm64",
                "brief": "ARM64",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "ia64",
                "value": "ia64",
                "brief": "Itanium",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "ppc32",
                "value": "ppc32",
                "brief": "32-bit PowerPC",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "ppc64",
                "value": "ppc64",
                "brief": "64-bit PowerPC",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "s390x",
                "value": "s390x",
                "brief": "IBM z/Architecture",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "x86",
                "value": "x86",
                "brief": "32-bit x86",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The CPU architecture the host system is running on.\n",
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "host.image.name",
          "type": "string",
          "brief": "Name of the VM image or OS install the host was instantiated from.\n",
          "examples": [
            "infra-ami-eks-worker-node-7d4ec78312",
            "CentOS-8-x86_64-1905"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "host.image.id",
          "type": "string",
          "brief": "VM image ID or host OS image ID. For Cloud, this value is from the provider.\n",
          "examples": [
            "ami-07b06b442921831e5"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "host.image.version",
          "type": "string",
          "brief": "The version string of the VM image or host OS as defined in [Version Attributes](/docs/resource/README.md#version-attributes).\n",
          "examples": [
            "0.1"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "host.ip",
          "type": "string[]",
          "brief": "Available IP addresses of the host, excluding loopback interfaces.\n",
          "examples": [
            [
              "192.168.1.140",
              "fe80::abc2:4a28:737a:609e"
            ]
          ],
          "requirement_level": "recommended",
          "note": "IPv4 Addresses MUST be specified in dotted-quad notation. IPv6 addresses MUST be specified in the [RFC 5952](https://www.rfc-editor.org/rfc/rfc5952.html) format.\n",
          "stability": "development"
        },
        {
          "name": "host.mac",
          "type": "string[]",
          "brief": "Available MAC addresses of the host, excluding loopback interfaces.\n",
          "examples": [
            [
              "AC-DE-48-23-45-67",
              "AC-DE-48-23-45-67-01-9F"
            ]
          ],
          "requirement_level": "recommended",
          "note": "MAC Addresses MUST be represented in [IEEE RA hexadecimal form](https://standards.ieee.org/wp-content/uploads/import/documents/tutorials/eui.pdf): as hyphen-separated octets in uppercase hexadecimal form from most to least significant.\n",
          "stability": "development"
        },
        {
          "name": "host.cpu.vendor.id",
          "type": "string",
          "brief": "Processor manufacturer identifier. A maximum 12-character string.\n",
          "examples": [
            "GenuineIntel"
          ],
          "requirement_level": "recommended",
          "note": "[CPUID](https://wiki.osdev.org/CPUID) command returns the vendor ID string in EBX, EDX and ECX registers. Writing these to memory in this order results in a 12-character string.\n",
          "stability": "development"
        },
        {
          "name": "host.cpu.family",
          "type": "string",
          "brief": "Family or generation of the CPU.\n",
          "examples": [
            "6",
            "PA-RISC 1.1e"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "host.cpu.model.id",
          "type": "string",
          "brief": "Model identifier. It provides more granular information about the CPU, distinguishing it from other CPUs within the same family.\n",
          "examples": [
            "6",
            "9000/778/B180L"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "host.cpu.model.name",
          "type": "string",
          "brief": "Model designation of the processor.\n",
          "examples": [
            "11th Gen Intel(R) Core(TM) i7-1185G7 @ 3.00GHz"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "host.cpu.stepping",
          "type": "string",
          "brief": "Stepping or core revisions.\n",
          "examples": [
            "1",
            "r1p1"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "host.cpu.cache.l2.size",
          "type": "int",
          "brief": "The amount of level 2 memory cache available to the processor (in Bytes).\n",
          "examples": [
            12288000
          ],
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/host/registry.yaml"
      },
      "display_name": "Host Attributes"
    },
    {
      "id": "registry.signalr",
      "type": "attribute_group",
      "brief": "SignalR attributes",
      "attributes": [
        {
          "name": "signalr.connection.status",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "normal_closure",
                "value": "normal_closure",
                "brief": "The connection was closed normally.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "timeout",
                "value": "timeout",
                "brief": "The connection was closed due to a timeout.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "app_shutdown",
                "value": "app_shutdown",
                "brief": "The connection was closed because the app is shutting down.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "SignalR HTTP connection closure status.",
          "examples": [
            "app_shutdown",
            "timeout"
          ],
          "requirement_level": "recommended",
          "stability": "stable"
        },
        {
          "name": "signalr.transport",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "server_sent_events",
                "value": "server_sent_events",
                "brief": "ServerSentEvents protocol",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "long_polling",
                "value": "long_polling",
                "brief": "LongPolling protocol",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "web_sockets",
                "value": "web_sockets",
                "brief": "WebSockets protocol",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "[SignalR transport type](https://github.com/dotnet/aspnetcore/blob/main/src/SignalR/docs/specs/TransportProtocols.md)",
          "examples": [
            "web_sockets",
            "long_polling"
          ],
          "requirement_level": "recommended",
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/signalr/registry.yaml"
      },
      "display_name": "SignalR Attributes"
    },
    {
      "id": "metric.k8s.pod.uptime",
      "type": "metric",
      "brief": "The time the Pod has been running",
      "note": "Instrumentations SHOULD use a gauge with type `double` and measure uptime in seconds as a floating point number with the highest precision available.\nThe actual accuracy would depend on the instrumentation and operating system.\n",
      "stability": "development",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "k8s.pod.uptime",
      "instrument": "gauge",
      "unit": "s",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/k8s/metrics.yaml"
      }
    },
    {
      "id": "metric.k8s.pod.cpu.time",
      "type": "metric",
      "brief": "Total CPU time consumed",
      "note": "Total CPU time consumed by the specific Pod on all available CPU cores\n",
      "stability": "development",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "k8s.pod.cpu.time",
      "instrument": "counter",
      "unit": "s",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/k8s/metrics.yaml"
      }
    },
    {
      "id": "metric.k8s.pod.cpu.usage",
      "type": "metric",
      "brief": "Pod's CPU usage, measured in cpus. Range from 0 to the number of allocatable CPUs",
      "note": "CPU usage of the specific Pod on all available CPU cores, averaged over the sample window\n",
      "stability": "development",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "k8s.pod.cpu.usage",
      "instrument": "gauge",
      "unit": "{cpu}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/k8s/metrics.yaml"
      }
    },
    {
      "id": "metric.k8s.pod.memory.usage",
      "type": "metric",
      "brief": "Memory usage of the Pod",
      "note": "Total memory usage of the Pod\n",
      "stability": "development",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "k8s.pod.memory.usage",
      "instrument": "gauge",
      "unit": "By",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/k8s/metrics.yaml"
      }
    },
    {
      "id": "metric.k8s.pod.network.io",
      "type": "metric",
      "brief": "Network bytes for the Pod",
      "stability": "development",
      "attributes": [
        {
          "name": "network.io.direction",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "transmit",
                "value": "transmit",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "receive",
                "value": "receive",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The network IO operation direction.",
          "examples": [
            "transmit"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "network.interface.name",
          "type": "string",
          "brief": "The network interface name.",
          "examples": [
            "lo",
            "eth0"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "k8s.pod.network.io",
      "instrument": "counter",
      "unit": "By",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/k8s/metrics.yaml",
        "attributes": {
          "network.interface.name": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "network.io.direction": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "metric.k8s.pod.network.errors",
      "type": "metric",
      "brief": "Pod network errors",
      "stability": "development",
      "attributes": [
        {
          "name": "network.io.direction",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "transmit",
                "value": "transmit",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "receive",
                "value": "receive",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The network IO operation direction.",
          "examples": [
            "transmit"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "network.interface.name",
          "type": "string",
          "brief": "The network interface name.",
          "examples": [
            "lo",
            "eth0"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "k8s.pod.network.errors",
      "instrument": "counter",
      "unit": "{error}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/k8s/metrics.yaml",
        "attributes": {
          "network.interface.name": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "network.io.direction": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "metric.k8s.node.uptime",
      "type": "metric",
      "brief": "The time the Node has been running",
      "note": "Instrumentations SHOULD use a gauge with type `double` and measure uptime in seconds as a floating point number with the highest precision available.\nThe actual accuracy would depend on the instrumentation and operating system.\n",
      "stability": "development",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "k8s.node.uptime",
      "instrument": "gauge",
      "unit": "s",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/k8s/metrics.yaml"
      }
    },
    {
      "id": "metric.k8s.node.cpu.time",
      "type": "metric",
      "brief": "Total CPU time consumed",
      "note": "Total CPU time consumed by the specific Node on all available CPU cores\n",
      "stability": "development",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "k8s.node.cpu.time",
      "instrument": "counter",
      "unit": "s",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/k8s/metrics.yaml"
      }
    },
    {
      "id": "metric.k8s.node.cpu.usage",
      "type": "metric",
      "brief": "Node's CPU usage, measured in cpus. Range from 0 to the number of allocatable CPUs",
      "note": "CPU usage of the specific Node on all available CPU cores, averaged over the sample window\n",
      "stability": "development",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "k8s.node.cpu.usage",
      "instrument": "gauge",
      "unit": "{cpu}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/k8s/metrics.yaml"
      }
    },
    {
      "id": "metric.k8s.node.memory.usage",
      "type": "metric",
      "brief": "Memory usage of the Node",
      "note": "Total memory usage of the Node\n",
      "stability": "development",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "k8s.node.memory.usage",
      "instrument": "gauge",
      "unit": "By",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/k8s/metrics.yaml"
      }
    },
    {
      "id": "metric.k8s.node.network.io",
      "type": "metric",
      "brief": "Network bytes for the Node",
      "stability": "development",
      "attributes": [
        {
          "name": "network.io.direction",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "transmit",
                "value": "transmit",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "receive",
                "value": "receive",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The network IO operation direction.",
          "examples": [
            "transmit"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "network.interface.name",
          "type": "string",
          "brief": "The network interface name.",
          "examples": [
            "lo",
            "eth0"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "k8s.node.network.io",
      "instrument": "counter",
      "unit": "By",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/k8s/metrics.yaml",
        "attributes": {
          "network.interface.name": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "network.io.direction": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "metric.k8s.node.network.errors",
      "type": "metric",
      "brief": "Node network errors",
      "stability": "development",
      "attributes": [
        {
          "name": "network.io.direction",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "transmit",
                "value": "transmit",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "receive",
                "value": "receive",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The network IO operation direction.",
          "examples": [
            "transmit"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "network.interface.name",
          "type": "string",
          "brief": "The network interface name.",
          "examples": [
            "lo",
            "eth0"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "k8s.node.network.errors",
      "instrument": "counter",
      "unit": "{error}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/k8s/metrics.yaml",
        "attributes": {
          "network.interface.name": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "network.io.direction": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "metric.k8s.deployment.desired_pods",
      "type": "metric",
      "brief": "Number of desired replica pods in this deployment",
      "note": "This metric aligns with the `replicas` field of the\n[K8s DeploymentSpec](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#deploymentspec-v1-apps).\n\nThis metric SHOULD, at a minimum, be reported against a\n[`k8s.deployment`](../resource/k8s.md#deployment) resource.\n",
      "stability": "development",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "k8s.deployment.desired_pods",
      "instrument": "updowncounter",
      "unit": "{pod}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/k8s/metrics.yaml"
      }
    },
    {
      "id": "metric.k8s.deployment.available_pods",
      "type": "metric",
      "brief": "Total number of available replica pods (ready for at least minReadySeconds) targeted by this deployment",
      "note": "This metric aligns with the `availableReplicas` field of the\n[K8s DeploymentStatus](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#deploymentstatus-v1-apps).\n\nThis metric SHOULD, at a minimum, be reported against a\n[`k8s.deployment`](../resource/k8s.md#deployment) resource.\n",
      "stability": "development",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "k8s.deployment.available_pods",
      "instrument": "updowncounter",
      "unit": "{pod}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/k8s/metrics.yaml"
      }
    },
    {
      "id": "metric.k8s.replicaset.desired_pods",
      "type": "metric",
      "brief": "Number of desired replica pods in this replicaset",
      "note": "This metric aligns with the `replicas` field of the\n[K8s ReplicaSetSpec](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#replicasetspec-v1-apps).\n\nThis metric SHOULD, at a minimum, be reported against a\n[`k8s.replicaset`](../resource/k8s.md#replicaset) resource.\n",
      "stability": "development",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "k8s.replicaset.desired_pods",
      "instrument": "updowncounter",
      "unit": "{pod}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/k8s/metrics.yaml"
      }
    },
    {
      "id": "metric.k8s.replicaset.available_pods",
      "type": "metric",
      "brief": "Total number of available replica pods (ready for at least minReadySeconds) targeted by this replicaset",
      "note": "This metric aligns with the `availableReplicas` field of the\n[K8s ReplicaSetStatus](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#replicasetstatus-v1-apps).\n\nThis metric SHOULD, at a minimum, be reported against a\n[`k8s.replicaset`](../resource/k8s.md#replicaset) resource.\n",
      "stability": "development",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "k8s.replicaset.available_pods",
      "instrument": "updowncounter",
      "unit": "{pod}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/k8s/metrics.yaml"
      }
    },
    {
      "id": "metric.k8s.replicationcontroller.desired_pods",
      "type": "metric",
      "brief": "Number of desired replica pods in this replication controller",
      "note": "This metric aligns with the `replicas` field of the\n[K8s ReplicationControllerSpec](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#replicationcontrollerspec-v1-core)\n\nThis metric SHOULD, at a minimum, be reported against a\n[`k8s.replicationcontroller`](../resource/k8s.md#replicationcontroller) resource.\n",
      "stability": "development",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "k8s.replicationcontroller.desired_pods",
      "instrument": "updowncounter",
      "unit": "{pod}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/k8s/metrics.yaml"
      }
    },
    {
      "id": "metric.k8s.replicationcontroller.available_pods",
      "type": "metric",
      "brief": "Total number of available replica pods (ready for at least minReadySeconds) targeted by this replication controller",
      "note": "This metric aligns with the `availableReplicas` field of the\n[K8s ReplicationControllerStatus](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#replicationcontrollerstatus-v1-core)\n\nThis metric SHOULD, at a minimum, be reported against a\n[`k8s.replicationcontroller`](../resource/k8s.md#replicationcontroller) resource.\n",
      "stability": "development",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "k8s.replicationcontroller.available_pods",
      "instrument": "updowncounter",
      "unit": "{pod}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/k8s/metrics.yaml"
      }
    },
    {
      "id": "metric.k8s.statefulset.desired_pods",
      "type": "metric",
      "brief": "Number of desired replica pods in this statefulset",
      "note": "This metric aligns with the `replicas` field of the\n[K8s StatefulSetSpec](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#statefulsetspec-v1-apps).\n\nThis metric SHOULD, at a minimum, be reported against a\n[`k8s.statefulset`](../resource/k8s.md#statefulset) resource.\n",
      "stability": "development",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "k8s.statefulset.desired_pods",
      "instrument": "updowncounter",
      "unit": "{pod}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/k8s/metrics.yaml"
      }
    },
    {
      "id": "metric.k8s.statefulset.ready_pods",
      "type": "metric",
      "brief": "The number of replica pods created for this statefulset with a Ready Condition",
      "note": "This metric aligns with the `readyReplicas` field of the\n[K8s StatefulSetStatus](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#statefulsetstatus-v1-apps).\n\nThis metric SHOULD, at a minimum, be reported against a\n[`k8s.statefulset`](../resource/k8s.md#statefulset) resource.\n",
      "stability": "development",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "k8s.statefulset.ready_pods",
      "instrument": "updowncounter",
      "unit": "{pod}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/k8s/metrics.yaml"
      }
    },
    {
      "id": "metric.k8s.statefulset.current_pods",
      "type": "metric",
      "brief": "The number of replica pods created by the statefulset controller from the statefulset version indicated by currentRevision",
      "note": "This metric aligns with the `currentReplicas` field of the\n[K8s StatefulSetStatus](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#statefulsetstatus-v1-apps).\n\nThis metric SHOULD, at a minimum, be reported against a\n[`k8s.statefulset`](../resource/k8s.md#statefulset) resource.\n",
      "stability": "development",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "k8s.statefulset.current_pods",
      "instrument": "updowncounter",
      "unit": "{pod}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/k8s/metrics.yaml"
      }
    },
    {
      "id": "metric.k8s.statefulset.updated_pods",
      "type": "metric",
      "brief": "Number of replica pods created by the statefulset controller from the statefulset version indicated by updateRevision",
      "note": "This metric aligns with the `updatedReplicas` field of the\n[K8s StatefulSetStatus](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#statefulsetstatus-v1-apps).\n\nThis metric SHOULD, at a minimum, be reported against a\n[`k8s.statefulset`](../resource/k8s.md#statefulset) resource.\n",
      "stability": "development",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "k8s.statefulset.updated_pods",
      "instrument": "updowncounter",
      "unit": "{pod}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/k8s/metrics.yaml"
      }
    },
    {
      "id": "metric.k8s.hpa.desired_pods",
      "type": "metric",
      "brief": "Desired number of replica pods managed by this horizontal pod autoscaler, as last calculated by the autoscaler",
      "note": "This metric aligns with the `desiredReplicas` field of the\n[K8s HorizontalPodAutoscalerStatus](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#horizontalpodautoscalerstatus-v2-autoscaling)\n\nThis metric SHOULD, at a minimum, be reported against a\n[`k8s.hpa`](../resource/k8s.md#horizontalpodautoscaler) resource.\n",
      "stability": "development",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "k8s.hpa.desired_pods",
      "instrument": "updowncounter",
      "unit": "{pod}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/k8s/metrics.yaml"
      }
    },
    {
      "id": "metric.k8s.hpa.current_pods",
      "type": "metric",
      "brief": "Current number of replica pods managed by this horizontal pod autoscaler, as last seen by the autoscaler",
      "note": "This metric aligns with the `currentReplicas` field of the\n[K8s HorizontalPodAutoscalerStatus](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#horizontalpodautoscalerstatus-v2-autoscaling)\n\nThis metric SHOULD, at a minimum, be reported against a\n[`k8s.hpa`](../resource/k8s.md#horizontalpodautoscaler) resource.\n",
      "stability": "development",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "k8s.hpa.current_pods",
      "instrument": "updowncounter",
      "unit": "{pod}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/k8s/metrics.yaml"
      }
    },
    {
      "id": "metric.k8s.hpa.max_pods",
      "type": "metric",
      "brief": "The upper limit for the number of replica pods to which the autoscaler can scale up",
      "note": "This metric aligns with the `maxReplicas` field of the\n[K8s HorizontalPodAutoscalerSpec](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#horizontalpodautoscalerspec-v2-autoscaling)\n\nThis metric SHOULD, at a minimum, be reported against a\n[`k8s.hpa`](../resource/k8s.md#horizontalpodautoscaler) resource.\n",
      "stability": "development",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "k8s.hpa.max_pods",
      "instrument": "updowncounter",
      "unit": "{pod}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/k8s/metrics.yaml"
      }
    },
    {
      "id": "metric.k8s.hpa.min_pods",
      "type": "metric",
      "brief": "The lower limit for the number of replica pods to which the autoscaler can scale down",
      "note": "This metric aligns with the `minReplicas` field of the\n[K8s HorizontalPodAutoscalerSpec](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#horizontalpodautoscalerspec-v2-autoscaling)\n\nThis metric SHOULD, at a minimum, be reported against a\n[`k8s.hpa`](../resource/k8s.md#horizontalpodautoscaler) resource.\n",
      "stability": "development",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "k8s.hpa.min_pods",
      "instrument": "updowncounter",
      "unit": "{pod}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/k8s/metrics.yaml"
      }
    },
    {
      "id": "metric.k8s.daemonset.current_scheduled_nodes",
      "type": "metric",
      "brief": "Number of nodes that are running at least 1 daemon pod and are supposed to run the daemon pod",
      "note": "This metric aligns with the `currentNumberScheduled` field of the\n[K8s DaemonSetStatus](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#daemonsetstatus-v1-apps).\n\nThis metric SHOULD, at a minimum, be reported against a\n[`k8s.daemonset`](../resource/k8s.md#daemonset) resource.\n",
      "stability": "development",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "k8s.daemonset.current_scheduled_nodes",
      "instrument": "updowncounter",
      "unit": "{node}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/k8s/metrics.yaml"
      }
    },
    {
      "id": "metric.k8s.daemonset.desired_scheduled_nodes",
      "type": "metric",
      "brief": "Number of nodes that should be running the daemon pod (including nodes currently running the daemon pod)",
      "note": "This metric aligns with the `desiredNumberScheduled` field of the\n[K8s DaemonSetStatus](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#daemonsetstatus-v1-apps).\n\nThis metric SHOULD, at a minimum, be reported against a\n[`k8s.daemonset`](../resource/k8s.md#daemonset) resource.\n",
      "stability": "development",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "k8s.daemonset.desired_scheduled_nodes",
      "instrument": "updowncounter",
      "unit": "{node}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/k8s/metrics.yaml"
      }
    },
    {
      "id": "metric.k8s.daemonset.misscheduled_nodes",
      "type": "metric",
      "brief": "Number of nodes that are running the daemon pod, but are not supposed to run the daemon pod",
      "note": "This metric aligns with the `numberMisscheduled` field of the\n[K8s DaemonSetStatus](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#daemonsetstatus-v1-apps).\n\nThis metric SHOULD, at a minimum, be reported against a\n[`k8s.daemonset`](../resource/k8s.md#daemonset) resource.\n",
      "stability": "development",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "k8s.daemonset.misscheduled_nodes",
      "instrument": "updowncounter",
      "unit": "{node}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/k8s/metrics.yaml"
      }
    },
    {
      "id": "metric.k8s.daemonset.ready_nodes",
      "type": "metric",
      "brief": "Number of nodes that should be running the daemon pod and have one or more of the daemon pod running and ready",
      "note": "This metric aligns with the `numberReady` field of the\n[K8s DaemonSetStatus](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#daemonsetstatus-v1-apps).\n\nThis metric SHOULD, at a minimum, be reported against a\n[`k8s.daemonset`](../resource/k8s.md#daemonset) resource.\n",
      "stability": "development",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "k8s.daemonset.ready_nodes",
      "instrument": "updowncounter",
      "unit": "{node}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/k8s/metrics.yaml"
      }
    },
    {
      "id": "metric.k8s.job.active_pods",
      "type": "metric",
      "brief": "The number of pending and actively running pods for a job",
      "note": "This metric aligns with the `active` field of the\n[K8s JobStatus](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#jobstatus-v1-batch).\n\nThis metric SHOULD, at a minimum, be reported against a\n[`k8s.job`](../resource/k8s.md#job) resource.\n",
      "stability": "development",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "k8s.job.active_pods",
      "instrument": "updowncounter",
      "unit": "{pod}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/k8s/metrics.yaml"
      }
    },
    {
      "id": "metric.k8s.job.failed_pods",
      "type": "metric",
      "brief": "The number of pods which reached phase Failed for a job",
      "note": "This metric aligns with the `failed` field of the\n[K8s JobStatus](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#jobstatus-v1-batch).\n\nThis metric SHOULD, at a minimum, be reported against a\n[`k8s.job`](../resource/k8s.md#job) resource.\n",
      "stability": "development",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "k8s.job.failed_pods",
      "instrument": "updowncounter",
      "unit": "{pod}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/k8s/metrics.yaml"
      }
    },
    {
      "id": "metric.k8s.job.successful_pods",
      "type": "metric",
      "brief": "The number of pods which reached phase Succeeded for a job",
      "note": "This metric aligns with the `succeeded` field of the\n[K8s JobStatus](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#jobstatus-v1-batch).\n\nThis metric SHOULD, at a minimum, be reported against a\n[`k8s.job`](../resource/k8s.md#job) resource.\n",
      "stability": "development",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "k8s.job.successful_pods",
      "instrument": "updowncounter",
      "unit": "{pod}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/k8s/metrics.yaml"
      }
    },
    {
      "id": "metric.k8s.job.desired_successful_pods",
      "type": "metric",
      "brief": "The desired number of successfully finished pods the job should be run with",
      "note": "This metric aligns with the `completions` field of the\n[K8s JobSpec](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#jobspec-v1-batch).\n\nThis metric SHOULD, at a minimum, be reported against a\n[`k8s.job`](../resource/k8s.md#job) resource.\n",
      "stability": "development",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "k8s.job.desired_successful_pods",
      "instrument": "updowncounter",
      "unit": "{pod}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/k8s/metrics.yaml"
      }
    },
    {
      "id": "metric.k8s.job.max_parallel_pods",
      "type": "metric",
      "brief": "The max desired number of pods the job should run at any given time",
      "note": "This metric aligns with the `parallelism` field of the\n[K8s JobSpec](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#jobspec-v1-batch).\n\nThis metric SHOULD, at a minimum, be reported against a\n[`k8s.job`](../resource/k8s.md#job) resource.\n",
      "stability": "development",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "k8s.job.max_parallel_pods",
      "instrument": "updowncounter",
      "unit": "{pod}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/k8s/metrics.yaml"
      }
    },
    {
      "id": "metric.k8s.cronjob.active_jobs",
      "type": "metric",
      "brief": "The number of actively running jobs for a cronjob",
      "note": "This metric aligns with the `active` field of the\n[K8s CronJobStatus](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#cronjobstatus-v1-batch).\n\nThis metric SHOULD, at a minimum, be reported against a\n[`k8s.cronjob`](../resource/k8s.md#cronjob) resource.\n",
      "stability": "development",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "k8s.cronjob.active_jobs",
      "instrument": "updowncounter",
      "unit": "{job}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/k8s/metrics.yaml"
      }
    },
    {
      "id": "metric.k8s.namespace.phase",
      "type": "metric",
      "brief": "Describes number of K8s namespaces that are currently in a given phase.",
      "note": "This metric SHOULD, at a minimum, be reported against a\n[`k8s.namespace`](../resource/k8s.md#namespace) resource.\n",
      "stability": "development",
      "attributes": [
        {
          "name": "k8s.namespace.phase",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "active",
                "value": "active",
                "brief": "Active namespace phase as described by [K8s API](https://pkg.go.dev/k8s.io/api@v0.31.3/core/v1#NamespacePhase)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "terminating",
                "value": "terminating",
                "brief": "Terminating namespace phase as described by [K8s API](https://pkg.go.dev/k8s.io/api@v0.31.3/core/v1#NamespacePhase)",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The phase of the K8s namespace.\n",
          "examples": [
            "active",
            "terminating"
          ],
          "requirement_level": "required",
          "note": "This attribute aligns with the `phase` field of the\n[K8s NamespaceStatus](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#namespacestatus-v1-core)\n",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "k8s.namespace.phase",
      "instrument": "updowncounter",
      "unit": "{namespace}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/k8s/metrics.yaml",
        "attributes": {
          "k8s.namespace.phase": {
            "source_group": "registry.k8s",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "code",
      "type": "attribute_group",
      "brief": "These attributes provide context about source code\n",
      "attributes": [
        {
          "name": "code.function.name",
          "type": "string",
          "brief": "The method or function fully-qualified name without arguments. The value should fit the natural representation of the language runtime, which is also likely the same used within `code.stacktrace` attribute value.\n",
          "examples": [
            "com.example.MyHttpService.serveRequest",
            "GuzzleHttp\\Client::transfer",
            "fopen"
          ],
          "requirement_level": "recommended",
          "note": "Values and format depends on each language runtime, thus it is impossible to provide an exhaustive list of examples.\nThe values are usually the same (or prefixes of) the ones found in native stack trace representation stored in\n`code.stacktrace` without information on arguments.\n\nExamples:\n\n* Java method: `com.example.MyHttpService.serveRequest`\n* Java anonymous class method: `com.mycompany.Main$1.myMethod`\n* Java lambda method: `com.mycompany.Main$$Lambda/0x0000748ae4149c00.myMethod`\n* PHP function: `GuzzleHttp\\Client::transfer\n* Go function: `github.com/my/repo/pkg.foo.func5`\n* Elixir: `OpenTelemetry.Ctx.new`\n* Erlang: `opentelemetry_ctx:new`\n* Rust: `playground::my_module::my_cool_func`\n* C function: `fopen`\n",
          "stability": "release_candidate"
        },
        {
          "name": "code.file.path",
          "type": "string",
          "brief": "The source code file name that identifies the code unit as uniquely as possible (preferably an absolute file path).\n",
          "examples": "/usr/local/MyApplication/content_root/app/index.php",
          "requirement_level": "recommended",
          "stability": "release_candidate"
        },
        {
          "name": "code.line.number",
          "type": "int",
          "brief": "The line number in `code.file.path` best representing the operation. It SHOULD point within the code unit named in `code.function.name`.\n",
          "examples": 42,
          "requirement_level": "recommended",
          "stability": "release_candidate"
        },
        {
          "name": "code.column.number",
          "type": "int",
          "brief": "The column number in `code.file.path` best representing the operation. It SHOULD point within the code unit named in `code.function.name`.\n",
          "examples": 16,
          "requirement_level": "recommended",
          "stability": "release_candidate"
        },
        {
          "name": "code.stacktrace",
          "type": "string",
          "brief": "A stacktrace as a string in the natural representation for the language runtime. The representation is identical to [`exception.stacktrace`](/docs/exceptions/exceptions-spans.md#stacktrace-representation).\n",
          "examples": "at com.example.GenerateTrace.methodB(GenerateTrace.java:13)\\n at com.example.GenerateTrace.methodA(GenerateTrace.java:9)\\n at com.example.GenerateTrace.main(GenerateTrace.java:5)\n",
          "requirement_level": "opt_in",
          "stability": "release_candidate"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/code/common.yaml",
        "attributes": {
          "code.column.number": {
            "source_group": "registry.code",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "code.file.path": {
            "source_group": "registry.code",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "code.function.name": {
            "source_group": "registry.code",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "code.line.number": {
            "source_group": "registry.code",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "code.stacktrace": {
            "source_group": "registry.code",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.jvm.memory.init",
      "type": "metric",
      "brief": "Measure of initial memory requested.",
      "stability": "development",
      "attributes": [
        {
          "name": "jvm.memory.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "heap",
                "value": "heap",
                "brief": "Heap memory.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "non_heap",
                "value": "non_heap",
                "brief": "Non-heap memory",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "The type of memory.",
          "examples": [
            "heap",
            "non_heap"
          ],
          "requirement_level": "recommended",
          "stability": "stable"
        },
        {
          "name": "jvm.memory.pool.name",
          "type": "string",
          "brief": "Name of the memory pool.",
          "examples": [
            "G1 Old Gen",
            "G1 Eden space",
            "G1 Survivor Space"
          ],
          "requirement_level": "recommended",
          "note": "Pool names are generally obtained via [MemoryPoolMXBean#getName()](https://docs.oracle.com/en/java/javase/11/docs/api/java.management/java/lang/management/MemoryPoolMXBean.html#getName()).\n",
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "jvm.memory.init",
      "instrument": "updowncounter",
      "unit": "By",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/jvm/metrics-experimental.yaml",
        "attributes": {
          "jvm.memory.pool.name": {
            "source_group": "registry.jvm",
            "inherited_fields": [
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "requirement_level"
            ]
          },
          "jvm.memory.type": {
            "source_group": "registry.jvm",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.jvm.system.cpu.utilization",
      "type": "metric",
      "brief": "Recent CPU utilization for the whole system as reported by the JVM.",
      "note": "The value range is [0.0,1.0]. This utilization is not defined as being for the specific interval since last measurement (unlike `system.cpu.utilization`). [Reference](https://docs.oracle.com/en/java/javase/17/docs/api/jdk.management/com/sun/management/OperatingSystemMXBean.html#getCpuLoad()).\n",
      "stability": "development",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "jvm.system.cpu.utilization",
      "instrument": "gauge",
      "unit": "1",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/jvm/metrics-experimental.yaml"
      }
    },
    {
      "id": "metric.jvm.system.cpu.load_1m",
      "type": "metric",
      "brief": "Average CPU load of the whole system for the last minute as reported by the JVM.",
      "note": "The value range is [0,n], where n is the number of CPU cores - or a negative number if the value is not available. This utilization is not defined as being for the specific interval since last measurement (unlike `system.cpu.utilization`). [Reference](https://docs.oracle.com/en/java/javase/17/docs/api/java.management/java/lang/management/OperatingSystemMXBean.html#getSystemLoadAverage()).\n",
      "stability": "development",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "jvm.system.cpu.load_1m",
      "instrument": "gauge",
      "unit": "{run_queue_item}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/jvm/metrics-experimental.yaml"
      }
    },
    {
      "id": "attributes.jvm.buffer",
      "type": "attribute_group",
      "brief": "Describes JVM buffer metric attributes.",
      "attributes": [
        {
          "name": "jvm.buffer.pool.name",
          "type": "string",
          "brief": "Name of the buffer pool.",
          "examples": [
            "mapped",
            "direct"
          ],
          "requirement_level": "recommended",
          "note": "Pool names are generally obtained via [BufferPoolMXBean#getName()](https://docs.oracle.com/en/java/javase/11/docs/api/java.management/java/lang/management/BufferPoolMXBean.html#getName()).\n",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/jvm/metrics-experimental.yaml",
        "attributes": {
          "jvm.buffer.pool.name": {
            "source_group": "registry.jvm",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.jvm.buffer.memory.used",
      "type": "metric",
      "brief": "Measure of memory used by buffers.",
      "stability": "development",
      "attributes": [
        {
          "name": "jvm.buffer.pool.name",
          "type": "string",
          "brief": "Name of the buffer pool.",
          "examples": [
            "mapped",
            "direct"
          ],
          "requirement_level": "recommended",
          "note": "Pool names are generally obtained via [BufferPoolMXBean#getName()](https://docs.oracle.com/en/java/javase/11/docs/api/java.management/java/lang/management/BufferPoolMXBean.html#getName()).\n",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "jvm.buffer.memory.used",
      "instrument": "updowncounter",
      "unit": "By",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/jvm/metrics-experimental.yaml",
        "attributes": {
          "jvm.buffer.pool.name": {
            "source_group": "registry.jvm",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.jvm.buffer.memory.limit",
      "type": "metric",
      "brief": "Measure of total memory capacity of buffers.",
      "stability": "development",
      "attributes": [
        {
          "name": "jvm.buffer.pool.name",
          "type": "string",
          "brief": "Name of the buffer pool.",
          "examples": [
            "mapped",
            "direct"
          ],
          "requirement_level": "recommended",
          "note": "Pool names are generally obtained via [BufferPoolMXBean#getName()](https://docs.oracle.com/en/java/javase/11/docs/api/java.management/java/lang/management/BufferPoolMXBean.html#getName()).\n",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "jvm.buffer.memory.limit",
      "instrument": "updowncounter",
      "unit": "By",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/jvm/metrics-experimental.yaml",
        "attributes": {
          "jvm.buffer.pool.name": {
            "source_group": "registry.jvm",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.jvm.buffer.count",
      "type": "metric",
      "brief": "Number of buffers in the pool.",
      "stability": "development",
      "attributes": [
        {
          "name": "jvm.buffer.pool.name",
          "type": "string",
          "brief": "Name of the buffer pool.",
          "examples": [
            "mapped",
            "direct"
          ],
          "requirement_level": "recommended",
          "note": "Pool names are generally obtained via [BufferPoolMXBean#getName()](https://docs.oracle.com/en/java/javase/11/docs/api/java.management/java/lang/management/BufferPoolMXBean.html#getName()).\n",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "jvm.buffer.count",
      "instrument": "updowncounter",
      "unit": "{buffer}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/jvm/metrics-experimental.yaml",
        "attributes": {
          "jvm.buffer.pool.name": {
            "source_group": "registry.jvm",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "destination",
      "type": "attribute_group",
      "brief": "General destination attributes.\n",
      "attributes": [
        {
          "name": "destination.address",
          "type": "string",
          "brief": "Destination address - domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "destination.example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "recommended",
          "note": "When observed from the source side, and when communicating through an intermediary, `destination.address` SHOULD represent the destination address behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "development"
        },
        {
          "name": "destination.port",
          "type": "int",
          "brief": "Destination port number",
          "examples": [
            3389,
            2888
          ],
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/destination/common.yaml",
        "attributes": {
          "destination.address": {
            "source_group": "registry.destination",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "destination.port": {
            "source_group": "registry.destination",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "span.cli.internal",
      "type": "span",
      "brief": "Describes span of CLI (Command Line Interfaces) programs.\n",
      "stability": "development",
      "attributes": [
        {
          "name": "process.executable.path",
          "type": "string",
          "brief": "The full path to the process executable. On Linux based systems, can be set to the target of `proc/[pid]/exe`. On Windows, can be set to the result of `GetProcessImageFileNameW`.\n",
          "examples": [
            "/usr/bin/cmd/otelcol"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "process.command_args",
          "type": "string[]",
          "brief": "All the command arguments (including the command/executable itself) as received by the process. On Linux-based systems (and some other Unixoid systems supporting procfs), can be set according to the list of null-delimited strings extracted from `proc/[pid]/cmdline`. For libc-based executables, this would be the full argv vector passed to `main`.\n",
          "examples": [
            [
              "cmd/otecol",
              "--config=config.yaml"
            ]
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "process.executable.name",
          "type": "string",
          "brief": "The name of the process executable. On Linux based systems, this SHOULD be set to the base name of the target of `/proc/[pid]/exe`. On Windows, this SHOULD be set to the base name of `GetProcessImageFileNameW`.\n",
          "examples": [
            "otelcol"
          ],
          "requirement_level": "required",
          "stability": "development"
        },
        {
          "name": "process.pid",
          "type": "int",
          "brief": "Process identifier (PID).\n",
          "examples": [
            1234
          ],
          "requirement_level": "required",
          "stability": "development"
        },
        {
          "name": "process.exit.code",
          "type": "int",
          "brief": "The exit code of the process.\n",
          "examples": [
            127
          ],
          "requirement_level": "required",
          "stability": "development"
        },
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "timeout",
            "java.net.UnknownHostException",
            "server_certificate_invalid",
            "500"
          ],
          "requirement_level": {
            "conditionally_required": "if and only if process.exit.code is not 0"
          },
          "note": "The `error.type` SHOULD be predictable, and SHOULD have low cardinality.\n\nWhen `error.type` is set to a type (e.g., an exception type), its\ncanonical class name identifying the type within the artifact SHOULD be used.\n\nInstrumentations SHOULD document the list of errors they report.\n\nThe cardinality of `error.type` within one instrumentation library SHOULD be low.\nTelemetry consumers that aggregate data from multiple instrumentation libraries and applications\nshould be prepared for `error.type` to have high cardinality at query time when no\nadditional filters are applied.\n\nIf the operation has completed successfully, instrumentations SHOULD NOT set `error.type`.\n\nIf a specific domain defines its own set of error identifiers (such as HTTP or gRPC status codes),\nit's RECOMMENDED to:\n\n- Use a domain-specific attribute\n- Set `error.type` to capture all errors, regardless of whether they are defined within the domain-specific set or not.\n",
          "stability": "stable"
        }
      ],
      "span_kind": "internal",
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/cli/spans.yaml",
        "attributes": {
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "process.command_args": {
            "source_group": "registry.process",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "process.executable.name": {
            "source_group": "registry.process",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "process.executable.path": {
            "source_group": "registry.process",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "process.exit.code": {
            "source_group": "registry.process",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "process.pid": {
            "source_group": "registry.process",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "span.cli.client",
      "type": "span",
      "brief": "Describes span to calls of CLI (Command Line Interfaces) programs.\n",
      "stability": "development",
      "attributes": [
        {
          "name": "process.executable.path",
          "type": "string",
          "brief": "The full path to the process executable. On Linux based systems, can be set to the target of `proc/[pid]/exe`. On Windows, can be set to the result of `GetProcessImageFileNameW`.\n",
          "examples": [
            "/usr/bin/cmd/otelcol"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "process.command_args",
          "type": "string[]",
          "brief": "All the command arguments (including the command/executable itself) as received by the process. On Linux-based systems (and some other Unixoid systems supporting procfs), can be set according to the list of null-delimited strings extracted from `proc/[pid]/cmdline`. For libc-based executables, this would be the full argv vector passed to `main`.\n",
          "examples": [
            [
              "cmd/otecol",
              "--config=config.yaml"
            ]
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "process.executable.name",
          "type": "string",
          "brief": "The name of the process executable. On Linux based systems, this SHOULD be set to the base name of the target of `/proc/[pid]/exe`. On Windows, this SHOULD be set to the base name of `GetProcessImageFileNameW`.\n",
          "examples": [
            "otelcol"
          ],
          "requirement_level": "required",
          "stability": "development"
        },
        {
          "name": "process.pid",
          "type": "int",
          "brief": "Process identifier (PID).\n",
          "examples": [
            1234
          ],
          "requirement_level": "required",
          "stability": "development"
        },
        {
          "name": "process.exit.code",
          "type": "int",
          "brief": "The exit code of the process.\n",
          "examples": [
            127
          ],
          "requirement_level": "required",
          "stability": "development"
        },
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "timeout",
            "java.net.UnknownHostException",
            "server_certificate_invalid",
            "500"
          ],
          "requirement_level": {
            "conditionally_required": "if and only if process.exit.code is not 0"
          },
          "note": "The `error.type` SHOULD be predictable, and SHOULD have low cardinality.\n\nWhen `error.type` is set to a type (e.g., an exception type), its\ncanonical class name identifying the type within the artifact SHOULD be used.\n\nInstrumentations SHOULD document the list of errors they report.\n\nThe cardinality of `error.type` within one instrumentation library SHOULD be low.\nTelemetry consumers that aggregate data from multiple instrumentation libraries and applications\nshould be prepared for `error.type` to have high cardinality at query time when no\nadditional filters are applied.\n\nIf the operation has completed successfully, instrumentations SHOULD NOT set `error.type`.\n\nIf a specific domain defines its own set of error identifiers (such as HTTP or gRPC status codes),\nit's RECOMMENDED to:\n\n- Use a domain-specific attribute\n- Set `error.type` to capture all errors, regardless of whether they are defined within the domain-specific set or not.\n",
          "stability": "stable"
        }
      ],
      "span_kind": "client",
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/cli/spans.yaml",
        "attributes": {
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "process.command_args": {
            "source_group": "registry.process",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "process.executable.name": {
            "source_group": "registry.process",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "process.executable.path": {
            "source_group": "registry.process",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "process.exit.code": {
            "source_group": "registry.process",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "process.pid": {
            "source_group": "registry.process",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "registry.exception",
      "type": "attribute_group",
      "brief": "This document defines the shared attributes used to report a single exception associated with a span or log.\n",
      "attributes": [
        {
          "name": "exception.type",
          "type": "string",
          "brief": "The type of the exception (its fully-qualified class name, if applicable). The dynamic type of the exception should be preferred over the static type in languages that support it.\n",
          "examples": [
            "java.net.ConnectException",
            "OSError"
          ],
          "requirement_level": "recommended",
          "stability": "stable"
        },
        {
          "name": "exception.message",
          "type": "string",
          "brief": "The exception message.",
          "examples": [
            "Division by zero",
            "Can't convert 'int' object to str implicitly"
          ],
          "requirement_level": "recommended",
          "stability": "stable"
        },
        {
          "name": "exception.stacktrace",
          "type": "string",
          "brief": "A stacktrace as a string in the natural representation for the language runtime. The representation is to be determined and documented by each language SIG.\n",
          "examples": "Exception in thread \"main\" java.lang.RuntimeException: Test exception\\n at com.example.GenerateTrace.methodB(GenerateTrace.java:13)\\n at com.example.GenerateTrace.methodA(GenerateTrace.java:9)\\n at com.example.GenerateTrace.main(GenerateTrace.java:5)\n",
          "requirement_level": "recommended",
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/exceptions/registry.yaml"
      },
      "display_name": "Exception Attributes"
    },
    {
      "id": "resource.container",
      "type": "resource",
      "brief": "A container instance.\n",
      "stability": "development",
      "attributes": [
        {
          "name": "container.name",
          "type": "string",
          "brief": "Container name used by container runtime.\n",
          "examples": [
            "opentelemetry-autoconf"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "container.id",
          "type": "string",
          "brief": "Container ID. Usually a UUID, as for example used to [identify Docker containers](https://docs.docker.com/engine/containers/run/#container-identification). The UUID might be abbreviated.\n",
          "examples": [
            "a3bf90e006b2"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "container.runtime",
          "type": "string",
          "brief": "The container runtime managing this container.\n",
          "examples": [
            "docker",
            "containerd",
            "rkt"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "container.image.name",
          "type": "string",
          "brief": "Name of the image the container was built on.\n",
          "examples": [
            "gcr.io/opentelemetry/operator"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "container.image.tags",
          "type": "string[]",
          "brief": "Container image tags. An example can be found in [Docker Image Inspect](https://docs.docker.com/engine/api/v1.43/#tag/Image/operation/ImageInspect). Should be only the `<tag>` section of the full name for example from `registry.example.com/my-org/my-image:<tag>`.\n",
          "examples": [
            [
              "v1.27.1",
              "3.5.7-0"
            ]
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "container.image.id",
          "type": "string",
          "brief": "Runtime specific image identifier. Usually a hash algorithm followed by a UUID.\n",
          "examples": [
            "sha256:19c92d0a00d1b66d897bceaa7319bee0dd38a10a851c60bcec9474aa3f01e50f"
          ],
          "requirement_level": "recommended",
          "note": "Docker defines a sha256 of the image id; `container.image.id` corresponds to the `Image` field from the Docker container inspect [API](https://docs.docker.com/engine/api/v1.43/#tag/Container/operation/ContainerInspect) endpoint.\nK8s defines a link to the container registry repository with digest `\"imageID\": \"registry.azurecr.io /namespace/service/dockerfile@sha256:bdeabd40c3a8a492eaf9e8e44d0ebbb84bac7ee25ac0cf8a7159d25f62555625\"`.\nThe ID is assigned by the container runtime and can vary in different environments. Consider using `oci.manifest.digest` if it is important to identify the same image in different environments/runtimes.\n",
          "stability": "development"
        },
        {
          "name": "container.image.repo_digests",
          "type": "string[]",
          "brief": "Repo digests of the container image as provided by the container runtime.\n",
          "examples": [
            [
              "example@sha256:afcc7f1ac1b49db317a7196c902e61c6c3c4607d63599ee1a82d702d249a0ccb",
              "internal.registry.example.com:5000/example@sha256:b69959407d21e8a062e0416bf13405bb2b71ed7a84dde4158ebafacfa06f5578"
            ]
          ],
          "requirement_level": "recommended",
          "note": "[Docker](https://docs.docker.com/engine/api/v1.43/#tag/Image/operation/ImageInspect) and [CRI](https://github.com/kubernetes/cri-api/blob/c75ef5b473bbe2d0a4fc92f82235efd665ea8e9f/pkg/apis/runtime/v1/api.proto#L1237-L1238) report those under the `RepoDigests` field.\n",
          "stability": "development"
        },
        {
          "name": "container.label",
          "type": "template[string]",
          "brief": "Container labels, `<key>` being the label name, the value being the label value.\n",
          "examples": [
            "container.label.app=nginx"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "oci.manifest.digest",
          "type": "string",
          "brief": "The digest of the OCI image manifest. For container images specifically is the digest by which the container image is known.\n",
          "examples": [
            "sha256:e4ca62c0d62f3e886e684806dfe9d4e0cda60d54986898173c1083856cfda0f4"
          ],
          "requirement_level": "recommended",
          "note": "Follows [OCI Image Manifest Specification](https://github.com/opencontainers/image-spec/blob/main/manifest.md), and specifically the [Digest property](https://github.com/opencontainers/image-spec/blob/main/descriptor.md#digests).\nAn example can be found in [Example Image Manifest](https://github.com/opencontainers/image-spec/blob/main/manifest.md#example-image-manifest).\n",
          "stability": "development"
        },
        {
          "name": "container.command",
          "type": "string",
          "brief": "The command used to run the container (i.e. the command name).\n",
          "examples": [
            "otelcontribcol"
          ],
          "requirement_level": "opt_in",
          "note": "If using embedded credentials or sensitive data, it is recommended to remove them to prevent potential leakage.\n",
          "stability": "development"
        },
        {
          "name": "container.command_line",
          "type": "string",
          "brief": "The full command run by the container as a single string representing the full command.\n",
          "examples": [
            "otelcontribcol --config config.yaml"
          ],
          "requirement_level": "opt_in",
          "stability": "development"
        },
        {
          "name": "container.command_args",
          "type": "string[]",
          "brief": "All the command arguments (including the command/executable itself) run by the container.\n",
          "examples": [
            [
              "otelcontribcol",
              "--config",
              "config.yaml"
            ]
          ],
          "requirement_level": "opt_in",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": "container",
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/container/resources.yaml",
        "attributes": {
          "container.command": {
            "source_group": "registry.container",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "container.command_args": {
            "source_group": "registry.container",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "container.command_line": {
            "source_group": "registry.container",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "container.id": {
            "source_group": "registry.container",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "container.image.id": {
            "source_group": "registry.container",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "container.image.name": {
            "source_group": "registry.container",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "container.image.repo_digests": {
            "source_group": "registry.container",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "container.image.tags": {
            "source_group": "registry.container",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "container.label": {
            "source_group": "registry.container",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "container.name": {
            "source_group": "registry.container",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "container.runtime": {
            "source_group": "registry.container",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "oci.manifest.digest": {
            "source_group": "registry.oci.manifest",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "registry.system",
      "type": "attribute_group",
      "brief": "Describes System attributes",
      "attributes": [
        {
          "name": "system.device",
          "type": "string",
          "brief": "The device identifier",
          "examples": [
            "(identifier)"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/system/registry.yaml"
      },
      "display_name": "General System Attributes"
    },
    {
      "id": "registry.system.memory",
      "type": "attribute_group",
      "brief": "Describes System Memory attributes",
      "attributes": [
        {
          "name": "system.memory.state",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "used",
                "value": "used",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "free",
                "value": "free",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "shared",
                "value": "shared",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": "Removed, report shared memory usage with `metric.system.memory.shared` metric"
              },
              {
                "id": "buffers",
                "value": "buffers",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "cached",
                "value": "cached",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The memory state",
          "examples": [
            "free",
            "cached"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/system/registry.yaml"
      },
      "display_name": "System Memory Attributes"
    },
    {
      "id": "registry.system.paging",
      "type": "attribute_group",
      "brief": "Describes System Memory Paging attributes",
      "attributes": [
        {
          "name": "system.paging.state",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "used",
                "value": "used",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "free",
                "value": "free",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The memory paging state",
          "examples": [
            "free"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "system.paging.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "major",
                "value": "major",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "minor",
                "value": "minor",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The memory paging type",
          "examples": [
            "minor"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "system.paging.direction",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "in",
                "value": "in",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "out",
                "value": "out",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The paging access direction",
          "examples": [
            "in"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/system/registry.yaml"
      },
      "display_name": "System Paging Attributes"
    },
    {
      "id": "registry.system.filesystem",
      "type": "attribute_group",
      "brief": "Describes Filesystem attributes",
      "attributes": [
        {
          "name": "system.filesystem.state",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "used",
                "value": "used",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "free",
                "value": "free",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "reserved",
                "value": "reserved",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The filesystem state",
          "examples": [
            "used"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "system.filesystem.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "fat32",
                "value": "fat32",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "exfat",
                "value": "exfat",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "ntfs",
                "value": "ntfs",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "refs",
                "value": "refs",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "hfsplus",
                "value": "hfsplus",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "ext4",
                "value": "ext4",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The filesystem type",
          "examples": [
            "ext4"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "system.filesystem.mode",
          "type": "string",
          "brief": "The filesystem mode",
          "examples": [
            "rw, ro"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "system.filesystem.mountpoint",
          "type": "string",
          "brief": "The filesystem mount path",
          "examples": [
            "/mnt/data"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/system/registry.yaml"
      },
      "display_name": "Filesystem Attributes"
    },
    {
      "id": "registry.system.process",
      "type": "attribute_group",
      "brief": "Describes System Process attributes",
      "attributes": [
        {
          "name": "system.process.status",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "running",
                "value": "running",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "sleeping",
                "value": "sleeping",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "stopped",
                "value": "stopped",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "defunct",
                "value": "defunct",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The process state, e.g., [Linux Process State Codes](https://man7.org/linux/man-pages/man1/ps.1.html#PROCESS_STATE_CODES)\n",
          "examples": [
            "running"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/system/registry.yaml"
      },
      "display_name": "System Process Attributes"
    },
    {
      "id": "span.http.client",
      "type": "span",
      "brief": "Semantic Convention for HTTP Client",
      "stability": "stable",
      "attributes": [
        {
          "name": "user_agent.synthetic.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "bot",
                "value": "bot",
                "brief": "Bot source.",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "test",
                "value": "test",
                "brief": "Synthetic test source.",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "Specifies the category of synthetic traffic, such as tests or bots.\n",
          "requirement_level": "opt_in",
          "note": "This attribute MAY be derived from the contents of the `user_agent.original` attribute. Components that populate the attribute are responsible for determining what they consider to be synthetic bot or test traffic. This attribute can either be set for self-identification purposes, or on telemetry detected to be generated as a result of a synthetic request. This attribute is useful for distinguishing between genuine client traffic and synthetic traffic generated by bots or tests.\n",
          "stability": "development"
        },
        {
          "name": "server.address",
          "type": "string",
          "brief": "Host identifier of the [\"URI origin\"](https://www.rfc-editor.org/rfc/rfc9110.html#name-uri-origin) HTTP request is sent to.\n",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "required",
          "sampling_relevant": true,
          "note": "If an HTTP client request is explicitly made to an IP address, e.g. `http://x.x.x.x:8080`, then `server.address` SHOULD be the IP address `x.x.x.x`. A DNS lookup SHOULD NOT be used.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "Port identifier of the [\"URI origin\"](https://www.rfc-editor.org/rfc/rfc9110.html#name-uri-origin) HTTP request is sent to.\n",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": "required",
          "sampling_relevant": true,
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "user_agent.original",
          "type": "string",
          "brief": "Value of the [HTTP User-Agent](https://www.rfc-editor.org/rfc/rfc9110.html#field.user-agent) header sent by the client.\n",
          "examples": [
            "CERN-LineMode/2.15 libwww/2.17b3",
            "Mozilla/5.0 (iPhone; CPU iPhone OS 14_7_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.1.2 Mobile/15E148 Safari/604.1",
            "YourApp/1.0.0 grpc-java-okhttp/1.27.2"
          ],
          "requirement_level": "opt_in",
          "stability": "stable"
        },
        {
          "name": "network.peer.address",
          "type": "string",
          "brief": "Peer address of the network connection - IP address or Unix domain socket name.",
          "examples": [
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "recommended",
          "stability": "stable"
        },
        {
          "name": "http.request.method",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "connect",
                "value": "CONNECT",
                "brief": "CONNECT method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "delete",
                "value": "DELETE",
                "brief": "DELETE method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "get",
                "value": "GET",
                "brief": "GET method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "head",
                "value": "HEAD",
                "brief": "HEAD method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "options",
                "value": "OPTIONS",
                "brief": "OPTIONS method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "patch",
                "value": "PATCH",
                "brief": "PATCH method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "post",
                "value": "POST",
                "brief": "POST method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "put",
                "value": "PUT",
                "brief": "PUT method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "trace",
                "value": "TRACE",
                "brief": "TRACE method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "Any HTTP method that the instrumentation has no prior knowledge of.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "HTTP request method.",
          "examples": [
            "GET",
            "POST",
            "HEAD"
          ],
          "requirement_level": "required",
          "sampling_relevant": true,
          "note": "HTTP request method value SHOULD be \"known\" to the instrumentation.\nBy default, this convention defines \"known\" methods as the ones listed in [RFC9110](https://www.rfc-editor.org/rfc/rfc9110.html#name-methods)\nand the PATCH method defined in [RFC5789](https://www.rfc-editor.org/rfc/rfc5789.html).\n\nIf the HTTP request method is not known to instrumentation, it MUST set the `http.request.method` attribute to `_OTHER`.\n\nIf the HTTP instrumentation could end up converting valid HTTP request methods to `_OTHER`, then it MUST provide a way to override\nthe list of known HTTP methods. If this override is done via environment variable, then the environment variable MUST be named\nOTEL_INSTRUMENTATION_HTTP_KNOWN_METHODS and support a comma-separated list of case-sensitive known HTTP methods\n(this list MUST be a full override of the default known method, it is not a list of known methods in addition to the defaults).\n\nHTTP method names are case-sensitive and `http.request.method` attribute value MUST match a known HTTP method name exactly.\nInstrumentations for specific web frameworks that consider HTTP methods to be case insensitive, SHOULD populate a canonical equivalent.\nTracing instrumentations that do so, MUST also set `http.request.method_original` to the original value.\n",
          "stability": "stable"
        },
        {
          "name": "network.peer.port",
          "type": "int",
          "brief": "Peer port number of the network connection.",
          "examples": [
            65123
          ],
          "requirement_level": {
            "recommended": "If `network.peer.address` is set."
          },
          "stability": "stable"
        },
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "timeout",
            "java.net.UnknownHostException",
            "server_certificate_invalid",
            "500"
          ],
          "requirement_level": {
            "conditionally_required": "If request has ended with an error."
          },
          "note": "If the request fails with an error before response status code was sent or received,\n`error.type` SHOULD be set to exception type (its fully-qualified class name, if applicable)\nor a component-specific low cardinality error identifier.\n\nIf response status code was sent or received and status indicates an error according to [HTTP span status definition](/docs/http/http-spans.md),\n`error.type` SHOULD be set to the status code number (represented as a string), an exception type (if thrown) or a component-specific error identifier.\n\nThe `error.type` value SHOULD be predictable and SHOULD have low cardinality.\nInstrumentations SHOULD document the list of errors they report.\n\nThe cardinality of `error.type` within one instrumentation library SHOULD be low, but\ntelemetry consumers that aggregate data from multiple instrumentation libraries and applications\nshould be prepared for `error.type` to have high cardinality at query time, when no\nadditional filters are applied.\n\nIf the request has completed successfully, instrumentations SHOULD NOT set `error.type`.\n",
          "stability": "stable"
        },
        {
          "name": "http.response.status_code",
          "type": "int",
          "brief": "[HTTP response status code](https://tools.ietf.org/html/rfc7231#section-6).",
          "examples": [
            200
          ],
          "requirement_level": {
            "conditionally_required": "If and only if one was received/sent."
          },
          "stability": "stable"
        },
        {
          "name": "network.protocol.name",
          "type": "string",
          "brief": "[OSI application layer](https://wikipedia.org/wiki/Application_layer) or non-OSI equivalent.",
          "examples": [
            "http",
            "spdy"
          ],
          "requirement_level": {
            "conditionally_required": "If not `http` and `network.protocol.version` is set."
          },
          "note": "The value SHOULD be normalized to lowercase.",
          "stability": "stable"
        },
        {
          "name": "network.protocol.version",
          "type": "string",
          "brief": "The actual version of the protocol used for network communication.",
          "examples": [
            "1.0",
            "1.1",
            "2",
            "3"
          ],
          "requirement_level": "recommended",
          "note": "If protocol version is subject to negotiation (for example using [ALPN](https://www.rfc-editor.org/rfc/rfc7301.html)), this attribute SHOULD be set to the negotiated version. If the actual protocol version is not known, this attribute SHOULD NOT be set.\n",
          "stability": "stable"
        },
        {
          "name": "url.scheme",
          "type": "string",
          "brief": "The [URI scheme](https://www.rfc-editor.org/rfc/rfc3986#section-3.1) component identifying the used protocol.\n",
          "examples": [
            "http",
            "https"
          ],
          "requirement_level": "opt_in",
          "stability": "stable"
        },
        {
          "name": "url.template",
          "type": "string",
          "brief": "The low-cardinality template of an [absolute path reference](https://www.rfc-editor.org/rfc/rfc3986#section-4.2).\n",
          "examples": [
            "/users/{id}",
            "/users/:id",
            "/users?id={id}"
          ],
          "requirement_level": "opt_in",
          "note": "The `url.template` MUST have low cardinality. It is not usually available on HTTP clients, but may be known by the application or specialized HTTP instrumentation.\n",
          "stability": "development"
        },
        {
          "name": "http.request.body.size",
          "type": "int",
          "brief": "The size of the request payload body in bytes. This is the number of bytes transferred excluding headers and is often, but not always, present as the [Content-Length](https://www.rfc-editor.org/rfc/rfc9110.html#field.content-length) header. For requests using transport encoding, this should be the compressed size.\n",
          "examples": 3495,
          "requirement_level": "opt_in",
          "stability": "development"
        },
        {
          "name": "http.request.header",
          "type": "template[string[]]",
          "brief": "HTTP request headers, `<key>` being the normalized HTTP Header name (lowercase), the value being the header values.\n",
          "examples": [
            "http.request.header.content-type=[\"application/json\"]",
            "http.request.header.x-forwarded-for=[\"1.2.3.4\", \"1.2.3.5\"]"
          ],
          "requirement_level": "opt_in",
          "note": "Instrumentations SHOULD require an explicit configuration of which headers are to be captured. Including all request headers can be a security risk - explicit configuration helps avoid leaking sensitive information.\nThe `User-Agent` header is already captured in the `user_agent.original` attribute. Users MAY explicitly configure instrumentations to capture them even though it is not recommended.\nThe attribute value MUST consist of either multiple header values as an array of strings or a single-item array containing a possibly comma-concatenated string, depending on the way the HTTP library provides access to headers.\n",
          "stability": "stable"
        },
        {
          "name": "http.request.method_original",
          "type": "string",
          "brief": "Original HTTP method sent by the client in the request line.",
          "examples": [
            "GeT",
            "ACL",
            "foo"
          ],
          "requirement_level": {
            "conditionally_required": "If and only if it's different than `http.request.method`."
          },
          "stability": "stable"
        },
        {
          "name": "http.request.resend_count",
          "type": "int",
          "brief": "The ordinal number of request resending attempt (for any reason, including redirects).\n",
          "examples": 3,
          "requirement_level": {
            "recommended": "if and only if request was retried."
          },
          "note": "The resend count SHOULD be updated each time an HTTP request gets resent by the client, regardless of what was the cause of the resending (e.g. redirection, authorization failure, 503 Server Unavailable, network issues, or any other).\n",
          "stability": "stable"
        },
        {
          "name": "http.request.size",
          "type": "int",
          "brief": "The total size of the request in bytes. This should be the total number of bytes sent over the wire, including the request line (HTTP/1.1), framing (HTTP/2 and HTTP/3), headers, and request body if any.\n",
          "examples": 1437,
          "requirement_level": "opt_in",
          "stability": "development"
        },
        {
          "name": "http.response.body.size",
          "type": "int",
          "brief": "The size of the response payload body in bytes. This is the number of bytes transferred excluding headers and is often, but not always, present as the [Content-Length](https://www.rfc-editor.org/rfc/rfc9110.html#field.content-length) header. For requests using transport encoding, this should be the compressed size.\n",
          "examples": 3495,
          "requirement_level": "opt_in",
          "stability": "development"
        },
        {
          "name": "http.response.header",
          "type": "template[string[]]",
          "brief": "HTTP response headers, `<key>` being the normalized HTTP Header name (lowercase), the value being the header values.\n",
          "examples": [
            "http.response.header.content-type=[\"application/json\"]",
            "http.response.header.my-custom-header=[\"abc\", \"def\"]"
          ],
          "requirement_level": "opt_in",
          "note": "Instrumentations SHOULD require an explicit configuration of which headers are to be captured. Including all response headers can be a security risk - explicit configuration helps avoid leaking sensitive information.\nUsers MAY explicitly configure instrumentations to capture them even though it is not recommended.\nThe attribute value MUST consist of either multiple header values as an array of strings or a single-item array containing a possibly comma-concatenated string, depending on the way the HTTP library provides access to headers.\n",
          "stability": "stable"
        },
        {
          "name": "http.response.size",
          "type": "int",
          "brief": "The total size of the response in bytes. This should be the total number of bytes sent over the wire, including the status line (HTTP/1.1), framing (HTTP/2 and HTTP/3), headers, and response body and trailers if any.\n",
          "examples": 1437,
          "requirement_level": "opt_in",
          "stability": "development"
        },
        {
          "name": "network.transport",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "tcp",
                "value": "tcp",
                "brief": "TCP",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "udp",
                "value": "udp",
                "brief": "UDP",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "pipe",
                "value": "pipe",
                "brief": "Named or anonymous pipe.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "unix",
                "value": "unix",
                "brief": "Unix domain socket",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "quic",
                "value": "quic",
                "brief": "QUIC",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "[OSI transport layer](https://wikipedia.org/wiki/Transport_layer) or [inter-process communication method](https://wikipedia.org/wiki/Inter-process_communication).\n",
          "examples": [
            "tcp",
            "udp"
          ],
          "requirement_level": "opt_in",
          "note": "Generally `tcp` for `HTTP/1.0`, `HTTP/1.1`, and `HTTP/2`. Generally `udp` for `HTTP/3`. Other obscure implementations are possible.\n",
          "stability": "stable"
        },
        {
          "name": "url.full",
          "type": "string",
          "brief": "Absolute URL describing a network resource according to [RFC3986](https://www.rfc-editor.org/rfc/rfc3986)",
          "examples": [
            "https://www.foo.bar/search?q=OpenTelemetry#SemConv",
            "//localhost"
          ],
          "requirement_level": "required",
          "sampling_relevant": true,
          "note": "For network calls, URL usually has `scheme://host[:port][path][?query][#fragment]` format, where the fragment\nis not transmitted over HTTP, but if it is known, it SHOULD be included nevertheless.\n\n`url.full` MUST NOT contain credentials passed via URL in form of `https://username:password@www.example.com/`.\nIn such case username and password SHOULD be redacted and attribute's value SHOULD be `https://REDACTED:REDACTED@www.example.com/`.\n\n`url.full` SHOULD capture the absolute URL when it is available (or can be reconstructed).\n\nSensitive content provided in `url.full` SHOULD be scrubbed when instrumentations can identify it.\n\n![Development](https://img.shields.io/badge/-development-blue)\nQuery string values for the following keys SHOULD be redacted by default and replaced by the\nvalue `REDACTED`:\n\n* [`AWSAccessKeyId`](https://docs.aws.amazon.com/AmazonS3/latest/userguide/RESTAuthentication.html#RESTAuthenticationQueryStringAuth)\n* [`Signature`](https://docs.aws.amazon.com/AmazonS3/latest/userguide/RESTAuthentication.html#RESTAuthenticationQueryStringAuth)\n* [`sig`](https://learn.microsoft.com/azure/storage/common/storage-sas-overview#sas-token)\n* [`X-Goog-Signature`](https://cloud.google.com/storage/docs/access-control/signed-urls)\n\nThis list is subject to change over time.\n\nWhen a query string value is redacted, the query string key SHOULD still be preserved, e.g.\n`https://www.example.com/path?color=blue&sig=REDACTED`.\n",
          "stability": "stable"
        }
      ],
      "span_kind": "client",
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/http/spans.yaml",
        "attributes": {
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "brief",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "note",
              "requirement_level"
            ]
          },
          "http.request.body.size": {
            "source_group": "registry.http",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "http.request.header": {
            "source_group": "registry.http",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "http.request.method": {
            "source_group": "registry.http",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "http.request.method_original": {
            "source_group": "registry.http",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "http.request.resend_count": {
            "source_group": "registry.http",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "http.request.size": {
            "source_group": "registry.http",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "http.response.body.size": {
            "source_group": "registry.http",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "http.response.header": {
            "source_group": "registry.http",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "http.response.size": {
            "source_group": "registry.http",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "http.response.status_code": {
            "source_group": "registry.http",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "network.peer.address": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "network.peer.port": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "network.protocol.name": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ]
          },
          "network.protocol.version": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples"
            ]
          },
          "network.transport": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "note",
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "url.full": {
            "source_group": "registry.url",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "url.scheme": {
            "source_group": "registry.url",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ]
          },
          "url.template": {
            "source_group": "registry.url",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ]
          },
          "user_agent.original": {
            "source_group": "registry.user_agent",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "user_agent.synthetic.type": {
            "source_group": "registry.user_agent.os",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "span.http.server",
      "type": "span",
      "brief": "Semantic Convention for HTTP Server",
      "stability": "stable",
      "attributes": [
        {
          "name": "user_agent.synthetic.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "bot",
                "value": "bot",
                "brief": "Bot source.",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "test",
                "value": "test",
                "brief": "Synthetic test source.",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "Specifies the category of synthetic traffic, such as tests or bots.\n",
          "requirement_level": "opt_in",
          "note": "This attribute MAY be derived from the contents of the `user_agent.original` attribute. Components that populate the attribute are responsible for determining what they consider to be synthetic bot or test traffic. This attribute can either be set for self-identification purposes, or on telemetry detected to be generated as a result of a synthetic request. This attribute is useful for distinguishing between genuine client traffic and synthetic traffic generated by bots or tests.\n",
          "stability": "development"
        },
        {
          "name": "client.address",
          "type": "string",
          "brief": "Client address - domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "83.164.160.102"
          ],
          "requirement_level": "recommended",
          "sampling_relevant": true,
          "note": "The IP address of the original client behind all proxies, if known (e.g. from [Forwarded#for](https://developer.mozilla.org/docs/Web/HTTP/Headers/Forwarded#for), [X-Forwarded-For](https://developer.mozilla.org/docs/Web/HTTP/Headers/X-Forwarded-For), or a similar header). Otherwise, the immediate client peer address.\n",
          "stability": "stable"
        },
        {
          "name": "client.port",
          "type": "int",
          "brief": "The port of whichever client was captured in `client.address`.",
          "examples": [
            65123
          ],
          "requirement_level": "opt_in",
          "note": "When observed from the server side, and when communicating through an intermediary, `client.port` SHOULD represent the client port behind any intermediaries,  for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "server.address",
          "type": "string",
          "brief": "Name of the local HTTP server that received the request.\n",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "recommended",
          "sampling_relevant": true,
          "note": "See [Setting `server.address` and `server.port` attributes](/docs/http/http-spans.md#setting-serveraddress-and-serverport-attributes).\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "Port of the local HTTP server that received the request.\n",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": {
            "conditionally_required": "If available and `server.address` is set."
          },
          "sampling_relevant": true,
          "note": "See [Setting `server.address` and `server.port` attributes](/docs/http/http-spans.md#setting-serveraddress-and-serverport-attributes).\n",
          "stability": "stable"
        },
        {
          "name": "user_agent.original",
          "type": "string",
          "brief": "Value of the [HTTP User-Agent](https://www.rfc-editor.org/rfc/rfc9110.html#field.user-agent) header sent by the client.\n",
          "examples": [
            "CERN-LineMode/2.15 libwww/2.17b3",
            "Mozilla/5.0 (iPhone; CPU iPhone OS 14_7_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.1.2 Mobile/15E148 Safari/604.1",
            "YourApp/1.0.0 grpc-java-okhttp/1.27.2"
          ],
          "requirement_level": "recommended",
          "sampling_relevant": true,
          "stability": "stable"
        },
        {
          "name": "network.peer.address",
          "type": "string",
          "brief": "Peer address of the network connection - IP address or Unix domain socket name.",
          "examples": [
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "recommended",
          "stability": "stable"
        },
        {
          "name": "http.request.method",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "connect",
                "value": "CONNECT",
                "brief": "CONNECT method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "delete",
                "value": "DELETE",
                "brief": "DELETE method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "get",
                "value": "GET",
                "brief": "GET method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "head",
                "value": "HEAD",
                "brief": "HEAD method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "options",
                "value": "OPTIONS",
                "brief": "OPTIONS method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "patch",
                "value": "PATCH",
                "brief": "PATCH method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "post",
                "value": "POST",
                "brief": "POST method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "put",
                "value": "PUT",
                "brief": "PUT method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "trace",
                "value": "TRACE",
                "brief": "TRACE method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "Any HTTP method that the instrumentation has no prior knowledge of.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "HTTP request method.",
          "examples": [
            "GET",
            "POST",
            "HEAD"
          ],
          "requirement_level": "required",
          "sampling_relevant": true,
          "note": "HTTP request method value SHOULD be \"known\" to the instrumentation.\nBy default, this convention defines \"known\" methods as the ones listed in [RFC9110](https://www.rfc-editor.org/rfc/rfc9110.html#name-methods)\nand the PATCH method defined in [RFC5789](https://www.rfc-editor.org/rfc/rfc5789.html).\n\nIf the HTTP request method is not known to instrumentation, it MUST set the `http.request.method` attribute to `_OTHER`.\n\nIf the HTTP instrumentation could end up converting valid HTTP request methods to `_OTHER`, then it MUST provide a way to override\nthe list of known HTTP methods. If this override is done via environment variable, then the environment variable MUST be named\nOTEL_INSTRUMENTATION_HTTP_KNOWN_METHODS and support a comma-separated list of case-sensitive known HTTP methods\n(this list MUST be a full override of the default known method, it is not a list of known methods in addition to the defaults).\n\nHTTP method names are case-sensitive and `http.request.method` attribute value MUST match a known HTTP method name exactly.\nInstrumentations for specific web frameworks that consider HTTP methods to be case insensitive, SHOULD populate a canonical equivalent.\nTracing instrumentations that do so, MUST also set `http.request.method_original` to the original value.\n",
          "stability": "stable"
        },
        {
          "name": "network.peer.port",
          "type": "int",
          "brief": "Peer port number of the network connection.",
          "examples": [
            65123
          ],
          "requirement_level": {
            "recommended": "If `network.peer.address` is set."
          },
          "stability": "stable"
        },
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "timeout",
            "java.net.UnknownHostException",
            "server_certificate_invalid",
            "500"
          ],
          "requirement_level": {
            "conditionally_required": "If request has ended with an error."
          },
          "note": "If the request fails with an error before response status code was sent or received,\n`error.type` SHOULD be set to exception type (its fully-qualified class name, if applicable)\nor a component-specific low cardinality error identifier.\n\nIf response status code was sent or received and status indicates an error according to [HTTP span status definition](/docs/http/http-spans.md),\n`error.type` SHOULD be set to the status code number (represented as a string), an exception type (if thrown) or a component-specific error identifier.\n\nThe `error.type` value SHOULD be predictable and SHOULD have low cardinality.\nInstrumentations SHOULD document the list of errors they report.\n\nThe cardinality of `error.type` within one instrumentation library SHOULD be low, but\ntelemetry consumers that aggregate data from multiple instrumentation libraries and applications\nshould be prepared for `error.type` to have high cardinality at query time, when no\nadditional filters are applied.\n\nIf the request has completed successfully, instrumentations SHOULD NOT set `error.type`.\n",
          "stability": "stable"
        },
        {
          "name": "http.response.status_code",
          "type": "int",
          "brief": "[HTTP response status code](https://tools.ietf.org/html/rfc7231#section-6).",
          "examples": [
            200
          ],
          "requirement_level": {
            "conditionally_required": "If and only if one was received/sent."
          },
          "stability": "stable"
        },
        {
          "name": "http.route",
          "type": "string",
          "brief": "The matched route, that is, the path template in the format used by the respective server framework.\n",
          "examples": [
            "/users/:userID?",
            "{controller}/{action}/{id?}"
          ],
          "requirement_level": {
            "conditionally_required": "If and only if it's available"
          },
          "note": "MUST NOT be populated when this is not supported by the HTTP server framework as the route attribute should have low-cardinality and the URI path can NOT substitute it.\nSHOULD include the [application root](/docs/http/http-spans.md#http-server-definitions) if there is one.\n",
          "stability": "stable"
        },
        {
          "name": "network.protocol.name",
          "type": "string",
          "brief": "[OSI application layer](https://wikipedia.org/wiki/Application_layer) or non-OSI equivalent.",
          "examples": [
            "http",
            "spdy"
          ],
          "requirement_level": {
            "conditionally_required": "If not `http` and `network.protocol.version` is set."
          },
          "note": "The value SHOULD be normalized to lowercase.",
          "stability": "stable"
        },
        {
          "name": "network.protocol.version",
          "type": "string",
          "brief": "The actual version of the protocol used for network communication.",
          "examples": [
            "1.0",
            "1.1",
            "2",
            "3"
          ],
          "requirement_level": "recommended",
          "note": "If protocol version is subject to negotiation (for example using [ALPN](https://www.rfc-editor.org/rfc/rfc7301.html)), this attribute SHOULD be set to the negotiated version. If the actual protocol version is not known, this attribute SHOULD NOT be set.\n",
          "stability": "stable"
        },
        {
          "name": "http.request.body.size",
          "type": "int",
          "brief": "The size of the request payload body in bytes. This is the number of bytes transferred excluding headers and is often, but not always, present as the [Content-Length](https://www.rfc-editor.org/rfc/rfc9110.html#field.content-length) header. For requests using transport encoding, this should be the compressed size.\n",
          "examples": 3495,
          "requirement_level": "opt_in",
          "stability": "development"
        },
        {
          "name": "http.request.method_original",
          "type": "string",
          "brief": "Original HTTP method sent by the client in the request line.",
          "examples": [
            "GeT",
            "ACL",
            "foo"
          ],
          "requirement_level": {
            "conditionally_required": "If and only if it's different than `http.request.method`."
          },
          "stability": "stable"
        },
        {
          "name": "http.request.size",
          "type": "int",
          "brief": "The total size of the request in bytes. This should be the total number of bytes sent over the wire, including the request line (HTTP/1.1), framing (HTTP/2 and HTTP/3), headers, and request body if any.\n",
          "examples": 1437,
          "requirement_level": "opt_in",
          "stability": "development"
        },
        {
          "name": "http.response.body.size",
          "type": "int",
          "brief": "The size of the response payload body in bytes. This is the number of bytes transferred excluding headers and is often, but not always, present as the [Content-Length](https://www.rfc-editor.org/rfc/rfc9110.html#field.content-length) header. For requests using transport encoding, this should be the compressed size.\n",
          "examples": 3495,
          "requirement_level": "opt_in",
          "stability": "development"
        },
        {
          "name": "http.response.header",
          "type": "template[string[]]",
          "brief": "HTTP response headers, `<key>` being the normalized HTTP Header name (lowercase), the value being the header values.\n",
          "examples": [
            "http.response.header.content-type=[\"application/json\"]",
            "http.response.header.my-custom-header=[\"abc\", \"def\"]"
          ],
          "requirement_level": "opt_in",
          "note": "Instrumentations SHOULD require an explicit configuration of which headers are to be captured. Including all response headers can be a security risk - explicit configuration helps avoid leaking sensitive information.\nUsers MAY explicitly configure instrumentations to capture them even though it is not recommended.\nThe attribute value MUST consist of either multiple header values as an array of strings or a single-item array containing a possibly comma-concatenated string, depending on the way the HTTP library provides access to headers.\n",
          "stability": "stable"
        },
        {
          "name": "http.response.size",
          "type": "int",
          "brief": "The total size of the response in bytes. This should be the total number of bytes sent over the wire, including the status line (HTTP/1.1), framing (HTTP/2 and HTTP/3), headers, and response body and trailers if any.\n",
          "examples": 1437,
          "requirement_level": "opt_in",
          "stability": "development"
        },
        {
          "name": "network.transport",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "tcp",
                "value": "tcp",
                "brief": "TCP",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "udp",
                "value": "udp",
                "brief": "UDP",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "pipe",
                "value": "pipe",
                "brief": "Named or anonymous pipe.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "unix",
                "value": "unix",
                "brief": "Unix domain socket",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "quic",
                "value": "quic",
                "brief": "QUIC",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "[OSI transport layer](https://wikipedia.org/wiki/Transport_layer) or [inter-process communication method](https://wikipedia.org/wiki/Inter-process_communication).\n",
          "examples": [
            "tcp",
            "udp"
          ],
          "requirement_level": "opt_in",
          "note": "Generally `tcp` for `HTTP/1.0`, `HTTP/1.1`, and `HTTP/2`. Generally `udp` for `HTTP/3`. Other obscure implementations are possible.\n",
          "stability": "stable"
        },
        {
          "name": "http.request.header",
          "type": "template[string[]]",
          "brief": "HTTP request headers, `<key>` being the normalized HTTP Header name (lowercase), the value being the header values.\n",
          "examples": [
            "http.request.header.content-type=[\"application/json\"]",
            "http.request.header.x-forwarded-for=[\"1.2.3.4\", \"1.2.3.5\"]"
          ],
          "requirement_level": "opt_in",
          "sampling_relevant": true,
          "note": "Instrumentations SHOULD require an explicit configuration of which headers are to be captured. Including all request headers can be a security risk - explicit configuration helps avoid leaking sensitive information.\nThe `User-Agent` header is already captured in the `user_agent.original` attribute. Users MAY explicitly configure instrumentations to capture them even though it is not recommended.\nThe attribute value MUST consist of either multiple header values as an array of strings or a single-item array containing a possibly comma-concatenated string, depending on the way the HTTP library provides access to headers.\n",
          "stability": "stable"
        },
        {
          "name": "network.local.address",
          "type": "string",
          "brief": "Local socket address. Useful in case of a multi-IP host.",
          "examples": [
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "opt_in",
          "stability": "stable"
        },
        {
          "name": "network.local.port",
          "type": "int",
          "brief": "Local socket port. Useful in case of a multi-port host.",
          "examples": [
            65123
          ],
          "requirement_level": "opt_in",
          "stability": "stable"
        },
        {
          "name": "url.path",
          "type": "string",
          "brief": "The [URI path](https://www.rfc-editor.org/rfc/rfc3986#section-3.3) component\n",
          "examples": [
            "/search"
          ],
          "requirement_level": "required",
          "sampling_relevant": true,
          "note": "Sensitive content provided in `url.path` SHOULD be scrubbed when instrumentations can identify it.\n",
          "stability": "stable"
        },
        {
          "name": "url.query",
          "type": "string",
          "brief": "The [URI query](https://www.rfc-editor.org/rfc/rfc3986#section-3.4) component\n",
          "examples": [
            "q=OpenTelemetry"
          ],
          "requirement_level": {
            "conditionally_required": "If and only if one was received/sent."
          },
          "sampling_relevant": true,
          "note": "Sensitive content provided in `url.query` SHOULD be scrubbed when instrumentations can identify it.\n\n![Development](https://img.shields.io/badge/-development-blue)\nQuery string values for the following keys SHOULD be redacted by default and replaced by the value `REDACTED`:\n\n* [`AWSAccessKeyId`](https://docs.aws.amazon.com/AmazonS3/latest/userguide/RESTAuthentication.html#RESTAuthenticationQueryStringAuth)\n* [`Signature`](https://docs.aws.amazon.com/AmazonS3/latest/userguide/RESTAuthentication.html#RESTAuthenticationQueryStringAuth)\n* [`sig`](https://learn.microsoft.com/azure/storage/common/storage-sas-overview#sas-token)\n* [`X-Goog-Signature`](https://cloud.google.com/storage/docs/access-control/signed-urls)\n\nThis list is subject to change over time.\n\nWhen a query string value is redacted, the query string key SHOULD still be preserved, e.g.\n`q=OpenTelemetry&sig=REDACTED`.\n",
          "stability": "stable"
        },
        {
          "name": "url.scheme",
          "type": "string",
          "brief": "The [URI scheme](https://www.rfc-editor.org/rfc/rfc3986#section-3.1) component identifying the used protocol.\n",
          "examples": [
            "http",
            "https"
          ],
          "requirement_level": "required",
          "sampling_relevant": true,
          "note": "The scheme of the original client request, if known (e.g. from [Forwarded#proto](https://developer.mozilla.org/docs/Web/HTTP/Headers/Forwarded#proto), [X-Forwarded-Proto](https://developer.mozilla.org/docs/Web/HTTP/Headers/X-Forwarded-Proto), or a similar header). Otherwise, the scheme of the immediate peer request.\n",
          "stability": "stable"
        }
      ],
      "span_kind": "server",
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/http/spans.yaml",
        "attributes": {
          "client.address": {
            "source_group": "registry.client",
            "inherited_fields": [
              "brief",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "note",
              "sampling_relevant"
            ]
          },
          "client.port": {
            "source_group": "registry.client",
            "inherited_fields": [
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "requirement_level"
            ]
          },
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "brief",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "note",
              "requirement_level"
            ]
          },
          "http.request.body.size": {
            "source_group": "registry.http",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "http.request.header": {
            "source_group": "registry.http",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "http.request.method": {
            "source_group": "registry.http",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "http.request.method_original": {
            "source_group": "registry.http",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "http.request.size": {
            "source_group": "registry.http",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "http.response.body.size": {
            "source_group": "registry.http",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "http.response.header": {
            "source_group": "registry.http",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "http.response.size": {
            "source_group": "registry.http",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "http.response.status_code": {
            "source_group": "registry.http",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "http.route": {
            "source_group": "registry.http",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "network.local.address": {
            "source_group": "registry.network",
            "inherited_fields": [
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "requirement_level"
            ]
          },
          "network.local.port": {
            "source_group": "registry.network",
            "inherited_fields": [
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "requirement_level"
            ]
          },
          "network.peer.address": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "network.peer.port": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "network.protocol.name": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ]
          },
          "network.protocol.version": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples"
            ]
          },
          "network.transport": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "note",
              "sampling_relevant"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "note",
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "url.path": {
            "source_group": "registry.url",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "url.query": {
            "source_group": "registry.url",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "url.scheme": {
            "source_group": "registry.url",
            "inherited_fields": [
              "brief",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "note",
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "user_agent.original": {
            "source_group": "registry.user_agent",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "sampling_relevant"
            ]
          },
          "user_agent.synthetic.type": {
            "source_group": "registry.user_agent.os",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "registry.linux.memory",
      "type": "attribute_group",
      "brief": "Describes Linux Memory attributes",
      "attributes": [
        {
          "name": "linux.memory.slab.state",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "reclaimable",
                "value": "reclaimable",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "unreclaimable",
                "value": "unreclaimable",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The Linux Slab memory state",
          "examples": [
            "reclaimable",
            "unreclaimable"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/linux/registry.yaml"
      },
      "display_name": "Linux Memory Attributes"
    },
    {
      "id": "registry.android.deprecated",
      "type": "attribute_group",
      "brief": "This document defines attributes that represents an occurrence of a lifecycle transition on the Android platform.\n",
      "attributes": [
        {
          "name": "android.state",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "created",
                "value": "created",
                "brief": "Any time before Activity.onResume() or, if the app has no Activity, Context.startService() has been called in the app for the first time.\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "background",
                "value": "background",
                "brief": "Any time after Activity.onPause() or, if the app has no Activity, Context.stopService() has been called when the app was in the foreground state.\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "foreground",
                "value": "foreground",
                "brief": "Any time after Activity.onResume() or, if the app has no Activity, Context.startService() has been called when the app was in either the created or background states.\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "Deprecated. Use `android.app.state` instead.",
          "requirement_level": "recommended",
          "note": "The Android lifecycle states are defined in [Activity lifecycle callbacks](https://developer.android.com/guide/components/activities/activity-lifecycle#lc), and from which the `OS identifiers` are derived.\n",
          "stability": "development",
          "deprecated": {
            "reason": "uncategorized",
            "note": "Renamed to `android.app.state`"
          }
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/android/deprecated/registry-deprecated.yaml"
      },
      "display_name": "Deprecated Android Attributes"
    },
    {
      "id": "resource.aws.ecs",
      "type": "resource",
      "brief": "Resources used by AWS Elastic Container Service (ECS).\n",
      "stability": "development",
      "attributes": [
        {
          "name": "aws.ecs.container.arn",
          "type": "string",
          "brief": "The Amazon Resource Name (ARN) of an [ECS container instance](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ECS_instances.html).\n",
          "examples": [
            "arn:aws:ecs:us-west-1:123456789123:container/32624152-9086-4f0e-acae-1a75b14fe4d9"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "aws.ecs.cluster.arn",
          "type": "string",
          "brief": "The ARN of an [ECS cluster](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/clusters.html).\n",
          "examples": [
            "arn:aws:ecs:us-west-2:123456789123:cluster/my-cluster"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "aws.ecs.launchtype",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "ec2",
                "value": "ec2",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "fargate",
                "value": "fargate",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The [launch type](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html) for an ECS task.\n",
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "aws.ecs.task.arn",
          "type": "string",
          "brief": "The ARN of a running [ECS task](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-account-settings.html#ecs-resource-ids).\n",
          "examples": [
            "arn:aws:ecs:us-west-1:123456789123:task/10838bed-421f-43ef-870a-f43feacbbb5b",
            "arn:aws:ecs:us-west-1:123456789123:task/my-cluster/task-id/23ebb8ac-c18f-46c6-8bbe-d55d0e37cfbd"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "aws.ecs.task.family",
          "type": "string",
          "brief": "The family name of the [ECS task definition](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definitions.html) used to create the ECS task.\n",
          "examples": [
            "opentelemetry-family"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "aws.ecs.task.revision",
          "type": "string",
          "brief": "The revision for the task definition used to create the ECS task.\n",
          "examples": [
            "8",
            "26"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "aws.ecs.task.id",
          "type": "string",
          "brief": "The ID of a running ECS task. The ID MUST be extracted from `task.arn`.\n",
          "examples": [
            "10838bed-421f-43ef-870a-f43feacbbb5b",
            "23ebb8ac-c18f-46c6-8bbe-d55d0e37cfbd"
          ],
          "requirement_level": {
            "conditionally_required": "If and only if `task.arn` is populated."
          },
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": "aws.ecs",
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/aws/ecs-resources.yaml",
        "attributes": {
          "aws.ecs.cluster.arn": {
            "source_group": "registry.aws.ecs",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.ecs.container.arn": {
            "source_group": "registry.aws.ecs",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.ecs.launchtype": {
            "source_group": "registry.aws.ecs",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.ecs.task.arn": {
            "source_group": "registry.aws.ecs",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.ecs.task.family": {
            "source_group": "registry.aws.ecs",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.ecs.task.id": {
            "source_group": "registry.aws.ecs",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ]
          },
          "aws.ecs.task.revision": {
            "source_group": "registry.aws.ecs",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "registry.gen_ai.deprecated",
      "type": "attribute_group",
      "brief": "Describes deprecated `gen_ai` attributes.",
      "attributes": [
        {
          "name": "gen_ai.usage.prompt_tokens",
          "type": "int",
          "brief": "Deprecated, use `gen_ai.usage.input_tokens` instead.",
          "examples": [
            42
          ],
          "requirement_level": "recommended",
          "stability": "development",
          "deprecated": {
            "reason": "uncategorized",
            "note": "Replaced by `gen_ai.usage.input_tokens` attribute."
          }
        },
        {
          "name": "gen_ai.usage.completion_tokens",
          "type": "int",
          "brief": "Deprecated, use `gen_ai.usage.output_tokens` instead.",
          "examples": [
            42
          ],
          "requirement_level": "recommended",
          "stability": "development",
          "deprecated": {
            "reason": "uncategorized",
            "note": "Replaced by `gen_ai.usage.output_tokens` attribute."
          }
        },
        {
          "name": "gen_ai.prompt",
          "type": "string",
          "brief": "Deprecated, use Event API to report prompt contents.",
          "examples": [
            "[{'role': 'user', 'content': 'What is the capital of France?'}]"
          ],
          "requirement_level": "recommended",
          "stability": "development",
          "deprecated": {
            "reason": "uncategorized",
            "note": "Removed, no replacement at this time."
          }
        },
        {
          "name": "gen_ai.completion",
          "type": "string",
          "brief": "Deprecated, use Event API to report completions contents.",
          "examples": [
            "[{'role': 'assistant', 'content': 'The capital of France is Paris.'}]"
          ],
          "requirement_level": "recommended",
          "stability": "development",
          "deprecated": {
            "reason": "uncategorized",
            "note": "Removed, no replacement at this time."
          }
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/gen-ai/deprecated/registry-deprecated.yaml"
      },
      "display_name": "Deprecated GenAI Attributes"
    },
    {
      "id": "registry.gen_ai.openai.deprecated",
      "type": "attribute_group",
      "brief": "Describes deprecated `gen_ai.openai` attributes.",
      "attributes": [
        {
          "name": "gen_ai.openai.request.seed",
          "type": "int",
          "brief": "Deprecated, use `gen_ai.request.seed`.",
          "examples": [
            100
          ],
          "requirement_level": "recommended",
          "stability": "development",
          "deprecated": {
            "reason": "uncategorized",
            "note": "Replaced by `gen_ai.request.seed` attribute."
          }
        },
        {
          "name": "gen_ai.openai.request.response_format",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "text",
                "value": "text",
                "brief": "Text response format",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "json_object",
                "value": "json_object",
                "brief": "JSON object response format",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "json_schema",
                "value": "json_schema",
                "brief": "JSON schema response format",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "Deprecated, use `gen_ai.output.type`.\n",
          "requirement_level": "recommended",
          "stability": "development",
          "deprecated": {
            "reason": "uncategorized",
            "note": "Replaced by `gen_ai.output.type`."
          }
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/gen-ai/deprecated/registry-deprecated.yaml"
      },
      "display_name": "Deprecated OpenAI GenAI Attributes"
    },
    {
      "id": "attributes.metrics.rpc",
      "type": "attribute_group",
      "brief": "Describes RPC metric attributes.",
      "attributes": [
        {
          "name": "server.address",
          "type": "string",
          "brief": "Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "recommended",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": "recommended",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "rpc.method",
          "type": "string",
          "brief": "The name of the (logical) method being called, must be equal to the $method part in the span name.",
          "examples": "exampleMethod",
          "requirement_level": "recommended",
          "note": "This is the logical name of the method from the RPC interface perspective, which can be different from the name of any implementing method/function. The `code.function.name` attribute may be used to store the latter (e.g., method actually executing the call on the server side, RPC client stub method on the client side).\n",
          "stability": "development"
        },
        {
          "name": "rpc.service",
          "type": "string",
          "brief": "The full (logical) name of the service being called, including its package name, if applicable.",
          "examples": "myservice.EchoService",
          "requirement_level": "recommended",
          "note": "This is the logical name of the service from the RPC interface perspective, which can be different from the name of any implementing class. The `code.namespace` attribute may be used to store the latter (despite the attribute name, it may include a class name; e.g., class with method actually executing the call on the server side, RPC client stub class on the client side).\n",
          "stability": "development"
        },
        {
          "name": "network.transport",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "tcp",
                "value": "tcp",
                "brief": "TCP",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "udp",
                "value": "udp",
                "brief": "UDP",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "pipe",
                "value": "pipe",
                "brief": "Named or anonymous pipe.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "unix",
                "value": "unix",
                "brief": "Unix domain socket",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "quic",
                "value": "quic",
                "brief": "QUIC",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "[OSI transport layer](https://wikipedia.org/wiki/Transport_layer) or [inter-process communication method](https://wikipedia.org/wiki/Inter-process_communication).\n",
          "examples": [
            "tcp",
            "udp"
          ],
          "requirement_level": "recommended",
          "note": "The value SHOULD be normalized to lowercase.\n\nConsider always setting the transport when setting a port number, since\na port number is ambiguous without knowing the transport. For example\ndifferent processes could be listening on TCP port 12345 and UDP port 12345.\n",
          "stability": "stable"
        },
        {
          "name": "network.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "ipv4",
                "value": "ipv4",
                "brief": "IPv4",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "ipv6",
                "value": "ipv6",
                "brief": "IPv6",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "[OSI network layer](https://wikipedia.org/wiki/Network_layer) or non-OSI equivalent.",
          "examples": [
            "ipv4",
            "ipv6"
          ],
          "requirement_level": "recommended",
          "note": "The value SHOULD be normalized to lowercase.",
          "stability": "stable"
        },
        {
          "name": "rpc.system",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "grpc",
                "value": "grpc",
                "brief": "gRPC",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "java_rmi",
                "value": "java_rmi",
                "brief": "Java RMI",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "dotnet_wcf",
                "value": "dotnet_wcf",
                "brief": ".NET WCF",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "apache_dubbo",
                "value": "apache_dubbo",
                "brief": "Apache Dubbo",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "connect_rpc",
                "value": "connect_rpc",
                "brief": "Connect RPC",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "A string identifying the remoting system. See below for a list of well-known identifiers.",
          "requirement_level": "required",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/rpc/metrics.yaml",
        "attributes": {
          "network.transport": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "network.type": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "rpc.method": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "rpc.service": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "rpc.system": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "metric.rpc.server.duration",
      "type": "metric",
      "brief": "Measures the duration of inbound RPC.",
      "note": "While streaming RPCs may record this metric as start-of-batch\nto end-of-batch, it's hard to interpret in practice.\n\n**Streaming**: N/A.\n",
      "stability": "development",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "rpc.server.duration",
      "instrument": "histogram",
      "unit": "ms",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/rpc/metrics.yaml"
      }
    },
    {
      "id": "metric.rpc.server.request.size",
      "type": "metric",
      "brief": "Measures the size of RPC request messages (uncompressed).",
      "note": "**Streaming**: Recorded per message in a streaming batch\n",
      "stability": "development",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "rpc.server.request.size",
      "instrument": "histogram",
      "unit": "By",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/rpc/metrics.yaml"
      }
    },
    {
      "id": "metric.rpc.server.response.size",
      "type": "metric",
      "brief": "Measures the size of RPC response messages (uncompressed).",
      "note": "**Streaming**: Recorded per response in a streaming batch\n",
      "stability": "development",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "rpc.server.response.size",
      "instrument": "histogram",
      "unit": "By",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/rpc/metrics.yaml"
      }
    },
    {
      "id": "metric.rpc.server.requests_per_rpc",
      "type": "metric",
      "brief": "Measures the number of messages received per RPC.",
      "note": "Should be 1 for all non-streaming RPCs.\n\n**Streaming** : This metric is required for server and client streaming RPCs\n",
      "stability": "development",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "rpc.server.requests_per_rpc",
      "instrument": "histogram",
      "unit": "{count}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/rpc/metrics.yaml"
      }
    },
    {
      "id": "metric.rpc.server.responses_per_rpc",
      "type": "metric",
      "brief": "Measures the number of messages sent per RPC.",
      "note": "Should be 1 for all non-streaming RPCs.\n\n**Streaming**: This metric is required for server and client streaming RPCs\n",
      "stability": "development",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "rpc.server.responses_per_rpc",
      "instrument": "histogram",
      "unit": "{count}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/rpc/metrics.yaml"
      }
    },
    {
      "id": "metric.rpc.client.duration",
      "type": "metric",
      "brief": "Measures the duration of outbound RPC.",
      "note": "While streaming RPCs may record this metric as start-of-batch\nto end-of-batch, it's hard to interpret in practice.\n\n**Streaming**: N/A.\n",
      "stability": "development",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "rpc.client.duration",
      "instrument": "histogram",
      "unit": "ms",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/rpc/metrics.yaml"
      }
    },
    {
      "id": "metric.rpc.client.request.size",
      "type": "metric",
      "brief": "Measures the size of RPC request messages (uncompressed).",
      "note": "**Streaming**: Recorded per message in a streaming batch\n",
      "stability": "development",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "rpc.client.request.size",
      "instrument": "histogram",
      "unit": "By",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/rpc/metrics.yaml"
      }
    },
    {
      "id": "metric.rpc.client.response.size",
      "type": "metric",
      "brief": "Measures the size of RPC response messages (uncompressed).",
      "note": "**Streaming**: Recorded per response in a streaming batch\n",
      "stability": "development",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "rpc.client.response.size",
      "instrument": "histogram",
      "unit": "By",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/rpc/metrics.yaml"
      }
    },
    {
      "id": "metric.rpc.client.requests_per_rpc",
      "type": "metric",
      "brief": "Measures the number of messages received per RPC.",
      "note": "Should be 1 for all non-streaming RPCs.\n\n**Streaming**: This metric is required for server and client streaming RPCs\n",
      "stability": "development",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "rpc.client.requests_per_rpc",
      "instrument": "histogram",
      "unit": "{count}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/rpc/metrics.yaml"
      }
    },
    {
      "id": "metric.rpc.client.responses_per_rpc",
      "type": "metric",
      "brief": "Measures the number of messages sent per RPC.",
      "note": "Should be 1 for all non-streaming RPCs.\n\n**Streaming**: This metric is required for server and client streaming RPCs\n",
      "stability": "development",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "rpc.client.responses_per_rpc",
      "instrument": "histogram",
      "unit": "{count}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/rpc/metrics.yaml"
      }
    },
    {
      "id": "registry.event.deprecated",
      "type": "attribute_group",
      "brief": "Attributes for Events represented using Log Records.\n",
      "attributes": [
        {
          "name": "event.name",
          "type": "string",
          "brief": "Identifies the class / type of event.\n",
          "examples": [
            "browser.mouse.click",
            "device.app.lifecycle"
          ],
          "requirement_level": "recommended",
          "stability": "development",
          "deprecated": {
            "reason": "uncategorized",
            "note": "Replaced by EventName top-level field on the LogRecord"
          }
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/event/deprecated/registry-deprecated.yaml"
      },
      "display_name": "Event Attributes"
    },
    {
      "id": "metric.process.cpu.time",
      "type": "metric",
      "brief": "Total CPU seconds broken down by different states.",
      "stability": "development",
      "attributes": [
        {
          "name": "cpu.mode",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "user",
                "value": "user",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "system",
                "value": "system",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "nice",
                "value": "nice",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "idle",
                "value": "idle",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "iowait",
                "value": "iowait",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "interrupt",
                "value": "interrupt",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "steal",
                "value": "steal",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "kernel",
                "value": "kernel",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "A process SHOULD be characterized _either_ by data points with no `mode` labels, _or only_ data points with `mode` labels.\n",
          "examples": [
            "user",
            "system"
          ],
          "requirement_level": "recommended",
          "note": "Following states SHOULD be used: `user`, `system`, `wait`",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "process.cpu.time",
      "instrument": "counter",
      "unit": "s",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/process/metrics.yaml",
        "attributes": {
          "cpu.mode": {
            "source_group": "registry.cpu",
            "inherited_fields": [
              "examples",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "note"
            ]
          }
        }
      }
    },
    {
      "id": "metric.process.cpu.utilization",
      "type": "metric",
      "brief": "Difference in process.cpu.time since the last measurement, divided by the elapsed time and number of CPUs available to the process.",
      "stability": "development",
      "attributes": [
        {
          "name": "cpu.mode",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "user",
                "value": "user",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "system",
                "value": "system",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "nice",
                "value": "nice",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "idle",
                "value": "idle",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "iowait",
                "value": "iowait",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "interrupt",
                "value": "interrupt",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "steal",
                "value": "steal",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "kernel",
                "value": "kernel",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "A process SHOULD be characterized _either_ by data points with no `mode` labels, _or only_ data points with `mode` labels.\n",
          "examples": [
            "user",
            "system"
          ],
          "requirement_level": "recommended",
          "note": "Following states SHOULD be used: `user`, `system`, `wait`",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "process.cpu.utilization",
      "instrument": "gauge",
      "unit": "1",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/process/metrics.yaml",
        "attributes": {
          "cpu.mode": {
            "source_group": "registry.cpu",
            "inherited_fields": [
              "examples",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "note"
            ]
          }
        }
      }
    },
    {
      "id": "metric.process.memory.usage",
      "type": "metric",
      "brief": "The amount of physical memory in use.",
      "stability": "development",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "process.memory.usage",
      "instrument": "updowncounter",
      "unit": "By",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/process/metrics.yaml"
      }
    },
    {
      "id": "metric.process.memory.virtual",
      "type": "metric",
      "brief": "The amount of committed virtual memory.",
      "stability": "development",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "process.memory.virtual",
      "instrument": "updowncounter",
      "unit": "By",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/process/metrics.yaml"
      }
    },
    {
      "id": "metric.process.disk.io",
      "type": "metric",
      "brief": "Disk bytes transferred.",
      "stability": "development",
      "attributes": [
        {
          "name": "disk.io.direction",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "read",
                "value": "read",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "write",
                "value": "write",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The disk IO operation direction.",
          "examples": [
            "read"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "process.disk.io",
      "instrument": "counter",
      "unit": "By",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/process/metrics.yaml",
        "attributes": {
          "disk.io.direction": {
            "source_group": "registry.disk",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "metric.process.network.io",
      "type": "metric",
      "brief": "Network bytes transferred.",
      "stability": "development",
      "attributes": [
        {
          "name": "network.io.direction",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "transmit",
                "value": "transmit",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "receive",
                "value": "receive",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The network IO operation direction.",
          "examples": [
            "transmit"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "process.network.io",
      "instrument": "counter",
      "unit": "By",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/process/metrics.yaml",
        "attributes": {
          "network.io.direction": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "metric.process.thread.count",
      "type": "metric",
      "brief": "Process threads count.",
      "stability": "development",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "process.thread.count",
      "instrument": "updowncounter",
      "unit": "{thread}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/process/metrics.yaml"
      }
    },
    {
      "id": "metric.process.open_file_descriptor.count",
      "type": "metric",
      "brief": "Number of file descriptors in use by the process.",
      "stability": "development",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "process.open_file_descriptor.count",
      "instrument": "updowncounter",
      "unit": "{file_descriptor}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/process/metrics.yaml"
      }
    },
    {
      "id": "metric.process.context_switches",
      "type": "metric",
      "brief": "Number of times the process has been context switched.",
      "stability": "development",
      "attributes": [
        {
          "name": "process.context_switch_type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "voluntary",
                "value": "voluntary",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "involuntary",
                "value": "involuntary",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "Specifies whether the context switches for this data point were voluntary or involuntary.",
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "process.context_switches",
      "instrument": "counter",
      "unit": "{context_switch}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/process/metrics.yaml",
        "attributes": {
          "process.context_switch_type": {
            "source_group": "registry.process",
            "inherited_fields": [
              "brief",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "metric.process.paging.faults",
      "type": "metric",
      "brief": "Number of page faults the process has made.",
      "stability": "development",
      "attributes": [
        {
          "name": "process.paging.fault_type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "major",
                "value": "major",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "minor",
                "value": "minor",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The type of page fault for this data point. Type `major` is for major/hard page faults, and `minor` is for minor/soft page faults.\n",
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "process.paging.faults",
      "instrument": "counter",
      "unit": "{fault}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/process/metrics.yaml",
        "attributes": {
          "process.paging.fault_type": {
            "source_group": "registry.process",
            "inherited_fields": [
              "brief",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "metric.process.uptime",
      "type": "metric",
      "brief": "The time the process has been running.",
      "note": "Instrumentations SHOULD use a gauge with type `double` and measure uptime in seconds as a floating point number with the highest precision available.\nThe actual accuracy would depend on the instrumentation and operating system.\n",
      "stability": "development",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "process.uptime",
      "instrument": "gauge",
      "unit": "s",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/process/metrics.yaml"
      }
    },
    {
      "id": "registry.db.deprecated",
      "type": "attribute_group",
      "brief": "Describes deprecated database attributes.\n",
      "stability": "development",
      "attributes": [
        {
          "name": "db.connection_string",
          "type": "string",
          "brief": "Deprecated, use `server.address`, `server.port` attributes instead.",
          "examples": "Server=(localdb)\\v11.0;Integrated Security=true;",
          "requirement_level": "recommended",
          "stability": "development",
          "deprecated": {
            "reason": "uncategorized",
            "note": "Replaced by `server.address` and `server.port`."
          }
        },
        {
          "name": "db.jdbc.driver_classname",
          "type": "string",
          "brief": "Removed, no replacement at this time.",
          "examples": [
            "org.postgresql.Driver",
            "com.microsoft.sqlserver.jdbc.SQLServerDriver"
          ],
          "requirement_level": "recommended",
          "stability": "development",
          "deprecated": {
            "reason": "uncategorized",
            "note": "Removed as not used."
          }
        },
        {
          "name": "db.operation",
          "type": "string",
          "brief": "Deprecated, use `db.operation.name` instead.",
          "examples": [
            "findAndModify",
            "HMSET",
            "SELECT"
          ],
          "requirement_level": "recommended",
          "stability": "development",
          "deprecated": {
            "reason": "uncategorized",
            "note": "Replaced by `db.operation.name`."
          }
        },
        {
          "name": "db.user",
          "type": "string",
          "brief": "Deprecated, no replacement at this time.",
          "examples": [
            "readonly_user",
            "reporting_user"
          ],
          "requirement_level": "recommended",
          "stability": "development",
          "deprecated": {
            "reason": "uncategorized",
            "note": "No replacement at this time."
          }
        },
        {
          "name": "db.statement",
          "type": "string",
          "brief": "The database statement being executed.",
          "examples": [
            "SELECT * FROM wuser_table",
            "SET mykey \"WuValue\""
          ],
          "requirement_level": "recommended",
          "stability": "development",
          "deprecated": {
            "reason": "uncategorized",
            "note": "Replaced by `db.query.text`."
          }
        },
        {
          "name": "db.query.parameter",
          "type": "template[string]",
          "brief": "A query parameter used in `db.query.text`, with `<key>` being the parameter name, and the attribute value being a string representation of the parameter value.\n",
          "examples": [
            "someval",
            "55"
          ],
          "requirement_level": "recommended",
          "stability": "development",
          "deprecated": {
            "reason": "uncategorized",
            "note": "Replaced by `db.operation.parameter`."
          }
        },
        {
          "name": "db.cassandra.table",
          "type": "string",
          "brief": "Deprecated, use `db.collection.name` instead.",
          "examples": "mytable",
          "requirement_level": "recommended",
          "stability": "development",
          "deprecated": {
            "reason": "uncategorized",
            "note": "Replaced by `db.collection.name`."
          }
        },
        {
          "name": "db.cosmosdb.container",
          "type": "string",
          "brief": "Deprecated, use `db.collection.name` instead.",
          "examples": "mytable",
          "requirement_level": "recommended",
          "stability": "development",
          "deprecated": {
            "reason": "uncategorized",
            "note": "Replaced by `db.collection.name`."
          }
        },
        {
          "name": "db.mongodb.collection",
          "type": "string",
          "brief": "Deprecated, use `db.collection.name` instead.",
          "examples": "mytable",
          "requirement_level": "recommended",
          "stability": "development",
          "deprecated": {
            "reason": "uncategorized",
            "note": "Replaced by `db.collection.name`."
          }
        },
        {
          "name": "db.sql.table",
          "type": "string",
          "brief": "Deprecated, use `db.collection.name` instead.",
          "examples": "mytable",
          "requirement_level": "recommended",
          "stability": "development",
          "deprecated": {
            "reason": "uncategorized",
            "note": "Replaced by `db.collection.name`."
          }
        },
        {
          "name": "db.redis.database_index",
          "type": "int",
          "brief": "Deprecated, use `db.namespace` instead.",
          "examples": [
            0,
            1,
            15
          ],
          "requirement_level": "recommended",
          "stability": "development",
          "deprecated": {
            "reason": "uncategorized",
            "note": "Replaced by `db.namespace`."
          }
        },
        {
          "name": "db.name",
          "type": "string",
          "brief": "Deprecated, use `db.namespace` instead.",
          "examples": [
            "customers",
            "main"
          ],
          "requirement_level": "recommended",
          "stability": "development",
          "deprecated": {
            "reason": "uncategorized",
            "note": "Replaced by `db.namespace`."
          }
        },
        {
          "name": "db.mssql.instance_name",
          "type": "string",
          "brief": "Deprecated, SQL Server instance is now populated as a part of `db.namespace` attribute.",
          "examples": "MSSQLSERVER",
          "requirement_level": "recommended",
          "stability": "development",
          "deprecated": {
            "reason": "uncategorized",
            "note": "Deprecated, no replacement at this time."
          }
        },
        {
          "name": "db.instance.id",
          "type": "string",
          "brief": "Deprecated, no general replacement at this time. For Elasticsearch, use `db.elasticsearch.node.name` instead.",
          "examples": "mysql-e26b99z.example.com",
          "requirement_level": "recommended",
          "stability": "development",
          "deprecated": {
            "reason": "uncategorized",
            "note": "Deprecated, no general replacement at this time. For Elasticsearch, use `db.elasticsearch.node.name` instead."
          }
        },
        {
          "name": "db.elasticsearch.cluster.name",
          "type": "string",
          "brief": "Deprecated, use `db.namespace` instead.\n",
          "examples": [
            "e9106fc68e3044f0b1475b04bf4ffd5f"
          ],
          "requirement_level": "recommended",
          "stability": "development",
          "deprecated": {
            "reason": "uncategorized",
            "note": "Replaced by `db.namespace`."
          }
        },
        {
          "name": "db.cosmosdb.status_code",
          "type": "int",
          "brief": "Deprecated, use `db.response.status_code` instead.",
          "examples": [
            200,
            201
          ],
          "requirement_level": "recommended",
          "stability": "development",
          "deprecated": {
            "reason": "uncategorized",
            "note": "Replaced by `db.response.status_code`."
          }
        },
        {
          "name": "db.cosmosdb.operation_type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "batch",
                "value": "batch",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "create",
                "value": "create",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "delete",
                "value": "delete",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "execute",
                "value": "execute",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "execute_javascript",
                "value": "execute_javascript",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "invalid",
                "value": "invalid",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "head",
                "value": "head",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "head_feed",
                "value": "head_feed",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "patch",
                "value": "patch",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "query",
                "value": "query",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "query_plan",
                "value": "query_plan",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "read",
                "value": "read",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "read_feed",
                "value": "read_feed",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "replace",
                "value": "replace",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "upsert",
                "value": "upsert",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "Deprecated, no replacement at this time.",
          "requirement_level": "recommended",
          "stability": "development",
          "deprecated": {
            "reason": "uncategorized",
            "note": "No replacement at this time."
          }
        },
        {
          "name": "db.cassandra.coordinator.dc",
          "type": "string",
          "brief": "Deprecated, use `cassandra.coordinator.dc` instead.",
          "examples": "us-west-2",
          "requirement_level": "recommended",
          "stability": "development",
          "deprecated": {
            "reason": "uncategorized",
            "note": "Replaced by `cassandra.coordinator.dc`."
          }
        },
        {
          "name": "db.cassandra.coordinator.id",
          "type": "string",
          "brief": "Deprecated, use `cassandra.coordinator.id` instead.",
          "examples": "be13faa2-8574-4d71-926d-27f16cf8a7af",
          "requirement_level": "recommended",
          "stability": "development",
          "deprecated": {
            "reason": "uncategorized",
            "note": "Replaced by `cassandra.coordinator.id`."
          }
        },
        {
          "name": "db.cassandra.consistency_level",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "all",
                "value": "all",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "each_quorum",
                "value": "each_quorum",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "quorum",
                "value": "quorum",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "local_quorum",
                "value": "local_quorum",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "one",
                "value": "one",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "two",
                "value": "two",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "three",
                "value": "three",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "local_one",
                "value": "local_one",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "any",
                "value": "any",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "serial",
                "value": "serial",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "local_serial",
                "value": "local_serial",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "Deprecated, use `cassandra.consistency.level` instead.",
          "requirement_level": "recommended",
          "stability": "development",
          "deprecated": {
            "reason": "uncategorized",
            "note": "Replaced by `cassandra.consistency.level`."
          }
        },
        {
          "name": "db.cassandra.idempotence",
          "type": "boolean",
          "brief": "Deprecated, use `cassandra.query.idempotent` instead.",
          "requirement_level": "recommended",
          "stability": "development",
          "deprecated": {
            "reason": "uncategorized",
            "note": "Replaced by `cassandra.query.idempotent`."
          }
        },
        {
          "name": "db.cassandra.page_size",
          "type": "int",
          "brief": "Deprecated, use `cassandra.page.size` instead.",
          "examples": [
            5000
          ],
          "requirement_level": "recommended",
          "stability": "development",
          "deprecated": {
            "reason": "uncategorized",
            "note": "Replaced by `cassandra.page.size`."
          }
        },
        {
          "name": "db.cassandra.speculative_execution_count",
          "type": "int",
          "brief": "Deprecated, use `cassandra.speculative_execution.count` instead.",
          "examples": [
            0,
            2
          ],
          "requirement_level": "recommended",
          "stability": "development",
          "deprecated": {
            "reason": "uncategorized",
            "note": "Replaced by `cassandra.speculative_execution.count`."
          }
        },
        {
          "name": "db.cosmosdb.client_id",
          "type": "string",
          "brief": "Deprecated, use `azure.client.id` instead.",
          "examples": "3ba4827d-4422-483f-b59f-85b74211c11d",
          "requirement_level": "recommended",
          "stability": "development",
          "deprecated": {
            "reason": "uncategorized",
            "note": "Replaced by `azure.client.id`."
          }
        },
        {
          "name": "db.cosmosdb.connection_mode",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "gateway",
                "value": "gateway",
                "brief": "Gateway (HTTP) connection.",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "direct",
                "value": "direct",
                "brief": "Direct connection.",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "Deprecated, use `azure.cosmosdb.connection.mode` instead.",
          "requirement_level": "recommended",
          "stability": "development",
          "deprecated": {
            "reason": "uncategorized",
            "note": "Replaced by `azure.cosmosdb.connection.mode`."
          }
        },
        {
          "name": "db.cosmosdb.request_charge",
          "type": "double",
          "brief": "Deprecated, use `azure.cosmosdb.operation.request_charge` instead.",
          "examples": [
            46.18,
            1.0
          ],
          "requirement_level": "recommended",
          "stability": "development",
          "deprecated": {
            "reason": "uncategorized",
            "note": "Replaced by `azure.cosmosdb.operation.request_charge`."
          }
        },
        {
          "name": "db.cosmosdb.request_content_length",
          "type": "int",
          "brief": "Deprecated, use `azure.cosmosdb.request.body.size` instead.",
          "requirement_level": "recommended",
          "stability": "development",
          "deprecated": {
            "reason": "uncategorized",
            "note": "Replaced by `azure.cosmosdb.request.body.size`."
          }
        },
        {
          "name": "db.cosmosdb.sub_status_code",
          "type": "int",
          "brief": "Deprecated, use `azure.cosmosdb.response.sub_status_code` instead.",
          "examples": [
            1000,
            1002
          ],
          "requirement_level": "recommended",
          "stability": "development",
          "deprecated": {
            "reason": "uncategorized",
            "note": "Replaced by `azure.cosmosdb.response.sub_status_code`."
          }
        },
        {
          "name": "db.cosmosdb.consistency_level",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "strong",
                "value": "Strong",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "bounded_staleness",
                "value": "BoundedStaleness",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "session",
                "value": "Session",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "eventual",
                "value": "Eventual",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "consistent_prefix",
                "value": "ConsistentPrefix",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "Deprecated, use `cosmosdb.consistency.level` instead.",
          "examples": [
            "Eventual",
            "ConsistentPrefix",
            "BoundedStaleness",
            "Strong",
            "Session"
          ],
          "requirement_level": "recommended",
          "stability": "development",
          "deprecated": {
            "reason": "uncategorized",
            "note": "Replaced by `azure.cosmosdb.consistency.level`."
          }
        },
        {
          "name": "db.cosmosdb.regions_contacted",
          "type": "string[]",
          "brief": "Deprecated, use `azure.cosmosdb.operation.contacted_regions` instead.",
          "examples": [
            [
              "North Central US",
              "Australia East",
              "Australia Southeast"
            ]
          ],
          "requirement_level": "recommended",
          "stability": "development",
          "deprecated": {
            "reason": "uncategorized",
            "note": "Replaced by `azure.cosmosdb.operation.contacted_regions`."
          }
        },
        {
          "name": "db.elasticsearch.node.name",
          "type": "string",
          "brief": "Deprecated, use `elasticsearch.node.name` instead.\n",
          "examples": [
            "instance-0000000001"
          ],
          "requirement_level": "recommended",
          "stability": "development",
          "deprecated": {
            "reason": "uncategorized",
            "note": "Replaced by `elasticsearch.node.name`."
          }
        },
        {
          "name": "db.elasticsearch.path_parts",
          "type": "template[string]",
          "brief": "Deprecated, use `db.operation.parameter` instead.\n",
          "examples": [
            "db.elasticsearch.path_parts.index=test-index",
            "db.elasticsearch.path_parts.doc_id=123"
          ],
          "requirement_level": "recommended",
          "stability": "development",
          "deprecated": {
            "reason": "uncategorized",
            "note": "Replaced by `db.operation.parameter`."
          }
        },
        {
          "name": "db.system",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "other_sql",
                "value": "other_sql",
                "brief": "Some other SQL database. Fallback only. See notes.",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "adabas",
                "value": "adabas",
                "brief": "Adabas (Adaptable Database System)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "cache",
                "value": "cache",
                "brief": "Deprecated, use `intersystems_cache` instead.",
                "note": null,
                "stability": "development",
                "deprecated": "Replaced by `intersystems_cache`."
              },
              {
                "id": "intersystems_cache",
                "value": "intersystems_cache",
                "brief": "InterSystems Caché",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "cassandra",
                "value": "cassandra",
                "brief": "Apache Cassandra",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "clickhouse",
                "value": "clickhouse",
                "brief": "ClickHouse",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "cloudscape",
                "value": "cloudscape",
                "brief": "Deprecated, use `other_sql` instead.",
                "note": null,
                "stability": "development",
                "deprecated": "Replaced by `other_sql`."
              },
              {
                "id": "cockroachdb",
                "value": "cockroachdb",
                "brief": "CockroachDB",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "coldfusion",
                "value": "coldfusion",
                "brief": "Deprecated, no replacement at this time.",
                "note": null,
                "stability": "development",
                "deprecated": "Removed."
              },
              {
                "id": "cosmosdb",
                "value": "cosmosdb",
                "brief": "Microsoft Azure Cosmos DB",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "couchbase",
                "value": "couchbase",
                "brief": "Couchbase",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "couchdb",
                "value": "couchdb",
                "brief": "CouchDB",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "db2",
                "value": "db2",
                "brief": "IBM Db2",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "derby",
                "value": "derby",
                "brief": "Apache Derby",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "dynamodb",
                "value": "dynamodb",
                "brief": "Amazon DynamoDB",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "edb",
                "value": "edb",
                "brief": "EnterpriseDB",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "elasticsearch",
                "value": "elasticsearch",
                "brief": "Elasticsearch",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "filemaker",
                "value": "filemaker",
                "brief": "FileMaker",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "firebird",
                "value": "firebird",
                "brief": "Firebird",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "firstsql",
                "value": "firstsql",
                "brief": "Deprecated, use `other_sql` instead.",
                "note": null,
                "stability": "development",
                "deprecated": "Replaced by `other_sql`."
              },
              {
                "id": "geode",
                "value": "geode",
                "brief": "Apache Geode",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "h2",
                "value": "h2",
                "brief": "H2",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "hanadb",
                "value": "hanadb",
                "brief": "SAP HANA",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "hbase",
                "value": "hbase",
                "brief": "Apache HBase",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "hive",
                "value": "hive",
                "brief": "Apache Hive",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "hsqldb",
                "value": "hsqldb",
                "brief": "HyperSQL DataBase",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "influxdb",
                "value": "influxdb",
                "brief": "InfluxDB",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "informix",
                "value": "informix",
                "brief": "Informix",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "ingres",
                "value": "ingres",
                "brief": "Ingres",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "instantdb",
                "value": "instantdb",
                "brief": "InstantDB",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "interbase",
                "value": "interbase",
                "brief": "InterBase",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "mariadb",
                "value": "mariadb",
                "brief": "MariaDB (This value has stability level RELEASE CANDIDATE)",
                "note": null,
                "stability": "release_candidate",
                "deprecated": null
              },
              {
                "id": "maxdb",
                "value": "maxdb",
                "brief": "SAP MaxDB",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "memcached",
                "value": "memcached",
                "brief": "Memcached",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "mongodb",
                "value": "mongodb",
                "brief": "MongoDB",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "mssql",
                "value": "mssql",
                "brief": "Microsoft SQL Server (This value has stability level RELEASE CANDIDATE)",
                "note": null,
                "stability": "release_candidate",
                "deprecated": null
              },
              {
                "id": "mssqlcompact",
                "value": "mssqlcompact",
                "brief": "Deprecated, Microsoft SQL Server Compact is discontinued.",
                "note": null,
                "stability": "development",
                "deprecated": "Removed, use `other_sql` instead."
              },
              {
                "id": "mysql",
                "value": "mysql",
                "brief": "MySQL (This value has stability level RELEASE CANDIDATE)",
                "note": null,
                "stability": "release_candidate",
                "deprecated": null
              },
              {
                "id": "neo4j",
                "value": "neo4j",
                "brief": "Neo4j",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "netezza",
                "value": "netezza",
                "brief": "Netezza",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "opensearch",
                "value": "opensearch",
                "brief": "OpenSearch",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "oracle",
                "value": "oracle",
                "brief": "Oracle Database",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "pervasive",
                "value": "pervasive",
                "brief": "Pervasive PSQL",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "pointbase",
                "value": "pointbase",
                "brief": "PointBase",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "postgresql",
                "value": "postgresql",
                "brief": "PostgreSQL (This value has stability level RELEASE CANDIDATE)",
                "note": null,
                "stability": "release_candidate",
                "deprecated": null
              },
              {
                "id": "progress",
                "value": "progress",
                "brief": "Progress Database",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "redis",
                "value": "redis",
                "brief": "Redis",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "redshift",
                "value": "redshift",
                "brief": "Amazon Redshift",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "spanner",
                "value": "spanner",
                "brief": "Cloud Spanner",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "sqlite",
                "value": "sqlite",
                "brief": "SQLite",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "sybase",
                "value": "sybase",
                "brief": "Sybase",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "teradata",
                "value": "teradata",
                "brief": "Teradata",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "trino",
                "value": "trino",
                "brief": "Trino",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "vertica",
                "value": "vertica",
                "brief": "Vertica",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "Deprecated, use `db.system.name` instead.",
          "requirement_level": "recommended",
          "stability": "release_candidate",
          "deprecated": {
            "reason": "uncategorized",
            "note": "Replaced by `db.system.name`."
          }
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/database/deprecated/registry-deprecated.yaml"
      },
      "display_name": "Deprecated Database Attributes"
    },
    {
      "id": "registry.db.metrics.deprecated",
      "type": "attribute_group",
      "brief": "\"Describes deprecated db metrics attributes.\"\n",
      "stability": "development",
      "attributes": [
        {
          "name": "state",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "idle",
                "value": "idle",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "used",
                "value": "used",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "Deprecated, use `db.client.connection.state` instead.",
          "examples": [
            "idle"
          ],
          "requirement_level": "recommended",
          "stability": "development",
          "deprecated": {
            "reason": "uncategorized",
            "note": "Replaced by `db.client.connection.state`."
          }
        },
        {
          "name": "pool.name",
          "type": "string",
          "brief": "Deprecated, use `db.client.connection.pool.name` instead.",
          "examples": [
            "myDataSource"
          ],
          "requirement_level": "recommended",
          "stability": "development",
          "deprecated": {
            "reason": "uncategorized",
            "note": "Replaced by `db.client.connection.pool.name`."
          }
        },
        {
          "name": "db.client.connections.state",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "idle",
                "value": "idle",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "used",
                "value": "used",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "Deprecated, use `db.client.connection.state` instead.",
          "examples": [
            "idle"
          ],
          "requirement_level": "recommended",
          "stability": "development",
          "deprecated": {
            "reason": "uncategorized",
            "note": "Replaced by `db.client.connection.state`."
          }
        },
        {
          "name": "db.client.connections.pool.name",
          "type": "string",
          "brief": "Deprecated, use `db.client.connection.pool.name` instead.",
          "examples": [
            "myDataSource"
          ],
          "requirement_level": "recommended",
          "stability": "development",
          "deprecated": {
            "reason": "uncategorized",
            "note": "Replaced by `db.client.connection.pool.name`."
          }
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/database/deprecated/registry-deprecated.yaml"
      },
      "display_name": "Deprecated Database Metrics"
    },
    {
      "id": "event.feature_flag.evaluation",
      "type": "event",
      "brief": "Defines feature flag evaluation as an event.\n",
      "note": "A `feature_flag.evaluation` event SHOULD be emitted whenever a feature flag value is evaluated, which may happen many times over the course of an application lifecycle. For example, a website A/B testing different animations may evaluate a flag each time a button is clicked. A `feature_flag.evaluation` event is emitted on each evaluation even if the result is the same.\n",
      "stability": "development",
      "attributes": [
        {
          "name": "feature_flag.provider_name",
          "type": "string",
          "brief": "Identifies the feature flag provider.",
          "examples": [
            "Flag Manager"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "feature_flag.context.id",
          "type": "string",
          "brief": "The unique identifier for the flag evaluation context. For example, the targeting key.\n",
          "examples": [
            "5157782b-2203-4c80-a857-dbbd5e7761db"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "feature_flag.version",
          "type": "string",
          "brief": "The version of the ruleset used during the evaluation. This may be any stable value which uniquely identifies the ruleset.\n",
          "examples": [
            "1",
            "01ABCDEF"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "feature_flag.set.id",
          "type": "string",
          "brief": "The identifier of the [flag set](https://openfeature.dev/specification/glossary/#flag-set) to which the feature flag belongs.\n",
          "examples": [
            "proj-1",
            "ab98sgs",
            "service1/dev"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "feature_flag.evaluation.reason",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "static",
                "value": "static",
                "brief": "The resolved value is static (no dynamic evaluation).",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "default",
                "value": "default",
                "brief": "The resolved value fell back to a pre-configured value (no dynamic evaluation occurred or dynamic evaluation yielded no result).",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "targeting_match",
                "value": "targeting_match",
                "brief": "The resolved value was the result of a dynamic evaluation, such as a rule or specific user-targeting.",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "split",
                "value": "split",
                "brief": "The resolved value was the result of pseudorandom assignment.",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "cached",
                "value": "cached",
                "brief": "The resolved value was retrieved from cache.",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "disabled",
                "value": "disabled",
                "brief": "The resolved value was the result of the flag being disabled in the management system.",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "unknown",
                "value": "unknown",
                "brief": "The reason for the resolved value could not be determined.",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "stale",
                "value": "stale",
                "brief": "The resolved value is non-authoritative or possibly out of date",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "error",
                "value": "error",
                "brief": "The resolved value was the result of an error.",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The reason code which shows how a feature flag value was determined.\n",
          "examples": [
            "static",
            "targeting_match",
            "error",
            "default"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "feature_flag.key",
          "type": "string",
          "brief": "The lookup key of the feature flag.",
          "examples": [
            "logo-color"
          ],
          "requirement_level": "required",
          "stability": "development"
        },
        {
          "name": "feature_flag.variant",
          "type": "string",
          "brief": "A semantic identifier for an evaluated flag value.\n",
          "examples": [
            "red",
            "true",
            "on"
          ],
          "requirement_level": {
            "conditionally_required": "If feature flag provider supplies a variant or equivalent concept."
          },
          "note": "A semantic identifier, commonly referred to as a variant, provides a means\nfor referring to a value without including the value itself. This can\nprovide additional context for understanding the meaning behind a value.\nFor example, the variant `red` maybe be used for the value `#c05543`.",
          "stability": "development"
        },
        {
          "name": "feature_flag.evaluation.error.message",
          "type": "string",
          "brief": "A message explaining the nature of an error occurring during flag evaluation.",
          "examples": [
            "Flag `header-color` expected type `string` but found type `number`"
          ],
          "requirement_level": {
            "recommended": "If and only if an error occurred. It's NOT RECOMMENDED to duplicate the value of `error.type` in `feature_flag.evaluation.error.message`."
          },
          "stability": "development"
        },
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "provider_not_ready",
            "targeting_key_missing",
            "provider_fatal",
            "general"
          ],
          "requirement_level": {
            "conditionally_required": "If and only if an error occurred during flag evaluation."
          },
          "note": "If one of these values applies, then it MUST be used; otherwise, a custom value MAY be used.\n\n| Value  | Description | Stability |\n|---|---|---|\n| `flag_not_found` | The flag could not be found. | ![Development](https://img.shields.io/badge/-development-blue) |\n| `invalid_context` | The evaluation context does not meet provider requirements. | ![Development](https://img.shields.io/badge/-development-blue) |\n| `parse_error` | An error was encountered parsing data, such as a flag configuration. | ![Development](https://img.shields.io/badge/-development-blue) |\n| `provider_fatal` | The provider has entered an irrecoverable error state. | ![Development](https://img.shields.io/badge/-development-blue) |\n| `provider_not_ready` | The value was resolved before the provider was initialized. | ![Development](https://img.shields.io/badge/-development-blue) |\n| `targeting_key_missing` | The provider requires a targeting key and one was not provided in the evaluation context. | ![Development](https://img.shields.io/badge/-development-blue) |\n| `type_mismatch` | The type of the flag value does not match the expected type. | ![Development](https://img.shields.io/badge/-development-blue) |\n| `general` | The error was for a reason not enumerated above. | ![Development](https://img.shields.io/badge/-development-blue) |\n",
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": "feature_flag.evaluation",
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/feature-flags/logs.yaml",
        "attributes": {
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "brief",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "note",
              "requirement_level"
            ]
          },
          "feature_flag.context.id": {
            "source_group": "registry.feature_flag",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "feature_flag.evaluation.error.message": {
            "source_group": "registry.feature_flag",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "feature_flag.evaluation.reason": {
            "source_group": "registry.feature_flag",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "feature_flag.key": {
            "source_group": "registry.feature_flag",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "feature_flag.provider_name": {
            "source_group": "registry.feature_flag",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "feature_flag.set.id": {
            "source_group": "registry.feature_flag",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "feature_flag.variant": {
            "source_group": "registry.feature_flag",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "feature_flag.version": {
            "source_group": "registry.feature_flag",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      },
      "body": {
        "type": "map",
        "id": "feature_flag.evaluation",
        "stability": "development",
        "requirement_level": "recommended",
        "fields": [
          {
            "type": "undefined",
            "id": "value",
            "brief": "The evaluated value of the feature flag.",
            "stability": "development",
            "examples": [
              "#ff0000",
              "1",
              "true"
            ],
            "requirement_level": {
              "conditionally_required": "If and only if feature flag provider does not supply variant or equivalent concept. Otherwise, `value` should be treated as opt-in.\n"
            }
          }
        ]
      }
    },
    {
      "id": "resource.faas",
      "type": "resource",
      "brief": "A serverless instance.\n",
      "stability": "development",
      "attributes": [
        {
          "name": "cloud.resource_id",
          "type": "string",
          "brief": "Cloud provider-specific native identifier of the monitored cloud resource (e.g. an [ARN](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) on AWS, a [fully qualified resource ID](https://learn.microsoft.com/rest/api/resources/resources/get-by-id) on Azure, a [full resource name](https://google.aip.dev/122#full-resource-names) on GCP)\n",
          "examples": [
            "arn:aws:lambda:REGION:ACCOUNT_ID:function:my-function",
            "//run.googleapis.com/projects/PROJECT_ID/locations/LOCATION_ID/services/SERVICE_ID",
            "/subscriptions/<SUBSCRIPTION_GUID>/resourceGroups/<RG>/providers/Microsoft.Web/sites/<FUNCAPP>/functions/<FUNC>"
          ],
          "requirement_level": "recommended",
          "note": "On some cloud providers, it may not be possible to determine the full ID at startup,\nso it may be necessary to set `cloud.resource_id` as a span attribute instead.\n\nThe exact value to use for `cloud.resource_id` depends on the cloud provider.\nThe following well-known definitions MUST be used if you set this attribute and they apply:\n\n- **AWS Lambda:** The function [ARN](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html).\n  Take care not to use the \"invoked ARN\" directly but replace any\n  [alias suffix](https://docs.aws.amazon.com/lambda/latest/dg/configuration-aliases.html)\n  with the resolved function version, as the same runtime instance may be invocable with\n  multiple different aliases.\n- **GCP:** The [URI of the resource](https://cloud.google.com/iam/docs/full-resource-names)\n- **Azure:** The [Fully Qualified Resource ID](https://docs.microsoft.com/rest/api/resources/resources/get-by-id) of the invoked function,\n  *not* the function app, having the form\n  `/subscriptions/<SUBSCRIPTION_GUID>/resourceGroups/<RG>/providers/Microsoft.Web/sites/<FUNCAPP>/functions/<FUNC>`.\n  This means that a span attribute MUST be used, as an Azure function app can host multiple functions that would usually share\n  a TracerProvider.\n",
          "stability": "development"
        },
        {
          "name": "faas.version",
          "type": "string",
          "brief": "The immutable version of the function being executed.",
          "examples": [
            "26",
            "pinkfroid-00002"
          ],
          "requirement_level": "recommended",
          "note": "Depending on the cloud provider and platform, use:\n\n- **AWS Lambda:** The [function version](https://docs.aws.amazon.com/lambda/latest/dg/configuration-versions.html)\n  (an integer represented as a decimal string).\n- **Google Cloud Run (Services):** The [revision](https://cloud.google.com/run/docs/managing/revisions)\n  (i.e., the function name plus the revision suffix).\n- **Google Cloud Functions:** The value of the\n  [`K_REVISION` environment variable](https://cloud.google.com/functions/docs/env-var#runtime_environment_variables_set_automatically).\n- **Azure Functions:** Not applicable. Do not set this attribute.\n",
          "stability": "development"
        },
        {
          "name": "faas.instance",
          "type": "string",
          "brief": "The execution environment ID as a string, that will be potentially reused for other invocations to the same function/function version.\n",
          "examples": [
            "2021/06/28/[$LATEST]2f399eb14537447da05ab2a2e39309de"
          ],
          "requirement_level": "recommended",
          "note": "- **AWS Lambda:** Use the (full) log stream name.\n",
          "stability": "development"
        },
        {
          "name": "faas.max_memory",
          "type": "int",
          "brief": "The amount of memory available to the serverless function converted to Bytes.\n",
          "examples": 134217728,
          "requirement_level": "recommended",
          "note": "It's recommended to set this attribute since e.g. too little memory can easily stop a Java AWS Lambda function from working correctly. On AWS Lambda, the environment variable `AWS_LAMBDA_FUNCTION_MEMORY_SIZE` provides this information (which must be multiplied by 1,048,576).\n",
          "stability": "development"
        },
        {
          "name": "faas.name",
          "type": "string",
          "brief": "The name of the single function that this runtime instance executes.\n",
          "examples": [
            "my-function",
            "myazurefunctionapp/some-function-name"
          ],
          "requirement_level": "required",
          "note": "This is the name of the function as configured/deployed on the FaaS\nplatform and is usually different from the name of the callback\nfunction (which may be stored in the\n[`code.namespace`/`code.function.name`](/docs/general/attributes.md#source-code-attributes)\nspan attributes).\n\nFor some cloud providers, the above definition is ambiguous. The following\ndefinition of function name MUST be used for this attribute\n(and consequently the span name) for the listed cloud providers/products:\n\n- **Azure:**  The full name `<FUNCAPP>/<FUNC>`, i.e., function app name\n  followed by a forward slash followed by the function name (this form\n  can also be seen in the resource JSON for the function).\n  This means that a span attribute MUST be used, as an Azure function\n  app can host multiple functions that would usually share\n  a TracerProvider (see also the `cloud.resource_id` attribute).\n",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": "faas",
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/faas/resources.yaml",
        "attributes": {
          "cloud.resource_id": {
            "source_group": "registry.cloud",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "faas.instance": {
            "source_group": "registry.faas",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "faas.max_memory": {
            "source_group": "registry.faas",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "faas.name": {
            "source_group": "registry.faas",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "faas.version": {
            "source_group": "registry.faas",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "registry.code",
      "type": "attribute_group",
      "brief": "These attributes provide context about source code\n",
      "attributes": [
        {
          "name": "code.function.name",
          "type": "string",
          "brief": "The method or function fully-qualified name without arguments. The value should fit the natural representation of the language runtime, which is also likely the same used within `code.stacktrace` attribute value.\n",
          "examples": [
            "com.example.MyHttpService.serveRequest",
            "GuzzleHttp\\Client::transfer",
            "fopen"
          ],
          "requirement_level": "recommended",
          "note": "Values and format depends on each language runtime, thus it is impossible to provide an exhaustive list of examples.\nThe values are usually the same (or prefixes of) the ones found in native stack trace representation stored in\n`code.stacktrace` without information on arguments.\n\nExamples:\n\n* Java method: `com.example.MyHttpService.serveRequest`\n* Java anonymous class method: `com.mycompany.Main$1.myMethod`\n* Java lambda method: `com.mycompany.Main$$Lambda/0x0000748ae4149c00.myMethod`\n* PHP function: `GuzzleHttp\\Client::transfer\n* Go function: `github.com/my/repo/pkg.foo.func5`\n* Elixir: `OpenTelemetry.Ctx.new`\n* Erlang: `opentelemetry_ctx:new`\n* Rust: `playground::my_module::my_cool_func`\n* C function: `fopen`\n",
          "stability": "release_candidate"
        },
        {
          "name": "code.file.path",
          "type": "string",
          "brief": "The source code file name that identifies the code unit as uniquely as possible (preferably an absolute file path).\n",
          "examples": "/usr/local/MyApplication/content_root/app/index.php",
          "requirement_level": "recommended",
          "stability": "release_candidate"
        },
        {
          "name": "code.line.number",
          "type": "int",
          "brief": "The line number in `code.file.path` best representing the operation. It SHOULD point within the code unit named in `code.function.name`.\n",
          "examples": 42,
          "requirement_level": "recommended",
          "stability": "release_candidate"
        },
        {
          "name": "code.column.number",
          "type": "int",
          "brief": "The column number in `code.file.path` best representing the operation. It SHOULD point within the code unit named in `code.function.name`.\n",
          "examples": 16,
          "requirement_level": "recommended",
          "stability": "release_candidate"
        },
        {
          "name": "code.stacktrace",
          "type": "string",
          "brief": "A stacktrace as a string in the natural representation for the language runtime. The representation is identical to [`exception.stacktrace`](/docs/exceptions/exceptions-spans.md#stacktrace-representation).\n",
          "examples": "at com.example.GenerateTrace.methodB(GenerateTrace.java:13)\\n at com.example.GenerateTrace.methodA(GenerateTrace.java:9)\\n at com.example.GenerateTrace.main(GenerateTrace.java:5)\n",
          "requirement_level": "recommended",
          "stability": "release_candidate"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/code/registry.yaml"
      },
      "display_name": "Code Attributes"
    },
    {
      "id": "server",
      "type": "attribute_group",
      "brief": "General server attributes.\n",
      "attributes": [
        {
          "name": "server.address",
          "type": "string",
          "brief": "Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "recommended",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": "recommended",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/server/common.yaml",
        "attributes": {
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "metric.otel.sdk.span.live.count",
      "type": "metric",
      "brief": "The number of created spans for which the end operation has not been called yet",
      "note": "For spans with `recording=true`: Implementations MUST record both `otel.sdk.span.live.count` and `otel.sdk.span.ended.count`.\nFor spans with `recording=false`: If implementations decide to record this metric, they MUST also record `otel.sdk.span.ended.count`.\n",
      "stability": "development",
      "attributes": [
        {
          "name": "otel.span.sampling_result",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "drop",
                "value": "DROP",
                "brief": "The span is not sampled and not recording",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "record_only",
                "value": "RECORD_ONLY",
                "brief": "The span is not sampled, but recording",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "record_and_sample",
                "value": "RECORD_AND_SAMPLE",
                "brief": "The span is sampled and recording",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The result value of the sampler for this span",
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "otel.sdk.span.live.count",
      "instrument": "updowncounter",
      "unit": "{span}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/otel/metrics.yaml",
        "attributes": {
          "otel.span.sampling_result": {
            "source_group": "registry.otel",
            "inherited_fields": [
              "brief",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "metric.otel.sdk.span.ended.count",
      "type": "metric",
      "brief": "The number of created spans for which the end operation was called",
      "note": "For spans with `recording=true`: Implementations MUST record both `otel.sdk.span.live.count` and `otel.sdk.span.ended.count`.\nFor spans with `recording=false`: If implementations decide to record this metric, they MUST also record `otel.sdk.span.live.count`.\n",
      "stability": "development",
      "attributes": [
        {
          "name": "otel.span.sampling_result",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "drop",
                "value": "DROP",
                "brief": "The span is not sampled and not recording",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "record_only",
                "value": "RECORD_ONLY",
                "brief": "The span is not sampled, but recording",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "record_and_sample",
                "value": "RECORD_AND_SAMPLE",
                "brief": "The span is sampled and recording",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The result value of the sampler for this span",
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "otel.sdk.span.ended.count",
      "instrument": "counter",
      "unit": "{span}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/otel/metrics.yaml",
        "attributes": {
          "otel.span.sampling_result": {
            "source_group": "registry.otel",
            "inherited_fields": [
              "brief",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "metric.otel.sdk.processor.span.queue.size",
      "type": "metric",
      "brief": "The number of spans in the queue of a given instance of an SDK span processor",
      "note": "Only applies to span processors which use a queue, e.g. the SDK Batching Span Processor.\n",
      "stability": "development",
      "attributes": [
        {
          "name": "otel.component.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "batching_span_processor",
                "value": "batching_span_processor",
                "brief": "The builtin SDK Batching Span Processor\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "simple_span_processor",
                "value": "simple_span_processor",
                "brief": "The builtin SDK Simple Span Processor\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "otlp_grpc_span_exporter",
                "value": "otlp_grpc_span_exporter",
                "brief": "OTLP span exporter over gRPC with protobuf serialization\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "otlp_http_span_exporter",
                "value": "otlp_http_span_exporter",
                "brief": "OTLP span exporter over HTTP with protobuf serialization\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "otlp_http_json_span_exporter",
                "value": "otlp_http_json_span_exporter",
                "brief": "OTLP span exporter over HTTP with JSON serialization\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "A name identifying the type of the OpenTelemetry component.\n",
          "examples": [
            "batching_span_processor",
            "com.example.MySpanExporter"
          ],
          "requirement_level": "recommended",
          "note": "If none of the standardized values apply, implementations SHOULD use the language-defined name of the type.\nE.g. for Java the fully qualified classname SHOULD be used in this case.\n",
          "stability": "development"
        },
        {
          "name": "otel.component.name",
          "type": "string",
          "brief": "A name uniquely identifying the instance of the OpenTelemetry component within its containing SDK instance.\n",
          "examples": [
            "otlp_grpc_span_exporter/0",
            "custom-name"
          ],
          "requirement_level": "recommended",
          "note": "Implementations SHOULD ensure a low cardinality for this attribute, even across application or SDK restarts.\nE.g. implementations MUST NOT use UUIDs as values for this attribute.\n\nImplementations MAY achieve these goals by following a `<otel.component.type>/<instance-counter>` pattern, e.g. `batching_span_processor/0`.\nHereby `otel.component.type` refers to the corresponding attribute value of the component.\n\nThe value of `instance-counter` MAY be automatically assigned by the component and uniqueness within the enclosing SDK instance MUST be guaranteed.\nFor example, `<instance-counter>` MAY be implemented by using a monotonically increasing counter (starting with `0`), which is incremented every time an\ninstance of the given component type is started.\n\nWith this implementation, for example the first Batching Span Processor would have `batching_span_processor/0`\nas `otel.component.name`, the second one `batching_span_processor/1` and so on.\nThese values will therefore be reused in the case of an application restart.\n",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "otel.sdk.processor.span.queue.size",
      "instrument": "updowncounter",
      "unit": "{span}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/otel/metrics.yaml",
        "attributes": {
          "otel.component.name": {
            "source_group": "registry.otel.component",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "otel.component.type": {
            "source_group": "registry.otel.component",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "metric.otel.sdk.processor.span.queue.capacity",
      "type": "metric",
      "brief": "The maximum number of spans the queue of a given instance of an SDK span processor can hold",
      "note": "Only applies to span processors which use a queue, e.g. the SDK Batching Span Processor.\n",
      "stability": "development",
      "attributes": [
        {
          "name": "otel.component.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "batching_span_processor",
                "value": "batching_span_processor",
                "brief": "The builtin SDK Batching Span Processor\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "simple_span_processor",
                "value": "simple_span_processor",
                "brief": "The builtin SDK Simple Span Processor\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "otlp_grpc_span_exporter",
                "value": "otlp_grpc_span_exporter",
                "brief": "OTLP span exporter over gRPC with protobuf serialization\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "otlp_http_span_exporter",
                "value": "otlp_http_span_exporter",
                "brief": "OTLP span exporter over HTTP with protobuf serialization\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "otlp_http_json_span_exporter",
                "value": "otlp_http_json_span_exporter",
                "brief": "OTLP span exporter over HTTP with JSON serialization\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "A name identifying the type of the OpenTelemetry component.\n",
          "examples": [
            "batching_span_processor",
            "com.example.MySpanExporter"
          ],
          "requirement_level": "recommended",
          "note": "If none of the standardized values apply, implementations SHOULD use the language-defined name of the type.\nE.g. for Java the fully qualified classname SHOULD be used in this case.\n",
          "stability": "development"
        },
        {
          "name": "otel.component.name",
          "type": "string",
          "brief": "A name uniquely identifying the instance of the OpenTelemetry component within its containing SDK instance.\n",
          "examples": [
            "otlp_grpc_span_exporter/0",
            "custom-name"
          ],
          "requirement_level": "recommended",
          "note": "Implementations SHOULD ensure a low cardinality for this attribute, even across application or SDK restarts.\nE.g. implementations MUST NOT use UUIDs as values for this attribute.\n\nImplementations MAY achieve these goals by following a `<otel.component.type>/<instance-counter>` pattern, e.g. `batching_span_processor/0`.\nHereby `otel.component.type` refers to the corresponding attribute value of the component.\n\nThe value of `instance-counter` MAY be automatically assigned by the component and uniqueness within the enclosing SDK instance MUST be guaranteed.\nFor example, `<instance-counter>` MAY be implemented by using a monotonically increasing counter (starting with `0`), which is incremented every time an\ninstance of the given component type is started.\n\nWith this implementation, for example the first Batching Span Processor would have `batching_span_processor/0`\nas `otel.component.name`, the second one `batching_span_processor/1` and so on.\nThese values will therefore be reused in the case of an application restart.\n",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "otel.sdk.processor.span.queue.capacity",
      "instrument": "updowncounter",
      "unit": "{span}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/otel/metrics.yaml",
        "attributes": {
          "otel.component.name": {
            "source_group": "registry.otel.component",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "otel.component.type": {
            "source_group": "registry.otel.component",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "metric.otel.sdk.processor.span.processed.count",
      "type": "metric",
      "brief": "The number of spans for which the processing has finished, either successful or failed",
      "note": "For successful processing, `error.type` MUST NOT be set. For failed processing, `error.type` must contain the failure cause.\nFor the SDK Simple and Batching Span Processor a span is considered to be processed already when it has been submitted to the exporter, not when the corresponding export call has finished.\n",
      "stability": "development",
      "attributes": [
        {
          "name": "otel.component.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "batching_span_processor",
                "value": "batching_span_processor",
                "brief": "The builtin SDK Batching Span Processor\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "simple_span_processor",
                "value": "simple_span_processor",
                "brief": "The builtin SDK Simple Span Processor\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "otlp_grpc_span_exporter",
                "value": "otlp_grpc_span_exporter",
                "brief": "OTLP span exporter over gRPC with protobuf serialization\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "otlp_http_span_exporter",
                "value": "otlp_http_span_exporter",
                "brief": "OTLP span exporter over HTTP with protobuf serialization\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "otlp_http_json_span_exporter",
                "value": "otlp_http_json_span_exporter",
                "brief": "OTLP span exporter over HTTP with JSON serialization\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "A name identifying the type of the OpenTelemetry component.\n",
          "examples": [
            "batching_span_processor",
            "com.example.MySpanExporter"
          ],
          "requirement_level": "recommended",
          "note": "If none of the standardized values apply, implementations SHOULD use the language-defined name of the type.\nE.g. for Java the fully qualified classname SHOULD be used in this case.\n",
          "stability": "development"
        },
        {
          "name": "otel.component.name",
          "type": "string",
          "brief": "A name uniquely identifying the instance of the OpenTelemetry component within its containing SDK instance.\n",
          "examples": [
            "otlp_grpc_span_exporter/0",
            "custom-name"
          ],
          "requirement_level": "recommended",
          "note": "Implementations SHOULD ensure a low cardinality for this attribute, even across application or SDK restarts.\nE.g. implementations MUST NOT use UUIDs as values for this attribute.\n\nImplementations MAY achieve these goals by following a `<otel.component.type>/<instance-counter>` pattern, e.g. `batching_span_processor/0`.\nHereby `otel.component.type` refers to the corresponding attribute value of the component.\n\nThe value of `instance-counter` MAY be automatically assigned by the component and uniqueness within the enclosing SDK instance MUST be guaranteed.\nFor example, `<instance-counter>` MAY be implemented by using a monotonically increasing counter (starting with `0`), which is incremented every time an\ninstance of the given component type is started.\n\nWith this implementation, for example the first Batching Span Processor would have `batching_span_processor/0`\nas `otel.component.name`, the second one `batching_span_processor/1` and so on.\nThese values will therefore be reused in the case of an application restart.\n",
          "stability": "development"
        },
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "A low-cardinality description of the failure reason. SDK Batching Span Processors MUST use `queue_full` for spans dropped due to a full queue.\n",
          "examples": [
            "queue_full"
          ],
          "requirement_level": "recommended",
          "note": "The `error.type` SHOULD be predictable, and SHOULD have low cardinality.\n\nWhen `error.type` is set to a type (e.g., an exception type), its\ncanonical class name identifying the type within the artifact SHOULD be used.\n\nInstrumentations SHOULD document the list of errors they report.\n\nThe cardinality of `error.type` within one instrumentation library SHOULD be low.\nTelemetry consumers that aggregate data from multiple instrumentation libraries and applications\nshould be prepared for `error.type` to have high cardinality at query time when no\nadditional filters are applied.\n\nIf the operation has completed successfully, instrumentations SHOULD NOT set `error.type`.\n\nIf a specific domain defines its own set of error identifiers (such as HTTP or gRPC status codes),\nit's RECOMMENDED to:\n\n- Use a domain-specific attribute\n- Set `error.type` to capture all errors, regardless of whether they are defined within the domain-specific set or not.\n",
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "otel.sdk.processor.span.processed.count",
      "instrument": "counter",
      "unit": "{span}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/otel/metrics.yaml",
        "attributes": {
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples"
            ]
          },
          "otel.component.name": {
            "source_group": "registry.otel.component",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "otel.component.type": {
            "source_group": "registry.otel.component",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "metric.otel.sdk.exporter.span.inflight.count",
      "type": "metric",
      "brief": "The number of spans which were passed to the exporter, but that have not been exported yet (neither successful, nor failed)",
      "note": "For successful exports, `error.type` MUST NOT be set. For failed exports, `error.type` must contain the failure cause.\n",
      "stability": "development",
      "attributes": [
        {
          "name": "otel.component.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "batching_span_processor",
                "value": "batching_span_processor",
                "brief": "The builtin SDK Batching Span Processor\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "simple_span_processor",
                "value": "simple_span_processor",
                "brief": "The builtin SDK Simple Span Processor\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "otlp_grpc_span_exporter",
                "value": "otlp_grpc_span_exporter",
                "brief": "OTLP span exporter over gRPC with protobuf serialization\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "otlp_http_span_exporter",
                "value": "otlp_http_span_exporter",
                "brief": "OTLP span exporter over HTTP with protobuf serialization\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "otlp_http_json_span_exporter",
                "value": "otlp_http_json_span_exporter",
                "brief": "OTLP span exporter over HTTP with JSON serialization\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "A name identifying the type of the OpenTelemetry component.\n",
          "examples": [
            "batching_span_processor",
            "com.example.MySpanExporter"
          ],
          "requirement_level": "recommended",
          "note": "If none of the standardized values apply, implementations SHOULD use the language-defined name of the type.\nE.g. for Java the fully qualified classname SHOULD be used in this case.\n",
          "stability": "development"
        },
        {
          "name": "otel.component.name",
          "type": "string",
          "brief": "A name uniquely identifying the instance of the OpenTelemetry component within its containing SDK instance.\n",
          "examples": [
            "otlp_grpc_span_exporter/0",
            "custom-name"
          ],
          "requirement_level": "recommended",
          "note": "Implementations SHOULD ensure a low cardinality for this attribute, even across application or SDK restarts.\nE.g. implementations MUST NOT use UUIDs as values for this attribute.\n\nImplementations MAY achieve these goals by following a `<otel.component.type>/<instance-counter>` pattern, e.g. `batching_span_processor/0`.\nHereby `otel.component.type` refers to the corresponding attribute value of the component.\n\nThe value of `instance-counter` MAY be automatically assigned by the component and uniqueness within the enclosing SDK instance MUST be guaranteed.\nFor example, `<instance-counter>` MAY be implemented by using a monotonically increasing counter (starting with `0`), which is incremented every time an\ninstance of the given component type is started.\n\nWith this implementation, for example the first Batching Span Processor would have `batching_span_processor/0`\nas `otel.component.name`, the second one `batching_span_processor/1` and so on.\nThese values will therefore be reused in the case of an application restart.\n",
          "stability": "development"
        },
        {
          "name": "server.address",
          "type": "string",
          "brief": "Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": {
            "recommended": "when applicable"
          },
          "note": "When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": {
            "recommended": "when applicable"
          },
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "otel.sdk.exporter.span.inflight.count",
      "instrument": "updowncounter",
      "unit": "{span}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/otel/metrics.yaml",
        "attributes": {
          "otel.component.name": {
            "source_group": "registry.otel.component",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "otel.component.type": {
            "source_group": "registry.otel.component",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.otel.sdk.exporter.span.exported.count",
      "type": "metric",
      "brief": "The number of spans for which the export has finished, either successful or failed",
      "note": "For successful exports, `error.type` MUST NOT be set. For failed exports, `error.type` must contain the failure cause.\nFor exporters with partial success semantics (e.g. OTLP with `rejected_spans`), rejected spans must count as failed and only non-rejected spans count as success.\nIf no rejection reason is available, `rejected` SHOULD be used as value for `error.type`.\n",
      "stability": "development",
      "attributes": [
        {
          "name": "otel.component.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "batching_span_processor",
                "value": "batching_span_processor",
                "brief": "The builtin SDK Batching Span Processor\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "simple_span_processor",
                "value": "simple_span_processor",
                "brief": "The builtin SDK Simple Span Processor\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "otlp_grpc_span_exporter",
                "value": "otlp_grpc_span_exporter",
                "brief": "OTLP span exporter over gRPC with protobuf serialization\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "otlp_http_span_exporter",
                "value": "otlp_http_span_exporter",
                "brief": "OTLP span exporter over HTTP with protobuf serialization\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "otlp_http_json_span_exporter",
                "value": "otlp_http_json_span_exporter",
                "brief": "OTLP span exporter over HTTP with JSON serialization\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "A name identifying the type of the OpenTelemetry component.\n",
          "examples": [
            "batching_span_processor",
            "com.example.MySpanExporter"
          ],
          "requirement_level": "recommended",
          "note": "If none of the standardized values apply, implementations SHOULD use the language-defined name of the type.\nE.g. for Java the fully qualified classname SHOULD be used in this case.\n",
          "stability": "development"
        },
        {
          "name": "otel.component.name",
          "type": "string",
          "brief": "A name uniquely identifying the instance of the OpenTelemetry component within its containing SDK instance.\n",
          "examples": [
            "otlp_grpc_span_exporter/0",
            "custom-name"
          ],
          "requirement_level": "recommended",
          "note": "Implementations SHOULD ensure a low cardinality for this attribute, even across application or SDK restarts.\nE.g. implementations MUST NOT use UUIDs as values for this attribute.\n\nImplementations MAY achieve these goals by following a `<otel.component.type>/<instance-counter>` pattern, e.g. `batching_span_processor/0`.\nHereby `otel.component.type` refers to the corresponding attribute value of the component.\n\nThe value of `instance-counter` MAY be automatically assigned by the component and uniqueness within the enclosing SDK instance MUST be guaranteed.\nFor example, `<instance-counter>` MAY be implemented by using a monotonically increasing counter (starting with `0`), which is incremented every time an\ninstance of the given component type is started.\n\nWith this implementation, for example the first Batching Span Processor would have `batching_span_processor/0`\nas `otel.component.name`, the second one `batching_span_processor/1` and so on.\nThese values will therefore be reused in the case of an application restart.\n",
          "stability": "development"
        },
        {
          "name": "server.address",
          "type": "string",
          "brief": "Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": {
            "recommended": "when applicable"
          },
          "note": "When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": {
            "recommended": "when applicable"
          },
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "rejected",
            "timeout",
            "500",
            "java.net.UnknownHostException"
          ],
          "requirement_level": "recommended",
          "note": "The `error.type` SHOULD be predictable, and SHOULD have low cardinality.\n\nWhen `error.type` is set to a type (e.g., an exception type), its\ncanonical class name identifying the type within the artifact SHOULD be used.\n\nInstrumentations SHOULD document the list of errors they report.\n\nThe cardinality of `error.type` within one instrumentation library SHOULD be low.\nTelemetry consumers that aggregate data from multiple instrumentation libraries and applications\nshould be prepared for `error.type` to have high cardinality at query time when no\nadditional filters are applied.\n\nIf the operation has completed successfully, instrumentations SHOULD NOT set `error.type`.\n\nIf a specific domain defines its own set of error identifiers (such as HTTP or gRPC status codes),\nit's RECOMMENDED to:\n\n- Use a domain-specific attribute\n- Set `error.type` to capture all errors, regardless of whether they are defined within the domain-specific set or not.\n",
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "otel.sdk.exporter.span.exported.count",
      "instrument": "counter",
      "unit": "{span}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/otel/metrics.yaml",
        "attributes": {
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "brief",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples"
            ]
          },
          "otel.component.name": {
            "source_group": "registry.otel.component",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "otel.component.type": {
            "source_group": "registry.otel.component",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.cicd.pipeline.run.duration",
      "type": "metric",
      "brief": "Duration of a pipeline run grouped by pipeline, state and result.",
      "stability": "development",
      "attributes": [
        {
          "name": "cicd.pipeline.name",
          "type": "string",
          "brief": "The human readable name of the pipeline within a CI/CD system.\n",
          "examples": [
            "Build and Test",
            "Lint",
            "Deploy Go Project",
            "deploy_to_environment"
          ],
          "requirement_level": "required",
          "stability": "development"
        },
        {
          "name": "cicd.pipeline.run.state",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "pending",
                "value": "pending",
                "brief": "The run pending state spans from the event triggering the pipeline run until the execution of the run starts (eg. time spent in a queue, provisioning agents, creating run resources).\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "executing",
                "value": "executing",
                "brief": "The executing state spans the execution of any run tasks (eg. build, test).",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "finalizing",
                "value": "finalizing",
                "brief": "The finalizing state spans from when the run has finished executing (eg. cleanup of run resources).",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The pipeline run goes through these states during its lifecycle.\n",
          "examples": [
            "pending",
            "executing",
            "finalizing"
          ],
          "requirement_level": "required",
          "stability": "development"
        },
        {
          "name": "cicd.pipeline.result",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "success",
                "value": "success",
                "brief": "The pipeline run finished successfully.",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "failure",
                "value": "failure",
                "brief": "The pipeline run did not finish successfully, eg. due to a compile error or a failing test. Such failures are usually detected by non-zero exit codes of the tools executed in the pipeline run.",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "error",
                "value": "error",
                "brief": "The pipeline run failed due to an error in the CICD system, eg. due to the worker being killed.",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "timeout",
                "value": "timeout",
                "brief": "A timeout caused the pipeline run to be interrupted.",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "cancellation",
                "value": "cancellation",
                "brief": "The pipeline run was cancelled, eg. by a user manually cancelling the pipeline run.",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "skip",
                "value": "skip",
                "brief": "The pipeline run was skipped, eg. due to a precondition not being met.",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The result of a pipeline run.\n",
          "examples": [
            "success",
            "failure",
            "timeout",
            "skipped"
          ],
          "requirement_level": {
            "conditionally_required": "If and only if the pipeline run result has been set during that state."
          },
          "stability": "development"
        },
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "timeout",
            "java.net.UnknownHostException",
            "server_certificate_invalid",
            "500"
          ],
          "requirement_level": {
            "conditionally_required": "If and only if the pipeline run failed."
          },
          "note": "The `error.type` SHOULD be predictable, and SHOULD have low cardinality.\n\nWhen `error.type` is set to a type (e.g., an exception type), its\ncanonical class name identifying the type within the artifact SHOULD be used.\n\nInstrumentations SHOULD document the list of errors they report.\n\nThe cardinality of `error.type` within one instrumentation library SHOULD be low.\nTelemetry consumers that aggregate data from multiple instrumentation libraries and applications\nshould be prepared for `error.type` to have high cardinality at query time when no\nadditional filters are applied.\n\nIf the operation has completed successfully, instrumentations SHOULD NOT set `error.type`.\n\nIf a specific domain defines its own set of error identifiers (such as HTTP or gRPC status codes),\nit's RECOMMENDED to:\n\n- Use a domain-specific attribute\n- Set `error.type` to capture all errors, regardless of whether they are defined within the domain-specific set or not.\n",
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "cicd.pipeline.run.duration",
      "instrument": "histogram",
      "unit": "s",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/cicd/metrics.yaml",
        "attributes": {
          "cicd.pipeline.name": {
            "source_group": "registry.cicd.pipeline",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "cicd.pipeline.result": {
            "source_group": "registry.cicd.pipeline",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "cicd.pipeline.run.state": {
            "source_group": "registry.cicd.pipeline",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.cicd.pipeline.run.active",
      "type": "metric",
      "brief": "The number of pipeline runs currently active in the system by state.",
      "stability": "development",
      "attributes": [
        {
          "name": "cicd.pipeline.name",
          "type": "string",
          "brief": "The human readable name of the pipeline within a CI/CD system.\n",
          "examples": [
            "Build and Test",
            "Lint",
            "Deploy Go Project",
            "deploy_to_environment"
          ],
          "requirement_level": "required",
          "stability": "development"
        },
        {
          "name": "cicd.pipeline.run.state",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "pending",
                "value": "pending",
                "brief": "The run pending state spans from the event triggering the pipeline run until the execution of the run starts (eg. time spent in a queue, provisioning agents, creating run resources).\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "executing",
                "value": "executing",
                "brief": "The executing state spans the execution of any run tasks (eg. build, test).",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "finalizing",
                "value": "finalizing",
                "brief": "The finalizing state spans from when the run has finished executing (eg. cleanup of run resources).",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The pipeline run goes through these states during its lifecycle.\n",
          "examples": [
            "pending",
            "executing",
            "finalizing"
          ],
          "requirement_level": "required",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "cicd.pipeline.run.active",
      "instrument": "updowncounter",
      "unit": "{run}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/cicd/metrics.yaml",
        "attributes": {
          "cicd.pipeline.name": {
            "source_group": "registry.cicd.pipeline",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "cicd.pipeline.run.state": {
            "source_group": "registry.cicd.pipeline",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.cicd.worker.count",
      "type": "metric",
      "brief": "The number of workers on the CICD system by state.",
      "stability": "development",
      "attributes": [
        {
          "name": "cicd.worker.state",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "available",
                "value": "available",
                "brief": "The worker is not performing work for the CICD system. It is available to the CICD system to perform work on (online / idle).",
                "note": "Pipelines might have conditions on which workers they are able to run so not every worker might be available to every pipeline.",
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "busy",
                "value": "busy",
                "brief": "The worker is performing work for the CICD system.",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "offline",
                "value": "offline",
                "brief": "The worker is not available to the CICD system (disconnected / down).",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The state of a CICD worker / agent.\n",
          "examples": [
            "idle",
            "busy",
            "down"
          ],
          "requirement_level": "required",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "cicd.worker.count",
      "instrument": "updowncounter",
      "unit": "{count}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/cicd/metrics.yaml",
        "attributes": {
          "cicd.worker.state": {
            "source_group": "registry.cicd.pipeline",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.cicd.pipeline.run.errors",
      "type": "metric",
      "brief": "The number of errors encountered in pipeline runs (eg. compile, test failures).",
      "note": "There might be errors in a pipeline run that are non fatal (eg. they are suppressed) or in a parallel stage multiple stages could have a fatal error.\nThis means that this error count might not be the same as the count of metric `cicd.pipeline.run.duration` with run result `failure`.\n",
      "stability": "development",
      "attributes": [
        {
          "name": "cicd.pipeline.name",
          "type": "string",
          "brief": "The human readable name of the pipeline within a CI/CD system.\n",
          "examples": [
            "Build and Test",
            "Lint",
            "Deploy Go Project",
            "deploy_to_environment"
          ],
          "requirement_level": "required",
          "stability": "development"
        },
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "timeout",
            "java.net.UnknownHostException",
            "server_certificate_invalid",
            "500"
          ],
          "requirement_level": "required",
          "note": "The `error.type` SHOULD be predictable, and SHOULD have low cardinality.\n\nWhen `error.type` is set to a type (e.g., an exception type), its\ncanonical class name identifying the type within the artifact SHOULD be used.\n\nInstrumentations SHOULD document the list of errors they report.\n\nThe cardinality of `error.type` within one instrumentation library SHOULD be low.\nTelemetry consumers that aggregate data from multiple instrumentation libraries and applications\nshould be prepared for `error.type` to have high cardinality at query time when no\nadditional filters are applied.\n\nIf the operation has completed successfully, instrumentations SHOULD NOT set `error.type`.\n\nIf a specific domain defines its own set of error identifiers (such as HTTP or gRPC status codes),\nit's RECOMMENDED to:\n\n- Use a domain-specific attribute\n- Set `error.type` to capture all errors, regardless of whether they are defined within the domain-specific set or not.\n",
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "cicd.pipeline.run.errors",
      "instrument": "counter",
      "unit": "{error}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/cicd/metrics.yaml",
        "attributes": {
          "cicd.pipeline.name": {
            "source_group": "registry.cicd.pipeline",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.cicd.system.errors",
      "type": "metric",
      "brief": "The number of errors in a component of the CICD system (eg. controller, scheduler, agent).",
      "note": "Errors in pipeline run execution are explicitly excluded. Ie a test failure is not counted in this metric.",
      "stability": "development",
      "attributes": [
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "timeout",
            "java.net.UnknownHostException",
            "server_certificate_invalid",
            "500"
          ],
          "requirement_level": "required",
          "note": "The `error.type` SHOULD be predictable, and SHOULD have low cardinality.\n\nWhen `error.type` is set to a type (e.g., an exception type), its\ncanonical class name identifying the type within the artifact SHOULD be used.\n\nInstrumentations SHOULD document the list of errors they report.\n\nThe cardinality of `error.type` within one instrumentation library SHOULD be low.\nTelemetry consumers that aggregate data from multiple instrumentation libraries and applications\nshould be prepared for `error.type` to have high cardinality at query time when no\nadditional filters are applied.\n\nIf the operation has completed successfully, instrumentations SHOULD NOT set `error.type`.\n\nIf a specific domain defines its own set of error identifiers (such as HTTP or gRPC status codes),\nit's RECOMMENDED to:\n\n- Use a domain-specific attribute\n- Set `error.type` to capture all errors, regardless of whether they are defined within the domain-specific set or not.\n",
          "stability": "stable"
        },
        {
          "name": "cicd.system.component",
          "type": "string",
          "brief": "The name of a component of the CICD system.",
          "examples": [
            "controller",
            "scheduler",
            "agent"
          ],
          "requirement_level": "required",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "cicd.system.errors",
      "instrument": "counter",
      "unit": "{error}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/cicd/metrics.yaml",
        "attributes": {
          "cicd.system.component": {
            "source_group": "registry.cicd.pipeline",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "registry.system.deprecated",
      "type": "attribute_group",
      "brief": "Deprecated system attributes.",
      "attributes": [
        {
          "name": "system.processes.status",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "running",
                "value": "running",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "sleeping",
                "value": "sleeping",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "stopped",
                "value": "stopped",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "defunct",
                "value": "defunct",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "Deprecated, use `system.process.status` instead.",
          "examples": [
            "running"
          ],
          "requirement_level": "recommended",
          "stability": "development",
          "deprecated": {
            "reason": "uncategorized",
            "note": "Replaced by `system.process.status`."
          }
        },
        {
          "name": "system.cpu.state",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "user",
                "value": "user",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "system",
                "value": "system",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "nice",
                "value": "nice",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "idle",
                "value": "idle",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "iowait",
                "value": "iowait",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "interrupt",
                "value": "interrupt",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "steal",
                "value": "steal",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "Deprecated, use `cpu.mode` instead.",
          "examples": [
            "idle",
            "interrupt"
          ],
          "requirement_level": "recommended",
          "stability": "development",
          "deprecated": {
            "reason": "uncategorized",
            "note": "Replaced by `cpu.mode`"
          }
        },
        {
          "name": "system.network.state",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "close",
                "value": "close",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "close_wait",
                "value": "close_wait",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "closing",
                "value": "closing",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "delete",
                "value": "delete",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "established",
                "value": "established",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "fin_wait_1",
                "value": "fin_wait_1",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "fin_wait_2",
                "value": "fin_wait_2",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "last_ack",
                "value": "last_ack",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "listen",
                "value": "listen",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "syn_recv",
                "value": "syn_recv",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "syn_sent",
                "value": "syn_sent",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "time_wait",
                "value": "time_wait",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "Deprecated, use `network.connection.state` instead.",
          "examples": [
            "close_wait"
          ],
          "requirement_level": "recommended",
          "stability": "development",
          "deprecated": {
            "reason": "uncategorized",
            "note": "Removed, report network connection state with `network.connection.state` attribute"
          }
        },
        {
          "name": "system.cpu.logical_number",
          "type": "int",
          "brief": "Deprecated, use `cpu.logical_number` instead.",
          "examples": [
            1
          ],
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/system/deprecated/registry-deprecated.yaml"
      },
      "display_name": "Deprecated System Attributes"
    },
    {
      "id": "attributes.http.common",
      "type": "attribute_group",
      "brief": "Describes HTTP attributes.",
      "attributes": [
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "timeout",
            "java.net.UnknownHostException",
            "server_certificate_invalid",
            "500"
          ],
          "requirement_level": {
            "conditionally_required": "If request has ended with an error."
          },
          "note": "If the request fails with an error before response status code was sent or received,\n`error.type` SHOULD be set to exception type (its fully-qualified class name, if applicable)\nor a component-specific low cardinality error identifier.\n\nIf response status code was sent or received and status indicates an error according to [HTTP span status definition](/docs/http/http-spans.md),\n`error.type` SHOULD be set to the status code number (represented as a string), an exception type (if thrown) or a component-specific error identifier.\n\nThe `error.type` value SHOULD be predictable and SHOULD have low cardinality.\nInstrumentations SHOULD document the list of errors they report.\n\nThe cardinality of `error.type` within one instrumentation library SHOULD be low, but\ntelemetry consumers that aggregate data from multiple instrumentation libraries and applications\nshould be prepared for `error.type` to have high cardinality at query time, when no\nadditional filters are applied.\n\nIf the request has completed successfully, instrumentations SHOULD NOT set `error.type`.\n",
          "stability": "stable"
        },
        {
          "name": "http.request.method",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "connect",
                "value": "CONNECT",
                "brief": "CONNECT method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "delete",
                "value": "DELETE",
                "brief": "DELETE method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "get",
                "value": "GET",
                "brief": "GET method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "head",
                "value": "HEAD",
                "brief": "HEAD method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "options",
                "value": "OPTIONS",
                "brief": "OPTIONS method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "patch",
                "value": "PATCH",
                "brief": "PATCH method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "post",
                "value": "POST",
                "brief": "POST method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "put",
                "value": "PUT",
                "brief": "PUT method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "trace",
                "value": "TRACE",
                "brief": "TRACE method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "Any HTTP method that the instrumentation has no prior knowledge of.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "HTTP request method.",
          "examples": [
            "GET",
            "POST",
            "HEAD"
          ],
          "requirement_level": "required",
          "note": "HTTP request method value SHOULD be \"known\" to the instrumentation.\nBy default, this convention defines \"known\" methods as the ones listed in [RFC9110](https://www.rfc-editor.org/rfc/rfc9110.html#name-methods)\nand the PATCH method defined in [RFC5789](https://www.rfc-editor.org/rfc/rfc5789.html).\n\nIf the HTTP request method is not known to instrumentation, it MUST set the `http.request.method` attribute to `_OTHER`.\n\nIf the HTTP instrumentation could end up converting valid HTTP request methods to `_OTHER`, then it MUST provide a way to override\nthe list of known HTTP methods. If this override is done via environment variable, then the environment variable MUST be named\nOTEL_INSTRUMENTATION_HTTP_KNOWN_METHODS and support a comma-separated list of case-sensitive known HTTP methods\n(this list MUST be a full override of the default known method, it is not a list of known methods in addition to the defaults).\n\nHTTP method names are case-sensitive and `http.request.method` attribute value MUST match a known HTTP method name exactly.\nInstrumentations for specific web frameworks that consider HTTP methods to be case insensitive, SHOULD populate a canonical equivalent.\nTracing instrumentations that do so, MUST also set `http.request.method_original` to the original value.\n",
          "stability": "stable"
        },
        {
          "name": "http.response.status_code",
          "type": "int",
          "brief": "[HTTP response status code](https://tools.ietf.org/html/rfc7231#section-6).",
          "examples": [
            200
          ],
          "requirement_level": {
            "conditionally_required": "If and only if one was received/sent."
          },
          "stability": "stable"
        },
        {
          "name": "network.protocol.name",
          "type": "string",
          "brief": "[OSI application layer](https://wikipedia.org/wiki/Application_layer) or non-OSI equivalent.",
          "examples": [
            "http",
            "spdy"
          ],
          "requirement_level": {
            "conditionally_required": "If not `http` and `network.protocol.version` is set."
          },
          "note": "The value SHOULD be normalized to lowercase.",
          "stability": "stable"
        },
        {
          "name": "network.protocol.version",
          "type": "string",
          "brief": "The actual version of the protocol used for network communication.",
          "examples": [
            "1.0",
            "1.1",
            "2",
            "3"
          ],
          "requirement_level": "recommended",
          "note": "If protocol version is subject to negotiation (for example using [ALPN](https://www.rfc-editor.org/rfc/rfc7301.html)), this attribute SHOULD be set to the negotiated version. If the actual protocol version is not known, this attribute SHOULD NOT be set.\n",
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/http/common.yaml",
        "attributes": {
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "brief",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "note",
              "requirement_level"
            ]
          },
          "http.request.method": {
            "source_group": "registry.http",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "http.response.status_code": {
            "source_group": "registry.http",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "network.protocol.name": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ]
          },
          "network.protocol.version": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples"
            ]
          }
        }
      }
    },
    {
      "id": "attributes.http.client",
      "type": "attribute_group",
      "brief": "HTTP Client attributes",
      "attributes": [
        {
          "name": "server.address",
          "type": "string",
          "brief": "Host identifier of the [\"URI origin\"](https://www.rfc-editor.org/rfc/rfc9110.html#name-uri-origin) HTTP request is sent to.\n",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "required",
          "note": "If an HTTP client request is explicitly made to an IP address, e.g. `http://x.x.x.x:8080`, then `server.address` SHOULD be the IP address `x.x.x.x`. A DNS lookup SHOULD NOT be used.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "Port identifier of the [\"URI origin\"](https://www.rfc-editor.org/rfc/rfc9110.html#name-uri-origin) HTTP request is sent to.\n",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": "required",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "timeout",
            "java.net.UnknownHostException",
            "server_certificate_invalid",
            "500"
          ],
          "requirement_level": {
            "conditionally_required": "If request has ended with an error."
          },
          "note": "If the request fails with an error before response status code was sent or received,\n`error.type` SHOULD be set to exception type (its fully-qualified class name, if applicable)\nor a component-specific low cardinality error identifier.\n\nIf response status code was sent or received and status indicates an error according to [HTTP span status definition](/docs/http/http-spans.md),\n`error.type` SHOULD be set to the status code number (represented as a string), an exception type (if thrown) or a component-specific error identifier.\n\nThe `error.type` value SHOULD be predictable and SHOULD have low cardinality.\nInstrumentations SHOULD document the list of errors they report.\n\nThe cardinality of `error.type` within one instrumentation library SHOULD be low, but\ntelemetry consumers that aggregate data from multiple instrumentation libraries and applications\nshould be prepared for `error.type` to have high cardinality at query time, when no\nadditional filters are applied.\n\nIf the request has completed successfully, instrumentations SHOULD NOT set `error.type`.\n",
          "stability": "stable"
        },
        {
          "name": "http.request.method",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "connect",
                "value": "CONNECT",
                "brief": "CONNECT method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "delete",
                "value": "DELETE",
                "brief": "DELETE method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "get",
                "value": "GET",
                "brief": "GET method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "head",
                "value": "HEAD",
                "brief": "HEAD method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "options",
                "value": "OPTIONS",
                "brief": "OPTIONS method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "patch",
                "value": "PATCH",
                "brief": "PATCH method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "post",
                "value": "POST",
                "brief": "POST method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "put",
                "value": "PUT",
                "brief": "PUT method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "trace",
                "value": "TRACE",
                "brief": "TRACE method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "Any HTTP method that the instrumentation has no prior knowledge of.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "HTTP request method.",
          "examples": [
            "GET",
            "POST",
            "HEAD"
          ],
          "requirement_level": "required",
          "note": "HTTP request method value SHOULD be \"known\" to the instrumentation.\nBy default, this convention defines \"known\" methods as the ones listed in [RFC9110](https://www.rfc-editor.org/rfc/rfc9110.html#name-methods)\nand the PATCH method defined in [RFC5789](https://www.rfc-editor.org/rfc/rfc5789.html).\n\nIf the HTTP request method is not known to instrumentation, it MUST set the `http.request.method` attribute to `_OTHER`.\n\nIf the HTTP instrumentation could end up converting valid HTTP request methods to `_OTHER`, then it MUST provide a way to override\nthe list of known HTTP methods. If this override is done via environment variable, then the environment variable MUST be named\nOTEL_INSTRUMENTATION_HTTP_KNOWN_METHODS and support a comma-separated list of case-sensitive known HTTP methods\n(this list MUST be a full override of the default known method, it is not a list of known methods in addition to the defaults).\n\nHTTP method names are case-sensitive and `http.request.method` attribute value MUST match a known HTTP method name exactly.\nInstrumentations for specific web frameworks that consider HTTP methods to be case insensitive, SHOULD populate a canonical equivalent.\nTracing instrumentations that do so, MUST also set `http.request.method_original` to the original value.\n",
          "stability": "stable"
        },
        {
          "name": "http.response.status_code",
          "type": "int",
          "brief": "[HTTP response status code](https://tools.ietf.org/html/rfc7231#section-6).",
          "examples": [
            200
          ],
          "requirement_level": {
            "conditionally_required": "If and only if one was received/sent."
          },
          "stability": "stable"
        },
        {
          "name": "network.protocol.name",
          "type": "string",
          "brief": "[OSI application layer](https://wikipedia.org/wiki/Application_layer) or non-OSI equivalent.",
          "examples": [
            "http",
            "spdy"
          ],
          "requirement_level": {
            "conditionally_required": "If not `http` and `network.protocol.version` is set."
          },
          "note": "The value SHOULD be normalized to lowercase.",
          "stability": "stable"
        },
        {
          "name": "network.protocol.version",
          "type": "string",
          "brief": "The actual version of the protocol used for network communication.",
          "examples": [
            "1.0",
            "1.1",
            "2",
            "3"
          ],
          "requirement_level": "recommended",
          "note": "If protocol version is subject to negotiation (for example using [ALPN](https://www.rfc-editor.org/rfc/rfc7301.html)), this attribute SHOULD be set to the negotiated version. If the actual protocol version is not known, this attribute SHOULD NOT be set.\n",
          "stability": "stable"
        },
        {
          "name": "url.scheme",
          "type": "string",
          "brief": "The [URI scheme](https://www.rfc-editor.org/rfc/rfc3986#section-3.1) component identifying the used protocol.\n",
          "examples": [
            "http",
            "https"
          ],
          "requirement_level": "opt_in",
          "stability": "stable"
        },
        {
          "name": "url.template",
          "type": "string",
          "brief": "The low-cardinality template of an [absolute path reference](https://www.rfc-editor.org/rfc/rfc3986#section-4.2).\n",
          "examples": [
            "/users/{id}",
            "/users/:id",
            "/users?id={id}"
          ],
          "requirement_level": "opt_in",
          "note": "The `url.template` MUST have low cardinality. It is not usually available on HTTP clients, but may be known by the application or specialized HTTP instrumentation.\n",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/http/common.yaml",
        "attributes": {
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "brief",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "note",
              "requirement_level"
            ]
          },
          "http.request.method": {
            "source_group": "registry.http",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "http.response.status_code": {
            "source_group": "registry.http",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "network.protocol.name": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ]
          },
          "network.protocol.version": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "note",
              "requirement_level"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "requirement_level"
            ]
          },
          "url.scheme": {
            "source_group": "registry.url",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ]
          },
          "url.template": {
            "source_group": "registry.url",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "attributes.http.server",
      "type": "attribute_group",
      "brief": "HTTP Server attributes",
      "attributes": [
        {
          "name": "server.address",
          "type": "string",
          "brief": "Name of the local HTTP server that received the request.\n",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "recommended",
          "note": "See [Setting `server.address` and `server.port` attributes](/docs/http/http-spans.md#setting-serveraddress-and-serverport-attributes).\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "Port of the local HTTP server that received the request.\n",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": {
            "conditionally_required": "If available and `server.address` is set."
          },
          "note": "See [Setting `server.address` and `server.port` attributes](/docs/http/http-spans.md#setting-serveraddress-and-serverport-attributes).\n",
          "stability": "stable"
        },
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "timeout",
            "java.net.UnknownHostException",
            "server_certificate_invalid",
            "500"
          ],
          "requirement_level": {
            "conditionally_required": "If request has ended with an error."
          },
          "note": "If the request fails with an error before response status code was sent or received,\n`error.type` SHOULD be set to exception type (its fully-qualified class name, if applicable)\nor a component-specific low cardinality error identifier.\n\nIf response status code was sent or received and status indicates an error according to [HTTP span status definition](/docs/http/http-spans.md),\n`error.type` SHOULD be set to the status code number (represented as a string), an exception type (if thrown) or a component-specific error identifier.\n\nThe `error.type` value SHOULD be predictable and SHOULD have low cardinality.\nInstrumentations SHOULD document the list of errors they report.\n\nThe cardinality of `error.type` within one instrumentation library SHOULD be low, but\ntelemetry consumers that aggregate data from multiple instrumentation libraries and applications\nshould be prepared for `error.type` to have high cardinality at query time, when no\nadditional filters are applied.\n\nIf the request has completed successfully, instrumentations SHOULD NOT set `error.type`.\n",
          "stability": "stable"
        },
        {
          "name": "http.request.method",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "connect",
                "value": "CONNECT",
                "brief": "CONNECT method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "delete",
                "value": "DELETE",
                "brief": "DELETE method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "get",
                "value": "GET",
                "brief": "GET method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "head",
                "value": "HEAD",
                "brief": "HEAD method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "options",
                "value": "OPTIONS",
                "brief": "OPTIONS method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "patch",
                "value": "PATCH",
                "brief": "PATCH method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "post",
                "value": "POST",
                "brief": "POST method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "put",
                "value": "PUT",
                "brief": "PUT method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "trace",
                "value": "TRACE",
                "brief": "TRACE method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "Any HTTP method that the instrumentation has no prior knowledge of.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "HTTP request method.",
          "examples": [
            "GET",
            "POST",
            "HEAD"
          ],
          "requirement_level": "required",
          "note": "HTTP request method value SHOULD be \"known\" to the instrumentation.\nBy default, this convention defines \"known\" methods as the ones listed in [RFC9110](https://www.rfc-editor.org/rfc/rfc9110.html#name-methods)\nand the PATCH method defined in [RFC5789](https://www.rfc-editor.org/rfc/rfc5789.html).\n\nIf the HTTP request method is not known to instrumentation, it MUST set the `http.request.method` attribute to `_OTHER`.\n\nIf the HTTP instrumentation could end up converting valid HTTP request methods to `_OTHER`, then it MUST provide a way to override\nthe list of known HTTP methods. If this override is done via environment variable, then the environment variable MUST be named\nOTEL_INSTRUMENTATION_HTTP_KNOWN_METHODS and support a comma-separated list of case-sensitive known HTTP methods\n(this list MUST be a full override of the default known method, it is not a list of known methods in addition to the defaults).\n\nHTTP method names are case-sensitive and `http.request.method` attribute value MUST match a known HTTP method name exactly.\nInstrumentations for specific web frameworks that consider HTTP methods to be case insensitive, SHOULD populate a canonical equivalent.\nTracing instrumentations that do so, MUST also set `http.request.method_original` to the original value.\n",
          "stability": "stable"
        },
        {
          "name": "http.response.status_code",
          "type": "int",
          "brief": "[HTTP response status code](https://tools.ietf.org/html/rfc7231#section-6).",
          "examples": [
            200
          ],
          "requirement_level": {
            "conditionally_required": "If and only if one was received/sent."
          },
          "stability": "stable"
        },
        {
          "name": "http.route",
          "type": "string",
          "brief": "The matched route, that is, the path template in the format used by the respective server framework.\n",
          "examples": [
            "/users/:userID?",
            "{controller}/{action}/{id?}"
          ],
          "requirement_level": {
            "conditionally_required": "If and only if it's available"
          },
          "note": "MUST NOT be populated when this is not supported by the HTTP server framework as the route attribute should have low-cardinality and the URI path can NOT substitute it.\nSHOULD include the [application root](/docs/http/http-spans.md#http-server-definitions) if there is one.\n",
          "stability": "stable"
        },
        {
          "name": "network.protocol.name",
          "type": "string",
          "brief": "[OSI application layer](https://wikipedia.org/wiki/Application_layer) or non-OSI equivalent.",
          "examples": [
            "http",
            "spdy"
          ],
          "requirement_level": {
            "conditionally_required": "If not `http` and `network.protocol.version` is set."
          },
          "note": "The value SHOULD be normalized to lowercase.",
          "stability": "stable"
        },
        {
          "name": "network.protocol.version",
          "type": "string",
          "brief": "The actual version of the protocol used for network communication.",
          "examples": [
            "1.0",
            "1.1",
            "2",
            "3"
          ],
          "requirement_level": "recommended",
          "note": "If protocol version is subject to negotiation (for example using [ALPN](https://www.rfc-editor.org/rfc/rfc7301.html)), this attribute SHOULD be set to the negotiated version. If the actual protocol version is not known, this attribute SHOULD NOT be set.\n",
          "stability": "stable"
        },
        {
          "name": "url.scheme",
          "type": "string",
          "brief": "The [URI scheme](https://www.rfc-editor.org/rfc/rfc3986#section-3.1) component identifying the used protocol.\n",
          "examples": [
            "http",
            "https"
          ],
          "requirement_level": "required",
          "note": "The scheme of the original client request, if known (e.g. from [Forwarded#proto](https://developer.mozilla.org/docs/Web/HTTP/Headers/Forwarded#proto), [X-Forwarded-Proto](https://developer.mozilla.org/docs/Web/HTTP/Headers/X-Forwarded-Proto), or a similar header). Otherwise, the scheme of the immediate peer request.\n",
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/http/common.yaml",
        "attributes": {
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "brief",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "note",
              "requirement_level"
            ]
          },
          "http.request.method": {
            "source_group": "registry.http",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "http.response.status_code": {
            "source_group": "registry.http",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "http.route": {
            "source_group": "registry.http",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "network.protocol.name": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ]
          },
          "network.protocol.version": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "note"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "note",
              "requirement_level"
            ]
          },
          "url.scheme": {
            "source_group": "registry.url",
            "inherited_fields": [
              "brief",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "note",
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "registry.graphql",
      "type": "attribute_group",
      "brief": "This document defines attributes for GraphQL.",
      "attributes": [
        {
          "name": "graphql.operation.name",
          "type": "string",
          "brief": "The name of the operation being executed.",
          "examples": "findBookById",
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "graphql.operation.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "query",
                "value": "query",
                "brief": "GraphQL query",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "mutation",
                "value": "mutation",
                "brief": "GraphQL mutation",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "subscription",
                "value": "subscription",
                "brief": "GraphQL subscription",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The type of the operation being executed.",
          "examples": [
            "query",
            "mutation",
            "subscription"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "graphql.document",
          "type": "string",
          "brief": "The GraphQL document being executed.",
          "examples": "query findBookById { bookById(id: ?) { name } }",
          "requirement_level": "recommended",
          "note": "The value may be sanitized to exclude sensitive information.",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/graphql/registry.yaml"
      },
      "display_name": "GraphQL Attributes"
    },
    {
      "id": "resource.deployment",
      "type": "resource",
      "brief": "The software deployment.\n",
      "stability": "development",
      "attributes": [
        {
          "name": "deployment.environment.name",
          "type": "string",
          "brief": "Name of the [deployment environment](https://wikipedia.org/wiki/Deployment_environment) (aka deployment tier).\n",
          "examples": [
            "staging",
            "production"
          ],
          "requirement_level": "recommended",
          "note": "`deployment.environment.name` does not affect the uniqueness constraints defined through\nthe `service.namespace`, `service.name` and `service.instance.id` resource attributes.\nThis implies that resources carrying the following attribute combinations MUST be\nconsidered to be identifying the same service:\n\n- `service.name=frontend`, `deployment.environment.name=production`\n- `service.name=frontend`, `deployment.environment.name=staging`.\n",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": "deployment",
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/deployment/resources.yaml",
        "attributes": {
          "deployment.environment.name": {
            "source_group": "registry.deployment",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "registry.log",
      "type": "attribute_group",
      "brief": "This document defines log attributes\n",
      "attributes": [
        {
          "name": "log.iostream",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "stdout",
                "value": "stdout",
                "brief": "Logs from stdout stream",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "stderr",
                "value": "stderr",
                "brief": "Events from stderr stream",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The stream associated with the log. See below for a list of well-known values.\n",
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/log/registry.yaml"
      },
      "display_name": "General Log Attributes"
    },
    {
      "id": "registry.log.file",
      "type": "attribute_group",
      "brief": "Attributes for a file to which log was emitted.\n",
      "attributes": [
        {
          "name": "log.file.name",
          "type": "string",
          "brief": "The basename of the file.\n",
          "examples": [
            "audit.log"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "log.file.path",
          "type": "string",
          "brief": "The full path to the file.\n",
          "examples": [
            "/var/log/mysql/audit.log"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "log.file.name_resolved",
          "type": "string",
          "brief": "The basename of the file, with symlinks resolved.\n",
          "examples": [
            "uuid.log"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "log.file.path_resolved",
          "type": "string",
          "brief": "The full path to the file, with symlinks resolved.\n",
          "examples": [
            "/var/lib/docker/uuid.log"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/log/registry.yaml"
      },
      "display_name": "Log File Attributes"
    },
    {
      "id": "registry.log.record",
      "type": "attribute_group",
      "brief": "This document defines the generic attributes that may be used in any Log Record.\n",
      "attributes": [
        {
          "name": "log.record.uid",
          "type": "string",
          "brief": "A unique identifier for the Log Record.\n",
          "examples": [
            "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          ],
          "requirement_level": "recommended",
          "note": "If an id is provided, other log records with the same id will be considered duplicates and can be removed safely. This means, that two distinguishable log records MUST have different values.\nThe id MAY be an [Universally Unique Lexicographically Sortable Identifier (ULID)](https://github.com/ulid/spec), but other identifiers (e.g. UUID) may be used as needed.\n",
          "stability": "development"
        },
        {
          "name": "log.record.original",
          "type": "string",
          "brief": "The complete original Log Record.\n",
          "examples": [
            "77 <86>1 2015-08-06T21:58:59.694Z 192.168.2.133 inactive - - - Something happened",
            "[INFO] 8/3/24 12:34:56 Something happened"
          ],
          "requirement_level": "recommended",
          "note": "This value MAY be added when processing a Log Record which was originally transmitted as a string or equivalent data type AND the Body field of the Log Record does not contain the same value. (e.g. a syslog or a log record read from a file.)\n",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/log/registry.yaml"
      },
      "display_name": "Log Record Attributes"
    },
    {
      "id": "resource.aws.eks",
      "type": "resource",
      "brief": "Resources used by AWS Elastic Kubernetes Service (EKS).\n",
      "stability": "development",
      "attributes": [
        {
          "name": "aws.eks.cluster.arn",
          "type": "string",
          "brief": "The ARN of an EKS cluster.\n",
          "examples": [
            "arn:aws:ecs:us-west-2:123456789123:cluster/my-cluster"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": "aws.eks",
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/aws/eks-resources.yaml",
        "attributes": {
          "aws.eks.cluster.arn": {
            "source_group": "registry.aws.eks",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric_attributes.gen_ai",
      "type": "attribute_group",
      "brief": "This group describes GenAI metrics attributes",
      "attributes": [
        {
          "name": "gen_ai.response.model",
          "type": "string",
          "brief": "The name of the model that generated the response.",
          "examples": [
            "gpt-4-0613"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "server.address",
          "type": "string",
          "brief": "GenAI server address.",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "recommended",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "GenAI server port.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": {
            "conditionally_required": "If `server.address` is set."
          },
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "gen_ai.request.model",
          "type": "string",
          "brief": "The name of the GenAI model a request is being made to.",
          "examples": "gpt-4",
          "requirement_level": {
            "conditionally_required": "If available."
          },
          "stability": "development"
        },
        {
          "name": "gen_ai.system",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "openai",
                "value": "openai",
                "brief": "OpenAI",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "vertex_ai",
                "value": "vertex_ai",
                "brief": "Vertex AI",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "gemini",
                "value": "gemini",
                "brief": "Gemini",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "anthropic",
                "value": "anthropic",
                "brief": "Anthropic",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "cohere",
                "value": "cohere",
                "brief": "Cohere",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "az.ai.inference",
                "value": "az.ai.inference",
                "brief": "Azure AI Inference",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "az.ai.openai",
                "value": "az.ai.openai",
                "brief": "Azure OpenAI",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "ibm.watsonx.ai",
                "value": "ibm.watsonx.ai",
                "brief": "IBM Watsonx AI",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "aws.bedrock",
                "value": "aws.bedrock",
                "brief": "AWS Bedrock",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "perplexity",
                "value": "perplexity",
                "brief": "Perplexity",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "xai",
                "value": "xai",
                "brief": "xAI",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "deepseek",
                "value": "deepseek",
                "brief": "DeepSeek",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "groq",
                "value": "groq",
                "brief": "Groq",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "mistral_ai",
                "value": "mistral_ai",
                "brief": "Mistral AI",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The Generative AI product as identified by the client or server instrumentation.",
          "examples": "openai",
          "requirement_level": "required",
          "note": "The `gen_ai.system` describes a family of GenAI models with specific model identified\nby `gen_ai.request.model` and `gen_ai.response.model` attributes.\n\nThe actual GenAI product may differ from the one identified by the client.\nMultiple systems, including Azure OpenAI and Gemini, are accessible by OpenAI client\nlibraries. In such cases, the `gen_ai.system` is set to `openai` based on the\ninstrumentation's best knowledge, instead of the actual system. The `server.address`\nattribute may help identify the actual system in use for `openai`.\n\nFor custom model, a custom friendly name SHOULD be used.\nIf none of these options apply, the `gen_ai.system` SHOULD be set to `_OTHER`.\n",
          "stability": "development"
        },
        {
          "name": "gen_ai.operation.name",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "chat",
                "value": "chat",
                "brief": "Chat completion operation such as [OpenAI Chat API](https://platform.openai.com/docs/api-reference/chat)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "text_completion",
                "value": "text_completion",
                "brief": "Text completions operation such as [OpenAI Completions API (Legacy)](https://platform.openai.com/docs/api-reference/completions)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "embeddings",
                "value": "embeddings",
                "brief": "Embeddings operation such as [OpenAI Create embeddings API](https://platform.openai.com/docs/api-reference/embeddings/create)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "create_agent",
                "value": "create_agent",
                "brief": "Create GenAI agent",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "execute_tool",
                "value": "execute_tool",
                "brief": "Execute a tool",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The name of the operation being performed.",
          "requirement_level": "required",
          "note": "If one of the predefined values applies, but specific system uses a different name it's RECOMMENDED to document it in the semantic conventions for specific GenAI system and use system-specific name in the instrumentation. If a different name is not documented, instrumentation libraries SHOULD use applicable predefined value.\n",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/gen-ai/metrics.yaml",
        "attributes": {
          "gen_ai.operation.name": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.request.model": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.response.model": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.system": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "requirement_level"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric_attributes.gen_ai.server",
      "type": "attribute_group",
      "brief": "This group describes GenAI server metrics attributes",
      "attributes": [
        {
          "name": "gen_ai.response.model",
          "type": "string",
          "brief": "The name of the model that generated the response.",
          "examples": [
            "gpt-4-0613"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "server.address",
          "type": "string",
          "brief": "GenAI server address.",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "recommended",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "GenAI server port.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": {
            "conditionally_required": "If `server.address` is set."
          },
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "gen_ai.request.model",
          "type": "string",
          "brief": "The name of the GenAI model a request is being made to.",
          "examples": "gpt-4",
          "requirement_level": {
            "conditionally_required": "If available."
          },
          "stability": "development"
        },
        {
          "name": "gen_ai.system",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "openai",
                "value": "openai",
                "brief": "OpenAI",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "vertex_ai",
                "value": "vertex_ai",
                "brief": "Vertex AI",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "gemini",
                "value": "gemini",
                "brief": "Gemini",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "anthropic",
                "value": "anthropic",
                "brief": "Anthropic",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "cohere",
                "value": "cohere",
                "brief": "Cohere",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "az.ai.inference",
                "value": "az.ai.inference",
                "brief": "Azure AI Inference",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "az.ai.openai",
                "value": "az.ai.openai",
                "brief": "Azure OpenAI",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "ibm.watsonx.ai",
                "value": "ibm.watsonx.ai",
                "brief": "IBM Watsonx AI",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "aws.bedrock",
                "value": "aws.bedrock",
                "brief": "AWS Bedrock",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "perplexity",
                "value": "perplexity",
                "brief": "Perplexity",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "xai",
                "value": "xai",
                "brief": "xAI",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "deepseek",
                "value": "deepseek",
                "brief": "DeepSeek",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "groq",
                "value": "groq",
                "brief": "Groq",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "mistral_ai",
                "value": "mistral_ai",
                "brief": "Mistral AI",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The Generative AI product as identified by the client or server instrumentation.",
          "examples": "openai",
          "requirement_level": "required",
          "note": "The `gen_ai.system` describes a family of GenAI models with specific model identified\nby `gen_ai.request.model` and `gen_ai.response.model` attributes.\n\nThe actual GenAI product may differ from the one identified by the client.\nMultiple systems, including Azure OpenAI and Gemini, are accessible by OpenAI client\nlibraries. In such cases, the `gen_ai.system` is set to `openai` based on the\ninstrumentation's best knowledge, instead of the actual system. The `server.address`\nattribute may help identify the actual system in use for `openai`.\n\nFor custom model, a custom friendly name SHOULD be used.\nIf none of these options apply, the `gen_ai.system` SHOULD be set to `_OTHER`.\n",
          "stability": "development"
        },
        {
          "name": "gen_ai.operation.name",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "chat",
                "value": "chat",
                "brief": "Chat completion operation such as [OpenAI Chat API](https://platform.openai.com/docs/api-reference/chat)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "text_completion",
                "value": "text_completion",
                "brief": "Text completions operation such as [OpenAI Completions API (Legacy)](https://platform.openai.com/docs/api-reference/completions)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "embeddings",
                "value": "embeddings",
                "brief": "Embeddings operation such as [OpenAI Create embeddings API](https://platform.openai.com/docs/api-reference/embeddings/create)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "create_agent",
                "value": "create_agent",
                "brief": "Create GenAI agent",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "execute_tool",
                "value": "execute_tool",
                "brief": "Execute a tool",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The name of the operation being performed.",
          "requirement_level": "required",
          "note": "If one of the predefined values applies, but specific system uses a different name it's RECOMMENDED to document it in the semantic conventions for specific GenAI system and use system-specific name in the instrumentation. If a different name is not documented, instrumentation libraries SHOULD use applicable predefined value.\n",
          "stability": "development"
        },
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "timeout",
            "java.net.UnknownHostException",
            "server_certificate_invalid",
            "500"
          ],
          "requirement_level": {
            "conditionally_required": "if the operation ended in an error"
          },
          "note": "The `error.type` SHOULD match the error code returned by the Generative AI service,\nthe canonical name of exception that occurred, or another low-cardinality error identifier.\nInstrumentations SHOULD document the list of errors they report.\n",
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/gen-ai/metrics.yaml",
        "attributes": {
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ]
          },
          "gen_ai.operation.name": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.request.model": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.response.model": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.system": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "requirement_level"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric_attributes.gen_ai.openai",
      "type": "attribute_group",
      "brief": "This group describes GenAI server metrics attributes",
      "attributes": [
        {
          "name": "gen_ai.openai.response.service_tier",
          "type": "string",
          "brief": "The service tier used for the response.",
          "examples": [
            "scale",
            "default"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "gen_ai.openai.response.system_fingerprint",
          "type": "string",
          "brief": "A fingerprint to track any eventual change in the Generative AI environment.",
          "examples": [
            "fp_44709d6fcb"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/gen-ai/metrics.yaml",
        "attributes": {
          "gen_ai.openai.response.service_tier": {
            "source_group": "registry.gen_ai.openai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.openai.response.system_fingerprint": {
            "source_group": "registry.gen_ai.openai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.gen_ai.client.token.usage",
      "type": "metric",
      "brief": "Measures number of input and output tokens used",
      "stability": "development",
      "attributes": [
        {
          "name": "gen_ai.response.model",
          "type": "string",
          "brief": "The name of the model that generated the response.",
          "examples": [
            "gpt-4-0613"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "server.address",
          "type": "string",
          "brief": "GenAI server address.",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "recommended",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "GenAI server port.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": {
            "conditionally_required": "If `server.address` is set."
          },
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "gen_ai.request.model",
          "type": "string",
          "brief": "The name of the GenAI model a request is being made to.",
          "examples": "gpt-4",
          "requirement_level": {
            "conditionally_required": "If available."
          },
          "stability": "development"
        },
        {
          "name": "gen_ai.system",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "openai",
                "value": "openai",
                "brief": "OpenAI",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "vertex_ai",
                "value": "vertex_ai",
                "brief": "Vertex AI",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "gemini",
                "value": "gemini",
                "brief": "Gemini",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "anthropic",
                "value": "anthropic",
                "brief": "Anthropic",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "cohere",
                "value": "cohere",
                "brief": "Cohere",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "az.ai.inference",
                "value": "az.ai.inference",
                "brief": "Azure AI Inference",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "az.ai.openai",
                "value": "az.ai.openai",
                "brief": "Azure OpenAI",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "ibm.watsonx.ai",
                "value": "ibm.watsonx.ai",
                "brief": "IBM Watsonx AI",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "aws.bedrock",
                "value": "aws.bedrock",
                "brief": "AWS Bedrock",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "perplexity",
                "value": "perplexity",
                "brief": "Perplexity",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "xai",
                "value": "xai",
                "brief": "xAI",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "deepseek",
                "value": "deepseek",
                "brief": "DeepSeek",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "groq",
                "value": "groq",
                "brief": "Groq",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "mistral_ai",
                "value": "mistral_ai",
                "brief": "Mistral AI",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The Generative AI product as identified by the client or server instrumentation.",
          "examples": "openai",
          "requirement_level": "required",
          "note": "The `gen_ai.system` describes a family of GenAI models with specific model identified\nby `gen_ai.request.model` and `gen_ai.response.model` attributes.\n\nThe actual GenAI product may differ from the one identified by the client.\nMultiple systems, including Azure OpenAI and Gemini, are accessible by OpenAI client\nlibraries. In such cases, the `gen_ai.system` is set to `openai` based on the\ninstrumentation's best knowledge, instead of the actual system. The `server.address`\nattribute may help identify the actual system in use for `openai`.\n\nFor custom model, a custom friendly name SHOULD be used.\nIf none of these options apply, the `gen_ai.system` SHOULD be set to `_OTHER`.\n",
          "stability": "development"
        },
        {
          "name": "gen_ai.operation.name",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "chat",
                "value": "chat",
                "brief": "Chat completion operation such as [OpenAI Chat API](https://platform.openai.com/docs/api-reference/chat)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "text_completion",
                "value": "text_completion",
                "brief": "Text completions operation such as [OpenAI Completions API (Legacy)](https://platform.openai.com/docs/api-reference/completions)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "embeddings",
                "value": "embeddings",
                "brief": "Embeddings operation such as [OpenAI Create embeddings API](https://platform.openai.com/docs/api-reference/embeddings/create)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "create_agent",
                "value": "create_agent",
                "brief": "Create GenAI agent",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "execute_tool",
                "value": "execute_tool",
                "brief": "Execute a tool",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The name of the operation being performed.",
          "requirement_level": "required",
          "note": "If one of the predefined values applies, but specific system uses a different name it's RECOMMENDED to document it in the semantic conventions for specific GenAI system and use system-specific name in the instrumentation. If a different name is not documented, instrumentation libraries SHOULD use applicable predefined value.\n",
          "stability": "development"
        },
        {
          "name": "gen_ai.token.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "input",
                "value": "input",
                "brief": "Input tokens (prompt, input, etc.)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "completion",
                "value": "output",
                "brief": "Output tokens (completion, response, etc.)",
                "note": null,
                "stability": "development",
                "deprecated": "Replaced by `output`."
              },
              {
                "id": "output",
                "value": "output",
                "brief": "Output tokens (completion, response, etc.)",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The type of token being counted.",
          "examples": [
            "input",
            "output"
          ],
          "requirement_level": "required",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "gen_ai.client.token.usage",
      "instrument": "histogram",
      "unit": "{token}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/gen-ai/metrics.yaml",
        "attributes": {
          "gen_ai.operation.name": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.request.model": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.response.model": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.system": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.token.type": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "requirement_level"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.gen_ai.client.operation.duration",
      "type": "metric",
      "brief": "GenAI operation duration",
      "stability": "development",
      "attributes": [
        {
          "name": "gen_ai.response.model",
          "type": "string",
          "brief": "The name of the model that generated the response.",
          "examples": [
            "gpt-4-0613"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "server.address",
          "type": "string",
          "brief": "GenAI server address.",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "recommended",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "GenAI server port.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": {
            "conditionally_required": "If `server.address` is set."
          },
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "gen_ai.request.model",
          "type": "string",
          "brief": "The name of the GenAI model a request is being made to.",
          "examples": "gpt-4",
          "requirement_level": {
            "conditionally_required": "If available."
          },
          "stability": "development"
        },
        {
          "name": "gen_ai.system",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "openai",
                "value": "openai",
                "brief": "OpenAI",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "vertex_ai",
                "value": "vertex_ai",
                "brief": "Vertex AI",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "gemini",
                "value": "gemini",
                "brief": "Gemini",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "anthropic",
                "value": "anthropic",
                "brief": "Anthropic",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "cohere",
                "value": "cohere",
                "brief": "Cohere",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "az.ai.inference",
                "value": "az.ai.inference",
                "brief": "Azure AI Inference",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "az.ai.openai",
                "value": "az.ai.openai",
                "brief": "Azure OpenAI",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "ibm.watsonx.ai",
                "value": "ibm.watsonx.ai",
                "brief": "IBM Watsonx AI",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "aws.bedrock",
                "value": "aws.bedrock",
                "brief": "AWS Bedrock",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "perplexity",
                "value": "perplexity",
                "brief": "Perplexity",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "xai",
                "value": "xai",
                "brief": "xAI",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "deepseek",
                "value": "deepseek",
                "brief": "DeepSeek",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "groq",
                "value": "groq",
                "brief": "Groq",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "mistral_ai",
                "value": "mistral_ai",
                "brief": "Mistral AI",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The Generative AI product as identified by the client or server instrumentation.",
          "examples": "openai",
          "requirement_level": "required",
          "note": "The `gen_ai.system` describes a family of GenAI models with specific model identified\nby `gen_ai.request.model` and `gen_ai.response.model` attributes.\n\nThe actual GenAI product may differ from the one identified by the client.\nMultiple systems, including Azure OpenAI and Gemini, are accessible by OpenAI client\nlibraries. In such cases, the `gen_ai.system` is set to `openai` based on the\ninstrumentation's best knowledge, instead of the actual system. The `server.address`\nattribute may help identify the actual system in use for `openai`.\n\nFor custom model, a custom friendly name SHOULD be used.\nIf none of these options apply, the `gen_ai.system` SHOULD be set to `_OTHER`.\n",
          "stability": "development"
        },
        {
          "name": "gen_ai.operation.name",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "chat",
                "value": "chat",
                "brief": "Chat completion operation such as [OpenAI Chat API](https://platform.openai.com/docs/api-reference/chat)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "text_completion",
                "value": "text_completion",
                "brief": "Text completions operation such as [OpenAI Completions API (Legacy)](https://platform.openai.com/docs/api-reference/completions)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "embeddings",
                "value": "embeddings",
                "brief": "Embeddings operation such as [OpenAI Create embeddings API](https://platform.openai.com/docs/api-reference/embeddings/create)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "create_agent",
                "value": "create_agent",
                "brief": "Create GenAI agent",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "execute_tool",
                "value": "execute_tool",
                "brief": "Execute a tool",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The name of the operation being performed.",
          "requirement_level": "required",
          "note": "If one of the predefined values applies, but specific system uses a different name it's RECOMMENDED to document it in the semantic conventions for specific GenAI system and use system-specific name in the instrumentation. If a different name is not documented, instrumentation libraries SHOULD use applicable predefined value.\n",
          "stability": "development"
        },
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "timeout",
            "java.net.UnknownHostException",
            "server_certificate_invalid",
            "500"
          ],
          "requirement_level": {
            "conditionally_required": "if the operation ended in an error"
          },
          "note": "The `error.type` SHOULD match the error code returned by the Generative AI provider or the client library,\nthe canonical name of exception that occurred, or another low-cardinality error identifier.\nInstrumentations SHOULD document the list of errors they report.\n",
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "gen_ai.client.operation.duration",
      "instrument": "histogram",
      "unit": "s",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/gen-ai/metrics.yaml",
        "attributes": {
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ]
          },
          "gen_ai.operation.name": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.request.model": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.response.model": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.system": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "requirement_level"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.gen_ai.server.request.duration",
      "type": "metric",
      "brief": "Generative AI server request duration such as time-to-last byte or last output token",
      "stability": "development",
      "attributes": [
        {
          "name": "gen_ai.response.model",
          "type": "string",
          "brief": "The name of the model that generated the response.",
          "examples": [
            "gpt-4-0613"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "server.address",
          "type": "string",
          "brief": "GenAI server address.",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "recommended",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "GenAI server port.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": {
            "conditionally_required": "If `server.address` is set."
          },
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "gen_ai.request.model",
          "type": "string",
          "brief": "The name of the GenAI model a request is being made to.",
          "examples": "gpt-4",
          "requirement_level": {
            "conditionally_required": "If available."
          },
          "stability": "development"
        },
        {
          "name": "gen_ai.system",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "openai",
                "value": "openai",
                "brief": "OpenAI",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "vertex_ai",
                "value": "vertex_ai",
                "brief": "Vertex AI",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "gemini",
                "value": "gemini",
                "brief": "Gemini",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "anthropic",
                "value": "anthropic",
                "brief": "Anthropic",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "cohere",
                "value": "cohere",
                "brief": "Cohere",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "az.ai.inference",
                "value": "az.ai.inference",
                "brief": "Azure AI Inference",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "az.ai.openai",
                "value": "az.ai.openai",
                "brief": "Azure OpenAI",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "ibm.watsonx.ai",
                "value": "ibm.watsonx.ai",
                "brief": "IBM Watsonx AI",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "aws.bedrock",
                "value": "aws.bedrock",
                "brief": "AWS Bedrock",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "perplexity",
                "value": "perplexity",
                "brief": "Perplexity",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "xai",
                "value": "xai",
                "brief": "xAI",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "deepseek",
                "value": "deepseek",
                "brief": "DeepSeek",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "groq",
                "value": "groq",
                "brief": "Groq",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "mistral_ai",
                "value": "mistral_ai",
                "brief": "Mistral AI",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The Generative AI product as identified by the client or server instrumentation.",
          "examples": "openai",
          "requirement_level": "required",
          "note": "The `gen_ai.system` describes a family of GenAI models with specific model identified\nby `gen_ai.request.model` and `gen_ai.response.model` attributes.\n\nThe actual GenAI product may differ from the one identified by the client.\nMultiple systems, including Azure OpenAI and Gemini, are accessible by OpenAI client\nlibraries. In such cases, the `gen_ai.system` is set to `openai` based on the\ninstrumentation's best knowledge, instead of the actual system. The `server.address`\nattribute may help identify the actual system in use for `openai`.\n\nFor custom model, a custom friendly name SHOULD be used.\nIf none of these options apply, the `gen_ai.system` SHOULD be set to `_OTHER`.\n",
          "stability": "development"
        },
        {
          "name": "gen_ai.operation.name",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "chat",
                "value": "chat",
                "brief": "Chat completion operation such as [OpenAI Chat API](https://platform.openai.com/docs/api-reference/chat)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "text_completion",
                "value": "text_completion",
                "brief": "Text completions operation such as [OpenAI Completions API (Legacy)](https://platform.openai.com/docs/api-reference/completions)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "embeddings",
                "value": "embeddings",
                "brief": "Embeddings operation such as [OpenAI Create embeddings API](https://platform.openai.com/docs/api-reference/embeddings/create)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "create_agent",
                "value": "create_agent",
                "brief": "Create GenAI agent",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "execute_tool",
                "value": "execute_tool",
                "brief": "Execute a tool",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The name of the operation being performed.",
          "requirement_level": "required",
          "note": "If one of the predefined values applies, but specific system uses a different name it's RECOMMENDED to document it in the semantic conventions for specific GenAI system and use system-specific name in the instrumentation. If a different name is not documented, instrumentation libraries SHOULD use applicable predefined value.\n",
          "stability": "development"
        },
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "timeout",
            "java.net.UnknownHostException",
            "server_certificate_invalid",
            "500"
          ],
          "requirement_level": {
            "conditionally_required": "if the operation ended in an error"
          },
          "note": "The `error.type` SHOULD match the error code returned by the Generative AI service,\nthe canonical name of exception that occurred, or another low-cardinality error identifier.\nInstrumentations SHOULD document the list of errors they report.\n",
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "gen_ai.server.request.duration",
      "instrument": "histogram",
      "unit": "s",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/gen-ai/metrics.yaml",
        "attributes": {
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ]
          },
          "gen_ai.operation.name": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.request.model": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.response.model": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.system": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "requirement_level"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.gen_ai.server.time_per_output_token",
      "type": "metric",
      "brief": "Time per output token generated after the first token for successful responses",
      "stability": "development",
      "attributes": [
        {
          "name": "gen_ai.response.model",
          "type": "string",
          "brief": "The name of the model that generated the response.",
          "examples": [
            "gpt-4-0613"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "server.address",
          "type": "string",
          "brief": "GenAI server address.",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "recommended",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "GenAI server port.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": {
            "conditionally_required": "If `server.address` is set."
          },
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "gen_ai.request.model",
          "type": "string",
          "brief": "The name of the GenAI model a request is being made to.",
          "examples": "gpt-4",
          "requirement_level": {
            "conditionally_required": "If available."
          },
          "stability": "development"
        },
        {
          "name": "gen_ai.system",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "openai",
                "value": "openai",
                "brief": "OpenAI",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "vertex_ai",
                "value": "vertex_ai",
                "brief": "Vertex AI",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "gemini",
                "value": "gemini",
                "brief": "Gemini",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "anthropic",
                "value": "anthropic",
                "brief": "Anthropic",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "cohere",
                "value": "cohere",
                "brief": "Cohere",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "az.ai.inference",
                "value": "az.ai.inference",
                "brief": "Azure AI Inference",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "az.ai.openai",
                "value": "az.ai.openai",
                "brief": "Azure OpenAI",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "ibm.watsonx.ai",
                "value": "ibm.watsonx.ai",
                "brief": "IBM Watsonx AI",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "aws.bedrock",
                "value": "aws.bedrock",
                "brief": "AWS Bedrock",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "perplexity",
                "value": "perplexity",
                "brief": "Perplexity",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "xai",
                "value": "xai",
                "brief": "xAI",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "deepseek",
                "value": "deepseek",
                "brief": "DeepSeek",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "groq",
                "value": "groq",
                "brief": "Groq",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "mistral_ai",
                "value": "mistral_ai",
                "brief": "Mistral AI",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The Generative AI product as identified by the client or server instrumentation.",
          "examples": "openai",
          "requirement_level": "required",
          "note": "The `gen_ai.system` describes a family of GenAI models with specific model identified\nby `gen_ai.request.model` and `gen_ai.response.model` attributes.\n\nThe actual GenAI product may differ from the one identified by the client.\nMultiple systems, including Azure OpenAI and Gemini, are accessible by OpenAI client\nlibraries. In such cases, the `gen_ai.system` is set to `openai` based on the\ninstrumentation's best knowledge, instead of the actual system. The `server.address`\nattribute may help identify the actual system in use for `openai`.\n\nFor custom model, a custom friendly name SHOULD be used.\nIf none of these options apply, the `gen_ai.system` SHOULD be set to `_OTHER`.\n",
          "stability": "development"
        },
        {
          "name": "gen_ai.operation.name",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "chat",
                "value": "chat",
                "brief": "Chat completion operation such as [OpenAI Chat API](https://platform.openai.com/docs/api-reference/chat)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "text_completion",
                "value": "text_completion",
                "brief": "Text completions operation such as [OpenAI Completions API (Legacy)](https://platform.openai.com/docs/api-reference/completions)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "embeddings",
                "value": "embeddings",
                "brief": "Embeddings operation such as [OpenAI Create embeddings API](https://platform.openai.com/docs/api-reference/embeddings/create)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "create_agent",
                "value": "create_agent",
                "brief": "Create GenAI agent",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "execute_tool",
                "value": "execute_tool",
                "brief": "Execute a tool",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The name of the operation being performed.",
          "requirement_level": "required",
          "note": "If one of the predefined values applies, but specific system uses a different name it's RECOMMENDED to document it in the semantic conventions for specific GenAI system and use system-specific name in the instrumentation. If a different name is not documented, instrumentation libraries SHOULD use applicable predefined value.\n",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "gen_ai.server.time_per_output_token",
      "instrument": "histogram",
      "unit": "s",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/gen-ai/metrics.yaml",
        "attributes": {
          "gen_ai.operation.name": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.request.model": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.response.model": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.system": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "requirement_level"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.gen_ai.server.time_to_first_token",
      "type": "metric",
      "brief": "Time to generate first token for successful responses",
      "stability": "development",
      "attributes": [
        {
          "name": "gen_ai.response.model",
          "type": "string",
          "brief": "The name of the model that generated the response.",
          "examples": [
            "gpt-4-0613"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "server.address",
          "type": "string",
          "brief": "GenAI server address.",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "recommended",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "GenAI server port.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": {
            "conditionally_required": "If `server.address` is set."
          },
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "gen_ai.request.model",
          "type": "string",
          "brief": "The name of the GenAI model a request is being made to.",
          "examples": "gpt-4",
          "requirement_level": {
            "conditionally_required": "If available."
          },
          "stability": "development"
        },
        {
          "name": "gen_ai.system",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "openai",
                "value": "openai",
                "brief": "OpenAI",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "vertex_ai",
                "value": "vertex_ai",
                "brief": "Vertex AI",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "gemini",
                "value": "gemini",
                "brief": "Gemini",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "anthropic",
                "value": "anthropic",
                "brief": "Anthropic",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "cohere",
                "value": "cohere",
                "brief": "Cohere",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "az.ai.inference",
                "value": "az.ai.inference",
                "brief": "Azure AI Inference",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "az.ai.openai",
                "value": "az.ai.openai",
                "brief": "Azure OpenAI",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "ibm.watsonx.ai",
                "value": "ibm.watsonx.ai",
                "brief": "IBM Watsonx AI",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "aws.bedrock",
                "value": "aws.bedrock",
                "brief": "AWS Bedrock",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "perplexity",
                "value": "perplexity",
                "brief": "Perplexity",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "xai",
                "value": "xai",
                "brief": "xAI",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "deepseek",
                "value": "deepseek",
                "brief": "DeepSeek",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "groq",
                "value": "groq",
                "brief": "Groq",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "mistral_ai",
                "value": "mistral_ai",
                "brief": "Mistral AI",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The Generative AI product as identified by the client or server instrumentation.",
          "examples": "openai",
          "requirement_level": "required",
          "note": "The `gen_ai.system` describes a family of GenAI models with specific model identified\nby `gen_ai.request.model` and `gen_ai.response.model` attributes.\n\nThe actual GenAI product may differ from the one identified by the client.\nMultiple systems, including Azure OpenAI and Gemini, are accessible by OpenAI client\nlibraries. In such cases, the `gen_ai.system` is set to `openai` based on the\ninstrumentation's best knowledge, instead of the actual system. The `server.address`\nattribute may help identify the actual system in use for `openai`.\n\nFor custom model, a custom friendly name SHOULD be used.\nIf none of these options apply, the `gen_ai.system` SHOULD be set to `_OTHER`.\n",
          "stability": "development"
        },
        {
          "name": "gen_ai.operation.name",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "chat",
                "value": "chat",
                "brief": "Chat completion operation such as [OpenAI Chat API](https://platform.openai.com/docs/api-reference/chat)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "text_completion",
                "value": "text_completion",
                "brief": "Text completions operation such as [OpenAI Completions API (Legacy)](https://platform.openai.com/docs/api-reference/completions)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "embeddings",
                "value": "embeddings",
                "brief": "Embeddings operation such as [OpenAI Create embeddings API](https://platform.openai.com/docs/api-reference/embeddings/create)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "create_agent",
                "value": "create_agent",
                "brief": "Create GenAI agent",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "execute_tool",
                "value": "execute_tool",
                "brief": "Execute a tool",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The name of the operation being performed.",
          "requirement_level": "required",
          "note": "If one of the predefined values applies, but specific system uses a different name it's RECOMMENDED to document it in the semantic conventions for specific GenAI system and use system-specific name in the instrumentation. If a different name is not documented, instrumentation libraries SHOULD use applicable predefined value.\n",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "gen_ai.server.time_to_first_token",
      "instrument": "histogram",
      "unit": "s",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/gen-ai/metrics.yaml",
        "attributes": {
          "gen_ai.operation.name": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.request.model": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.response.model": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.system": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "requirement_level"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "resource.service",
      "type": "resource",
      "brief": "A service instance.\n",
      "stability": "stable",
      "attributes": [
        {
          "name": "service.version",
          "type": "string",
          "brief": "The version string of the service API or implementation. The format is not defined by these conventions.\n",
          "examples": [
            "2.0.0",
            "a01dbef8a"
          ],
          "requirement_level": "recommended",
          "stability": "stable"
        },
        {
          "name": "service.namespace",
          "type": "string",
          "brief": "A namespace for `service.name`.\n",
          "examples": [
            "Shop"
          ],
          "requirement_level": "recommended",
          "note": "A string value having a meaning that helps to distinguish a group of services, for example the team name that owns a group of services. `service.name` is expected to be unique within the same namespace. If `service.namespace` is not specified in the Resource then `service.name` is expected to be unique for all services that have no explicit namespace defined (so the empty/unspecified namespace is simply one more valid namespace). Zero-length namespace string is assumed equal to unspecified namespace.\n",
          "stability": "development"
        },
        {
          "name": "service.instance.id",
          "type": "string",
          "brief": "The string ID of the service instance.\n",
          "examples": [
            "627cc493-f310-47de-96bd-71410b7dec09"
          ],
          "requirement_level": "recommended",
          "note": "MUST be unique for each instance of the same `service.namespace,service.name` pair (in other words\n`service.namespace,service.name,service.instance.id` triplet MUST be globally unique). The ID helps to\ndistinguish instances of the same service that exist at the same time (e.g. instances of a horizontally scaled\nservice).\n\nImplementations, such as SDKs, are recommended to generate a random Version 1 or Version 4 [RFC\n4122](https://www.ietf.org/rfc/rfc4122.txt) UUID, but are free to use an inherent unique ID as the source of\nthis value if stability is desirable. In that case, the ID SHOULD be used as source of a UUID Version 5 and\nSHOULD use the following UUID as the namespace: `4d63009a-8d0f-11ee-aad7-4c796ed8e320`.\n\nUUIDs are typically recommended, as only an opaque value for the purposes of identifying a service instance is\nneeded. Similar to what can be seen in the man page for the\n[`/etc/machine-id`](https://www.freedesktop.org/software/systemd/man/latest/machine-id.html) file, the underlying\ndata, such as pod name and namespace should be treated as confidential, being the user's choice to expose it\nor not via another resource attribute.\n\nFor applications running behind an application server (like unicorn), we do not recommend using one identifier\nfor all processes participating in the application. Instead, it's recommended each division (e.g. a worker\nthread in unicorn) to have its own instance.id.\n\nIt's not recommended for a Collector to set `service.instance.id` if it can't unambiguously determine the\nservice instance that is generating that telemetry. For instance, creating an UUID based on `pod.name` will\nlikely be wrong, as the Collector might not know from which container within that pod the telemetry originated.\nHowever, Collectors can set the `service.instance.id` if they can unambiguously determine the service instance\nfor that telemetry. This is typically the case for scraping receivers, as they know the target address and\nport.\n",
          "stability": "development"
        },
        {
          "name": "service.name",
          "type": "string",
          "brief": "Logical name of the service.\n",
          "examples": [
            "shoppingcart"
          ],
          "requirement_level": "required",
          "note": "MUST be the same for all instances of horizontally scaled services. If the value was not specified, SDKs MUST fallback to `unknown_service:` concatenated with [`process.executable.name`](process.md), e.g. `unknown_service:bash`. If `process.executable.name` is not available, the value MUST be set to `unknown_service`.\n",
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": "service",
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/service/resources.yaml",
        "attributes": {
          "service.instance.id": {
            "source_group": "registry.service",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "service.name": {
            "source_group": "registry.service",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "service.namespace": {
            "source_group": "registry.service",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "service.version": {
            "source_group": "registry.service",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "registry.rpc",
      "type": "attribute_group",
      "brief": "This document defines attributes for remote procedure calls.",
      "attributes": [
        {
          "name": "rpc.connect_rpc.error_code",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "cancelled",
                "value": "cancelled",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "unknown",
                "value": "unknown",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "invalid_argument",
                "value": "invalid_argument",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "deadline_exceeded",
                "value": "deadline_exceeded",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "not_found",
                "value": "not_found",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "already_exists",
                "value": "already_exists",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "permission_denied",
                "value": "permission_denied",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "resource_exhausted",
                "value": "resource_exhausted",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "failed_precondition",
                "value": "failed_precondition",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "aborted",
                "value": "aborted",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "out_of_range",
                "value": "out_of_range",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "unimplemented",
                "value": "unimplemented",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "internal",
                "value": "internal",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "unavailable",
                "value": "unavailable",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "data_loss",
                "value": "data_loss",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "unauthenticated",
                "value": "unauthenticated",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The [error codes](https://connectrpc.com//docs/protocol/#error-codes) of the Connect request. Error codes are always string values.",
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "rpc.connect_rpc.request.metadata",
          "type": "template[string[]]",
          "brief": "Connect request metadata, `<key>` being the normalized Connect Metadata key (lowercase), the value being the metadata values.\n",
          "examples": [
            "rpc.request.metadata.my-custom-metadata-attribute=[\"1.2.3.4\", \"1.2.3.5\"]"
          ],
          "requirement_level": "recommended",
          "note": "Instrumentations SHOULD require an explicit configuration of which metadata values are to be captured. Including all request metadata values can be a security risk - explicit configuration helps avoid leaking sensitive information.\n",
          "stability": "development"
        },
        {
          "name": "rpc.connect_rpc.response.metadata",
          "type": "template[string[]]",
          "brief": "Connect response metadata, `<key>` being the normalized Connect Metadata key (lowercase), the value being the metadata values.\n",
          "examples": [
            "rpc.response.metadata.my-custom-metadata-attribute=[\"attribute_value\"]"
          ],
          "requirement_level": "recommended",
          "note": "Instrumentations SHOULD require an explicit configuration of which metadata values are to be captured. Including all response metadata values can be a security risk - explicit configuration helps avoid leaking sensitive information.\n",
          "stability": "development"
        },
        {
          "name": "rpc.grpc.status_code",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "ok",
                "value": 0,
                "brief": "OK",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "cancelled",
                "value": 1,
                "brief": "CANCELLED",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "unknown",
                "value": 2,
                "brief": "UNKNOWN",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "invalid_argument",
                "value": 3,
                "brief": "INVALID_ARGUMENT",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "deadline_exceeded",
                "value": 4,
                "brief": "DEADLINE_EXCEEDED",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "not_found",
                "value": 5,
                "brief": "NOT_FOUND",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "already_exists",
                "value": 6,
                "brief": "ALREADY_EXISTS",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "permission_denied",
                "value": 7,
                "brief": "PERMISSION_DENIED",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "resource_exhausted",
                "value": 8,
                "brief": "RESOURCE_EXHAUSTED",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "failed_precondition",
                "value": 9,
                "brief": "FAILED_PRECONDITION",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "aborted",
                "value": 10,
                "brief": "ABORTED",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "out_of_range",
                "value": 11,
                "brief": "OUT_OF_RANGE",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "unimplemented",
                "value": 12,
                "brief": "UNIMPLEMENTED",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "internal",
                "value": 13,
                "brief": "INTERNAL",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "unavailable",
                "value": 14,
                "brief": "UNAVAILABLE",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "data_loss",
                "value": 15,
                "brief": "DATA_LOSS",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "unauthenticated",
                "value": 16,
                "brief": "UNAUTHENTICATED",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.",
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "rpc.grpc.request.metadata",
          "type": "template[string[]]",
          "brief": "gRPC request metadata, `<key>` being the normalized gRPC Metadata key (lowercase), the value being the metadata values.\n",
          "examples": [
            "rpc.grpc.request.metadata.my-custom-metadata-attribute=[\"1.2.3.4\", \"1.2.3.5\"]"
          ],
          "requirement_level": "recommended",
          "note": "Instrumentations SHOULD require an explicit configuration of which metadata values are to be captured. Including all request metadata values can be a security risk - explicit configuration helps avoid leaking sensitive information.\n",
          "stability": "development"
        },
        {
          "name": "rpc.grpc.response.metadata",
          "type": "template[string[]]",
          "brief": "gRPC response metadata, `<key>` being the normalized gRPC Metadata key (lowercase), the value being the metadata values.\n",
          "examples": [
            "rpc.grpc.response.metadata.my-custom-metadata-attribute=[\"attribute_value\"]"
          ],
          "requirement_level": "recommended",
          "note": "Instrumentations SHOULD require an explicit configuration of which metadata values are to be captured. Including all response metadata values can be a security risk - explicit configuration helps avoid leaking sensitive information.\n",
          "stability": "development"
        },
        {
          "name": "rpc.jsonrpc.error_code",
          "type": "int",
          "brief": "`error.code` property of response if it is an error response.",
          "examples": [
            -32700,
            100
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "rpc.jsonrpc.error_message",
          "type": "string",
          "brief": "`error.message` property of response if it is an error response.",
          "examples": [
            "Parse error",
            "User already exists"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "rpc.jsonrpc.request_id",
          "type": "string",
          "brief": "`id` property of request or response. Since protocol allows id to be int, string, `null` or missing (for notifications), value is expected to be cast to string for simplicity. Use empty string in case of `null` value. Omit entirely if this is a notification.\n",
          "examples": [
            "10",
            "request-7",
            ""
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "rpc.jsonrpc.version",
          "type": "string",
          "brief": "Protocol version as in `jsonrpc` property of request/response. Since JSON-RPC 1.0 doesn't specify this, the value can be omitted.",
          "examples": [
            "2.0",
            "1.0"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "rpc.method",
          "type": "string",
          "brief": "The name of the (logical) method being called, must be equal to the $method part in the span name.",
          "examples": "exampleMethod",
          "requirement_level": "recommended",
          "note": "This is the logical name of the method from the RPC interface perspective, which can be different from the name of any implementing method/function. The `code.function.name` attribute may be used to store the latter (e.g., method actually executing the call on the server side, RPC client stub method on the client side).\n",
          "stability": "development"
        },
        {
          "name": "rpc.service",
          "type": "string",
          "brief": "The full (logical) name of the service being called, including its package name, if applicable.",
          "examples": "myservice.EchoService",
          "requirement_level": "recommended",
          "note": "This is the logical name of the service from the RPC interface perspective, which can be different from the name of any implementing class. The `code.namespace` attribute may be used to store the latter (despite the attribute name, it may include a class name; e.g., class with method actually executing the call on the server side, RPC client stub class on the client side).\n",
          "stability": "development"
        },
        {
          "name": "rpc.system",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "grpc",
                "value": "grpc",
                "brief": "gRPC",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "java_rmi",
                "value": "java_rmi",
                "brief": "Java RMI",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "dotnet_wcf",
                "value": "dotnet_wcf",
                "brief": ".NET WCF",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "apache_dubbo",
                "value": "apache_dubbo",
                "brief": "Apache Dubbo",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "connect_rpc",
                "value": "connect_rpc",
                "brief": "Connect RPC",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "A string identifying the remoting system. See below for a list of well-known identifiers.",
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "rpc.message.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "sent",
                "value": "SENT",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "received",
                "value": "RECEIVED",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "Whether this is a received or sent message.",
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "rpc.message.id",
          "type": "int",
          "brief": "MUST be calculated as two different counters starting from `1` one for sent messages and one for received message.",
          "requirement_level": "recommended",
          "note": "This way we guarantee that the values will be consistent between different implementations.",
          "stability": "development"
        },
        {
          "name": "rpc.message.compressed_size",
          "type": "int",
          "brief": "Compressed size of the message in bytes.",
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "rpc.message.uncompressed_size",
          "type": "int",
          "brief": "Uncompressed size of the message in bytes.",
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/rpc/registry.yaml"
      },
      "display_name": "Remote Procedure Call (RPC) Attributes"
    },
    {
      "id": "session-id",
      "type": "attribute_group",
      "brief": "Session is defined as the period of time encompassing all activities performed by the application and the actions executed by the end user.\nConsequently, a Session is represented as a collection of Logs, Events, and Spans emitted by the Client Application throughout the Session's duration. Each Session is assigned a unique identifier, which is included as an attribute in the Logs, Events, and Spans generated during the Session's lifecycle.\nWhen a session reaches end of life, typically due to user inactivity or session timeout, a new session identifier will be assigned. The previous session identifier may be provided by the instrumentation so that telemetry backends can link the two sessions.\n",
      "attributes": [
        {
          "name": "session.id",
          "type": "string",
          "brief": "A unique id to identify a session.",
          "examples": "00112233-4455-6677-8899-aabbccddeeff",
          "requirement_level": "opt_in",
          "stability": "development"
        },
        {
          "name": "session.previous_id",
          "type": "string",
          "brief": "The previous `session.id` for this user, when known.",
          "examples": "00112233-4455-6677-8899-aabbccddeeff",
          "requirement_level": "opt_in",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/session/common.yaml",
        "attributes": {
          "session.id": {
            "source_group": "registry.session",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "session.previous_id": {
            "source_group": "registry.session",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.db.client.connections.usage",
      "type": "metric",
      "brief": "Deprecated, use `db.client.connection.count` instead.",
      "stability": "development",
      "deprecated": {
        "reason": "uncategorized",
        "note": "Replaced by `db.client.connection.count`."
      },
      "attributes": [
        {
          "name": "db.client.connections.state",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "idle",
                "value": "idle",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "used",
                "value": "used",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "Deprecated, use `db.client.connection.state` instead.",
          "examples": [
            "idle"
          ],
          "requirement_level": "required",
          "stability": "development",
          "deprecated": {
            "reason": "uncategorized",
            "note": "Replaced by `db.client.connection.state`."
          }
        },
        {
          "name": "db.client.connections.pool.name",
          "type": "string",
          "brief": "Deprecated, use `db.client.connection.pool.name` instead.",
          "examples": [
            "myDataSource"
          ],
          "requirement_level": "required",
          "stability": "development",
          "deprecated": {
            "reason": "uncategorized",
            "note": "Replaced by `db.client.connection.pool.name`."
          }
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "db.client.connections.usage",
      "instrument": "updowncounter",
      "unit": "{connection}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/database/deprecated/metrics-deprecated.yaml",
        "attributes": {
          "db.client.connections.pool.name": {
            "source_group": "registry.db.metrics.deprecated",
            "inherited_fields": [
              "brief",
              "deprecated",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "db.client.connections.state": {
            "source_group": "registry.db.metrics.deprecated",
            "inherited_fields": [
              "brief",
              "deprecated",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.db.client.connections.idle.max",
      "type": "metric",
      "brief": "Deprecated, use `db.client.connection.idle.max` instead.",
      "stability": "development",
      "deprecated": {
        "reason": "uncategorized",
        "note": "Replaced by `db.client.connection.idle.max`."
      },
      "attributes": [
        {
          "name": "db.client.connections.pool.name",
          "type": "string",
          "brief": "Deprecated, use `db.client.connection.pool.name` instead.",
          "examples": [
            "myDataSource"
          ],
          "requirement_level": "required",
          "stability": "development",
          "deprecated": {
            "reason": "uncategorized",
            "note": "Replaced by `db.client.connection.pool.name`."
          }
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "db.client.connections.idle.max",
      "instrument": "updowncounter",
      "unit": "{connection}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/database/deprecated/metrics-deprecated.yaml",
        "attributes": {
          "db.client.connections.pool.name": {
            "source_group": "registry.db.metrics.deprecated",
            "inherited_fields": [
              "brief",
              "deprecated",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.db.client.connections.idle.min",
      "type": "metric",
      "brief": "Deprecated, use `db.client.connection.idle.min` instead.",
      "stability": "development",
      "deprecated": {
        "reason": "uncategorized",
        "note": "Replaced by `db.client.connection.idle.min`."
      },
      "attributes": [
        {
          "name": "db.client.connections.pool.name",
          "type": "string",
          "brief": "Deprecated, use `db.client.connection.pool.name` instead.",
          "examples": [
            "myDataSource"
          ],
          "requirement_level": "required",
          "stability": "development",
          "deprecated": {
            "reason": "uncategorized",
            "note": "Replaced by `db.client.connection.pool.name`."
          }
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "db.client.connections.idle.min",
      "instrument": "updowncounter",
      "unit": "{connection}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/database/deprecated/metrics-deprecated.yaml",
        "attributes": {
          "db.client.connections.pool.name": {
            "source_group": "registry.db.metrics.deprecated",
            "inherited_fields": [
              "brief",
              "deprecated",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.db.client.connections.max",
      "type": "metric",
      "brief": "Deprecated, use `db.client.connection.max` instead.",
      "stability": "development",
      "deprecated": {
        "reason": "uncategorized",
        "note": "Replaced by `db.client.connection.max`."
      },
      "attributes": [
        {
          "name": "db.client.connections.pool.name",
          "type": "string",
          "brief": "Deprecated, use `db.client.connection.pool.name` instead.",
          "examples": [
            "myDataSource"
          ],
          "requirement_level": "required",
          "stability": "development",
          "deprecated": {
            "reason": "uncategorized",
            "note": "Replaced by `db.client.connection.pool.name`."
          }
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "db.client.connections.max",
      "instrument": "updowncounter",
      "unit": "{connection}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/database/deprecated/metrics-deprecated.yaml",
        "attributes": {
          "db.client.connections.pool.name": {
            "source_group": "registry.db.metrics.deprecated",
            "inherited_fields": [
              "brief",
              "deprecated",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.db.client.connections.pending_requests",
      "type": "metric",
      "brief": "Deprecated, use `db.client.connection.pending_requests` instead.",
      "stability": "development",
      "deprecated": {
        "reason": "uncategorized",
        "note": "Replaced by `db.client.connection.pending_requests`."
      },
      "attributes": [
        {
          "name": "db.client.connections.pool.name",
          "type": "string",
          "brief": "Deprecated, use `db.client.connection.pool.name` instead.",
          "examples": [
            "myDataSource"
          ],
          "requirement_level": "required",
          "stability": "development",
          "deprecated": {
            "reason": "uncategorized",
            "note": "Replaced by `db.client.connection.pool.name`."
          }
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "db.client.connections.pending_requests",
      "instrument": "updowncounter",
      "unit": "{request}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/database/deprecated/metrics-deprecated.yaml",
        "attributes": {
          "db.client.connections.pool.name": {
            "source_group": "registry.db.metrics.deprecated",
            "inherited_fields": [
              "brief",
              "deprecated",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.db.client.connections.timeouts",
      "type": "metric",
      "brief": "Deprecated, use `db.client.connection.timeouts` instead.",
      "stability": "development",
      "deprecated": {
        "reason": "uncategorized",
        "note": "Replaced by `db.client.connection.timeouts`."
      },
      "attributes": [
        {
          "name": "db.client.connections.pool.name",
          "type": "string",
          "brief": "Deprecated, use `db.client.connection.pool.name` instead.",
          "examples": [
            "myDataSource"
          ],
          "requirement_level": "required",
          "stability": "development",
          "deprecated": {
            "reason": "uncategorized",
            "note": "Replaced by `db.client.connection.pool.name`."
          }
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "db.client.connections.timeouts",
      "instrument": "counter",
      "unit": "{timeout}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/database/deprecated/metrics-deprecated.yaml",
        "attributes": {
          "db.client.connections.pool.name": {
            "source_group": "registry.db.metrics.deprecated",
            "inherited_fields": [
              "brief",
              "deprecated",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.db.client.connections.create_time",
      "type": "metric",
      "brief": "Deprecated, use `db.client.connection.create_time` instead. Note: the unit also changed from `ms` to `s`.",
      "stability": "development",
      "deprecated": {
        "reason": "uncategorized",
        "note": "Replaced by `db.client.connection.create_time`. Note: the unit also changed from `ms` to `s`."
      },
      "attributes": [
        {
          "name": "db.client.connections.pool.name",
          "type": "string",
          "brief": "Deprecated, use `db.client.connection.pool.name` instead.",
          "examples": [
            "myDataSource"
          ],
          "requirement_level": "required",
          "stability": "development",
          "deprecated": {
            "reason": "uncategorized",
            "note": "Replaced by `db.client.connection.pool.name`."
          }
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "db.client.connections.create_time",
      "instrument": "histogram",
      "unit": "ms",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/database/deprecated/metrics-deprecated.yaml",
        "attributes": {
          "db.client.connections.pool.name": {
            "source_group": "registry.db.metrics.deprecated",
            "inherited_fields": [
              "brief",
              "deprecated",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.db.client.connections.wait_time",
      "type": "metric",
      "brief": "Deprecated, use `db.client.connection.wait_time` instead. Note: the unit also changed from `ms` to `s`.",
      "stability": "development",
      "deprecated": {
        "reason": "uncategorized",
        "note": "Replaced by `db.client.connection.wait_time`. Note: the unit also changed from `ms` to `s`."
      },
      "attributes": [
        {
          "name": "db.client.connections.pool.name",
          "type": "string",
          "brief": "Deprecated, use `db.client.connection.pool.name` instead.",
          "examples": [
            "myDataSource"
          ],
          "requirement_level": "required",
          "stability": "development",
          "deprecated": {
            "reason": "uncategorized",
            "note": "Replaced by `db.client.connection.pool.name`."
          }
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "db.client.connections.wait_time",
      "instrument": "histogram",
      "unit": "ms",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/database/deprecated/metrics-deprecated.yaml",
        "attributes": {
          "db.client.connections.pool.name": {
            "source_group": "registry.db.metrics.deprecated",
            "inherited_fields": [
              "brief",
              "deprecated",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.db.client.connections.use_time",
      "type": "metric",
      "brief": "Deprecated, use `db.client.connection.use_time` instead. Note: the unit also changed from `ms` to `s`.",
      "stability": "development",
      "deprecated": {
        "reason": "uncategorized",
        "note": "Replaced by `db.client.connection.use_time`. Note: the unit also changed from `ms` to `s`."
      },
      "attributes": [
        {
          "name": "db.client.connections.pool.name",
          "type": "string",
          "brief": "Deprecated, use `db.client.connection.pool.name` instead.",
          "examples": [
            "myDataSource"
          ],
          "requirement_level": "required",
          "stability": "development",
          "deprecated": {
            "reason": "uncategorized",
            "note": "Replaced by `db.client.connection.pool.name`."
          }
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "db.client.connections.use_time",
      "instrument": "histogram",
      "unit": "ms",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/database/deprecated/metrics-deprecated.yaml",
        "attributes": {
          "db.client.connections.pool.name": {
            "source_group": "registry.db.metrics.deprecated",
            "inherited_fields": [
              "brief",
              "deprecated",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.db.client.cosmosdb.operation.request_charge",
      "type": "metric",
      "brief": "Deprecated, use `azure.cosmosdb.client.operation.request_charge` instead.",
      "stability": "development",
      "deprecated": {
        "reason": "uncategorized",
        "note": "Replaced by `azure.cosmosdb.client.operation.request_charge`."
      },
      "attributes": [
        {
          "name": "db.operation.name",
          "type": "string",
          "brief": "The name of the operation or command being executed.\n",
          "examples": [
            "findAndModify",
            "HMSET",
            "SELECT"
          ],
          "requirement_level": {
            "conditionally_required": "If readily available and if there is a single operation name that describes the database call. The operation name MAY be parsed from the query text, in which case it SHOULD be the single operation name found in the query.\n"
          },
          "note": "It is RECOMMENDED to capture the value as provided by the application\nwithout attempting to do any case normalization.\n\nThe operation name SHOULD NOT be extracted from `db.query.text`,\nwhen the database system supports cross-table queries in non-batch operations.\n\nFor batch operations, if the individual operations are known to have the same operation name\nthen that operation name SHOULD be used prepended by `BATCH `,\notherwise `db.operation.name` SHOULD be `BATCH` or some other database\nsystem specific term if more applicable.\n",
          "stability": "release_candidate"
        },
        {
          "name": "db.collection.name",
          "type": "string",
          "brief": "Cosmos DB container name.",
          "examples": [
            "public.users",
            "customers"
          ],
          "requirement_level": {
            "conditionally_required": "If available."
          },
          "note": "It is RECOMMENDED to capture the value as provided by the application\nwithout attempting to do any case normalization.\n\nThe collection name SHOULD NOT be extracted from `db.query.text`,\nwhen the database system supports cross-table queries in non-batch operations.\n\nFor batch operations, if the individual operations are known to have the same\ncollection name then that collection name SHOULD be used.\n",
          "stability": "release_candidate"
        },
        {
          "name": "db.namespace",
          "type": "string",
          "brief": "The name of the database, fully qualified within the server address and port.\n",
          "examples": [
            "customers",
            "test.users"
          ],
          "requirement_level": {
            "conditionally_required": "If available."
          },
          "stability": "release_candidate"
        },
        {
          "name": "db.cosmosdb.sub_status_code",
          "type": "int",
          "brief": "Deprecated, use `azure.cosmosdb.response.sub_status_code` instead.",
          "examples": [
            1000,
            1002
          ],
          "requirement_level": {
            "conditionally_required": "when response was received and contained sub-code."
          },
          "stability": "development",
          "deprecated": {
            "reason": "uncategorized",
            "note": "Replaced by `azure.cosmosdb.response.sub_status_code`."
          }
        },
        {
          "name": "db.cosmosdb.consistency_level",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "strong",
                "value": "Strong",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "bounded_staleness",
                "value": "BoundedStaleness",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "session",
                "value": "Session",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "eventual",
                "value": "Eventual",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "consistent_prefix",
                "value": "ConsistentPrefix",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "Deprecated, use `cosmosdb.consistency.level` instead.",
          "examples": [
            "Eventual",
            "ConsistentPrefix",
            "BoundedStaleness",
            "Strong",
            "Session"
          ],
          "requirement_level": {
            "conditionally_required": "If available."
          },
          "stability": "development",
          "deprecated": {
            "reason": "uncategorized",
            "note": "Replaced by `azure.cosmosdb.consistency.level`."
          }
        },
        {
          "name": "db.cosmosdb.regions_contacted",
          "type": "string[]",
          "brief": "Deprecated, use `azure.cosmosdb.operation.contacted_regions` instead.",
          "examples": [
            [
              "North Central US",
              "Australia East",
              "Australia Southeast"
            ]
          ],
          "requirement_level": {
            "recommended": "If available"
          },
          "stability": "development",
          "deprecated": {
            "reason": "uncategorized",
            "note": "Replaced by `azure.cosmosdb.operation.contacted_regions`."
          }
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "db.client.cosmosdb.operation.request_charge",
      "instrument": "histogram",
      "unit": "{request_unit}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/database/deprecated/metrics-deprecated.yaml",
        "attributes": {
          "db.collection.name": {
            "source_group": "registry.db",
            "inherited_fields": [
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "requirement_level"
            ]
          },
          "db.cosmosdb.consistency_level": {
            "source_group": "registry.db.deprecated",
            "inherited_fields": [
              "brief",
              "deprecated",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "db.cosmosdb.regions_contacted": {
            "source_group": "registry.db.deprecated",
            "inherited_fields": [
              "brief",
              "deprecated",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "db.cosmosdb.sub_status_code": {
            "source_group": "registry.db.deprecated",
            "inherited_fields": [
              "brief",
              "deprecated",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "db.namespace": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ]
          },
          "db.operation.name": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.db.client.cosmosdb.active_instance.count",
      "type": "metric",
      "brief": "Deprecated, use `azure.cosmosdb.client.active_instance.count` instead.",
      "stability": "development",
      "deprecated": {
        "reason": "uncategorized",
        "note": "Replaced by `azure.cosmosdb.client.active_instance.count`."
      },
      "attributes": [
        {
          "name": "server.address",
          "type": "string",
          "brief": "Name of the database host.\n",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "recommended",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": {
            "conditionally_required": "If using a port other than the default port for this DBMS and if `server.address` is set."
          },
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "db.client.cosmosdb.active_instance.count",
      "instrument": "updowncounter",
      "unit": "{instance}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/database/deprecated/metrics-deprecated.yaml",
        "attributes": {
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.nodejs.eventloop.delay.min",
      "type": "metric",
      "brief": "Event loop minimum delay.",
      "note": "Value can be retrieved from value `histogram.min` of [`perf_hooks.monitorEventLoopDelay([options])`](https://nodejs.org/api/perf_hooks.html#perf_hooksmonitoreventloopdelayoptions)\n",
      "stability": "development",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "nodejs.eventloop.delay.min",
      "instrument": "gauge",
      "unit": "s",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/nodejs/metrics.yaml"
      }
    },
    {
      "id": "metric.nodejs.eventloop.delay.max",
      "type": "metric",
      "brief": "Event loop maximum delay.",
      "note": "Value can be retrieved from value `histogram.max` of [`perf_hooks.monitorEventLoopDelay([options])`](https://nodejs.org/api/perf_hooks.html#perf_hooksmonitoreventloopdelayoptions)\n",
      "stability": "development",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "nodejs.eventloop.delay.max",
      "instrument": "gauge",
      "unit": "s",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/nodejs/metrics.yaml"
      }
    },
    {
      "id": "metric.nodejs.eventloop.delay.mean",
      "type": "metric",
      "brief": "Event loop mean delay.",
      "note": "Value can be retrieved from value `histogram.mean` of [`perf_hooks.monitorEventLoopDelay([options])`](https://nodejs.org/api/perf_hooks.html#perf_hooksmonitoreventloopdelayoptions)\n",
      "stability": "development",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "nodejs.eventloop.delay.mean",
      "instrument": "gauge",
      "unit": "s",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/nodejs/metrics.yaml"
      }
    },
    {
      "id": "metric.nodejs.eventloop.delay.stddev",
      "type": "metric",
      "brief": "Event loop standard deviation delay.",
      "note": "Value can be retrieved from value `histogram.stddev` of [`perf_hooks.monitorEventLoopDelay([options])`](https://nodejs.org/api/perf_hooks.html#perf_hooksmonitoreventloopdelayoptions)\n",
      "stability": "development",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "nodejs.eventloop.delay.stddev",
      "instrument": "gauge",
      "unit": "s",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/nodejs/metrics.yaml"
      }
    },
    {
      "id": "metric.nodejs.eventloop.delay.p50",
      "type": "metric",
      "brief": "Event loop 50 percentile delay.",
      "note": "Value can be retrieved from value `histogram.percentile(50)` of [`perf_hooks.monitorEventLoopDelay([options])`](https://nodejs.org/api/perf_hooks.html#perf_hooksmonitoreventloopdelayoptions)\n",
      "stability": "development",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "nodejs.eventloop.delay.p50",
      "instrument": "gauge",
      "unit": "s",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/nodejs/metrics.yaml"
      }
    },
    {
      "id": "metric.nodejs.eventloop.delay.p90",
      "type": "metric",
      "brief": "Event loop 90 percentile delay.",
      "note": "Value can be retrieved from value `histogram.percentile(90)` of [`perf_hooks.monitorEventLoopDelay([options])`](https://nodejs.org/api/perf_hooks.html#perf_hooksmonitoreventloopdelayoptions)\n",
      "stability": "development",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "nodejs.eventloop.delay.p90",
      "instrument": "gauge",
      "unit": "s",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/nodejs/metrics.yaml"
      }
    },
    {
      "id": "metric.nodejs.eventloop.delay.p99",
      "type": "metric",
      "brief": "Event loop 99 percentile delay.",
      "note": "Value can be retrieved from value `histogram.percentile(99)` of [`perf_hooks.monitorEventLoopDelay([options])`](https://nodejs.org/api/perf_hooks.html#perf_hooksmonitoreventloopdelayoptions)\n",
      "stability": "development",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "nodejs.eventloop.delay.p99",
      "instrument": "gauge",
      "unit": "s",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/nodejs/metrics.yaml"
      }
    },
    {
      "id": "metric.nodejs.eventloop.utilization",
      "type": "metric",
      "brief": "Event loop utilization.",
      "note": "The value range is [0.0, 1.0] and can be retrieved from [`performance.eventLoopUtilization([utilization1[, utilization2]])`](https://nodejs.org/api/perf_hooks.html#performanceeventlooputilizationutilization1-utilization2)\n",
      "stability": "development",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "nodejs.eventloop.utilization",
      "instrument": "gauge",
      "unit": "1",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/nodejs/metrics.yaml"
      }
    },
    {
      "id": "metric.nodejs.eventloop.time",
      "type": "metric",
      "brief": "Cumulative duration of time the event loop has been in each state.",
      "note": "Value can be retrieved from [`performance.eventLoopUtilization([utilization1[, utilization2]])`](https://nodejs.org/api/perf_hooks.html#performanceeventlooputilizationutilization1-utilization2)\n",
      "stability": "development",
      "attributes": [
        {
          "name": "nodejs.eventloop.state",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "active",
                "value": "active",
                "brief": "Active time.",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "idle",
                "value": "idle",
                "brief": "Idle time.",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The state of event loop time.",
          "requirement_level": "required",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "nodejs.eventloop.time",
      "instrument": "counter",
      "unit": "s",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/nodejs/metrics.yaml",
        "attributes": {
          "nodejs.eventloop.state": {
            "source_group": "registry.nodejs",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.hw.host.ambient_temperature",
      "type": "metric",
      "brief": "Ambient (external) temperature of the physical host",
      "stability": "development",
      "attributes": [
        {
          "name": "hw.name",
          "type": "string",
          "brief": "An easily-recognizable name for the hardware component\n",
          "examples": [
            "eth0"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "hw.parent",
          "type": "string",
          "brief": "Unique identifier of the parent component (typically the `hw.id` attribute of the enclosure, or disk controller)\n",
          "examples": [
            "dellStorage_perc_0"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "hw.id",
          "type": "string",
          "brief": "An identifier for the hardware component, unique within the monitored host\n",
          "examples": [
            "win32battery_battery_testsysa33_1"
          ],
          "requirement_level": "required",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "hw.host.ambient_temperature",
      "instrument": "gauge",
      "unit": "Cel",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/hardware/host-metrics.yaml",
        "attributes": {
          "hw.id": {
            "source_group": "registry.hardware",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "hw.name": {
            "source_group": "registry.hardware",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "hw.parent": {
            "source_group": "registry.hardware",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.hw.host.energy",
      "type": "metric",
      "brief": "Total energy consumed by the entire physical host, in joules",
      "note": "The overall energy usage of a host MUST be reported using the specific `hw.host.energy` and `hw.host.power` metrics **only**, instead of the generic `hw.energy` and `hw.power` described in the previous section, to prevent summing up overlapping values.\n",
      "stability": "development",
      "attributes": [
        {
          "name": "hw.name",
          "type": "string",
          "brief": "An easily-recognizable name for the hardware component\n",
          "examples": [
            "eth0"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "hw.parent",
          "type": "string",
          "brief": "Unique identifier of the parent component (typically the `hw.id` attribute of the enclosure, or disk controller)\n",
          "examples": [
            "dellStorage_perc_0"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "hw.id",
          "type": "string",
          "brief": "An identifier for the hardware component, unique within the monitored host\n",
          "examples": [
            "win32battery_battery_testsysa33_1"
          ],
          "requirement_level": "required",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "hw.host.energy",
      "instrument": "counter",
      "unit": "J",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/hardware/host-metrics.yaml",
        "attributes": {
          "hw.id": {
            "source_group": "registry.hardware",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "hw.name": {
            "source_group": "registry.hardware",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "hw.parent": {
            "source_group": "registry.hardware",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.hw.host.heating_margin",
      "type": "metric",
      "brief": "By how many degrees Celsius the temperature of the physical host can be increased, before reaching a warning threshold on one of the internal sensors\n",
      "stability": "development",
      "attributes": [
        {
          "name": "hw.name",
          "type": "string",
          "brief": "An easily-recognizable name for the hardware component\n",
          "examples": [
            "eth0"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "hw.parent",
          "type": "string",
          "brief": "Unique identifier of the parent component (typically the `hw.id` attribute of the enclosure, or disk controller)\n",
          "examples": [
            "dellStorage_perc_0"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "hw.id",
          "type": "string",
          "brief": "An identifier for the hardware component, unique within the monitored host\n",
          "examples": [
            "win32battery_battery_testsysa33_1"
          ],
          "requirement_level": "required",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "hw.host.heating_margin",
      "instrument": "gauge",
      "unit": "Cel",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/hardware/host-metrics.yaml",
        "attributes": {
          "hw.id": {
            "source_group": "registry.hardware",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "hw.name": {
            "source_group": "registry.hardware",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "hw.parent": {
            "source_group": "registry.hardware",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.hw.host.power",
      "type": "metric",
      "brief": "Instantaneous power consumed by the entire physical host in Watts (`hw.host.energy` is preferred)\n",
      "note": "The overall energy usage of a host MUST be reported using the specific `hw.host.energy` and `hw.host.power` metrics **only**, instead of the generic `hw.energy` and `hw.power` described in the previous section, to prevent summing up overlapping values.\n",
      "stability": "development",
      "attributes": [
        {
          "name": "hw.name",
          "type": "string",
          "brief": "An easily-recognizable name for the hardware component\n",
          "examples": [
            "eth0"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "hw.parent",
          "type": "string",
          "brief": "Unique identifier of the parent component (typically the `hw.id` attribute of the enclosure, or disk controller)\n",
          "examples": [
            "dellStorage_perc_0"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "hw.id",
          "type": "string",
          "brief": "An identifier for the hardware component, unique within the monitored host\n",
          "examples": [
            "win32battery_battery_testsysa33_1"
          ],
          "requirement_level": "required",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "hw.host.power",
      "instrument": "gauge",
      "unit": "W",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/hardware/host-metrics.yaml",
        "attributes": {
          "hw.id": {
            "source_group": "registry.hardware",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "hw.name": {
            "source_group": "registry.hardware",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "hw.parent": {
            "source_group": "registry.hardware",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "registry.heroku",
      "type": "attribute_group",
      "brief": "This document defines attributes for the Android platform on which the Android application is running.\n",
      "attributes": [
        {
          "name": "heroku.release.creation_timestamp",
          "type": "string",
          "brief": "Time and date the release was created\n",
          "examples": [
            "2022-10-23T18:00:42Z"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "heroku.release.commit",
          "type": "string",
          "brief": "Commit hash for the current release\n",
          "examples": [
            "e6134959463efd8966b20e75b913cafe3f5ec"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "heroku.app.id",
          "type": "string",
          "brief": "Unique identifier for the application\n",
          "examples": [
            "2daa2797-e42b-4624-9322-ec3f968df4da"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/heroku/registry.yaml"
      },
      "display_name": "Heroku Attributes"
    },
    {
      "id": "metric.azure.cosmosdb.client.operation.request_charge",
      "type": "metric",
      "brief": "[Request units](https://learn.microsoft.com/azure/cosmos-db/request-units) consumed by the operation",
      "stability": "development",
      "attributes": [
        {
          "name": "db.namespace",
          "type": "string",
          "brief": "The name of the database, fully qualified within the server address and port.\n",
          "examples": [
            "customers",
            "test.users"
          ],
          "requirement_level": {
            "conditionally_required": "If available."
          },
          "stability": "release_candidate"
        },
        {
          "name": "server.address",
          "type": "string",
          "brief": "Name of the database host.\n",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "recommended",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": {
            "conditionally_required": "If using a port other than the default port for this DBMS and if `server.address` is set."
          },
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "db.collection.name",
          "type": "string",
          "brief": "Cosmos DB container name.\n",
          "examples": [
            "public.users",
            "customers"
          ],
          "requirement_level": {
            "conditionally_required": "If available."
          },
          "note": "It is RECOMMENDED to capture the value as provided by the application without attempting to do any case normalization.\n",
          "stability": "release_candidate"
        },
        {
          "name": "db.operation.name",
          "type": "string",
          "brief": "The name of the operation or command being executed.\n",
          "examples": [
            "findAndModify",
            "HMSET",
            "SELECT"
          ],
          "requirement_level": {
            "conditionally_required": "If readily available."
          },
          "note": "It is RECOMMENDED to capture the value as provided by the application\nwithout attempting to do any case normalization.\n\nThe operation name SHOULD NOT be extracted from `db.query.text`,\nwhen the database system supports cross-table queries in non-batch operations.\n\nFor batch operations, if the individual operations are known to have the same operation name\nthen that operation name SHOULD be used prepended by `BATCH `,\notherwise `db.operation.name` SHOULD be `BATCH` or some other database\nsystem specific term if more applicable.\n",
          "stability": "release_candidate"
        },
        {
          "name": "db.response.status_code",
          "type": "string",
          "brief": "Database response status code.",
          "examples": [
            "102",
            "ORA-17002",
            "08P01",
            "404"
          ],
          "requirement_level": {
            "conditionally_required": "If the operation failed and status code is available."
          },
          "note": "The status code returned by the database. Usually it represents an error code, but may also represent partial success, warning, or differentiate between various types of successful outcomes.\nSemantic conventions for individual database systems SHOULD document what `db.response.status_code` means in the context of that system.\n",
          "stability": "release_candidate"
        },
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "timeout",
            "java.net.UnknownHostException",
            "server_certificate_invalid",
            "500"
          ],
          "requirement_level": {
            "conditionally_required": "If and only if the operation failed."
          },
          "note": "The `error.type` SHOULD match the `db.response.status_code` returned by the database or the client library, or the canonical name of exception that occurred.\nWhen using canonical exception type name, instrumentation SHOULD do the best effort to report the most relevant type. For example, if the original exception is wrapped into a generic one, the original exception SHOULD be preferred.\nInstrumentations SHOULD document how `error.type` is populated.\n",
          "stability": "stable"
        },
        {
          "name": "azure.cosmosdb.consistency.level",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "strong",
                "value": "Strong",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "bounded_staleness",
                "value": "BoundedStaleness",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "session",
                "value": "Session",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "eventual",
                "value": "Eventual",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "consistent_prefix",
                "value": "ConsistentPrefix",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "Account or request [consistency level](https://learn.microsoft.com/azure/cosmos-db/consistency-levels).",
          "examples": [
            "Eventual",
            "ConsistentPrefix",
            "BoundedStaleness",
            "Strong",
            "Session"
          ],
          "requirement_level": {
            "conditionally_required": "If available."
          },
          "stability": "development"
        },
        {
          "name": "azure.cosmosdb.response.sub_status_code",
          "type": "int",
          "brief": "Cosmos DB sub status code.",
          "examples": [
            1000,
            1002
          ],
          "requirement_level": {
            "conditionally_required": "when response was received and contained sub-code."
          },
          "stability": "development"
        },
        {
          "name": "azure.cosmosdb.operation.contacted_regions",
          "type": "string[]",
          "brief": "List of regions contacted during operation in the order that they were contacted. If there is more than one region listed, it indicates that the operation was performed on multiple regions i.e. cross-regional call.\n",
          "examples": [
            [
              "North Central US",
              "Australia East",
              "Australia Southeast"
            ]
          ],
          "requirement_level": {
            "recommended": "If available"
          },
          "note": "Region name matches the format of `displayName` in [Azure Location API](https://learn.microsoft.com/rest/api/subscription/subscriptions/list-locations?view=rest-subscription-2021-10-01&tabs=HTTP#location)\n",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "azure.cosmosdb.client.operation.request_charge",
      "instrument": "histogram",
      "unit": "{request_unit}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/azure/cosmosdb-metrics.yaml",
        "attributes": {
          "azure.cosmosdb.consistency.level": {
            "source_group": "registry.azure.cosmosdb",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "azure.cosmosdb.operation.contacted_regions": {
            "source_group": "registry.azure.cosmosdb",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "azure.cosmosdb.response.sub_status_code": {
            "source_group": "registry.azure.cosmosdb",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "db.collection.name": {
            "source_group": "registry.db",
            "inherited_fields": [
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "note",
              "requirement_level"
            ]
          },
          "db.namespace": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ]
          },
          "db.operation.name": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "db.response.status_code": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.azure.cosmosdb.client.active_instance.count",
      "type": "metric",
      "brief": "Number of active client instances",
      "stability": "development",
      "attributes": [
        {
          "name": "server.address",
          "type": "string",
          "brief": "Name of the database host.\n",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "recommended",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": {
            "conditionally_required": "If using a port other than the default port for this DBMS and if `server.address` is set."
          },
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "azure.cosmosdb.client.active_instance.count",
      "instrument": "updowncounter",
      "unit": "{instance}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/azure/cosmosdb-metrics.yaml",
        "attributes": {
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "registry.cloudfoundry",
      "type": "attribute_group",
      "brief": "CloudFoundry resource attributes.\n",
      "attributes": [
        {
          "name": "cloudfoundry.system.id",
          "type": "string",
          "brief": "A guid or another name describing the event source.\n",
          "examples": [
            "cf/gorouter"
          ],
          "requirement_level": "recommended",
          "note": "CloudFoundry defines the `source_id` in the [Loggregator v2 envelope](https://github.com/cloudfoundry/loggregator-api#v2-envelope).\nIt is used for logs and metrics emitted by CloudFoundry. It is\nsupposed to contain the component name, e.g. \"gorouter\", for\nCloudFoundry components.\n\nWhen system components are instrumented, values from the\n[Bosh spec](https://bosh.io/docs/jobs/#properties-spec)\nshould be used. The `system.id` should be set to\n`spec.deployment/spec.name`.\n",
          "stability": "development"
        },
        {
          "name": "cloudfoundry.system.instance.id",
          "type": "string",
          "brief": "A guid describing the concrete instance of the event source.\n",
          "examples": [
            "218fc5a9-a5f1-4b54-aa05-46717d0ab26d"
          ],
          "requirement_level": "recommended",
          "note": "CloudFoundry defines the `instance_id` in the [Loggregator v2 envelope](https://github.com/cloudfoundry/loggregator-api#v2-envelope).\nIt is used for logs and metrics emitted by CloudFoundry. It is\nsupposed to contain the vm id for CloudFoundry components.\n\nWhen system components are instrumented, values from the\n[Bosh spec](https://bosh.io/docs/jobs/#properties-spec)\nshould be used. The `system.instance.id` should be set to `spec.id`.\n",
          "stability": "development"
        },
        {
          "name": "cloudfoundry.app.name",
          "type": "string",
          "brief": "The name of the application.\n",
          "examples": [
            "my-app-name"
          ],
          "requirement_level": "recommended",
          "note": "Application instrumentation should use the value from environment\nvariable `VCAP_APPLICATION.application_name`. This is the same value\nas reported by `cf apps`.\n",
          "stability": "development"
        },
        {
          "name": "cloudfoundry.app.id",
          "type": "string",
          "brief": "The guid of the application.\n",
          "examples": [
            "218fc5a9-a5f1-4b54-aa05-46717d0ab26d"
          ],
          "requirement_level": "recommended",
          "note": "Application instrumentation should use the value from environment\nvariable `VCAP_APPLICATION.application_id`. This is the same value as\nreported by `cf app <app-name> --guid`.\n",
          "stability": "development"
        },
        {
          "name": "cloudfoundry.app.instance.id",
          "type": "string",
          "brief": "The index of the application instance. 0 when just one instance is active.\n",
          "examples": [
            "0",
            "1"
          ],
          "requirement_level": "recommended",
          "note": "CloudFoundry defines the `instance_id` in the [Loggregator v2 envelope](https://github.com/cloudfoundry/loggregator-api#v2-envelope).\nIt is used for logs and metrics emitted by CloudFoundry. It is\nsupposed to contain the application instance index for applications\ndeployed on the runtime.\n\nApplication instrumentation should use the value from environment\nvariable `CF_INSTANCE_INDEX`.\n",
          "stability": "development"
        },
        {
          "name": "cloudfoundry.space.name",
          "type": "string",
          "brief": "The name of the CloudFoundry space the application is running in.\n",
          "examples": [
            "my-space-name"
          ],
          "requirement_level": "recommended",
          "note": "Application instrumentation should use the value from environment\nvariable `VCAP_APPLICATION.space_name`. This is the same value as\nreported by `cf spaces`.\n",
          "stability": "development"
        },
        {
          "name": "cloudfoundry.space.id",
          "type": "string",
          "brief": "The guid of the CloudFoundry space the application is running in.\n",
          "examples": [
            "218fc5a9-a5f1-4b54-aa05-46717d0ab26d"
          ],
          "requirement_level": "recommended",
          "note": "Application instrumentation should use the value from environment\nvariable `VCAP_APPLICATION.space_id`. This is the same value as\nreported by `cf space <space-name> --guid`.\n",
          "stability": "development"
        },
        {
          "name": "cloudfoundry.org.name",
          "type": "string",
          "brief": "The name of the CloudFoundry organization the app is running in.\n",
          "examples": [
            "my-org-name"
          ],
          "requirement_level": "recommended",
          "note": "Application instrumentation should use the value from environment\nvariable `VCAP_APPLICATION.org_name`. This is the same value as\nreported by `cf orgs`.\n",
          "stability": "development"
        },
        {
          "name": "cloudfoundry.org.id",
          "type": "string",
          "brief": "The guid of the CloudFoundry org the application is running in.\n",
          "examples": [
            "218fc5a9-a5f1-4b54-aa05-46717d0ab26d"
          ],
          "requirement_level": "recommended",
          "note": "Application instrumentation should use the value from environment\nvariable `VCAP_APPLICATION.org_id`. This is the same value as\nreported by `cf org <org-name> --guid`.\n",
          "stability": "development"
        },
        {
          "name": "cloudfoundry.process.id",
          "type": "string",
          "brief": "The UID identifying the process.\n",
          "examples": [
            "218fc5a9-a5f1-4b54-aa05-46717d0ab26d"
          ],
          "requirement_level": "recommended",
          "note": "Application instrumentation should use the value from environment\nvariable `VCAP_APPLICATION.process_id`. It is supposed to be equal to\n`VCAP_APPLICATION.app_id` for applications deployed to the runtime.\nFor system components, this could be the actual PID.\n",
          "stability": "development"
        },
        {
          "name": "cloudfoundry.process.type",
          "type": "string",
          "brief": "The type of process.\n",
          "examples": [
            "web"
          ],
          "requirement_level": "recommended",
          "note": "CloudFoundry applications can consist of multiple jobs. Usually the\nmain process will be of type `web`. There can be additional background\ntasks or side-cars with different process types.\n",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/cloudfoundry/registry.yaml"
      },
      "display_name": "CloudFoundry Attributes"
    },
    {
      "id": "registry.source",
      "type": "attribute_group",
      "brief": "These attributes may be used to describe the sender of a network exchange/packet. These should be used when there is no client/server relationship between the two sides, or when that relationship is unknown. This covers low-level network interactions (e.g. packet tracing) where you don't know if there was a connection or which side initiated it. This also covers unidirectional UDP flows and peer-to-peer communication where the \"user-facing\" surface of the protocol / API doesn't expose a clear notion of client and server.\n",
      "attributes": [
        {
          "name": "source.address",
          "type": "string",
          "brief": "Source address - domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "source.example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "recommended",
          "note": "When observed from the destination side, and when communicating through an intermediary, `source.address` SHOULD represent the source address behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "development"
        },
        {
          "name": "source.port",
          "type": "int",
          "brief": "Source port number",
          "examples": [
            3389,
            2888
          ],
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/source/registry.yaml"
      },
      "display_name": "Source Attributes"
    },
    {
      "id": "faas.attributes",
      "type": "attribute_group",
      "brief": "This semantic convention describes an instance of a function that runs without provisioning or managing of servers (also known as serverless functions or Function as a Service (FaaS)) with spans.\n",
      "stability": "development",
      "attributes": [
        {
          "name": "cloud.resource_id",
          "type": "string",
          "brief": "Cloud provider-specific native identifier of the monitored cloud resource (e.g. an [ARN](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) on AWS, a [fully qualified resource ID](https://learn.microsoft.com/rest/api/resources/resources/get-by-id) on Azure, a [full resource name](https://google.aip.dev/122#full-resource-names) on GCP)\n",
          "examples": [
            "arn:aws:lambda:REGION:ACCOUNT_ID:function:my-function",
            "//run.googleapis.com/projects/PROJECT_ID/locations/LOCATION_ID/services/SERVICE_ID",
            "/subscriptions/<SUBSCRIPTION_GUID>/resourceGroups/<RG>/providers/Microsoft.Web/sites/<FUNCAPP>/functions/<FUNC>"
          ],
          "requirement_level": "recommended",
          "note": "On some cloud providers, it may not be possible to determine the full ID at startup,\nso it may be necessary to set `cloud.resource_id` as a span attribute instead.\n\nThe exact value to use for `cloud.resource_id` depends on the cloud provider.\nThe following well-known definitions MUST be used if you set this attribute and they apply:\n\n- **AWS Lambda:** The function [ARN](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html).\n  Take care not to use the \"invoked ARN\" directly but replace any\n  [alias suffix](https://docs.aws.amazon.com/lambda/latest/dg/configuration-aliases.html)\n  with the resolved function version, as the same runtime instance may be invocable with\n  multiple different aliases.\n- **GCP:** The [URI of the resource](https://cloud.google.com/iam/docs/full-resource-names)\n- **Azure:** The [Fully Qualified Resource ID](https://docs.microsoft.com/rest/api/resources/resources/get-by-id) of the invoked function,\n  *not* the function app, having the form\n  `/subscriptions/<SUBSCRIPTION_GUID>/resourceGroups/<RG>/providers/Microsoft.Web/sites/<FUNCAPP>/functions/<FUNC>`.\n  This means that a span attribute MUST be used, as an Azure function app can host multiple functions that would usually share\n  a TracerProvider.\n",
          "stability": "development"
        },
        {
          "name": "faas.invocation_id",
          "type": "string",
          "brief": "The invocation ID of the current function invocation.\n",
          "examples": "af9d5aa4-a685-4c5f-a22b-444f80b3cc28",
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "faas.trigger",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "datasource",
                "value": "datasource",
                "brief": "A response to some data source operation such as a database or filesystem read/write",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "http",
                "value": "http",
                "brief": "To provide an answer to an inbound HTTP request",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "pubsub",
                "value": "pubsub",
                "brief": "A function is set to be executed when messages are sent to a messaging system",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "timer",
                "value": "timer",
                "brief": "A function is scheduled to be executed regularly",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "other",
                "value": "other",
                "brief": "If none of the others apply",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "Type of the trigger which caused this function invocation.\n",
          "requirement_level": "recommended",
          "note": "For the server/consumer span on the incoming side,\n`faas.trigger` MUST be set.\n\nClients invoking FaaS instances usually cannot set `faas.trigger`,\nsince they would typically need to look in the payload to determine\nthe event type. If clients set it, it should be the same as the\ntrigger that corresponding incoming would have (i.e., this has\nnothing to do with the underlying transport used to make the API\ncall to invoke the lambda, which is often HTTP).\n",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/faas/spans.yaml",
        "attributes": {
          "cloud.resource_id": {
            "source_group": "registry.cloud",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "faas.invocation_id": {
            "source_group": "registry.faas",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "faas.trigger": {
            "source_group": "registry.faas",
            "inherited_fields": [
              "brief",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "note"
            ]
          }
        }
      }
    },
    {
      "id": "span.faas.datasource.server",
      "type": "span",
      "brief": "Semantic Convention for FaaS triggered as a response to some data source operation such as a database or filesystem read/write.\n",
      "stability": "development",
      "attributes": [
        {
          "name": "faas.document.time",
          "type": "string",
          "brief": "A string containing the time when the data was accessed in the [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format expressed in [UTC](https://www.w3.org/TR/NOTE-datetime).\n",
          "examples": "2020-01-23T13:47:06Z",
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "faas.document.name",
          "type": "string",
          "brief": "The document name/table subjected to the operation. For example, in Cloud Storage or S3 is the name of the file, and in Cosmos DB the table name.\n",
          "examples": [
            "myFile.txt",
            "myTableName"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "faas.document.collection",
          "type": "string",
          "brief": "The name of the source on which the triggering operation was performed. For example, in Cloud Storage or S3 corresponds to the bucket name, and in Cosmos DB to the database name.\n",
          "examples": [
            "myBucketName",
            "myDbName"
          ],
          "requirement_level": "required",
          "stability": "development"
        },
        {
          "name": "faas.document.operation",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "insert",
                "value": "insert",
                "brief": "When a new object is created.",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "edit",
                "value": "edit",
                "brief": "When an object is modified.",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "delete",
                "value": "delete",
                "brief": "When an object is deleted.",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes the type of the operation that was performed on the data.",
          "requirement_level": "required",
          "stability": "development"
        }
      ],
      "span_kind": "server",
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/faas/spans.yaml",
        "attributes": {
          "faas.document.collection": {
            "source_group": "registry.faas",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "faas.document.name": {
            "source_group": "registry.faas",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "faas.document.operation": {
            "source_group": "registry.faas",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "faas.document.time": {
            "source_group": "registry.faas",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "span.faas.timer.server",
      "type": "span",
      "brief": "Semantic Convention for FaaS scheduled to be executed regularly.\n",
      "stability": "development",
      "attributes": [
        {
          "name": "faas.time",
          "type": "string",
          "brief": "A string containing the function invocation time in the [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format expressed in [UTC](https://www.w3.org/TR/NOTE-datetime).\n",
          "examples": "2020-01-23T13:47:06Z",
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "faas.cron",
          "type": "string",
          "brief": "A string containing the schedule period as [Cron Expression](https://docs.oracle.com/cd/E12058_01/doc/doc.1014/e12030/cron_expressions.htm).\n",
          "examples": "0/5 * * * ? *",
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": "server",
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/faas/spans.yaml",
        "attributes": {
          "faas.cron": {
            "source_group": "registry.faas",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "faas.time": {
            "source_group": "registry.faas",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "span.faas.server",
      "type": "span",
      "brief": "Describes an incoming FaaS span.\n",
      "stability": "development",
      "attributes": [
        {
          "name": "faas.coldstart",
          "type": "boolean",
          "brief": "A boolean that is true if the serverless function is executed for the first time (aka cold-start).\n",
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "faas.trigger",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "datasource",
                "value": "datasource",
                "brief": "A response to some data source operation such as a database or filesystem read/write",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "http",
                "value": "http",
                "brief": "To provide an answer to an inbound HTTP request",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "pubsub",
                "value": "pubsub",
                "brief": "A function is set to be executed when messages are sent to a messaging system",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "timer",
                "value": "timer",
                "brief": "A function is scheduled to be executed regularly",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "other",
                "value": "other",
                "brief": "If none of the others apply",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "Type of the trigger which caused this function invocation.\n",
          "requirement_level": "required",
          "note": "For the server/consumer span on the incoming side,\n`faas.trigger` MUST be set.\n\nClients invoking FaaS instances usually cannot set `faas.trigger`,\nsince they would typically need to look in the payload to determine\nthe event type. If clients set it, it should be the same as the\ntrigger that corresponding incoming would have (i.e., this has\nnothing to do with the underlying transport used to make the API\ncall to invoke the lambda, which is often HTTP).\n",
          "stability": "development"
        }
      ],
      "span_kind": "server",
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/faas/spans.yaml",
        "attributes": {
          "faas.coldstart": {
            "source_group": "registry.faas",
            "inherited_fields": [
              "brief",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "faas.trigger": {
            "source_group": "registry.faas",
            "inherited_fields": [
              "brief",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "span.faas.client",
      "type": "span",
      "brief": "Contains additional attributes for outgoing FaaS spans.\n",
      "stability": "development",
      "attributes": [
        {
          "name": "faas.invoked_name",
          "type": "string",
          "brief": "The name of the invoked function.\n",
          "examples": "my-function",
          "requirement_level": "required",
          "note": "SHOULD be equal to the `faas.name` resource attribute of the invoked function.\n",
          "stability": "development"
        },
        {
          "name": "faas.invoked_provider",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "alibaba_cloud",
                "value": "alibaba_cloud",
                "brief": "Alibaba Cloud",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "aws",
                "value": "aws",
                "brief": "Amazon Web Services",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "azure",
                "value": "azure",
                "brief": "Microsoft Azure",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "gcp",
                "value": "gcp",
                "brief": "Google Cloud Platform",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "tencent_cloud",
                "value": "tencent_cloud",
                "brief": "Tencent Cloud",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The cloud provider of the invoked function.\n",
          "requirement_level": "required",
          "note": "SHOULD be equal to the `cloud.provider` resource attribute of the invoked function.\n",
          "stability": "development"
        },
        {
          "name": "faas.invoked_region",
          "type": "string",
          "brief": "The cloud region of the invoked function.\n",
          "examples": "eu-central-1",
          "requirement_level": {
            "conditionally_required": "For some cloud providers, like AWS or GCP, the region in which a function is hosted is essential to uniquely identify the function and also part of its endpoint. Since it's part of the endpoint being called, the region is always known to clients. In these cases, `faas.invoked_region` MUST be set accordingly. If the region is unknown to the client or not required for identifying the invoked function, setting `faas.invoked_region` is optional.\n"
          },
          "note": "SHOULD be equal to the `cloud.region` resource attribute of the invoked function.\n",
          "stability": "development"
        }
      ],
      "span_kind": "client",
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/faas/spans.yaml",
        "attributes": {
          "faas.invoked_name": {
            "source_group": "registry.faas",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "faas.invoked_provider": {
            "source_group": "registry.faas",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "faas.invoked_region": {
            "source_group": "registry.faas",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "registry.jvm",
      "type": "attribute_group",
      "brief": "This document defines Java Virtual machine related attributes.\n",
      "attributes": [
        {
          "name": "jvm.gc.action",
          "type": "string",
          "brief": "Name of the garbage collector action.",
          "examples": [
            "end of minor GC",
            "end of major GC"
          ],
          "requirement_level": "recommended",
          "note": "Garbage collector action is generally obtained via [GarbageCollectionNotificationInfo#getGcAction()](https://docs.oracle.com/en/java/javase/11/docs/api/jdk.management/com/sun/management/GarbageCollectionNotificationInfo.html#getGcAction()).\n",
          "stability": "stable"
        },
        {
          "name": "jvm.gc.name",
          "type": "string",
          "brief": "Name of the garbage collector.",
          "examples": [
            "G1 Young Generation",
            "G1 Old Generation"
          ],
          "requirement_level": "recommended",
          "note": "Garbage collector name is generally obtained via [GarbageCollectionNotificationInfo#getGcName()](https://docs.oracle.com/en/java/javase/11/docs/api/jdk.management/com/sun/management/GarbageCollectionNotificationInfo.html#getGcName()).\n",
          "stability": "stable"
        },
        {
          "name": "jvm.memory.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "heap",
                "value": "heap",
                "brief": "Heap memory.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "non_heap",
                "value": "non_heap",
                "brief": "Non-heap memory",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "The type of memory.",
          "examples": [
            "heap",
            "non_heap"
          ],
          "requirement_level": "recommended",
          "stability": "stable"
        },
        {
          "name": "jvm.memory.pool.name",
          "type": "string",
          "brief": "Name of the memory pool.",
          "examples": [
            "G1 Old Gen",
            "G1 Eden space",
            "G1 Survivor Space"
          ],
          "requirement_level": "recommended",
          "note": "Pool names are generally obtained via [MemoryPoolMXBean#getName()](https://docs.oracle.com/en/java/javase/11/docs/api/java.management/java/lang/management/MemoryPoolMXBean.html#getName()).\n",
          "stability": "stable"
        },
        {
          "name": "jvm.thread.daemon",
          "type": "boolean",
          "brief": "Whether the thread is daemon or not.",
          "requirement_level": "recommended",
          "stability": "stable"
        },
        {
          "name": "jvm.thread.state",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "new",
                "value": "new",
                "brief": "A thread that has not yet started is in this state.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "runnable",
                "value": "runnable",
                "brief": "A thread executing in the Java virtual machine is in this state.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "blocked",
                "value": "blocked",
                "brief": "A thread that is blocked waiting for a monitor lock is in this state.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "waiting",
                "value": "waiting",
                "brief": "A thread that is waiting indefinitely for another thread to perform a particular action is in this state.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "timed_waiting",
                "value": "timed_waiting",
                "brief": "A thread that is waiting for another thread to perform an action for up to a specified waiting time is in this state.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "terminated",
                "value": "terminated",
                "brief": "A thread that has exited is in this state.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "State of the thread.",
          "examples": [
            "runnable",
            "blocked"
          ],
          "requirement_level": "recommended",
          "stability": "stable"
        },
        {
          "name": "jvm.buffer.pool.name",
          "type": "string",
          "brief": "Name of the buffer pool.",
          "examples": [
            "mapped",
            "direct"
          ],
          "requirement_level": "recommended",
          "note": "Pool names are generally obtained via [BufferPoolMXBean#getName()](https://docs.oracle.com/en/java/javase/11/docs/api/java.management/java/lang/management/BufferPoolMXBean.html#getName()).\n",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/jvm/registry.yaml"
      },
      "display_name": "Java Virtual Machine (JVM) Attributes"
    },
    {
      "id": "otel_span",
      "type": "attribute_group",
      "brief": "Span attributes used by non-OTLP exporters or on metrics to represent OpenTelemetry Span's concepts.",
      "attributes": [
        {
          "name": "otel.status_code",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "ok",
                "value": "OK",
                "brief": "The operation has been validated by an Application developer or Operator to have completed successfully.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "error",
                "value": "ERROR",
                "brief": "The operation contains an error.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Name of the code, either \"OK\" or \"ERROR\". MUST NOT be set if the status code is UNSET.",
          "requirement_level": "recommended",
          "stability": "stable"
        },
        {
          "name": "otel.status_description",
          "type": "string",
          "brief": "Description of the Status if it has a value, otherwise not set.",
          "examples": [
            "resource not found"
          ],
          "requirement_level": "recommended",
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/otel/common.yaml",
        "attributes": {
          "otel.status_code": {
            "source_group": "registry.otel",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "otel.status_description": {
            "source_group": "registry.otel",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "registry.gcp.client",
      "type": "attribute_group",
      "brief": "Attributes for Google Cloud client libraries.\n",
      "attributes": [
        {
          "name": "gcp.client.service",
          "type": "string",
          "brief": "Identifies the Google Cloud service for which the official client library is intended.",
          "examples": [
            "appengine",
            "run",
            "firestore",
            "alloydb",
            "spanner"
          ],
          "requirement_level": "recommended",
          "note": "Intended to be a stable identifier for Google Cloud client libraries that is uniform across implementation languages. The value should be derived from the canonical service domain for the service; for example, 'foo.googleapis.com' should result in a value of 'foo'.\n",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/gcp/registry.yaml"
      },
      "display_name": "GCP Client Attributes"
    },
    {
      "id": "registry.gcp.cloud_run",
      "type": "attribute_group",
      "brief": "This document defines attributes for Google Cloud Run.\n",
      "attributes": [
        {
          "name": "gcp.cloud_run.job.execution",
          "type": "string",
          "brief": "The name of the Cloud Run [execution](https://cloud.google.com/run/docs/managing/job-executions) being run for the Job, as set by the [`CLOUD_RUN_EXECUTION`](https://cloud.google.com/run/docs/container-contract#jobs-env-vars) environment variable.\n",
          "examples": [
            "job-name-xxxx",
            "sample-job-mdw84"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "gcp.cloud_run.job.task_index",
          "type": "int",
          "brief": "The index for a task within an execution as provided by the [`CLOUD_RUN_TASK_INDEX`](https://cloud.google.com/run/docs/container-contract#jobs-env-vars) environment variable.\n",
          "examples": [
            0,
            1
          ],
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/gcp/registry.yaml"
      },
      "display_name": "GCP - Google Cloud Run Attributes"
    },
    {
      "id": "registry.gcp.gce",
      "type": "attribute_group",
      "brief": "This document defines attributes for Google Compute Engine (GCE).\n",
      "attributes": [
        {
          "name": "gcp.gce.instance.name",
          "type": "string",
          "brief": "The instance name of a GCE instance. This is the value provided by `host.name`, the visible name of the instance in the Cloud Console UI, and the prefix for the default hostname of the instance as defined by the [default internal DNS name](https://cloud.google.com/compute/docs/internal-dns#instance-fully-qualified-domain-names).\n",
          "examples": [
            "instance-1",
            "my-vm-name"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "gcp.gce.instance.hostname",
          "type": "string",
          "brief": "The hostname of a GCE instance. This is the full value of the default or [custom hostname](https://cloud.google.com/compute/docs/instances/custom-hostname-vm).\n",
          "examples": [
            "my-host1234.example.com",
            "sample-vm.us-west1-b.c.my-project.internal"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/gcp/registry.yaml"
      },
      "display_name": "GCP - Google Compute Engine (GCE) Attributes"
    },
    {
      "id": "registry.url",
      "type": "attribute_group",
      "brief": "Attributes describing URL.",
      "attributes": [
        {
          "name": "url.domain",
          "type": "string",
          "brief": "Domain extracted from the `url.full`, such as \"opentelemetry.io\".\n",
          "examples": [
            "www.foo.bar",
            "opentelemetry.io",
            "3.12.167.2",
            "[1080:0:0:0:8:800:200C:417A]"
          ],
          "requirement_level": "recommended",
          "note": "In some cases a URL may refer to an IP and/or port directly, without a domain name. In this case, the IP address would go to the domain field. If the URL contains a [literal IPv6 address](https://www.rfc-editor.org/rfc/rfc2732#section-2) enclosed by `[` and `]`, the `[` and `]` characters should also be captured in the domain field.\n",
          "stability": "development"
        },
        {
          "name": "url.extension",
          "type": "string",
          "brief": "The file extension extracted from the `url.full`, excluding the leading dot.\n",
          "examples": [
            "png",
            "gz"
          ],
          "requirement_level": "recommended",
          "note": "The file extension is only set if it exists, as not every url has a file extension. When the file name has multiple extensions `example.tar.gz`, only the last one should be captured `gz`, not `tar.gz`.\n",
          "stability": "development"
        },
        {
          "name": "url.fragment",
          "type": "string",
          "brief": "The [URI fragment](https://www.rfc-editor.org/rfc/rfc3986#section-3.5) component\n",
          "examples": [
            "SemConv"
          ],
          "requirement_level": "recommended",
          "stability": "stable"
        },
        {
          "name": "url.full",
          "type": "string",
          "brief": "Absolute URL describing a network resource according to [RFC3986](https://www.rfc-editor.org/rfc/rfc3986)",
          "examples": [
            "https://www.foo.bar/search?q=OpenTelemetry#SemConv",
            "//localhost"
          ],
          "requirement_level": "recommended",
          "note": "For network calls, URL usually has `scheme://host[:port][path][?query][#fragment]` format, where the fragment\nis not transmitted over HTTP, but if it is known, it SHOULD be included nevertheless.\n\n`url.full` MUST NOT contain credentials passed via URL in form of `https://username:password@www.example.com/`.\nIn such case username and password SHOULD be redacted and attribute's value SHOULD be `https://REDACTED:REDACTED@www.example.com/`.\n\n`url.full` SHOULD capture the absolute URL when it is available (or can be reconstructed).\n\nSensitive content provided in `url.full` SHOULD be scrubbed when instrumentations can identify it.\n\n![Development](https://img.shields.io/badge/-development-blue)\nQuery string values for the following keys SHOULD be redacted by default and replaced by the\nvalue `REDACTED`:\n\n* [`AWSAccessKeyId`](https://docs.aws.amazon.com/AmazonS3/latest/userguide/RESTAuthentication.html#RESTAuthenticationQueryStringAuth)\n* [`Signature`](https://docs.aws.amazon.com/AmazonS3/latest/userguide/RESTAuthentication.html#RESTAuthenticationQueryStringAuth)\n* [`sig`](https://learn.microsoft.com/azure/storage/common/storage-sas-overview#sas-token)\n* [`X-Goog-Signature`](https://cloud.google.com/storage/docs/access-control/signed-urls)\n\nThis list is subject to change over time.\n\nWhen a query string value is redacted, the query string key SHOULD still be preserved, e.g.\n`https://www.example.com/path?color=blue&sig=REDACTED`.\n",
          "stability": "stable"
        },
        {
          "name": "url.original",
          "type": "string",
          "brief": "Unmodified original URL as seen in the event source.\n",
          "examples": [
            "https://www.foo.bar/search?q=OpenTelemetry#SemConv",
            "search?q=OpenTelemetry"
          ],
          "requirement_level": "recommended",
          "note": "In network monitoring, the observed URL may be a full URL, whereas in access logs, the URL is often just represented as a path. This field is meant to represent the URL as it was observed, complete or not.\n`url.original` might contain credentials passed via URL in form of `https://username:password@www.example.com/`. In such case password and username SHOULD NOT be redacted and attribute's value SHOULD remain the same.\n",
          "stability": "development"
        },
        {
          "name": "url.path",
          "type": "string",
          "brief": "The [URI path](https://www.rfc-editor.org/rfc/rfc3986#section-3.3) component\n",
          "examples": [
            "/search"
          ],
          "requirement_level": "recommended",
          "note": "Sensitive content provided in `url.path` SHOULD be scrubbed when instrumentations can identify it.\n",
          "stability": "stable"
        },
        {
          "name": "url.port",
          "type": "int",
          "brief": "Port extracted from the `url.full`\n",
          "examples": [
            443
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "url.query",
          "type": "string",
          "brief": "The [URI query](https://www.rfc-editor.org/rfc/rfc3986#section-3.4) component\n",
          "examples": [
            "q=OpenTelemetry"
          ],
          "requirement_level": "recommended",
          "note": "Sensitive content provided in `url.query` SHOULD be scrubbed when instrumentations can identify it.\n\n![Development](https://img.shields.io/badge/-development-blue)\nQuery string values for the following keys SHOULD be redacted by default and replaced by the value `REDACTED`:\n\n* [`AWSAccessKeyId`](https://docs.aws.amazon.com/AmazonS3/latest/userguide/RESTAuthentication.html#RESTAuthenticationQueryStringAuth)\n* [`Signature`](https://docs.aws.amazon.com/AmazonS3/latest/userguide/RESTAuthentication.html#RESTAuthenticationQueryStringAuth)\n* [`sig`](https://learn.microsoft.com/azure/storage/common/storage-sas-overview#sas-token)\n* [`X-Goog-Signature`](https://cloud.google.com/storage/docs/access-control/signed-urls)\n\nThis list is subject to change over time.\n\nWhen a query string value is redacted, the query string key SHOULD still be preserved, e.g.\n`q=OpenTelemetry&sig=REDACTED`.\n",
          "stability": "stable"
        },
        {
          "name": "url.registered_domain",
          "type": "string",
          "brief": "The highest registered url domain, stripped of the subdomain.\n",
          "examples": [
            "example.com",
            "foo.co.uk"
          ],
          "requirement_level": "recommended",
          "note": "This value can be determined precisely with the [public suffix list](https://publicsuffix.org/). For example, the registered domain for `foo.example.com` is `example.com`. Trying to approximate this by simply taking the last two labels will not work well for TLDs such as `co.uk`.\n",
          "stability": "development"
        },
        {
          "name": "url.scheme",
          "type": "string",
          "brief": "The [URI scheme](https://www.rfc-editor.org/rfc/rfc3986#section-3.1) component identifying the used protocol.\n",
          "examples": [
            "https",
            "ftp",
            "telnet"
          ],
          "requirement_level": "recommended",
          "stability": "stable"
        },
        {
          "name": "url.subdomain",
          "type": "string",
          "brief": "The subdomain portion of a fully qualified domain name includes all of the names except the host name under the registered_domain. In a partially qualified domain, or if the qualification level of the full name cannot be determined, subdomain contains all of the names below the registered domain.\n",
          "examples": [
            "east",
            "sub2.sub1"
          ],
          "requirement_level": "recommended",
          "note": "The subdomain portion of `www.east.mydomain.co.uk` is `east`. If the domain has multiple levels of subdomain, such as `sub2.sub1.example.com`, the subdomain field should contain `sub2.sub1`, with no trailing period.\n",
          "stability": "development"
        },
        {
          "name": "url.template",
          "type": "string",
          "brief": "The low-cardinality template of an [absolute path reference](https://www.rfc-editor.org/rfc/rfc3986#section-4.2).\n",
          "examples": [
            "/users/{id}",
            "/users/:id",
            "/users?id={id}"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "url.top_level_domain",
          "type": "string",
          "brief": "The effective top level domain (eTLD), also known as the domain suffix, is the last part of the domain name. For example, the top level domain for example.com is `com`.\n",
          "examples": [
            "com",
            "co.uk"
          ],
          "requirement_level": "recommended",
          "note": "This value can be determined precisely with the [public suffix list](https://publicsuffix.org/).\n",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/url/registry.yaml"
      },
      "display_name": "URL Attributes"
    },
    {
      "id": "registry.browser",
      "type": "attribute_group",
      "brief": "The web browser attributes\n",
      "attributes": [
        {
          "name": "browser.brands",
          "type": "string[]",
          "brief": "Array of brand name and version separated by a space",
          "examples": [
            [
              " Not A;Brand 99",
              "Chromium 99",
              "Chrome 99"
            ]
          ],
          "requirement_level": "recommended",
          "note": "This value is intended to be taken from the [UA client hints API](https://wicg.github.io/ua-client-hints/#interface) (`navigator.userAgentData.brands`).\n",
          "stability": "development"
        },
        {
          "name": "browser.platform",
          "type": "string",
          "brief": "The platform on which the browser is running",
          "examples": [
            "Windows",
            "macOS",
            "Android"
          ],
          "requirement_level": "recommended",
          "note": "This value is intended to be taken from the [UA client hints API](https://wicg.github.io/ua-client-hints/#interface) (`navigator.userAgentData.platform`). If unavailable, the legacy `navigator.platform` API SHOULD NOT be used instead and this attribute SHOULD be left unset in order for the values to be consistent.\nThe list of possible values is defined in the [W3C User-Agent Client Hints specification](https://wicg.github.io/ua-client-hints/#sec-ch-ua-platform). Note that some (but not all) of these values can overlap with values in the [`os.type` and `os.name` attributes](./os.md). However, for consistency, the values in the `browser.platform` attribute should capture the exact value that the user agent provides.\n",
          "stability": "development"
        },
        {
          "name": "browser.mobile",
          "type": "boolean",
          "brief": "A boolean that is true if the browser is running on a mobile device",
          "requirement_level": "recommended",
          "note": "This value is intended to be taken from the [UA client hints API](https://wicg.github.io/ua-client-hints/#interface) (`navigator.userAgentData.mobile`). If unavailable, this attribute SHOULD be left unset.\n",
          "stability": "development"
        },
        {
          "name": "browser.language",
          "type": "string",
          "brief": "Preferred language of the user using the browser",
          "examples": [
            "en",
            "en-US",
            "fr",
            "fr-FR"
          ],
          "requirement_level": "recommended",
          "note": "This value is intended to be taken from the Navigator API `navigator.language`.\n",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/browser/registry.yaml"
      },
      "display_name": "Browser Attributes"
    },
    {
      "id": "registry.vcs.repository",
      "type": "attribute_group",
      "brief": "This group defines the attributes for [Version Control Systems (VCS)](https://wikipedia.org/wiki/Version_control).\n",
      "attributes": [
        {
          "name": "vcs.repository.url.full",
          "type": "string",
          "brief": "The [canonical URL](https://support.google.com/webmasters/answer/10347851?hl=en#:~:text=A%20canonical%20URL%20is%20the,Google%20chooses%20one%20as%20canonical.) of the repository providing the complete HTTP(S) address in order to locate and identify the repository through a browser.\n",
          "examples": [
            "https://github.com/opentelemetry/open-telemetry-collector-contrib",
            "https://gitlab.com/my-org/my-project/my-projects-project/repo"
          ],
          "requirement_level": "recommended",
          "note": "In Git Version Control Systems, the canonical URL SHOULD NOT include\nthe `.git` extension.\n",
          "stability": "development"
        },
        {
          "name": "vcs.repository.name",
          "type": "string",
          "brief": "The human readable name of the repository. It SHOULD NOT include any additional identifier like Group/SubGroup in GitLab or organization in GitHub.\n",
          "examples": [
            "semantic-conventions",
            "my-cool-repo"
          ],
          "requirement_level": "recommended",
          "note": "Due to it only being the name, it can clash with forks of the same\nrepository if collecting telemetry across multiple orgs or groups in\nthe same backends.\n",
          "stability": "development"
        },
        {
          "name": "vcs.ref.base.name",
          "type": "string",
          "brief": "The name of the [reference](https://git-scm.com/docs/gitglossary#def_ref) such as **branch** or **tag** in the repository.\n",
          "examples": [
            "my-feature-branch",
            "tag-1-test"
          ],
          "requirement_level": "recommended",
          "note": "`base` refers to the starting point of a change. For example, `main`\nwould be the base reference of type branch if you've created a new\nreference of type branch from it and created new commits.\n",
          "stability": "development"
        },
        {
          "name": "vcs.ref.base.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "branch",
                "value": "branch",
                "brief": "[branch](https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddefbranchabranch)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "tag",
                "value": "tag",
                "brief": "[tag](https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddeftagatag)",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The type of the [reference](https://git-scm.com/docs/gitglossary#def_ref) in the repository.\n",
          "examples": [
            "branch",
            "tag"
          ],
          "requirement_level": "recommended",
          "note": "`base` refers to the starting point of a change. For example, `main`\nwould be the base reference of type branch if you've created a new\nreference of type branch from it and created new commits.\n",
          "stability": "development"
        },
        {
          "name": "vcs.ref.base.revision",
          "type": "string",
          "brief": "The revision, literally [revised version](https://www.merriam-webster.com/dictionary/revision), The revision most often refers to a commit object in Git, or a revision number in SVN.\n",
          "examples": [
            "9d59409acf479dfa0df1aa568182e43e43df8bbe28d60fcf2bc52e30068802cc",
            "main",
            "123",
            "HEAD"
          ],
          "requirement_level": "recommended",
          "note": "`base` refers to the starting point of a change. For example, `main`\nwould be the base reference of type branch if you've created a new\nreference of type branch from it and created new commits. The\nrevision can be a full [hash value (see\nglossary)](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.186-5.pdf),\nof the recorded change to a ref within a repository pointing to a\ncommit [commit](https://git-scm.com/docs/git-commit) object. It does\nnot necessarily have to be a hash; it can simply define a [revision\nnumber](https://svnbook.red-bean.com/en/1.7/svn.tour.revs.specifiers.html)\nwhich is an integer that is monotonically increasing. In cases where\nit is identical to the `ref.base.name`, it SHOULD still be included.\nIt is up to the implementer to decide which value to set as the\nrevision based on the VCS system and situational context.\n",
          "stability": "development"
        },
        {
          "name": "vcs.ref.head.name",
          "type": "string",
          "brief": "The name of the [reference](https://git-scm.com/docs/gitglossary#def_ref) such as **branch** or **tag** in the repository.\n",
          "examples": [
            "my-feature-branch",
            "tag-1-test"
          ],
          "requirement_level": "recommended",
          "note": "`head` refers to where you are right now; the current reference at a\ngiven time.\n",
          "stability": "development"
        },
        {
          "name": "vcs.ref.head.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "branch",
                "value": "branch",
                "brief": "[branch](https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddefbranchabranch)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "tag",
                "value": "tag",
                "brief": "[tag](https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddeftagatag)",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The type of the [reference](https://git-scm.com/docs/gitglossary#def_ref) in the repository.\n",
          "examples": [
            "branch",
            "tag"
          ],
          "requirement_level": "recommended",
          "note": "`head` refers to where you are right now; the current reference at a\ngiven time.\n",
          "stability": "development"
        },
        {
          "name": "vcs.ref.head.revision",
          "type": "string",
          "brief": "The revision, literally [revised version](https://www.merriam-webster.com/dictionary/revision), The revision most often refers to a commit object in Git, or a revision number in SVN.\n",
          "examples": [
            "9d59409acf479dfa0df1aa568182e43e43df8bbe28d60fcf2bc52e30068802cc",
            "main",
            "123",
            "HEAD"
          ],
          "requirement_level": "recommended",
          "note": "`head` refers to where you are right now; the current reference at a\ngiven time.The revision can be a full [hash value (see\nglossary)](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.186-5.pdf),\nof the recorded change to a ref within a repository pointing to a\ncommit [commit](https://git-scm.com/docs/git-commit) object. It does\nnot necessarily have to be a hash; it can simply define a [revision\nnumber](https://svnbook.red-bean.com/en/1.7/svn.tour.revs.specifiers.html)\nwhich is an integer that is monotonically increasing. In cases where\nit is identical to the `ref.head.name`, it SHOULD still be included.\nIt is up to the implementer to decide which value to set as the\nrevision based on the VCS system and situational context.\n",
          "stability": "development"
        },
        {
          "name": "vcs.ref.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "branch",
                "value": "branch",
                "brief": "[branch](https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddefbranchabranch)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "tag",
                "value": "tag",
                "brief": "[tag](https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddeftagatag)",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The type of the [reference](https://git-scm.com/docs/gitglossary#def_ref) in the repository.\n",
          "examples": [
            "branch",
            "tag"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "vcs.revision_delta.direction",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "behind",
                "value": "behind",
                "brief": "How many revisions the change is behind the target ref.",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "ahead",
                "value": "ahead",
                "brief": "How many revisions the change is ahead of the target ref.",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The type of revision comparison.\n",
          "examples": [
            "ahead",
            "behind"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "vcs.line_change.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "added",
                "value": "added",
                "brief": "How many lines were added.",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "removed",
                "value": "removed",
                "brief": "How many lines were removed.",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The type of line change being measured on a branch or change.\n",
          "examples": [
            "added",
            "removed"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "vcs.change.title",
          "type": "string",
          "brief": "The human readable title of the change (pull request/merge request/changelist). This title is often a brief summary of the change and may get merged in to a ref as the commit summary.\n",
          "examples": [
            "Fixes broken thing",
            "feat: add my new feature",
            "[chore] update dependency"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "vcs.change.id",
          "type": "string",
          "brief": "The ID of the change (pull request/merge request/changelist) if applicable. This is usually a unique (within repository) identifier generated by the VCS system.\n",
          "examples": [
            "123"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "vcs.change.state",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "open",
                "value": "open",
                "brief": "Open means the change is currently active and under review. It hasn't been merged into the target branch yet, and it's still possible to make changes or add comments.",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "wip",
                "value": "wip",
                "brief": "WIP (work-in-progress, draft) means the change is still in progress and not yet ready for a full review. It might still undergo significant changes.",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "closed",
                "value": "closed",
                "brief": "Closed means the merge request has been closed without merging. This can happen for various reasons, such as the changes being deemed unnecessary, the issue being resolved in another way, or the author deciding to withdraw the request.",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "merged",
                "value": "merged",
                "brief": "Merged indicates that the change has been successfully integrated into the target codebase.",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The state of the change (pull request/merge request/changelist).\n",
          "examples": [
            "open",
            "closed",
            "merged"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/vcs/registry.yaml"
      },
      "display_name": "VCS Repository Attributes"
    },
    {
      "id": "registry.cloud",
      "type": "attribute_group",
      "brief": "A cloud environment (e.g. GCP, Azure, AWS).\n",
      "attributes": [
        {
          "name": "cloud.provider",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "alibaba_cloud",
                "value": "alibaba_cloud",
                "brief": "Alibaba Cloud",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "aws",
                "value": "aws",
                "brief": "Amazon Web Services",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "azure",
                "value": "azure",
                "brief": "Microsoft Azure",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "gcp",
                "value": "gcp",
                "brief": "Google Cloud Platform",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "heroku",
                "value": "heroku",
                "brief": "Heroku Platform as a Service",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "ibm_cloud",
                "value": "ibm_cloud",
                "brief": "IBM Cloud",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "oracle_cloud",
                "value": "oracle_cloud",
                "brief": "Oracle Cloud Infrastructure (OCI)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "tencent_cloud",
                "value": "tencent_cloud",
                "brief": "Tencent Cloud",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "Name of the cloud provider.\n",
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "cloud.account.id",
          "type": "string",
          "brief": "The cloud account ID the resource is assigned to.\n",
          "examples": [
            "111111111111",
            "opentelemetry"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "cloud.region",
          "type": "string",
          "brief": "The geographical region the resource is running.\n",
          "examples": [
            "us-central1",
            "us-east-1"
          ],
          "requirement_level": "recommended",
          "note": "Refer to your provider's docs to see the available regions, for example [Alibaba Cloud regions](https://www.alibabacloud.com/help/doc-detail/40654.htm), [AWS regions](https://aws.amazon.com/about-aws/global-infrastructure/regions_az/), [Azure regions](https://azure.microsoft.com/global-infrastructure/geographies/), [Google Cloud regions](https://cloud.google.com/about/locations), or [Tencent Cloud regions](https://www.tencentcloud.com/document/product/213/6091).\n",
          "stability": "development"
        },
        {
          "name": "cloud.resource_id",
          "type": "string",
          "brief": "Cloud provider-specific native identifier of the monitored cloud resource (e.g. an [ARN](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) on AWS, a [fully qualified resource ID](https://learn.microsoft.com/rest/api/resources/resources/get-by-id) on Azure, a [full resource name](https://google.aip.dev/122#full-resource-names) on GCP)\n",
          "examples": [
            "arn:aws:lambda:REGION:ACCOUNT_ID:function:my-function",
            "//run.googleapis.com/projects/PROJECT_ID/locations/LOCATION_ID/services/SERVICE_ID",
            "/subscriptions/<SUBSCRIPTION_GUID>/resourceGroups/<RG>/providers/Microsoft.Web/sites/<FUNCAPP>/functions/<FUNC>"
          ],
          "requirement_level": "recommended",
          "note": "On some cloud providers, it may not be possible to determine the full ID at startup,\nso it may be necessary to set `cloud.resource_id` as a span attribute instead.\n\nThe exact value to use for `cloud.resource_id` depends on the cloud provider.\nThe following well-known definitions MUST be used if you set this attribute and they apply:\n\n- **AWS Lambda:** The function [ARN](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html).\n  Take care not to use the \"invoked ARN\" directly but replace any\n  [alias suffix](https://docs.aws.amazon.com/lambda/latest/dg/configuration-aliases.html)\n  with the resolved function version, as the same runtime instance may be invocable with\n  multiple different aliases.\n- **GCP:** The [URI of the resource](https://cloud.google.com/iam/docs/full-resource-names)\n- **Azure:** The [Fully Qualified Resource ID](https://docs.microsoft.com/rest/api/resources/resources/get-by-id) of the invoked function,\n  *not* the function app, having the form\n  `/subscriptions/<SUBSCRIPTION_GUID>/resourceGroups/<RG>/providers/Microsoft.Web/sites/<FUNCAPP>/functions/<FUNC>`.\n  This means that a span attribute MUST be used, as an Azure function app can host multiple functions that would usually share\n  a TracerProvider.\n",
          "stability": "development"
        },
        {
          "name": "cloud.availability_zone",
          "type": "string",
          "brief": "Cloud regions often have multiple, isolated locations known as zones to increase availability. Availability zone represents the zone where the resource is running.\n",
          "examples": [
            "us-east-1c"
          ],
          "requirement_level": "recommended",
          "note": "Availability zones are called \"zones\" on Alibaba Cloud and Google Cloud.\n",
          "stability": "development"
        },
        {
          "name": "cloud.platform",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "alibaba_cloud_ecs",
                "value": "alibaba_cloud_ecs",
                "brief": "Alibaba Cloud Elastic Compute Service",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "alibaba_cloud_fc",
                "value": "alibaba_cloud_fc",
                "brief": "Alibaba Cloud Function Compute",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "alibaba_cloud_openshift",
                "value": "alibaba_cloud_openshift",
                "brief": "Red Hat OpenShift on Alibaba Cloud",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "aws_ec2",
                "value": "aws_ec2",
                "brief": "AWS Elastic Compute Cloud",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "aws_ecs",
                "value": "aws_ecs",
                "brief": "AWS Elastic Container Service",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "aws_eks",
                "value": "aws_eks",
                "brief": "AWS Elastic Kubernetes Service",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "aws_lambda",
                "value": "aws_lambda",
                "brief": "AWS Lambda",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "aws_elastic_beanstalk",
                "value": "aws_elastic_beanstalk",
                "brief": "AWS Elastic Beanstalk",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "aws_app_runner",
                "value": "aws_app_runner",
                "brief": "AWS App Runner",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "aws_openshift",
                "value": "aws_openshift",
                "brief": "Red Hat OpenShift on AWS (ROSA)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "azure_vm",
                "value": "azure_vm",
                "brief": "Azure Virtual Machines",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "azure_container_apps",
                "value": "azure_container_apps",
                "brief": "Azure Container Apps",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "azure_container_instances",
                "value": "azure_container_instances",
                "brief": "Azure Container Instances",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "azure_aks",
                "value": "azure_aks",
                "brief": "Azure Kubernetes Service",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "azure_functions",
                "value": "azure_functions",
                "brief": "Azure Functions",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "azure_app_service",
                "value": "azure_app_service",
                "brief": "Azure App Service",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "azure_openshift",
                "value": "azure_openshift",
                "brief": "Azure Red Hat OpenShift",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "gcp_bare_metal_solution",
                "value": "gcp_bare_metal_solution",
                "brief": "Google Bare Metal Solution (BMS)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "gcp_compute_engine",
                "value": "gcp_compute_engine",
                "brief": "Google Cloud Compute Engine (GCE)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "gcp_cloud_run",
                "value": "gcp_cloud_run",
                "brief": "Google Cloud Run",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "gcp_kubernetes_engine",
                "value": "gcp_kubernetes_engine",
                "brief": "Google Cloud Kubernetes Engine (GKE)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "gcp_cloud_functions",
                "value": "gcp_cloud_functions",
                "brief": "Google Cloud Functions (GCF)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "gcp_app_engine",
                "value": "gcp_app_engine",
                "brief": "Google Cloud App Engine (GAE)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "gcp_openshift",
                "value": "gcp_openshift",
                "brief": "Red Hat OpenShift on Google Cloud",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "ibm_cloud_openshift",
                "value": "ibm_cloud_openshift",
                "brief": "Red Hat OpenShift on IBM Cloud",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "oracle_cloud_compute",
                "value": "oracle_cloud_compute",
                "brief": "Compute on Oracle Cloud Infrastructure (OCI)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "oracle_cloud_oke",
                "value": "oracle_cloud_oke",
                "brief": "Kubernetes Engine (OKE) on Oracle Cloud Infrastructure (OCI)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "tencent_cloud_cvm",
                "value": "tencent_cloud_cvm",
                "brief": "Tencent Cloud Cloud Virtual Machine (CVM)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "tencent_cloud_eks",
                "value": "tencent_cloud_eks",
                "brief": "Tencent Cloud Elastic Kubernetes Service (EKS)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "tencent_cloud_scf",
                "value": "tencent_cloud_scf",
                "brief": "Tencent Cloud Serverless Cloud Function (SCF)",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The cloud platform in use.\n",
          "requirement_level": "recommended",
          "note": "The prefix of the service SHOULD match the one specified in `cloud.provider`.\n",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/cloud/registry.yaml"
      },
      "display_name": "Cloud Attributes"
    },
    {
      "id": "resource.telemetry.sdk",
      "type": "resource",
      "brief": "The telemetry SDK used to capture data recorded by the instrumentation libraries.\n",
      "stability": "stable",
      "attributes": [
        {
          "name": "telemetry.sdk.name",
          "type": "string",
          "brief": "The name of the telemetry SDK as defined above.\n",
          "examples": [
            "opentelemetry"
          ],
          "requirement_level": "required",
          "note": "The OpenTelemetry SDK MUST set the `telemetry.sdk.name` attribute to `opentelemetry`.\nIf another SDK, like a fork or a vendor-provided implementation, is used, this SDK MUST set the\n`telemetry.sdk.name` attribute to the fully-qualified class or module name of this SDK's main entry point\nor another suitable identifier depending on the language.\nThe identifier `opentelemetry` is reserved and MUST NOT be used in this case.\nAll custom identifiers SHOULD be stable across different versions of an implementation.\n",
          "stability": "stable"
        },
        {
          "name": "telemetry.sdk.language",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "cpp",
                "value": "cpp",
                "brief": null,
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "dotnet",
                "value": "dotnet",
                "brief": null,
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "erlang",
                "value": "erlang",
                "brief": null,
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "go",
                "value": "go",
                "brief": null,
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "java",
                "value": "java",
                "brief": null,
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "nodejs",
                "value": "nodejs",
                "brief": null,
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "php",
                "value": "php",
                "brief": null,
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "python",
                "value": "python",
                "brief": null,
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "ruby",
                "value": "ruby",
                "brief": null,
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "rust",
                "value": "rust",
                "brief": null,
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "swift",
                "value": "swift",
                "brief": null,
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "webjs",
                "value": "webjs",
                "brief": null,
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "The language of the telemetry SDK.\n",
          "requirement_level": "required",
          "stability": "stable"
        },
        {
          "name": "telemetry.sdk.version",
          "type": "string",
          "brief": "The version string of the telemetry SDK.\n",
          "examples": [
            "1.2.3"
          ],
          "requirement_level": "required",
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": "telemetry.sdk",
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/telemetry/resources.yaml",
        "attributes": {
          "telemetry.sdk.language": {
            "source_group": "registry.telemetry",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "telemetry.sdk.name": {
            "source_group": "registry.telemetry",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "telemetry.sdk.version": {
            "source_group": "registry.telemetry",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "resource.telemetry.distro",
      "type": "resource",
      "brief": "The distribution of telemetry SDK used to capture data recorded by the instrumentation libraries.\n",
      "stability": "development",
      "attributes": [
        {
          "name": "telemetry.distro.name",
          "type": "string",
          "brief": "The name of the auto instrumentation agent or distribution, if used.\n",
          "examples": [
            "parts-unlimited-java"
          ],
          "requirement_level": "recommended",
          "note": "Official auto instrumentation agents and distributions SHOULD set the `telemetry.distro.name` attribute to\na string starting with `opentelemetry-`, e.g. `opentelemetry-java-instrumentation`.\n",
          "stability": "development"
        },
        {
          "name": "telemetry.distro.version",
          "type": "string",
          "brief": "The version string of the auto instrumentation agent or distribution, if used.\n",
          "examples": [
            "1.2.3"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": "telemetry.distro",
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/telemetry/resources.yaml",
        "attributes": {
          "telemetry.distro.name": {
            "source_group": "registry.telemetry",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "telemetry.distro.version": {
            "source_group": "registry.telemetry",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "registry.rpc.deprecated",
      "type": "attribute_group",
      "brief": "Deprecated rpc message attributes.",
      "attributes": [
        {
          "name": "message.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "sent",
                "value": "SENT",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "received",
                "value": "RECEIVED",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "Deprecated, use `rpc.message.type` instead.",
          "requirement_level": "recommended",
          "stability": "development",
          "deprecated": {
            "reason": "uncategorized",
            "note": "Replaced by `rpc.message.type`."
          }
        },
        {
          "name": "message.id",
          "type": "int",
          "brief": "Deprecated, use `rpc.message.id` instead.",
          "requirement_level": "recommended",
          "stability": "development",
          "deprecated": {
            "reason": "uncategorized",
            "note": "Replaced by `rpc.message.id`."
          }
        },
        {
          "name": "message.compressed_size",
          "type": "int",
          "brief": "Deprecated, use `rpc.message.compressed_size` instead.",
          "requirement_level": "recommended",
          "stability": "development",
          "deprecated": {
            "reason": "uncategorized",
            "note": "Replaced by `rpc.message.compressed_size`."
          }
        },
        {
          "name": "message.uncompressed_size",
          "type": "int",
          "brief": "Deprecated, use `rpc.message.uncompressed_size` instead.",
          "requirement_level": "recommended",
          "stability": "development",
          "deprecated": {
            "reason": "uncategorized",
            "note": "Replaced by `rpc.message.uncompressed_size`."
          }
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/rpc/deprecated/registry-deprecated.yaml"
      },
      "display_name": "Deprecated RPC Attributes"
    },
    {
      "id": "registry.thread",
      "type": "attribute_group",
      "brief": "These attributes may be used for any operation to store information about a thread that started a span.\n",
      "attributes": [
        {
          "name": "thread.id",
          "type": "int",
          "brief": "Current \"managed\" thread ID (as opposed to OS thread ID).\n",
          "examples": 42,
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "thread.name",
          "type": "string",
          "brief": "Current thread name.\n",
          "examples": "main",
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/thread/registry.yaml"
      },
      "display_name": "Thread Attributes"
    },
    {
      "id": "attributes.messaging.common.minimal",
      "type": "attribute_group",
      "brief": "Common cross-signal messaging attributes.",
      "stability": "development",
      "attributes": [
        {
          "name": "server.port",
          "type": "int",
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": "recommended",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "server.address",
          "type": "string",
          "brief": "Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": {
            "conditionally_required": "If available."
          },
          "note": "Server domain name of the broker if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.\n",
          "stability": "stable"
        },
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "amqp:decode-error",
            "KAFKA_STORAGE_ERROR",
            "channel-error"
          ],
          "requirement_level": {
            "conditionally_required": "If and only if the messaging operation has failed."
          },
          "note": "The `error.type` SHOULD be predictable, and SHOULD have low cardinality.\n\nWhen `error.type` is set to a type (e.g., an exception type), its\ncanonical class name identifying the type within the artifact SHOULD be used.\n\nInstrumentations SHOULD document the list of errors they report.\n\nThe cardinality of `error.type` within one instrumentation library SHOULD be low.\nTelemetry consumers that aggregate data from multiple instrumentation libraries and applications\nshould be prepared for `error.type` to have high cardinality at query time when no\nadditional filters are applied.\n\nIf the operation has completed successfully, instrumentations SHOULD NOT set `error.type`.\n\nIf a specific domain defines its own set of error identifiers (such as HTTP or gRPC status codes),\nit's RECOMMENDED to:\n\n- Use a domain-specific attribute\n- Set `error.type` to capture all errors, regardless of whether they are defined within the domain-specific set or not.\n",
          "stability": "stable"
        },
        {
          "name": "messaging.operation.name",
          "type": "string",
          "brief": "The system-specific name of the messaging operation.\n",
          "examples": [
            "ack",
            "nack",
            "send"
          ],
          "requirement_level": "required",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/messaging/common.yaml",
        "attributes": {
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ]
          },
          "messaging.operation.name": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "registry.elasticsearch",
      "type": "attribute_group",
      "brief": "This section defines attributes for Elasticsearch.\n",
      "attributes": [
        {
          "name": "elasticsearch.node.name",
          "type": "string",
          "brief": "Represents the human-readable identifier of the node/instance to which a request was routed.\n",
          "examples": [
            "instance-0000000001"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/elasticsearch/registry.yaml"
      },
      "display_name": "Elasticsearch Attributes"
    },
    {
      "id": "event.session.start",
      "type": "event",
      "brief": "Indicates that a new session has been started, optionally linking to the prior session.\n",
      "note": "For instrumentation that tracks user behavior during user sessions, a `session.start` event MUST be emitted every time a session is created. When a new session is created as a continuation of a prior session, the `session.previous_id` SHOULD be included in the event. The values of `session.id` and `session.previous_id` MUST be different.\nWhen the `session.start` event contains both `session.id` and `session.previous_id` fields, the event indicates that the previous session has ended. If the session ID in `session.previous_id` has not yet ended via explicit `session.end` event, then the consumer SHOULD treat this continuation event as semantically equivalent to `session.end(session.previous_id)` and `session.start(session.id)`.\n",
      "stability": "development",
      "attributes": [
        {
          "name": "session.id",
          "type": "string",
          "brief": "The ID of the new session being started.",
          "examples": "00112233-4455-6677-8899-aabbccddeeff",
          "requirement_level": "required",
          "stability": "development"
        },
        {
          "name": "session.previous_id",
          "type": "string",
          "brief": "The previous `session.id` for this user, when known.",
          "examples": "00112233-4455-6677-8899-aabbccddeeff",
          "requirement_level": {
            "conditionally_required": "If the new session is being created as a continuation of a previous session, the `session.previous_id` SHOULD be included in the event. The `session.id` and `session.previous_id` attributes MUST have different values.\n"
          },
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": "session.start",
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/session/events.yaml",
        "attributes": {
          "session.id": {
            "source_group": "registry.session",
            "inherited_fields": [
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "requirement_level"
            ]
          },
          "session.previous_id": {
            "source_group": "registry.session",
            "inherited_fields": [
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "event.session.end",
      "type": "event",
      "brief": "Indicates that a session has ended.\n",
      "note": "For instrumentation that tracks user behavior during user sessions, a `session.end` event SHOULD be emitted every time a session ends. When a session ends and continues as a new session, this event SHOULD be emitted prior to the `session.start` event.\n",
      "stability": "development",
      "attributes": [
        {
          "name": "session.id",
          "type": "string",
          "brief": "The ID of the session being ended.",
          "examples": "00112233-4455-6677-8899-aabbccddeeff",
          "requirement_level": "required",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": "session.end",
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/session/events.yaml",
        "attributes": {
          "session.id": {
            "source_group": "registry.session",
            "inherited_fields": [
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "attributes.db.client.minimal",
      "type": "attribute_group",
      "brief": "Database Client attributes",
      "attributes": [
        {
          "name": "server.address",
          "type": "string",
          "brief": "Name of the database host.\n",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "recommended",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": {
            "conditionally_required": "If using a port other than the default port for this DBMS and if `server.address` is set."
          },
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "db.response.status_code",
          "type": "string",
          "brief": "Database response status code.",
          "examples": [
            "102",
            "ORA-17002",
            "08P01",
            "404"
          ],
          "requirement_level": {
            "conditionally_required": "If the operation failed and status code is available."
          },
          "note": "The status code returned by the database. Usually it represents an error code, but may also represent partial success, warning, or differentiate between various types of successful outcomes.\nSemantic conventions for individual database systems SHOULD document what `db.response.status_code` means in the context of that system.\n",
          "stability": "release_candidate"
        },
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "timeout",
            "java.net.UnknownHostException",
            "server_certificate_invalid",
            "500"
          ],
          "requirement_level": {
            "conditionally_required": "If and only if the operation failed."
          },
          "note": "The `error.type` SHOULD match the `db.response.status_code` returned by the database or the client library, or the canonical name of exception that occurred.\nWhen using canonical exception type name, instrumentation SHOULD do the best effort to report the most relevant type. For example, if the original exception is wrapped into a generic one, the original exception SHOULD be preferred.\nInstrumentations SHOULD document how `error.type` is populated.\n",
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/database/common.yaml",
        "attributes": {
          "db.response.status_code": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "attributes.azure.cosmosdb.minimal",
      "type": "attribute_group",
      "brief": "Azure Cosmos DB Client attributes",
      "stability": "development",
      "attributes": [
        {
          "name": "db.collection.name",
          "type": "string",
          "brief": "Cosmos DB container name.",
          "examples": [
            "public.users",
            "customers"
          ],
          "requirement_level": {
            "conditionally_required": "If available."
          },
          "note": "It is RECOMMENDED to capture the value as provided by the application\nwithout attempting to do any case normalization.\n\nThe collection name SHOULD NOT be extracted from `db.query.text`,\nwhen the database system supports cross-table queries in non-batch operations.\n\nFor batch operations, if the individual operations are known to have the same\ncollection name then that collection name SHOULD be used.\n",
          "stability": "release_candidate"
        },
        {
          "name": "db.namespace",
          "type": "string",
          "brief": "The name of the database, fully qualified within the server address and port.\n",
          "examples": [
            "customers",
            "test.users"
          ],
          "requirement_level": {
            "conditionally_required": "If available."
          },
          "stability": "release_candidate"
        },
        {
          "name": "server.address",
          "type": "string",
          "brief": "Name of the database host.\n",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "recommended",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": {
            "conditionally_required": "If using a port other than the default port for this DBMS and if `server.address` is set."
          },
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "db.operation.name",
          "type": "string",
          "brief": "The name of the operation or command being executed.\n",
          "examples": [
            "findAndModify",
            "HMSET",
            "SELECT"
          ],
          "requirement_level": {
            "conditionally_required": "If readily available."
          },
          "note": "It is RECOMMENDED to capture the value as provided by the application\nwithout attempting to do any case normalization.\n\nThe operation name SHOULD NOT be extracted from `db.query.text`,\nwhen the database system supports cross-table queries in non-batch operations.\n\nFor batch operations, if the individual operations are known to have the same operation name\nthen that operation name SHOULD be used prepended by `BATCH `,\notherwise `db.operation.name` SHOULD be `BATCH` or some other database\nsystem specific term if more applicable.\n",
          "stability": "release_candidate"
        },
        {
          "name": "db.response.status_code",
          "type": "string",
          "brief": "Database response status code.",
          "examples": [
            "102",
            "ORA-17002",
            "08P01",
            "404"
          ],
          "requirement_level": {
            "conditionally_required": "If the operation failed and status code is available."
          },
          "note": "The status code returned by the database. Usually it represents an error code, but may also represent partial success, warning, or differentiate between various types of successful outcomes.\nSemantic conventions for individual database systems SHOULD document what `db.response.status_code` means in the context of that system.\n",
          "stability": "release_candidate"
        },
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "timeout",
            "java.net.UnknownHostException",
            "server_certificate_invalid",
            "500"
          ],
          "requirement_level": {
            "conditionally_required": "If and only if the operation failed."
          },
          "note": "The `error.type` SHOULD match the `db.response.status_code` returned by the database or the client library, or the canonical name of exception that occurred.\nWhen using canonical exception type name, instrumentation SHOULD do the best effort to report the most relevant type. For example, if the original exception is wrapped into a generic one, the original exception SHOULD be preferred.\nInstrumentations SHOULD document how `error.type` is populated.\n",
          "stability": "stable"
        },
        {
          "name": "azure.cosmosdb.consistency.level",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "strong",
                "value": "Strong",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "bounded_staleness",
                "value": "BoundedStaleness",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "session",
                "value": "Session",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "eventual",
                "value": "Eventual",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "consistent_prefix",
                "value": "ConsistentPrefix",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "Account or request [consistency level](https://learn.microsoft.com/azure/cosmos-db/consistency-levels).",
          "examples": [
            "Eventual",
            "ConsistentPrefix",
            "BoundedStaleness",
            "Strong",
            "Session"
          ],
          "requirement_level": {
            "conditionally_required": "If available."
          },
          "stability": "development"
        },
        {
          "name": "azure.cosmosdb.response.sub_status_code",
          "type": "int",
          "brief": "Cosmos DB sub status code.",
          "examples": [
            1000,
            1002
          ],
          "requirement_level": {
            "conditionally_required": "when response was received and contained sub-code."
          },
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/database/common.yaml",
        "attributes": {
          "azure.cosmosdb.consistency.level": {
            "source_group": "registry.azure.cosmosdb",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "azure.cosmosdb.response.sub_status_code": {
            "source_group": "registry.azure.cosmosdb",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "db.collection.name": {
            "source_group": "registry.db",
            "inherited_fields": [
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "requirement_level"
            ]
          },
          "db.namespace": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ]
          },
          "db.operation.name": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "db.response.status_code": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "attributes.db.client.with_query",
      "type": "attribute_group",
      "brief": "This group defines the attributes describing database operations that may have queries.",
      "attributes": [
        {
          "name": "db.query.text",
          "type": "string",
          "brief": "The database query being executed.\n",
          "examples": [
            "SELECT * FROM wuser_table where username = ?",
            "SET mykey ?"
          ],
          "requirement_level": "recommended",
          "note": "For sanitization see [Sanitization of `db.query.text`](../database/database-spans.md#sanitization-of-dbquerytext).\nFor batch operations, if the individual operations are known to have the same query text then that query text SHOULD be used, otherwise all of the individual query texts SHOULD be concatenated with separator `; ` or some other database system specific separator if more applicable.\nEven though parameterized query text can potentially have sensitive data, by using a parameterized query the user is giving a strong signal that any sensitive data will be passed as parameter values, and the benefit to observability of capturing the static part of the query text by default outweighs the risk.\n",
          "stability": "release_candidate"
        },
        {
          "name": "server.address",
          "type": "string",
          "brief": "Name of the database host.\n",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "recommended",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": {
            "conditionally_required": "If using a port other than the default port for this DBMS and if `server.address` is set."
          },
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "db.response.status_code",
          "type": "string",
          "brief": "Database response status code.",
          "examples": [
            "102",
            "ORA-17002",
            "08P01",
            "404"
          ],
          "requirement_level": {
            "conditionally_required": "If the operation failed and status code is available."
          },
          "note": "The status code returned by the database. Usually it represents an error code, but may also represent partial success, warning, or differentiate between various types of successful outcomes.\nSemantic conventions for individual database systems SHOULD document what `db.response.status_code` means in the context of that system.\n",
          "stability": "release_candidate"
        },
        {
          "name": "db.query.summary",
          "type": "string",
          "brief": "Low cardinality representation of a database query text.\n",
          "examples": [
            "SELECT wuser_table",
            "INSERT shipping_details SELECT orders",
            "get user by id"
          ],
          "requirement_level": {
            "recommended": "if readily available or if instrumentation supports query summarization."
          },
          "note": "`db.query.summary` provides static summary of the query text. It describes a class of database queries and is useful as a grouping key, especially when analyzing telemetry for database calls involving complex queries.\nSummary may be available to the instrumentation through instrumentation hooks or other means. If it is not available, instrumentations that support query parsing SHOULD generate a summary following [Generating query summary](../database/database-spans.md#generating-a-summary-of-the-query-text) section.\n",
          "stability": "release_candidate"
        },
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "timeout",
            "java.net.UnknownHostException",
            "server_certificate_invalid",
            "500"
          ],
          "requirement_level": {
            "conditionally_required": "If and only if the operation failed."
          },
          "note": "The `error.type` SHOULD match the `db.response.status_code` returned by the database or the client library, or the canonical name of exception that occurred.\nWhen using canonical exception type name, instrumentation SHOULD do the best effort to report the most relevant type. For example, if the original exception is wrapped into a generic one, the original exception SHOULD be preferred.\nInstrumentations SHOULD document how `error.type` is populated.\n",
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/database/common.yaml",
        "attributes": {
          "db.query.summary": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "db.query.text": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "db.response.status_code": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "attributes.db.client.with_query_and_collection",
      "type": "attribute_group",
      "brief": "This group defines the attributes describing database operations that have operation name, collection name and query.",
      "attributes": [
        {
          "name": "db.query.text",
          "type": "string",
          "brief": "The database query being executed.\n",
          "examples": [
            "SELECT * FROM wuser_table where username = ?",
            "SET mykey ?"
          ],
          "requirement_level": "recommended",
          "note": "For sanitization see [Sanitization of `db.query.text`](../database/database-spans.md#sanitization-of-dbquerytext).\nFor batch operations, if the individual operations are known to have the same query text then that query text SHOULD be used, otherwise all of the individual query texts SHOULD be concatenated with separator `; ` or some other database system specific separator if more applicable.\nEven though parameterized query text can potentially have sensitive data, by using a parameterized query the user is giving a strong signal that any sensitive data will be passed as parameter values, and the benefit to observability of capturing the static part of the query text by default outweighs the risk.\n",
          "stability": "release_candidate"
        },
        {
          "name": "server.address",
          "type": "string",
          "brief": "Name of the database host.\n",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "recommended",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": {
            "conditionally_required": "If using a port other than the default port for this DBMS and if `server.address` is set."
          },
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "db.response.status_code",
          "type": "string",
          "brief": "Database response status code.",
          "examples": [
            "102",
            "ORA-17002",
            "08P01",
            "404"
          ],
          "requirement_level": {
            "conditionally_required": "If the operation failed and status code is available."
          },
          "note": "The status code returned by the database. Usually it represents an error code, but may also represent partial success, warning, or differentiate between various types of successful outcomes.\nSemantic conventions for individual database systems SHOULD document what `db.response.status_code` means in the context of that system.\n",
          "stability": "release_candidate"
        },
        {
          "name": "db.query.summary",
          "type": "string",
          "brief": "Low cardinality representation of a database query text.\n",
          "examples": [
            "SELECT wuser_table",
            "INSERT shipping_details SELECT orders",
            "get user by id"
          ],
          "requirement_level": {
            "recommended": "if readily available or if instrumentation supports query summarization."
          },
          "note": "`db.query.summary` provides static summary of the query text. It describes a class of database queries and is useful as a grouping key, especially when analyzing telemetry for database calls involving complex queries.\nSummary may be available to the instrumentation through instrumentation hooks or other means. If it is not available, instrumentations that support query parsing SHOULD generate a summary following [Generating query summary](../database/database-spans.md#generating-a-summary-of-the-query-text) section.\n",
          "stability": "release_candidate"
        },
        {
          "name": "db.collection.name",
          "type": "string",
          "brief": "The name of a collection (table, container) within the database.",
          "examples": [
            "public.users",
            "customers"
          ],
          "requirement_level": {
            "conditionally_required": "If readily available and if a database call is performed on a single collection.\n"
          },
          "note": "It is RECOMMENDED to capture the value as provided by the application\nwithout attempting to do any case normalization.\n\nThe collection name SHOULD NOT be extracted from `db.query.text`,\nwhen the database system supports cross-table queries in non-batch operations.\n\nFor batch operations, if the individual operations are known to have the same\ncollection name then that collection name SHOULD be used.\n",
          "stability": "release_candidate"
        },
        {
          "name": "db.operation.name",
          "type": "string",
          "brief": "The name of the operation or command being executed.\n",
          "examples": [
            "findAndModify",
            "HMSET",
            "SELECT"
          ],
          "requirement_level": {
            "conditionally_required": "If readily available and if there is a single operation name that describes the database call.\n"
          },
          "note": "It is RECOMMENDED to capture the value as provided by the application\nwithout attempting to do any case normalization.\n\nThe operation name SHOULD NOT be extracted from `db.query.text`,\nwhen the database system supports cross-table queries in non-batch operations.\n\nFor batch operations, if the individual operations are known to have the same operation name\nthen that operation name SHOULD be used prepended by `BATCH `,\notherwise `db.operation.name` SHOULD be `BATCH` or some other database\nsystem specific term if more applicable.\n",
          "stability": "release_candidate"
        },
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "timeout",
            "java.net.UnknownHostException",
            "server_certificate_invalid",
            "500"
          ],
          "requirement_level": {
            "conditionally_required": "If and only if the operation failed."
          },
          "note": "The `error.type` SHOULD match the `db.response.status_code` returned by the database or the client library, or the canonical name of exception that occurred.\nWhen using canonical exception type name, instrumentation SHOULD do the best effort to report the most relevant type. For example, if the original exception is wrapped into a generic one, the original exception SHOULD be preferred.\nInstrumentations SHOULD document how `error.type` is populated.\n",
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/database/common.yaml",
        "attributes": {
          "db.collection.name": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "db.operation.name": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "db.query.summary": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "db.query.text": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "db.response.status_code": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "cloudevents",
      "type": "attribute_group",
      "brief": "This document defines attributes for CloudEvents. CloudEvents is a specification on how to define event data in a standard way. These attributes can be attached to spans when performing operations with CloudEvents, regardless of the protocol being used.\n",
      "attributes": [
        {
          "name": "cloudevents.event_spec_version",
          "type": "string",
          "brief": "The [version of the CloudEvents specification](https://github.com/cloudevents/spec/blob/v1.0.2/cloudevents/spec.md#specversion) which the event uses.\n",
          "examples": "1.0",
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "cloudevents.event_type",
          "type": "string",
          "brief": "The [event_type](https://github.com/cloudevents/spec/blob/v1.0.2/cloudevents/spec.md#type) contains a value describing the type of event related to the originating occurrence.\n",
          "examples": [
            "com.github.pull_request.opened",
            "com.example.object.deleted.v2"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "cloudevents.event_subject",
          "type": "string",
          "brief": "The [subject](https://github.com/cloudevents/spec/blob/v1.0.2/cloudevents/spec.md#subject) of the event in the context of the event producer (identified by source).\n",
          "examples": "mynewfile.jpg",
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "cloudevents.event_id",
          "type": "string",
          "brief": "The [event_id](https://github.com/cloudevents/spec/blob/v1.0.2/cloudevents/spec.md#id) uniquely identifies the event.\n",
          "examples": [
            "123e4567-e89b-12d3-a456-426614174000",
            "0001"
          ],
          "requirement_level": "required",
          "stability": "development"
        },
        {
          "name": "cloudevents.event_source",
          "type": "string",
          "brief": "The [source](https://github.com/cloudevents/spec/blob/v1.0.2/cloudevents/spec.md#source-1) identifies the context in which an event happened.\n",
          "examples": [
            "https://github.com/cloudevents",
            "/cloudevents/spec/pull/123",
            "my-service"
          ],
          "requirement_level": "required",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/cloudevents/spans.yaml",
        "attributes": {
          "cloudevents.event_id": {
            "source_group": "registry.cloudevents",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "cloudevents.event_source": {
            "source_group": "registry.cloudevents",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "cloudevents.event_spec_version": {
            "source_group": "registry.cloudevents",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "cloudevents.event_subject": {
            "source_group": "registry.cloudevents",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "cloudevents.event_type": {
            "source_group": "registry.cloudevents",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "hardware.attributes.common",
      "type": "attribute_group",
      "brief": "Common hardware attributes",
      "stability": "development",
      "attributes": [
        {
          "name": "hw.name",
          "type": "string",
          "brief": "An easily-recognizable name for the hardware component\n",
          "examples": [
            "eth0"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "hw.parent",
          "type": "string",
          "brief": "Unique identifier of the parent component (typically the `hw.id` attribute of the enclosure, or disk controller)\n",
          "examples": [
            "dellStorage_perc_0"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "hw.id",
          "type": "string",
          "brief": "An identifier for the hardware component, unique within the monitored host\n",
          "examples": [
            "win32battery_battery_testsysa33_1"
          ],
          "requirement_level": "required",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/hardware/common.yaml",
        "attributes": {
          "hw.id": {
            "source_group": "registry.hardware",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "hw.name": {
            "source_group": "registry.hardware",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "hw.parent": {
            "source_group": "registry.hardware",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "resource.host",
      "type": "resource",
      "brief": "A host is defined as a computing instance. For example, physical servers, virtual machines, switches or disk array.\n",
      "stability": "development",
      "attributes": [
        {
          "name": "host.name",
          "type": "string",
          "brief": "Name of the host. On Unix systems, it may contain what the hostname command returns, or the fully qualified hostname, or another name specified by the user.\n",
          "examples": [
            "opentelemetry-test"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "host.type",
          "type": "string",
          "brief": "Type of host. For Cloud, this must be the machine type.\n",
          "examples": [
            "n1-standard-1"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "host.arch",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "amd64",
                "value": "amd64",
                "brief": "AMD64",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "arm32",
                "value": "arm32",
                "brief": "ARM32",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "arm64",
                "value": "arm64",
                "brief": "ARM64",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "ia64",
                "value": "ia64",
                "brief": "Itanium",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "ppc32",
                "value": "ppc32",
                "brief": "32-bit PowerPC",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "ppc64",
                "value": "ppc64",
                "brief": "64-bit PowerPC",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "s390x",
                "value": "s390x",
                "brief": "IBM z/Architecture",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "x86",
                "value": "x86",
                "brief": "32-bit x86",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The CPU architecture the host system is running on.\n",
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "host.image.name",
          "type": "string",
          "brief": "Name of the VM image or OS install the host was instantiated from.\n",
          "examples": [
            "infra-ami-eks-worker-node-7d4ec78312",
            "CentOS-8-x86_64-1905"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "host.image.id",
          "type": "string",
          "brief": "VM image ID or host OS image ID. For Cloud, this value is from the provider.\n",
          "examples": [
            "ami-07b06b442921831e5"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "host.image.version",
          "type": "string",
          "brief": "The version string of the VM image or host OS as defined in [Version Attributes](/docs/resource/README.md#version-attributes).\n",
          "examples": [
            "0.1"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "host.id",
          "type": "string",
          "brief": "Unique host ID. For Cloud, this must be the instance_id assigned by the cloud provider. For non-containerized systems, this should be the `machine-id`. See the table below for the sources to use to determine the `machine-id` based on operating system.\n",
          "examples": [
            "fdbf79e8af94cb7f9e8df36789187052"
          ],
          "requirement_level": "recommended",
          "note": "Collecting `host.id` from non-containerized systems\n\n**Non-privileged Machine ID Lookup**\n\nWhen collecting `host.id` for non-containerized systems non-privileged lookups\nof the machine id are preferred. SDK detector implementations MUST use the\nsources listed below to obtain the machine id.\n\n| OS | Primary | Fallback |\n|---------|---------|---------|\n| Linux   | contents of `/etc/machine-id` | contents of `/var/lib/dbus/machine-id` |\n| BSD     | contents of `/etc/hostid` | output of `kenv -q smbios.system.uuid` |\n| MacOS   | `IOPlatformUUID` line from the output of `ioreg -rd1 -c \"IOPlatformExpertDevice\"` | - |\n| Windows | `MachineGuid` from registry `HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Cryptography`  | - |\n\n**Privileged Machine ID Lookup**\n\nThe `host.id` can be looked up using privileged sources. For example, Linux\nsystems can use the output of `dmidecode -t system`, `dmidecode -t baseboard`,\n`dmidecode -t chassis`, or read the corresponding data from the filesystem\n(e.g. `cat /sys/devices/virtual/dmi/id/product_id`,\n`cat /sys/devices/virtual/dmi/id/product_uuid`, etc), however, SDK resource\ndetector implementations MUST not collect `host.id` from privileged sources. If\nprivileged lookup of `host.id` is required, the value should be injected via the\n`OTEL_RESOURCE_ATTRIBUTES` environment variable.\n",
          "stability": "development"
        },
        {
          "name": "host.ip",
          "type": "string[]",
          "brief": "Available IP addresses of the host, excluding loopback interfaces.\n",
          "examples": [
            [
              "192.168.1.140",
              "fe80::abc2:4a28:737a:609e"
            ]
          ],
          "requirement_level": "opt_in",
          "note": "IPv4 Addresses MUST be specified in dotted-quad notation. IPv6 addresses MUST be specified in the [RFC 5952](https://www.rfc-editor.org/rfc/rfc5952.html) format.\n",
          "stability": "development"
        },
        {
          "name": "host.mac",
          "type": "string[]",
          "brief": "Available MAC addresses of the host, excluding loopback interfaces.\n",
          "examples": [
            [
              "AC-DE-48-23-45-67",
              "AC-DE-48-23-45-67-01-9F"
            ]
          ],
          "requirement_level": "opt_in",
          "note": "MAC Addresses MUST be represented in [IEEE RA hexadecimal form](https://standards.ieee.org/wp-content/uploads/import/documents/tutorials/eui.pdf): as hyphen-separated octets in uppercase hexadecimal form from most to least significant.\n",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": "host",
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/host/resources.yaml",
        "attributes": {
          "host.arch": {
            "source_group": "registry.host",
            "inherited_fields": [
              "brief",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "host.id": {
            "source_group": "registry.host",
            "inherited_fields": [
              "brief",
              "examples",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "note"
            ]
          },
          "host.image.id": {
            "source_group": "registry.host",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "host.image.name": {
            "source_group": "registry.host",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "host.image.version": {
            "source_group": "registry.host",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "host.ip": {
            "source_group": "registry.host",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "host.mac": {
            "source_group": "registry.host",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "host.name": {
            "source_group": "registry.host",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "host.type": {
            "source_group": "registry.host",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "resource.host.cpu",
      "type": "resource",
      "brief": "A host's CPU information\n",
      "stability": "development",
      "attributes": [
        {
          "name": "host.cpu.vendor.id",
          "type": "string",
          "brief": "Processor manufacturer identifier. A maximum 12-character string.\n",
          "examples": [
            "GenuineIntel"
          ],
          "requirement_level": "opt_in",
          "note": "[CPUID](https://wiki.osdev.org/CPUID) command returns the vendor ID string in EBX, EDX and ECX registers. Writing these to memory in this order results in a 12-character string.\n",
          "stability": "development"
        },
        {
          "name": "host.cpu.family",
          "type": "string",
          "brief": "Family or generation of the CPU.\n",
          "examples": [
            "6",
            "PA-RISC 1.1e"
          ],
          "requirement_level": "opt_in",
          "stability": "development"
        },
        {
          "name": "host.cpu.model.id",
          "type": "string",
          "brief": "Model identifier. It provides more granular information about the CPU, distinguishing it from other CPUs within the same family.\n",
          "examples": [
            "6",
            "9000/778/B180L"
          ],
          "requirement_level": "opt_in",
          "stability": "development"
        },
        {
          "name": "host.cpu.model.name",
          "type": "string",
          "brief": "Model designation of the processor.\n",
          "examples": [
            "11th Gen Intel(R) Core(TM) i7-1185G7 @ 3.00GHz"
          ],
          "requirement_level": "opt_in",
          "stability": "development"
        },
        {
          "name": "host.cpu.stepping",
          "type": "string",
          "brief": "Stepping or core revisions.\n",
          "examples": [
            "1",
            "r1p1"
          ],
          "requirement_level": "opt_in",
          "stability": "development"
        },
        {
          "name": "host.cpu.cache.l2.size",
          "type": "int",
          "brief": "The amount of level 2 memory cache available to the processor (in Bytes).\n",
          "examples": [
            12288000
          ],
          "requirement_level": "opt_in",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": "host.cpu",
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/host/resources.yaml",
        "attributes": {
          "host.cpu.cache.l2.size": {
            "source_group": "registry.host",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "host.cpu.family": {
            "source_group": "registry.host",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "host.cpu.model.id": {
            "source_group": "registry.host",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "host.cpu.model.name": {
            "source_group": "registry.host",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "host.cpu.stepping": {
            "source_group": "registry.host",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "host.cpu.vendor.id": {
            "source_group": "registry.host",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "registry.cpu",
      "type": "attribute_group",
      "brief": "Attributes specific to a cpu instance.",
      "attributes": [
        {
          "name": "cpu.mode",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "user",
                "value": "user",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "system",
                "value": "system",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "nice",
                "value": "nice",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "idle",
                "value": "idle",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "iowait",
                "value": "iowait",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "interrupt",
                "value": "interrupt",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "steal",
                "value": "steal",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "kernel",
                "value": "kernel",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The mode of the CPU",
          "examples": [
            "user",
            "system"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "cpu.logical_number",
          "type": "int",
          "brief": "The logical CPU number [0..n-1]",
          "examples": [
            1
          ],
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/cpu/registry.yaml"
      },
      "display_name": "CPU Attributes"
    },
    {
      "id": "resource.k8s.cluster",
      "type": "resource",
      "brief": "A Kubernetes Cluster.\n",
      "stability": "development",
      "attributes": [
        {
          "name": "k8s.cluster.name",
          "type": "string",
          "brief": "The name of the cluster.\n",
          "examples": [
            "opentelemetry-cluster"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "k8s.cluster.uid",
          "type": "string",
          "brief": "A pseudo-ID for the cluster, set to the UID of the `kube-system` namespace.\n",
          "examples": [
            "218fc5a9-a5f1-4b54-aa05-46717d0ab26d"
          ],
          "requirement_level": "recommended",
          "note": "K8s doesn't have support for obtaining a cluster ID. If this is ever\nadded, we will recommend collecting the `k8s.cluster.uid` through the\nofficial APIs. In the meantime, we are able to use the `uid` of the\n`kube-system` namespace as a proxy for cluster ID. Read on for the\nrationale.\n\nEvery object created in a K8s cluster is assigned a distinct UID. The\n`kube-system` namespace is used by Kubernetes itself and will exist\nfor the lifetime of the cluster. Using the `uid` of the `kube-system`\nnamespace is a reasonable proxy for the K8s ClusterID as it will only\nchange if the cluster is rebuilt. Furthermore, Kubernetes UIDs are\nUUIDs as standardized by\n[ISO/IEC 9834-8 and ITU-T X.667](https://www.itu.int/ITU-T/studygroups/com17/oid.html).\nWhich states:\n\n> If generated according to one of the mechanisms defined in Rec.\n> ITU-T X.667 | ISO/IEC 9834-8, a UUID is either guaranteed to be\n> different from all other UUIDs generated before 3603 A.D., or is\n> extremely likely to be different (depending on the mechanism chosen).\n\nTherefore, UIDs between clusters should be extremely unlikely to\nconflict.\n",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": "k8s.cluster",
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/k8s/resources.yaml",
        "attributes": {
          "k8s.cluster.name": {
            "source_group": "registry.k8s",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "k8s.cluster.uid": {
            "source_group": "registry.k8s",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "resource.k8s.node",
      "type": "resource",
      "brief": "A Kubernetes Node object.\n",
      "stability": "development",
      "attributes": [
        {
          "name": "k8s.node.name",
          "type": "string",
          "brief": "The name of the Node.\n",
          "examples": [
            "node-1"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "k8s.node.uid",
          "type": "string",
          "brief": "The UID of the Node.\n",
          "examples": [
            "1eb3a0c6-0477-4080-a9cb-0cb7db65c6a2"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": "k8s.node",
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/k8s/resources.yaml",
        "attributes": {
          "k8s.node.name": {
            "source_group": "registry.k8s",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "k8s.node.uid": {
            "source_group": "registry.k8s",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "resource.k8s.namespace",
      "type": "resource",
      "brief": "A Kubernetes Namespace.\n",
      "stability": "development",
      "attributes": [
        {
          "name": "k8s.namespace.name",
          "type": "string",
          "brief": "The name of the namespace that the pod is running in.\n",
          "examples": [
            "default"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": "k8s.namespace",
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/k8s/resources.yaml",
        "attributes": {
          "k8s.namespace.name": {
            "source_group": "registry.k8s",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "resource.k8s.pod",
      "type": "resource",
      "brief": "A Kubernetes Pod object.\n",
      "stability": "development",
      "attributes": [
        {
          "name": "k8s.pod.uid",
          "type": "string",
          "brief": "The UID of the Pod.\n",
          "examples": [
            "275ecb36-5aa8-4c2a-9c47-d8bb681b9aff"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "k8s.pod.name",
          "type": "string",
          "brief": "The name of the Pod.\n",
          "examples": [
            "opentelemetry-pod-autoconf"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "k8s.pod.label",
          "type": "template[string]",
          "brief": "The label key-value pairs placed on the Pod, the `<key>` being the label name, the value being the label value.\n",
          "examples": [
            "k8s.pod.label.app=my-app",
            "k8s.pod.label.mycompany.io/arch=x64",
            "k8s.pod.label.data="
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "k8s.pod.annotation",
          "type": "template[string]",
          "brief": "The annotation key-value pairs placed on the Pod, the `<key>` being the annotation name, the value being the annotation value.\n",
          "examples": [
            "k8s.pod.annotation.kubernetes.io/enforce-mountable-secrets=true",
            "k8s.pod.annotation.mycompany.io/arch=x64",
            "k8s.pod.annotation.data="
          ],
          "requirement_level": "opt_in",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": "k8s.pod",
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/k8s/resources.yaml",
        "attributes": {
          "k8s.pod.annotation": {
            "source_group": "registry.k8s",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "k8s.pod.label": {
            "source_group": "registry.k8s",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "k8s.pod.name": {
            "source_group": "registry.k8s",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "k8s.pod.uid": {
            "source_group": "registry.k8s",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "resource.k8s.container",
      "type": "resource",
      "brief": "A container in a [PodTemplate](https://kubernetes.io/docs/concepts/workloads/pods/#pod-templates).\n",
      "stability": "development",
      "attributes": [
        {
          "name": "k8s.container.name",
          "type": "string",
          "brief": "The name of the Container from Pod specification, must be unique within a Pod. Container runtime usually uses different globally unique name (`container.name`).\n",
          "examples": [
            "redis"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "k8s.container.restart_count",
          "type": "int",
          "brief": "Number of times the container was restarted. This attribute can be used to identify a particular container (running or stopped) within a container spec.\n",
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "k8s.container.status.last_terminated_reason",
          "type": "string",
          "brief": "Last terminated reason of the Container.\n",
          "examples": [
            "Evicted",
            "Error"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": "k8s.container",
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/k8s/resources.yaml",
        "attributes": {
          "k8s.container.name": {
            "source_group": "registry.k8s",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "k8s.container.restart_count": {
            "source_group": "registry.k8s",
            "inherited_fields": [
              "brief",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "k8s.container.status.last_terminated_reason": {
            "source_group": "registry.k8s",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "resource.k8s.replicaset",
      "type": "resource",
      "brief": "A Kubernetes ReplicaSet object.\n",
      "stability": "development",
      "attributes": [
        {
          "name": "k8s.replicaset.uid",
          "type": "string",
          "brief": "The UID of the ReplicaSet.\n",
          "examples": [
            "275ecb36-5aa8-4c2a-9c47-d8bb681b9aff"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "k8s.replicaset.name",
          "type": "string",
          "brief": "The name of the ReplicaSet.\n",
          "examples": [
            "opentelemetry"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": "k8s.replicaset",
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/k8s/resources.yaml",
        "attributes": {
          "k8s.replicaset.name": {
            "source_group": "registry.k8s",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "k8s.replicaset.uid": {
            "source_group": "registry.k8s",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "resource.k8s.deployment",
      "type": "resource",
      "brief": "A Kubernetes Deployment object.\n",
      "stability": "development",
      "attributes": [
        {
          "name": "k8s.deployment.uid",
          "type": "string",
          "brief": "The UID of the Deployment.\n",
          "examples": [
            "275ecb36-5aa8-4c2a-9c47-d8bb681b9aff"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "k8s.deployment.name",
          "type": "string",
          "brief": "The name of the Deployment.\n",
          "examples": [
            "opentelemetry"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": "k8s.deployment",
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/k8s/resources.yaml",
        "attributes": {
          "k8s.deployment.name": {
            "source_group": "registry.k8s",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "k8s.deployment.uid": {
            "source_group": "registry.k8s",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "resource.k8s.statefulset",
      "type": "resource",
      "brief": "A Kubernetes StatefulSet object.\n",
      "stability": "development",
      "attributes": [
        {
          "name": "k8s.statefulset.uid",
          "type": "string",
          "brief": "The UID of the StatefulSet.\n",
          "examples": [
            "275ecb36-5aa8-4c2a-9c47-d8bb681b9aff"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "k8s.statefulset.name",
          "type": "string",
          "brief": "The name of the StatefulSet.\n",
          "examples": [
            "opentelemetry"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": "k8s.statefulset",
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/k8s/resources.yaml",
        "attributes": {
          "k8s.statefulset.name": {
            "source_group": "registry.k8s",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "k8s.statefulset.uid": {
            "source_group": "registry.k8s",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "resource.k8s.daemonset",
      "type": "resource",
      "brief": "A Kubernetes DaemonSet object.\n",
      "stability": "development",
      "attributes": [
        {
          "name": "k8s.daemonset.uid",
          "type": "string",
          "brief": "The UID of the DaemonSet.\n",
          "examples": [
            "275ecb36-5aa8-4c2a-9c47-d8bb681b9aff"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "k8s.daemonset.name",
          "type": "string",
          "brief": "The name of the DaemonSet.\n",
          "examples": [
            "opentelemetry"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": "k8s.daemonset",
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/k8s/resources.yaml",
        "attributes": {
          "k8s.daemonset.name": {
            "source_group": "registry.k8s",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "k8s.daemonset.uid": {
            "source_group": "registry.k8s",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "resource.k8s.job",
      "type": "resource",
      "brief": "A Kubernetes Job object.\n",
      "stability": "development",
      "attributes": [
        {
          "name": "k8s.job.uid",
          "type": "string",
          "brief": "The UID of the Job.\n",
          "examples": [
            "275ecb36-5aa8-4c2a-9c47-d8bb681b9aff"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "k8s.job.name",
          "type": "string",
          "brief": "The name of the Job.\n",
          "examples": [
            "opentelemetry"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": "k8s.job",
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/k8s/resources.yaml",
        "attributes": {
          "k8s.job.name": {
            "source_group": "registry.k8s",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "k8s.job.uid": {
            "source_group": "registry.k8s",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "resource.k8s.cronjob",
      "type": "resource",
      "brief": "A Kubernetes CronJob object.\n",
      "stability": "development",
      "attributes": [
        {
          "name": "k8s.cronjob.uid",
          "type": "string",
          "brief": "The UID of the CronJob.\n",
          "examples": [
            "275ecb36-5aa8-4c2a-9c47-d8bb681b9aff"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "k8s.cronjob.name",
          "type": "string",
          "brief": "The name of the CronJob.\n",
          "examples": [
            "opentelemetry"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": "k8s.cronjob",
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/k8s/resources.yaml",
        "attributes": {
          "k8s.cronjob.name": {
            "source_group": "registry.k8s",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "k8s.cronjob.uid": {
            "source_group": "registry.k8s",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "resource.k8s.replicationcontroller",
      "type": "resource",
      "brief": "A Kubernetes ReplicationController object.\n",
      "stability": "development",
      "attributes": [
        {
          "name": "k8s.replicationcontroller.uid",
          "type": "string",
          "brief": "The UID of the replication controller.\n",
          "examples": [
            "275ecb36-5aa8-4c2a-9c47-d8bb681b9aff"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "k8s.replicationcontroller.name",
          "type": "string",
          "brief": "The name of the replication controller.\n",
          "examples": [
            "opentelemetry"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": "k8s.replicationcontroller",
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/k8s/resources.yaml",
        "attributes": {
          "k8s.replicationcontroller.name": {
            "source_group": "registry.k8s",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "k8s.replicationcontroller.uid": {
            "source_group": "registry.k8s",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "resource.k8s.hpa",
      "type": "resource",
      "brief": "A Kubernetes HorizontalPodAutoscaler object.\n",
      "stability": "development",
      "attributes": [
        {
          "name": "k8s.hpa.uid",
          "type": "string",
          "brief": "The UID of the horizontal pod autoscaler.\n",
          "examples": [
            "275ecb36-5aa8-4c2a-9c47-d8bb681b9aff"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "k8s.hpa.name",
          "type": "string",
          "brief": "The name of the horizontal pod autoscaler.\n",
          "examples": [
            "opentelemetry"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": "k8s.hpa",
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/k8s/resources.yaml",
        "attributes": {
          "k8s.hpa.name": {
            "source_group": "registry.k8s",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "k8s.hpa.uid": {
            "source_group": "registry.k8s",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "resource.k8s.resourcequota",
      "type": "resource",
      "brief": "A Kubernetes ResourceQuota object.\n",
      "stability": "development",
      "attributes": [
        {
          "name": "k8s.resourcequota.uid",
          "type": "string",
          "brief": "The UID of the resource quota.\n",
          "examples": [
            "275ecb36-5aa8-4c2a-9c47-d8bb681b9aff"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "k8s.resourcequota.name",
          "type": "string",
          "brief": "The name of the resource quota.\n",
          "examples": [
            "opentelemetry"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": "k8s.resourcequota",
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/k8s/resources.yaml",
        "attributes": {
          "k8s.resourcequota.name": {
            "source_group": "registry.k8s",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "k8s.resourcequota.uid": {
            "source_group": "registry.k8s",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "registry.faas",
      "type": "attribute_group",
      "brief": "FaaS attributes",
      "attributes": [
        {
          "name": "faas.name",
          "type": "string",
          "brief": "The name of the single function that this runtime instance executes.\n",
          "examples": [
            "my-function",
            "myazurefunctionapp/some-function-name"
          ],
          "requirement_level": "recommended",
          "note": "This is the name of the function as configured/deployed on the FaaS\nplatform and is usually different from the name of the callback\nfunction (which may be stored in the\n[`code.namespace`/`code.function.name`](/docs/general/attributes.md#source-code-attributes)\nspan attributes).\n\nFor some cloud providers, the above definition is ambiguous. The following\ndefinition of function name MUST be used for this attribute\n(and consequently the span name) for the listed cloud providers/products:\n\n- **Azure:**  The full name `<FUNCAPP>/<FUNC>`, i.e., function app name\n  followed by a forward slash followed by the function name (this form\n  can also be seen in the resource JSON for the function).\n  This means that a span attribute MUST be used, as an Azure function\n  app can host multiple functions that would usually share\n  a TracerProvider (see also the `cloud.resource_id` attribute).\n",
          "stability": "development"
        },
        {
          "name": "faas.version",
          "type": "string",
          "brief": "The immutable version of the function being executed.",
          "examples": [
            "26",
            "pinkfroid-00002"
          ],
          "requirement_level": "recommended",
          "note": "Depending on the cloud provider and platform, use:\n\n- **AWS Lambda:** The [function version](https://docs.aws.amazon.com/lambda/latest/dg/configuration-versions.html)\n  (an integer represented as a decimal string).\n- **Google Cloud Run (Services):** The [revision](https://cloud.google.com/run/docs/managing/revisions)\n  (i.e., the function name plus the revision suffix).\n- **Google Cloud Functions:** The value of the\n  [`K_REVISION` environment variable](https://cloud.google.com/functions/docs/env-var#runtime_environment_variables_set_automatically).\n- **Azure Functions:** Not applicable. Do not set this attribute.\n",
          "stability": "development"
        },
        {
          "name": "faas.instance",
          "type": "string",
          "brief": "The execution environment ID as a string, that will be potentially reused for other invocations to the same function/function version.\n",
          "examples": [
            "2021/06/28/[$LATEST]2f399eb14537447da05ab2a2e39309de"
          ],
          "requirement_level": "recommended",
          "note": "- **AWS Lambda:** Use the (full) log stream name.\n",
          "stability": "development"
        },
        {
          "name": "faas.max_memory",
          "type": "int",
          "brief": "The amount of memory available to the serverless function converted to Bytes.\n",
          "examples": 134217728,
          "requirement_level": "recommended",
          "note": "It's recommended to set this attribute since e.g. too little memory can easily stop a Java AWS Lambda function from working correctly. On AWS Lambda, the environment variable `AWS_LAMBDA_FUNCTION_MEMORY_SIZE` provides this information (which must be multiplied by 1,048,576).\n",
          "stability": "development"
        },
        {
          "name": "faas.trigger",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "datasource",
                "value": "datasource",
                "brief": "A response to some data source operation such as a database or filesystem read/write",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "http",
                "value": "http",
                "brief": "To provide an answer to an inbound HTTP request",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "pubsub",
                "value": "pubsub",
                "brief": "A function is set to be executed when messages are sent to a messaging system",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "timer",
                "value": "timer",
                "brief": "A function is scheduled to be executed regularly",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "other",
                "value": "other",
                "brief": "If none of the others apply",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "Type of the trigger which caused this function invocation.\n",
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "faas.invoked_name",
          "type": "string",
          "brief": "The name of the invoked function.\n",
          "examples": "my-function",
          "requirement_level": "recommended",
          "note": "SHOULD be equal to the `faas.name` resource attribute of the invoked function.\n",
          "stability": "development"
        },
        {
          "name": "faas.invoked_provider",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "alibaba_cloud",
                "value": "alibaba_cloud",
                "brief": "Alibaba Cloud",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "aws",
                "value": "aws",
                "brief": "Amazon Web Services",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "azure",
                "value": "azure",
                "brief": "Microsoft Azure",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "gcp",
                "value": "gcp",
                "brief": "Google Cloud Platform",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "tencent_cloud",
                "value": "tencent_cloud",
                "brief": "Tencent Cloud",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The cloud provider of the invoked function.\n",
          "requirement_level": "recommended",
          "note": "SHOULD be equal to the `cloud.provider` resource attribute of the invoked function.\n",
          "stability": "development"
        },
        {
          "name": "faas.invoked_region",
          "type": "string",
          "brief": "The cloud region of the invoked function.\n",
          "examples": "eu-central-1",
          "requirement_level": "recommended",
          "note": "SHOULD be equal to the `cloud.region` resource attribute of the invoked function.\n",
          "stability": "development"
        },
        {
          "name": "faas.invocation_id",
          "type": "string",
          "brief": "The invocation ID of the current function invocation.\n",
          "examples": "af9d5aa4-a685-4c5f-a22b-444f80b3cc28",
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "faas.time",
          "type": "string",
          "brief": "A string containing the function invocation time in the [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format expressed in [UTC](https://www.w3.org/TR/NOTE-datetime).\n",
          "examples": "2020-01-23T13:47:06Z",
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "faas.cron",
          "type": "string",
          "brief": "A string containing the schedule period as [Cron Expression](https://docs.oracle.com/cd/E12058_01/doc/doc.1014/e12030/cron_expressions.htm).\n",
          "examples": "0/5 * * * ? *",
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "faas.coldstart",
          "type": "boolean",
          "brief": "A boolean that is true if the serverless function is executed for the first time (aka cold-start).\n",
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "faas.document.collection",
          "type": "string",
          "brief": "The name of the source on which the triggering operation was performed. For example, in Cloud Storage or S3 corresponds to the bucket name, and in Cosmos DB to the database name.\n",
          "examples": [
            "myBucketName",
            "myDbName"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "faas.document.operation",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "insert",
                "value": "insert",
                "brief": "When a new object is created.",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "edit",
                "value": "edit",
                "brief": "When an object is modified.",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "delete",
                "value": "delete",
                "brief": "When an object is deleted.",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes the type of the operation that was performed on the data.",
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "faas.document.time",
          "type": "string",
          "brief": "A string containing the time when the data was accessed in the [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format expressed in [UTC](https://www.w3.org/TR/NOTE-datetime).\n",
          "examples": "2020-01-23T13:47:06Z",
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "faas.document.name",
          "type": "string",
          "brief": "The document name/table subjected to the operation. For example, in Cloud Storage or S3 is the name of the file, and in Cosmos DB the table name.\n",
          "examples": [
            "myFile.txt",
            "myTableName"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/faas/registry.yaml"
      },
      "display_name": "Function as a Service Attributes"
    },
    {
      "id": "event.exception",
      "type": "event",
      "brief": "This event describes a single exception.\n",
      "stability": "stable",
      "attributes": [
        {
          "name": "exception.escaped",
          "type": "boolean",
          "brief": "Indicates that the exception is escaping the scope of the span.\n",
          "requirement_level": "recommended",
          "stability": "stable",
          "deprecated": {
            "reason": "uncategorized",
            "note": "It's no longer recommended to record exceptions that are handled and do not escape the scope of a span."
          }
        },
        {
          "name": "exception.stacktrace",
          "type": "string",
          "brief": "A stacktrace as a string in the natural representation for the language runtime. The representation is to be determined and documented by each language SIG.\n",
          "examples": "Exception in thread \"main\" java.lang.RuntimeException: Test exception\\n at com.example.GenerateTrace.methodB(GenerateTrace.java:13)\\n at com.example.GenerateTrace.methodA(GenerateTrace.java:9)\\n at com.example.GenerateTrace.main(GenerateTrace.java:5)\n",
          "requirement_level": "recommended",
          "stability": "stable"
        },
        {
          "name": "exception.type",
          "type": "string",
          "brief": "The type of the exception (its fully-qualified class name, if applicable). The dynamic type of the exception should be preferred over the static type in languages that support it.\n",
          "examples": [
            "java.net.ConnectException",
            "OSError"
          ],
          "requirement_level": {
            "conditionally_required": "Required if `exception.message` is not set, recommended otherwise."
          },
          "stability": "stable"
        },
        {
          "name": "exception.message",
          "type": "string",
          "brief": "The exception message.",
          "examples": [
            "Division by zero",
            "Can't convert 'int' object to str implicitly"
          ],
          "requirement_level": {
            "conditionally_required": "Required if `exception.type` is not set, recommended otherwise."
          },
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": "exception",
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/exceptions/events.yaml",
        "attributes": {
          "exception.escaped": {
            "source_group": "registry.exception.deprecated",
            "inherited_fields": [
              "brief",
              "deprecated",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "exception.message": {
            "source_group": "registry.exception",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "exception.stacktrace": {
            "source_group": "registry.exception",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "exception.type": {
            "source_group": "registry.exception",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "url",
      "type": "attribute_group",
      "brief": "Attributes describing URL.",
      "attributes": [
        {
          "name": "url.fragment",
          "type": "string",
          "brief": "The [URI fragment](https://www.rfc-editor.org/rfc/rfc3986#section-3.5) component\n",
          "examples": [
            "SemConv"
          ],
          "requirement_level": "recommended",
          "stability": "stable"
        },
        {
          "name": "url.path",
          "type": "string",
          "brief": "The [URI path](https://www.rfc-editor.org/rfc/rfc3986#section-3.3) component\n",
          "examples": [
            "/search"
          ],
          "requirement_level": "recommended",
          "note": "Sensitive content provided in `url.path` SHOULD be scrubbed when instrumentations can identify it.\n",
          "stability": "stable"
        },
        {
          "name": "url.scheme",
          "type": "string",
          "brief": "The [URI scheme](https://www.rfc-editor.org/rfc/rfc3986#section-3.1) component identifying the used protocol.\n",
          "examples": [
            "https",
            "ftp",
            "telnet"
          ],
          "requirement_level": "recommended",
          "stability": "stable"
        },
        {
          "name": "url.full",
          "type": "string",
          "brief": "Absolute URL describing a network resource according to [RFC3986](https://www.rfc-editor.org/rfc/rfc3986)",
          "examples": [
            "https://www.foo.bar/search?q=OpenTelemetry#SemConv",
            "//localhost"
          ],
          "tag": "sensitive-information",
          "requirement_level": "recommended",
          "note": "For network calls, URL usually has `scheme://host[:port][path][?query][#fragment]` format, where the fragment\nis not transmitted over HTTP, but if it is known, it SHOULD be included nevertheless.\n\n`url.full` MUST NOT contain credentials passed via URL in form of `https://username:password@www.example.com/`.\nIn such case username and password SHOULD be redacted and attribute's value SHOULD be `https://REDACTED:REDACTED@www.example.com/`.\n\n`url.full` SHOULD capture the absolute URL when it is available (or can be reconstructed).\n\nSensitive content provided in `url.full` SHOULD be scrubbed when instrumentations can identify it.\n\n![Development](https://img.shields.io/badge/-development-blue)\nQuery string values for the following keys SHOULD be redacted by default and replaced by the\nvalue `REDACTED`:\n\n* [`AWSAccessKeyId`](https://docs.aws.amazon.com/AmazonS3/latest/userguide/RESTAuthentication.html#RESTAuthenticationQueryStringAuth)\n* [`Signature`](https://docs.aws.amazon.com/AmazonS3/latest/userguide/RESTAuthentication.html#RESTAuthenticationQueryStringAuth)\n* [`sig`](https://learn.microsoft.com/azure/storage/common/storage-sas-overview#sas-token)\n* [`X-Goog-Signature`](https://cloud.google.com/storage/docs/access-control/signed-urls)\n\nThis list is subject to change over time.\n\nWhen a query string value is redacted, the query string key SHOULD still be preserved, e.g.\n`https://www.example.com/path?color=blue&sig=REDACTED`.\n",
          "stability": "stable"
        },
        {
          "name": "url.query",
          "type": "string",
          "brief": "The [URI query](https://www.rfc-editor.org/rfc/rfc3986#section-3.4) component\n",
          "examples": [
            "q=OpenTelemetry"
          ],
          "tag": "sensitive-information",
          "requirement_level": "recommended",
          "note": "Sensitive content provided in `url.query` SHOULD be scrubbed when instrumentations can identify it.\n\n![Development](https://img.shields.io/badge/-development-blue)\nQuery string values for the following keys SHOULD be redacted by default and replaced by the value `REDACTED`:\n\n* [`AWSAccessKeyId`](https://docs.aws.amazon.com/AmazonS3/latest/userguide/RESTAuthentication.html#RESTAuthenticationQueryStringAuth)\n* [`Signature`](https://docs.aws.amazon.com/AmazonS3/latest/userguide/RESTAuthentication.html#RESTAuthenticationQueryStringAuth)\n* [`sig`](https://learn.microsoft.com/azure/storage/common/storage-sas-overview#sas-token)\n* [`X-Goog-Signature`](https://cloud.google.com/storage/docs/access-control/signed-urls)\n\nThis list is subject to change over time.\n\nWhen a query string value is redacted, the query string key SHOULD still be preserved, e.g.\n`q=OpenTelemetry&sig=REDACTED`.\n",
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/url/common.yaml",
        "attributes": {
          "url.fragment": {
            "source_group": "registry.url",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "url.full": {
            "source_group": "registry.url",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "tag"
            ]
          },
          "url.path": {
            "source_group": "registry.url",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "url.query": {
            "source_group": "registry.url",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "tag"
            ]
          },
          "url.scheme": {
            "source_group": "registry.url",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "registry.container",
      "type": "attribute_group",
      "brief": "A container instance.\n",
      "attributes": [
        {
          "name": "container.name",
          "type": "string",
          "brief": "Container name used by container runtime.\n",
          "examples": [
            "opentelemetry-autoconf"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "container.id",
          "type": "string",
          "brief": "Container ID. Usually a UUID, as for example used to [identify Docker containers](https://docs.docker.com/engine/containers/run/#container-identification). The UUID might be abbreviated.\n",
          "examples": [
            "a3bf90e006b2"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "container.runtime",
          "type": "string",
          "brief": "The container runtime managing this container.\n",
          "examples": [
            "docker",
            "containerd",
            "rkt"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "container.image.name",
          "type": "string",
          "brief": "Name of the image the container was built on.\n",
          "examples": [
            "gcr.io/opentelemetry/operator"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "container.image.tags",
          "type": "string[]",
          "brief": "Container image tags. An example can be found in [Docker Image Inspect](https://docs.docker.com/engine/api/v1.43/#tag/Image/operation/ImageInspect). Should be only the `<tag>` section of the full name for example from `registry.example.com/my-org/my-image:<tag>`.\n",
          "examples": [
            [
              "v1.27.1",
              "3.5.7-0"
            ]
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "container.image.id",
          "type": "string",
          "brief": "Runtime specific image identifier. Usually a hash algorithm followed by a UUID.\n",
          "examples": [
            "sha256:19c92d0a00d1b66d897bceaa7319bee0dd38a10a851c60bcec9474aa3f01e50f"
          ],
          "requirement_level": "recommended",
          "note": "Docker defines a sha256 of the image id; `container.image.id` corresponds to the `Image` field from the Docker container inspect [API](https://docs.docker.com/engine/api/v1.43/#tag/Container/operation/ContainerInspect) endpoint.\nK8s defines a link to the container registry repository with digest `\"imageID\": \"registry.azurecr.io /namespace/service/dockerfile@sha256:bdeabd40c3a8a492eaf9e8e44d0ebbb84bac7ee25ac0cf8a7159d25f62555625\"`.\nThe ID is assigned by the container runtime and can vary in different environments. Consider using `oci.manifest.digest` if it is important to identify the same image in different environments/runtimes.\n",
          "stability": "development"
        },
        {
          "name": "container.image.repo_digests",
          "type": "string[]",
          "brief": "Repo digests of the container image as provided by the container runtime.\n",
          "examples": [
            [
              "example@sha256:afcc7f1ac1b49db317a7196c902e61c6c3c4607d63599ee1a82d702d249a0ccb",
              "internal.registry.example.com:5000/example@sha256:b69959407d21e8a062e0416bf13405bb2b71ed7a84dde4158ebafacfa06f5578"
            ]
          ],
          "requirement_level": "recommended",
          "note": "[Docker](https://docs.docker.com/engine/api/v1.43/#tag/Image/operation/ImageInspect) and [CRI](https://github.com/kubernetes/cri-api/blob/c75ef5b473bbe2d0a4fc92f82235efd665ea8e9f/pkg/apis/runtime/v1/api.proto#L1237-L1238) report those under the `RepoDigests` field.\n",
          "stability": "development"
        },
        {
          "name": "container.command",
          "type": "string",
          "brief": "The command used to run the container (i.e. the command name).\n",
          "examples": [
            "otelcontribcol"
          ],
          "requirement_level": "recommended",
          "note": "If using embedded credentials or sensitive data, it is recommended to remove them to prevent potential leakage.\n",
          "stability": "development"
        },
        {
          "name": "container.command_line",
          "type": "string",
          "brief": "The full command run by the container as a single string representing the full command.\n",
          "examples": [
            "otelcontribcol --config config.yaml"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "container.command_args",
          "type": "string[]",
          "brief": "All the command arguments (including the command/executable itself) run by the container.\n",
          "examples": [
            [
              "otelcontribcol",
              "--config",
              "config.yaml"
            ]
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "container.label",
          "type": "template[string]",
          "brief": "Container labels, `<key>` being the label name, the value being the label value.\n",
          "examples": [
            "container.label.app=nginx"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "container.csi.plugin.name",
          "type": "string",
          "brief": "The name of the CSI ([Container Storage Interface](https://github.com/container-storage-interface/spec)) plugin used by the volume.\n",
          "examples": [
            "pd.csi.storage.gke.io"
          ],
          "requirement_level": "recommended",
          "note": "This can sometimes be referred to as a \"driver\" in CSI implementations. This should represent the `name` field of the GetPluginInfo RPC.\n",
          "stability": "development"
        },
        {
          "name": "container.csi.volume.id",
          "type": "string",
          "brief": "The unique volume ID returned by the CSI ([Container Storage Interface](https://github.com/container-storage-interface/spec)) plugin.\n",
          "examples": [
            "projects/my-gcp-project/zones/my-gcp-zone/disks/my-gcp-disk"
          ],
          "requirement_level": "recommended",
          "note": "This can sometimes be referred to as a \"volume handle\" in CSI implementations. This should represent the `Volume.volume_id` field in CSI spec.\n",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/container/registry.yaml"
      },
      "display_name": "Container Attributes"
    },
    {
      "id": "registry.tls.deprecated",
      "type": "attribute_group",
      "brief": "Describes deprecated `tls` attributes.",
      "attributes": [
        {
          "name": "tls.client.server_name",
          "type": "string",
          "brief": "Deprecated, use `server.address` instead.",
          "examples": [
            "opentelemetry.io"
          ],
          "requirement_level": "recommended",
          "stability": "development",
          "deprecated": {
            "reason": "uncategorized",
            "note": "Replaced by `server.address`."
          }
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/tls/deprecated/registry-deprecated.yaml"
      }
    },
    {
      "id": "registry.vcs.deprecated",
      "type": "attribute_group",
      "brief": "\"Describes deprecated vcs attributes.\"\n",
      "attributes": [
        {
          "name": "vcs.repository.ref.name",
          "type": "string",
          "brief": "Deprecated, use `vcs.ref.head.name` instead.\n",
          "examples": [
            "my-feature-branch",
            "tag-1-test"
          ],
          "requirement_level": "recommended",
          "stability": "development",
          "deprecated": {
            "reason": "uncategorized",
            "note": "Deprecated, use `vcs.ref.head.name` instead."
          }
        },
        {
          "name": "vcs.repository.ref.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "branch",
                "value": "branch",
                "brief": "[branch](https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddefbranchabranch)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "tag",
                "value": "tag",
                "brief": "[tag](https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddeftagatag)",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "Deprecated, use `vcs.ref.head.type` instead.\n",
          "examples": [
            "branch",
            "tag"
          ],
          "requirement_level": "recommended",
          "stability": "development",
          "deprecated": {
            "reason": "uncategorized",
            "note": "Deprecated, use `vcs.ref.head.type` instead."
          }
        },
        {
          "name": "vcs.repository.ref.revision",
          "type": "string",
          "brief": "Deprecated, use `vcs.ref.head.revision` instead.\n",
          "examples": [
            "9d59409acf479dfa0df1aa568182e43e43df8bbe28d60fcf2bc52e30068802cc",
            "main",
            "123",
            "HEAD"
          ],
          "requirement_level": "recommended",
          "stability": "development",
          "deprecated": {
            "reason": "uncategorized",
            "note": "Deprecated, use `vcs.ref.head.revision` instead."
          }
        },
        {
          "name": "vcs.repository.change.title",
          "type": "string",
          "brief": "Deprecated, use `vcs.change.title` instead.\n",
          "examples": [
            "Fixes broken thing",
            "feat: add my new feature",
            "[chore] update dependency"
          ],
          "requirement_level": "recommended",
          "stability": "development",
          "deprecated": {
            "reason": "uncategorized",
            "note": "Deprecated, use `vcs.change.title` instead."
          }
        },
        {
          "name": "vcs.repository.change.id",
          "type": "string",
          "brief": "Deprecated, use `vcs.change.id` instead.\n",
          "examples": [
            "123"
          ],
          "requirement_level": "recommended",
          "stability": "development",
          "deprecated": {
            "reason": "uncategorized",
            "note": "Deprecated, use `vcs.change.id` instead."
          }
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/vcs/deprecated/registry-deprecated.yaml"
      }
    },
    {
      "id": "registry.http.deprecated",
      "type": "attribute_group",
      "brief": "Describes deprecated HTTP attributes.",
      "attributes": [
        {
          "name": "http.method",
          "type": "string",
          "brief": "Deprecated, use `http.request.method` instead.",
          "examples": [
            "GET",
            "POST",
            "HEAD"
          ],
          "requirement_level": "recommended",
          "stability": "development",
          "deprecated": {
            "reason": "uncategorized",
            "note": "Replaced by `http.request.method`."
          }
        },
        {
          "name": "http.status_code",
          "type": "int",
          "brief": "Deprecated, use `http.response.status_code` instead.",
          "examples": [
            200
          ],
          "requirement_level": "recommended",
          "stability": "development",
          "deprecated": {
            "reason": "uncategorized",
            "note": "Replaced by `http.response.status_code`."
          }
        },
        {
          "name": "http.scheme",
          "type": "string",
          "brief": "Deprecated, use `url.scheme` instead.",
          "examples": [
            "http",
            "https"
          ],
          "requirement_level": "recommended",
          "stability": "development",
          "deprecated": {
            "reason": "uncategorized",
            "note": "Replaced by `url.scheme` instead."
          }
        },
        {
          "name": "http.url",
          "type": "string",
          "brief": "Deprecated, use `url.full` instead.",
          "examples": [
            "https://www.foo.bar/search?q=OpenTelemetry#SemConv"
          ],
          "requirement_level": "recommended",
          "stability": "development",
          "deprecated": {
            "reason": "uncategorized",
            "note": "Replaced by `url.full`."
          }
        },
        {
          "name": "http.target",
          "type": "string",
          "brief": "Deprecated, use `url.path` and `url.query` instead.",
          "examples": [
            "/search?q=OpenTelemetry#SemConv"
          ],
          "requirement_level": "recommended",
          "stability": "development",
          "deprecated": {
            "reason": "uncategorized",
            "note": "Split to `url.path` and `url.query."
          }
        },
        {
          "name": "http.request_content_length",
          "type": "int",
          "brief": "Deprecated, use `http.request.header.<key>` instead.",
          "examples": 3495,
          "requirement_level": "recommended",
          "stability": "development",
          "deprecated": {
            "reason": "uncategorized",
            "note": "Replaced by `http.request.header.<key>`."
          }
        },
        {
          "name": "http.response_content_length",
          "type": "int",
          "brief": "Deprecated, use `http.response.header.<key>` instead.",
          "examples": 3495,
          "requirement_level": "recommended",
          "stability": "development",
          "deprecated": {
            "reason": "uncategorized",
            "note": "Replaced by `http.response.header.<key>`."
          }
        },
        {
          "name": "http.client_ip",
          "type": "string",
          "brief": "Deprecated, use `client.address` instead.",
          "examples": "83.164.160.102",
          "requirement_level": "recommended",
          "stability": "development",
          "deprecated": {
            "reason": "uncategorized",
            "note": "Replaced by `client.address`."
          }
        },
        {
          "name": "http.host",
          "type": "string",
          "brief": "Deprecated, use one of `server.address`, `client.address` or `http.request.header.host` instead, depending on the usage.",
          "examples": [
            "www.example.org"
          ],
          "requirement_level": "recommended",
          "stability": "development",
          "deprecated": {
            "reason": "uncategorized",
            "note": "Replaced by one of `server.address`, `client.address` or `http.request.header.host`, depending on the usage."
          }
        },
        {
          "name": "http.request_content_length_uncompressed",
          "type": "int",
          "brief": "Deprecated, use `http.request.body.size` instead.",
          "examples": 5493,
          "requirement_level": "recommended",
          "stability": "development",
          "deprecated": {
            "reason": "uncategorized",
            "note": "Replaced by `http.request.body.size`."
          }
        },
        {
          "name": "http.response_content_length_uncompressed",
          "type": "int",
          "brief": "Deprecated, use `http.response.body.size` instead.",
          "examples": 5493,
          "requirement_level": "recommended",
          "stability": "development",
          "deprecated": {
            "reason": "uncategorized",
            "note": "Replace by `http.response.body.size`."
          }
        },
        {
          "name": "http.server_name",
          "type": "string",
          "brief": "Deprecated, use `server.address` instead.",
          "examples": [
            "example.com"
          ],
          "requirement_level": "recommended",
          "stability": "development",
          "deprecated": {
            "reason": "uncategorized",
            "note": "Replaced by `server.address`."
          }
        },
        {
          "name": "http.flavor",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "http_1_0",
                "value": "1.0",
                "brief": "HTTP/1.0",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "http_1_1",
                "value": "1.1",
                "brief": "HTTP/1.1",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "http_2_0",
                "value": "2.0",
                "brief": "HTTP/2",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "http_3_0",
                "value": "3.0",
                "brief": "HTTP/3",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "spdy",
                "value": "SPDY",
                "brief": "SPDY protocol.",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "quic",
                "value": "QUIC",
                "brief": "QUIC protocol.",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "Deprecated, use `network.protocol.name` instead.",
          "requirement_level": "recommended",
          "stability": "development",
          "deprecated": {
            "reason": "uncategorized",
            "note": "Replaced by `network.protocol.name`."
          }
        },
        {
          "name": "http.user_agent",
          "type": "string",
          "brief": "Deprecated, use `user_agent.original` instead.",
          "examples": [
            "CERN-LineMode/2.15 libwww/2.17b3",
            "Mozilla/5.0 (iPhone; CPU iPhone OS 14_7_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.1.2 Mobile/15E148 Safari/604.1"
          ],
          "requirement_level": "recommended",
          "stability": "development",
          "deprecated": {
            "reason": "uncategorized",
            "note": "Replaced by `user_agent.original`."
          }
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/http/deprecated/registry-deprecated.yaml"
      },
      "display_name": "Deprecated HTTP Attributes"
    },
    {
      "id": "registry.artifact",
      "type": "attribute_group",
      "brief": "This group describes attributes specific to artifacts. Artifacts are files or other immutable objects that are intended for distribution. This definition aligns directly with the [SLSA](https://slsa.dev/spec/v1.0/terminology#package-model) package model.\n",
      "attributes": [
        {
          "name": "artifact.filename",
          "type": "string",
          "brief": "The human readable file name of the artifact, typically generated during build and release processes. Often includes the package name and version in the file name.\n",
          "examples": [
            "golang-binary-amd64-v0.1.0",
            "docker-image-amd64-v0.1.0",
            "release-1.tar.gz",
            "file-name-package.tar.gz"
          ],
          "requirement_level": "recommended",
          "note": "This file name can also act as the [Package Name](https://slsa.dev/spec/v1.0/terminology#package-model)\nin cases where the package ecosystem maps accordingly.\nAdditionally, the artifact [can be published](https://slsa.dev/spec/v1.0/terminology#software-supply-chain)\nfor others, but that is not a guarantee.\n",
          "stability": "development"
        },
        {
          "name": "artifact.version",
          "type": "string",
          "brief": "The version of the artifact.\n",
          "examples": [
            "v0.1.0",
            "1.2.1",
            "122691-build"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "artifact.purl",
          "type": "string",
          "brief": "The [Package URL](https://github.com/package-url/purl-spec) of the [package artifact](https://slsa.dev/spec/v1.0/terminology#package-model) provides a standard way to identify and locate the packaged artifact.\n",
          "examples": [
            "pkg:github/package-url/purl-spec@1209109710924",
            "pkg:npm/foo@12.12.3"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "artifact.hash",
          "type": "string",
          "brief": "The full [hash value (see glossary)](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.186-5.pdf), often found in checksum.txt on a release of the artifact and used to verify package integrity.\n",
          "examples": [
            "9ff4c52759e2c4ac70b7d517bc7fcdc1cda631ca0045271ddd1b192544f8a3e9"
          ],
          "requirement_level": "recommended",
          "note": "The specific algorithm used to create the cryptographic hash value is\nnot defined. In situations where an artifact has multiple\ncryptographic hashes, it is up to the implementer to choose which\nhash value to set here; this should be the most secure hash algorithm\nthat is suitable for the situation and consistent with the\ncorresponding attestation. The implementer can then provide the other\nhash values through an additional set of attribute extensions as they\ndeem necessary.\n",
          "stability": "development"
        },
        {
          "name": "artifact.attestation.id",
          "type": "string",
          "brief": "The id of the build [software attestation](https://slsa.dev/attestation-model).\n",
          "examples": [
            "123"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "artifact.attestation.filename",
          "type": "string",
          "brief": "The provenance filename of the built attestation which directly relates to the build artifact filename. This filename SHOULD accompany the artifact at publish time. See the [SLSA Relationship](https://slsa.dev/spec/v1.0/distributing-provenance#relationship-between-artifacts-and-attestations) specification for more information.\n",
          "examples": [
            "golang-binary-amd64-v0.1.0.attestation",
            "docker-image-amd64-v0.1.0.intoto.json1",
            "release-1.tar.gz.attestation",
            "file-name-package.tar.gz.intoto.json1"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "artifact.attestation.hash",
          "type": "string",
          "brief": "The full [hash value (see glossary)](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.186-5.pdf), of the built attestation. Some envelopes in the [software attestation space](https://github.com/in-toto/attestation/tree/main/spec) also refer to this as the **digest**.\n",
          "examples": [
            "1b31dfcd5b7f9267bf2ff47651df1cfb9147b9e4df1f335accf65b4cda498408"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/artifact/registry.yaml"
      },
      "display_name": "Artifact Attributes"
    },
    {
      "id": "gen_ai.common.event.attributes",
      "type": "attribute_group",
      "brief": "Describes common Gen AI event attributes.\n",
      "stability": "development",
      "attributes": [
        {
          "name": "gen_ai.system",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "openai",
                "value": "openai",
                "brief": "OpenAI",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "vertex_ai",
                "value": "vertex_ai",
                "brief": "Vertex AI",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "gemini",
                "value": "gemini",
                "brief": "Gemini",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "anthropic",
                "value": "anthropic",
                "brief": "Anthropic",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "cohere",
                "value": "cohere",
                "brief": "Cohere",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "az.ai.inference",
                "value": "az.ai.inference",
                "brief": "Azure AI Inference",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "az.ai.openai",
                "value": "az.ai.openai",
                "brief": "Azure OpenAI",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "ibm.watsonx.ai",
                "value": "ibm.watsonx.ai",
                "brief": "IBM Watsonx AI",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "aws.bedrock",
                "value": "aws.bedrock",
                "brief": "AWS Bedrock",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "perplexity",
                "value": "perplexity",
                "brief": "Perplexity",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "xai",
                "value": "xai",
                "brief": "xAI",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "deepseek",
                "value": "deepseek",
                "brief": "DeepSeek",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "groq",
                "value": "groq",
                "brief": "Groq",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "mistral_ai",
                "value": "mistral_ai",
                "brief": "Mistral AI",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The Generative AI product as identified by the client or server instrumentation.",
          "examples": "openai",
          "requirement_level": "recommended",
          "note": "The `gen_ai.system` describes a family of GenAI models with specific model identified\nby `gen_ai.request.model` and `gen_ai.response.model` attributes.\n\nThe actual GenAI product may differ from the one identified by the client.\nMultiple systems, including Azure OpenAI and Gemini, are accessible by OpenAI client\nlibraries. In such cases, the `gen_ai.system` is set to `openai` based on the\ninstrumentation's best knowledge, instead of the actual system. The `server.address`\nattribute may help identify the actual system in use for `openai`.\n\nFor custom model, a custom friendly name SHOULD be used.\nIf none of these options apply, the `gen_ai.system` SHOULD be set to `_OTHER`.\n",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/gen-ai/events.yaml",
        "attributes": {
          "gen_ai.system": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "event.gen_ai.system.message",
      "type": "event",
      "brief": "This event describes the system instructions passed to the GenAI model.\n",
      "stability": "development",
      "attributes": [
        {
          "name": "gen_ai.system",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "openai",
                "value": "openai",
                "brief": "OpenAI",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "vertex_ai",
                "value": "vertex_ai",
                "brief": "Vertex AI",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "gemini",
                "value": "gemini",
                "brief": "Gemini",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "anthropic",
                "value": "anthropic",
                "brief": "Anthropic",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "cohere",
                "value": "cohere",
                "brief": "Cohere",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "az.ai.inference",
                "value": "az.ai.inference",
                "brief": "Azure AI Inference",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "az.ai.openai",
                "value": "az.ai.openai",
                "brief": "Azure OpenAI",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "ibm.watsonx.ai",
                "value": "ibm.watsonx.ai",
                "brief": "IBM Watsonx AI",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "aws.bedrock",
                "value": "aws.bedrock",
                "brief": "AWS Bedrock",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "perplexity",
                "value": "perplexity",
                "brief": "Perplexity",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "xai",
                "value": "xai",
                "brief": "xAI",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "deepseek",
                "value": "deepseek",
                "brief": "DeepSeek",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "groq",
                "value": "groq",
                "brief": "Groq",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "mistral_ai",
                "value": "mistral_ai",
                "brief": "Mistral AI",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The Generative AI product as identified by the client or server instrumentation.",
          "examples": "openai",
          "requirement_level": "recommended",
          "note": "The `gen_ai.system` describes a family of GenAI models with specific model identified\nby `gen_ai.request.model` and `gen_ai.response.model` attributes.\n\nThe actual GenAI product may differ from the one identified by the client.\nMultiple systems, including Azure OpenAI and Gemini, are accessible by OpenAI client\nlibraries. In such cases, the `gen_ai.system` is set to `openai` based on the\ninstrumentation's best knowledge, instead of the actual system. The `server.address`\nattribute may help identify the actual system in use for `openai`.\n\nFor custom model, a custom friendly name SHOULD be used.\nIf none of these options apply, the `gen_ai.system` SHOULD be set to `_OTHER`.\n",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": "gen_ai.system.message",
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/gen-ai/events.yaml",
        "attributes": {
          "gen_ai.system": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      },
      "body": {
        "type": "map",
        "id": "gen_ai.system.message",
        "stability": "development",
        "requirement_level": "opt_in",
        "fields": [
          {
            "type": "undefined",
            "id": "content",
            "brief": "The contents of the system message.\n",
            "stability": "development",
            "examples": [
              "You're a helpful bot"
            ],
            "requirement_level": "opt_in"
          },
          {
            "type": "string",
            "id": "role",
            "brief": "The actual role of the message author as passed in the message.\n",
            "stability": "development",
            "examples": [
              "system",
              "instruction"
            ],
            "requirement_level": {
              "conditionally_required": "if available and not equal to `system`."
            }
          }
        ]
      }
    },
    {
      "id": "event.gen_ai.user.message",
      "type": "event",
      "brief": "This event describes the user message passed to the GenAI model.\n",
      "stability": "development",
      "attributes": [
        {
          "name": "gen_ai.system",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "openai",
                "value": "openai",
                "brief": "OpenAI",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "vertex_ai",
                "value": "vertex_ai",
                "brief": "Vertex AI",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "gemini",
                "value": "gemini",
                "brief": "Gemini",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "anthropic",
                "value": "anthropic",
                "brief": "Anthropic",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "cohere",
                "value": "cohere",
                "brief": "Cohere",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "az.ai.inference",
                "value": "az.ai.inference",
                "brief": "Azure AI Inference",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "az.ai.openai",
                "value": "az.ai.openai",
                "brief": "Azure OpenAI",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "ibm.watsonx.ai",
                "value": "ibm.watsonx.ai",
                "brief": "IBM Watsonx AI",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "aws.bedrock",
                "value": "aws.bedrock",
                "brief": "AWS Bedrock",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "perplexity",
                "value": "perplexity",
                "brief": "Perplexity",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "xai",
                "value": "xai",
                "brief": "xAI",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "deepseek",
                "value": "deepseek",
                "brief": "DeepSeek",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "groq",
                "value": "groq",
                "brief": "Groq",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "mistral_ai",
                "value": "mistral_ai",
                "brief": "Mistral AI",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The Generative AI product as identified by the client or server instrumentation.",
          "examples": "openai",
          "requirement_level": "recommended",
          "note": "The `gen_ai.system` describes a family of GenAI models with specific model identified\nby `gen_ai.request.model` and `gen_ai.response.model` attributes.\n\nThe actual GenAI product may differ from the one identified by the client.\nMultiple systems, including Azure OpenAI and Gemini, are accessible by OpenAI client\nlibraries. In such cases, the `gen_ai.system` is set to `openai` based on the\ninstrumentation's best knowledge, instead of the actual system. The `server.address`\nattribute may help identify the actual system in use for `openai`.\n\nFor custom model, a custom friendly name SHOULD be used.\nIf none of these options apply, the `gen_ai.system` SHOULD be set to `_OTHER`.\n",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": "gen_ai.user.message",
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/gen-ai/events.yaml",
        "attributes": {
          "gen_ai.system": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      },
      "body": {
        "type": "map",
        "id": "gen_ai.user.message",
        "stability": "development",
        "requirement_level": "opt_in",
        "fields": [
          {
            "type": "undefined",
            "id": "content",
            "brief": "The contents of the user message.\n",
            "stability": "development",
            "examples": [
              "What's the weather in Paris?"
            ],
            "requirement_level": "opt_in"
          },
          {
            "type": "string",
            "id": "role",
            "brief": "The actual role of the message author as passed in the message.\n",
            "stability": "development",
            "examples": [
              "user",
              "customer"
            ],
            "requirement_level": {
              "conditionally_required": "if available and not equal to `user`."
            }
          }
        ]
      }
    },
    {
      "id": "event.gen_ai.assistant.message",
      "type": "event",
      "brief": "This event describes the assistant message passed to GenAI system.\n",
      "stability": "development",
      "attributes": [
        {
          "name": "gen_ai.system",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "openai",
                "value": "openai",
                "brief": "OpenAI",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "vertex_ai",
                "value": "vertex_ai",
                "brief": "Vertex AI",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "gemini",
                "value": "gemini",
                "brief": "Gemini",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "anthropic",
                "value": "anthropic",
                "brief": "Anthropic",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "cohere",
                "value": "cohere",
                "brief": "Cohere",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "az.ai.inference",
                "value": "az.ai.inference",
                "brief": "Azure AI Inference",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "az.ai.openai",
                "value": "az.ai.openai",
                "brief": "Azure OpenAI",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "ibm.watsonx.ai",
                "value": "ibm.watsonx.ai",
                "brief": "IBM Watsonx AI",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "aws.bedrock",
                "value": "aws.bedrock",
                "brief": "AWS Bedrock",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "perplexity",
                "value": "perplexity",
                "brief": "Perplexity",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "xai",
                "value": "xai",
                "brief": "xAI",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "deepseek",
                "value": "deepseek",
                "brief": "DeepSeek",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "groq",
                "value": "groq",
                "brief": "Groq",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "mistral_ai",
                "value": "mistral_ai",
                "brief": "Mistral AI",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The Generative AI product as identified by the client or server instrumentation.",
          "examples": "openai",
          "requirement_level": "recommended",
          "note": "The `gen_ai.system` describes a family of GenAI models with specific model identified\nby `gen_ai.request.model` and `gen_ai.response.model` attributes.\n\nThe actual GenAI product may differ from the one identified by the client.\nMultiple systems, including Azure OpenAI and Gemini, are accessible by OpenAI client\nlibraries. In such cases, the `gen_ai.system` is set to `openai` based on the\ninstrumentation's best knowledge, instead of the actual system. The `server.address`\nattribute may help identify the actual system in use for `openai`.\n\nFor custom model, a custom friendly name SHOULD be used.\nIf none of these options apply, the `gen_ai.system` SHOULD be set to `_OTHER`.\n",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": "gen_ai.assistant.message",
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/gen-ai/events.yaml",
        "attributes": {
          "gen_ai.system": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      },
      "body": {
        "type": "map",
        "id": "gen_ai.assistant.message",
        "stability": "development",
        "requirement_level": "opt_in",
        "fields": [
          {
            "type": "undefined",
            "id": "content",
            "brief": "The contents of the tool message.\n",
            "stability": "development",
            "examples": [
              "The weather in Paris is rainy and overcast, with temperatures around 57°F"
            ],
            "requirement_level": "opt_in"
          },
          {
            "type": "string",
            "id": "role",
            "brief": "The actual role of the message author as passed in the message.\n",
            "stability": "development",
            "examples": [
              "assistant",
              "bot"
            ],
            "requirement_level": {
              "conditionally_required": "if available and not equal to `assistant`."
            }
          },
          {
            "type": "map[]",
            "id": "tool_calls",
            "brief": "The tool calls generated by the model, such as function calls.\n",
            "stability": "development",
            "requirement_level": {
              "conditionally_required": "if available"
            },
            "fields": [
              {
                "type": "string",
                "id": "id",
                "brief": "The id of the tool call.\n",
                "stability": "development",
                "examples": [
                  "call_mszuSIzqtI65i1wAUOE8w5H4"
                ],
                "requirement_level": "required"
              },
              {
                "type": "enum",
                "id": "type",
                "brief": "The type of the tool.\n",
                "stability": "development",
                "examples": [
                  "function"
                ],
                "requirement_level": "required",
                "members": [
                  {
                    "id": "function",
                    "value": "function",
                    "brief": "Function",
                    "note": null,
                    "stability": "development",
                    "deprecated": null
                  }
                ]
              },
              {
                "type": "map",
                "id": "function",
                "brief": "The function call.\n",
                "stability": "development",
                "requirement_level": "required",
                "fields": [
                  {
                    "type": "string",
                    "id": "name",
                    "brief": "The name of the function.\n",
                    "stability": "development",
                    "examples": [
                      "get_weather"
                    ],
                    "requirement_level": "required"
                  },
                  {
                    "type": "undefined",
                    "id": "arguments",
                    "brief": "The arguments of the function as provided in the LLM response.\n",
                    "note": "Models usually return arguments as a JSON string. In this case, it's RECOMMENDED to provide arguments as is without attempting to deserialize them.\nSemantic conventions for individual systems MAY specify a different type for arguments field.\n",
                    "stability": "development",
                    "examples": [
                      "{\\\"location\\\": \\\"Paris\\\"}"
                    ],
                    "requirement_level": "opt_in"
                  }
                ]
              }
            ]
          }
        ]
      }
    },
    {
      "id": "event.gen_ai.tool.message",
      "type": "event",
      "brief": "This event describes the response from a tool or function call passed to the GenAI model.\n",
      "stability": "development",
      "attributes": [
        {
          "name": "gen_ai.system",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "openai",
                "value": "openai",
                "brief": "OpenAI",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "vertex_ai",
                "value": "vertex_ai",
                "brief": "Vertex AI",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "gemini",
                "value": "gemini",
                "brief": "Gemini",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "anthropic",
                "value": "anthropic",
                "brief": "Anthropic",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "cohere",
                "value": "cohere",
                "brief": "Cohere",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "az.ai.inference",
                "value": "az.ai.inference",
                "brief": "Azure AI Inference",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "az.ai.openai",
                "value": "az.ai.openai",
                "brief": "Azure OpenAI",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "ibm.watsonx.ai",
                "value": "ibm.watsonx.ai",
                "brief": "IBM Watsonx AI",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "aws.bedrock",
                "value": "aws.bedrock",
                "brief": "AWS Bedrock",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "perplexity",
                "value": "perplexity",
                "brief": "Perplexity",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "xai",
                "value": "xai",
                "brief": "xAI",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "deepseek",
                "value": "deepseek",
                "brief": "DeepSeek",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "groq",
                "value": "groq",
                "brief": "Groq",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "mistral_ai",
                "value": "mistral_ai",
                "brief": "Mistral AI",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The Generative AI product as identified by the client or server instrumentation.",
          "examples": "openai",
          "requirement_level": "recommended",
          "note": "The `gen_ai.system` describes a family of GenAI models with specific model identified\nby `gen_ai.request.model` and `gen_ai.response.model` attributes.\n\nThe actual GenAI product may differ from the one identified by the client.\nMultiple systems, including Azure OpenAI and Gemini, are accessible by OpenAI client\nlibraries. In such cases, the `gen_ai.system` is set to `openai` based on the\ninstrumentation's best knowledge, instead of the actual system. The `server.address`\nattribute may help identify the actual system in use for `openai`.\n\nFor custom model, a custom friendly name SHOULD be used.\nIf none of these options apply, the `gen_ai.system` SHOULD be set to `_OTHER`.\n",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": "gen_ai.tool.message",
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/gen-ai/events.yaml",
        "attributes": {
          "gen_ai.system": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      },
      "body": {
        "type": "map",
        "id": "gen_ai.tool.message",
        "stability": "development",
        "requirement_level": "opt_in",
        "fields": [
          {
            "type": "undefined",
            "id": "content",
            "brief": "The contents of the tool message.\n",
            "stability": "development",
            "examples": [
              "rainy, 57°F"
            ],
            "requirement_level": "opt_in"
          },
          {
            "type": "string",
            "id": "role",
            "brief": "The actual role of the message author as passed in the message.\n",
            "stability": "development",
            "examples": [
              "tool",
              "function"
            ],
            "requirement_level": {
              "conditionally_required": "if available and not equal to `tool`."
            }
          },
          {
            "type": "string",
            "id": "id",
            "brief": "Tool call id that this message is responding to.\n",
            "stability": "development",
            "examples": [
              "call_mszuSIzqtI65i1wAUOE8w5H4"
            ],
            "requirement_level": "required"
          }
        ]
      }
    },
    {
      "id": "event.gen_ai.choice",
      "type": "event",
      "brief": "This event describes the Gen AI response message.\n",
      "stability": "development",
      "attributes": [
        {
          "name": "gen_ai.system",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "openai",
                "value": "openai",
                "brief": "OpenAI",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "vertex_ai",
                "value": "vertex_ai",
                "brief": "Vertex AI",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "gemini",
                "value": "gemini",
                "brief": "Gemini",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "anthropic",
                "value": "anthropic",
                "brief": "Anthropic",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "cohere",
                "value": "cohere",
                "brief": "Cohere",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "az.ai.inference",
                "value": "az.ai.inference",
                "brief": "Azure AI Inference",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "az.ai.openai",
                "value": "az.ai.openai",
                "brief": "Azure OpenAI",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "ibm.watsonx.ai",
                "value": "ibm.watsonx.ai",
                "brief": "IBM Watsonx AI",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "aws.bedrock",
                "value": "aws.bedrock",
                "brief": "AWS Bedrock",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "perplexity",
                "value": "perplexity",
                "brief": "Perplexity",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "xai",
                "value": "xai",
                "brief": "xAI",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "deepseek",
                "value": "deepseek",
                "brief": "DeepSeek",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "groq",
                "value": "groq",
                "brief": "Groq",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "mistral_ai",
                "value": "mistral_ai",
                "brief": "Mistral AI",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The Generative AI product as identified by the client or server instrumentation.",
          "examples": "openai",
          "requirement_level": "recommended",
          "note": "The `gen_ai.system` describes a family of GenAI models with specific model identified\nby `gen_ai.request.model` and `gen_ai.response.model` attributes.\n\nThe actual GenAI product may differ from the one identified by the client.\nMultiple systems, including Azure OpenAI and Gemini, are accessible by OpenAI client\nlibraries. In such cases, the `gen_ai.system` is set to `openai` based on the\ninstrumentation's best knowledge, instead of the actual system. The `server.address`\nattribute may help identify the actual system in use for `openai`.\n\nFor custom model, a custom friendly name SHOULD be used.\nIf none of these options apply, the `gen_ai.system` SHOULD be set to `_OTHER`.\n",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": "gen_ai.choice",
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/gen-ai/events.yaml",
        "attributes": {
          "gen_ai.system": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      },
      "body": {
        "type": "map",
        "id": "gen_ai.choice",
        "note": "If GenAI model returns multiple choices, each choice SHOULD be recorded as an individual event. When response is streamed, instrumentations that report response events MUST reconstruct and report the full message and MUST NOT report individual chunks as events. If the request to GenAI model fails with an error before content is received, instrumentation SHOULD report an event with truncated content (if enabled). If `finish_reason` was not received, it MUST be set to `error`.\n",
        "stability": "development",
        "requirement_level": "opt_in",
        "fields": [
          {
            "type": "int",
            "id": "index",
            "brief": "The index of the choice in the list of choices.\n",
            "stability": "development",
            "examples": [
              0,
              1
            ],
            "requirement_level": "required"
          },
          {
            "type": "enum",
            "id": "finish_reason",
            "brief": "The reason the model stopped generating tokens.\n",
            "stability": "development",
            "requirement_level": "required",
            "members": [
              {
                "id": "stop",
                "value": "stop",
                "brief": "Stop",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "tool_calls",
                "value": "tool_calls",
                "brief": "Tool Calls",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "content_filter",
                "value": "content_filter",
                "brief": "Content Filter",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "length",
                "value": "length",
                "brief": "Length",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "error",
                "value": "error",
                "brief": "Error",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          {
            "type": "map",
            "id": "message",
            "brief": "GenAI response message.\n",
            "stability": "development",
            "requirement_level": "recommended",
            "fields": [
              {
                "type": "undefined",
                "id": "content",
                "brief": "The contents of the assistant message.\n",
                "stability": "development",
                "examples": [
                  "The weather in Paris is rainy and overcast, with temperatures around 57°F"
                ],
                "requirement_level": "opt_in"
              },
              {
                "type": "string",
                "id": "role",
                "brief": "The actual role of the message author as passed in the message.\n",
                "stability": "development",
                "examples": [
                  "assistant",
                  "bot"
                ],
                "requirement_level": {
                  "conditionally_required": "if available and not equal to `assistant`."
                }
              }
            ]
          },
          {
            "type": "map[]",
            "id": "tool_calls",
            "brief": "The tool calls generated by the model, such as function calls.\n",
            "stability": "development",
            "requirement_level": {
              "conditionally_required": "if available"
            },
            "fields": [
              {
                "type": "string",
                "id": "id",
                "brief": "The id of the tool call.\n",
                "stability": "development",
                "examples": [
                  "call_mszuSIzqtI65i1wAUOE8w5H4"
                ],
                "requirement_level": "required"
              },
              {
                "type": "enum",
                "id": "type",
                "brief": "The type of the tool.\n",
                "stability": "development",
                "requirement_level": "required",
                "members": [
                  {
                    "id": "function",
                    "value": "function",
                    "brief": "Function",
                    "note": null,
                    "stability": "development",
                    "deprecated": null
                  }
                ]
              },
              {
                "type": "map",
                "id": "function",
                "brief": "The function that the model called.\n",
                "stability": "development",
                "requirement_level": "required",
                "fields": [
                  {
                    "type": "string",
                    "id": "name",
                    "brief": "The name of the function.\n",
                    "stability": "development",
                    "examples": [
                      "get_weather"
                    ],
                    "requirement_level": "required"
                  },
                  {
                    "type": "undefined",
                    "id": "arguments",
                    "brief": "The arguments of the function as provided in the LLM response.\n",
                    "note": "Models usually return arguments as a JSON string. In this case, it's RECOMMENDED to provide arguments as is without attempting to deserialize them.\nSemantic conventions for individual systems MAY specify a different type for arguments field.\n",
                    "stability": "development",
                    "examples": [
                      "{\\\"location\\\": \\\"Paris\\\"}"
                    ],
                    "requirement_level": "opt_in"
                  }
                ]
              }
            ]
          }
        ]
      }
    },
    {
      "id": "registry.error",
      "type": "attribute_group",
      "brief": "This document defines the shared attributes used to report an error.\n",
      "attributes": [
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "timeout",
            "java.net.UnknownHostException",
            "server_certificate_invalid",
            "500"
          ],
          "requirement_level": "recommended",
          "note": "The `error.type` SHOULD be predictable, and SHOULD have low cardinality.\n\nWhen `error.type` is set to a type (e.g., an exception type), its\ncanonical class name identifying the type within the artifact SHOULD be used.\n\nInstrumentations SHOULD document the list of errors they report.\n\nThe cardinality of `error.type` within one instrumentation library SHOULD be low.\nTelemetry consumers that aggregate data from multiple instrumentation libraries and applications\nshould be prepared for `error.type` to have high cardinality at query time when no\nadditional filters are applied.\n\nIf the operation has completed successfully, instrumentations SHOULD NOT set `error.type`.\n\nIf a specific domain defines its own set of error identifiers (such as HTTP or gRPC status codes),\nit's RECOMMENDED to:\n\n- Use a domain-specific attribute\n- Set `error.type` to capture all errors, regardless of whether they are defined within the domain-specific set or not.\n",
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/error/registry.yaml"
      },
      "display_name": "Error Attributes"
    },
    {
      "id": "registry.messaging.deprecated",
      "type": "attribute_group",
      "brief": "Describes deprecated messaging attributes.",
      "stability": "development",
      "attributes": [
        {
          "name": "messaging.kafka.destination.partition",
          "type": "int",
          "brief": "Deprecated, use `messaging.destination.partition.id` instead.\n",
          "examples": 2,
          "requirement_level": "recommended",
          "stability": "development",
          "deprecated": {
            "reason": "uncategorized",
            "note": "Replaced by `messaging.destination.partition.id`."
          }
        },
        {
          "name": "messaging.operation",
          "type": "string",
          "brief": "Deprecated, use `messaging.operation.type` instead.\n",
          "examples": [
            "publish",
            "create",
            "process"
          ],
          "requirement_level": "recommended",
          "stability": "development",
          "deprecated": {
            "reason": "uncategorized",
            "note": "Replaced by `messaging.operation.type`."
          }
        },
        {
          "name": "messaging.client_id",
          "type": "string",
          "brief": "Deprecated, use `messaging.client.id` instead.\n",
          "examples": [
            "client-5",
            "myhost@8742@s8083jm"
          ],
          "requirement_level": "recommended",
          "stability": "development",
          "deprecated": {
            "reason": "uncategorized",
            "note": "Replaced by `messaging.client.id`."
          }
        },
        {
          "name": "messaging.kafka.consumer.group",
          "type": "string",
          "brief": "Deprecated, use `messaging.consumer.group.name` instead.\n",
          "examples": "my-group",
          "requirement_level": "recommended",
          "stability": "development",
          "deprecated": {
            "reason": "uncategorized",
            "note": "Replaced by `messaging.consumer.group.name`."
          }
        },
        {
          "name": "messaging.rocketmq.client_group",
          "type": "string",
          "brief": "Deprecated, use `messaging.consumer.group.name` instead.\n",
          "examples": "myConsumerGroup",
          "requirement_level": "recommended",
          "stability": "development",
          "deprecated": {
            "reason": "uncategorized",
            "note": "Replaced by `messaging.consumer.group.name` on the consumer spans. No replacement for producer spans."
          }
        },
        {
          "name": "messaging.eventhubs.consumer.group",
          "type": "string",
          "brief": "Deprecated, use `messaging.consumer.group.name` instead.\n",
          "examples": "$Default",
          "requirement_level": "recommended",
          "stability": "development",
          "deprecated": {
            "reason": "uncategorized",
            "note": "Replaced by `messaging.consumer.group.name`."
          }
        },
        {
          "name": "messaging.servicebus.destination.subscription_name",
          "type": "string",
          "brief": "Deprecated, use `messaging.destination.subscription.name` instead.\n",
          "examples": "subscription-a",
          "requirement_level": "recommended",
          "stability": "development",
          "deprecated": {
            "reason": "uncategorized",
            "note": "Replaced by `messaging.destination.subscription.name`."
          }
        },
        {
          "name": "messaging.kafka.message.offset",
          "type": "int",
          "brief": "Deprecated, use `messaging.kafka.offset` instead.\n",
          "examples": 42,
          "requirement_level": "recommended",
          "stability": "development",
          "deprecated": {
            "reason": "uncategorized",
            "note": "Replaced by `messaging.kafka.offset`."
          }
        },
        {
          "name": "messaging.destination_publish.anonymous",
          "type": "boolean",
          "brief": "Deprecated, no replacement at this time.",
          "requirement_level": "recommended",
          "stability": "development",
          "deprecated": {
            "reason": "uncategorized",
            "note": "No replacement at this time."
          }
        },
        {
          "name": "messaging.destination_publish.name",
          "type": "string",
          "brief": "Deprecated, no replacement at this time.",
          "examples": [
            "MyQueue",
            "MyTopic"
          ],
          "requirement_level": "recommended",
          "stability": "development",
          "deprecated": {
            "reason": "uncategorized",
            "note": "No replacement at this time."
          }
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/messaging/deprecated/registry-deprecated.yaml"
      },
      "display_name": "Deprecated Messaging Attributes"
    },
    {
      "id": "registry.opentracing",
      "type": "attribute_group",
      "brief": "Attributes used by the OpenTracing Shim layer.",
      "attributes": [
        {
          "name": "opentracing.ref_type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "child_of",
                "value": "child_of",
                "brief": "The parent Span depends on the child Span in some capacity",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "follows_from",
                "value": "follows_from",
                "brief": "The parent Span doesn't depend in any way on the result of the child Span",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "Parent-child Reference type",
          "requirement_level": "recommended",
          "note": "The causal relationship between a child Span and a parent Span.\n",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/opentracing/registry.yaml"
      },
      "display_name": "OpenTracing Attributes"
    },
    {
      "id": "registry.aspnetcore",
      "type": "attribute_group",
      "brief": "ASP.NET Core attributes",
      "attributes": [
        {
          "name": "aspnetcore.rate_limiting.policy",
          "type": "string",
          "brief": "Rate limiting policy name.",
          "examples": [
            "fixed",
            "sliding",
            "token"
          ],
          "requirement_level": "recommended",
          "stability": "stable"
        },
        {
          "name": "aspnetcore.rate_limiting.result",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "acquired",
                "value": "acquired",
                "brief": "Lease was acquired",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "endpoint_limiter",
                "value": "endpoint_limiter",
                "brief": "Lease request was rejected by the endpoint limiter",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "global_limiter",
                "value": "global_limiter",
                "brief": "Lease request was rejected by the global limiter",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "request_canceled",
                "value": "request_canceled",
                "brief": "Lease request was canceled",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Rate-limiting result, shows whether the lease was acquired or contains a rejection reason",
          "examples": [
            "acquired",
            "request_canceled"
          ],
          "requirement_level": "recommended",
          "stability": "stable"
        },
        {
          "name": "aspnetcore.routing.is_fallback",
          "type": "boolean",
          "brief": "A value that indicates whether the matched route is a fallback route.",
          "examples": [
            true
          ],
          "requirement_level": "recommended",
          "stability": "stable"
        },
        {
          "name": "aspnetcore.diagnostics.handler.type",
          "type": "string",
          "brief": "Full type name of the [`IExceptionHandler`](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.diagnostics.iexceptionhandler) implementation that handled the exception.",
          "examples": [
            "Contoso.MyHandler"
          ],
          "requirement_level": "recommended",
          "stability": "stable"
        },
        {
          "name": "aspnetcore.request.is_unhandled",
          "type": "boolean",
          "brief": "Flag indicating if request was handled by the application pipeline.",
          "examples": [
            true
          ],
          "requirement_level": "recommended",
          "stability": "stable"
        },
        {
          "name": "aspnetcore.routing.match_status",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "success",
                "value": "success",
                "brief": "Match succeeded",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "failure",
                "value": "failure",
                "brief": "Match failed",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Match result - success or failure",
          "examples": [
            "success",
            "failure"
          ],
          "requirement_level": "recommended",
          "stability": "stable"
        },
        {
          "name": "aspnetcore.diagnostics.exception.result",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "handled",
                "value": "handled",
                "brief": "Exception was handled by the exception handling middleware.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "unhandled",
                "value": "unhandled",
                "brief": "Exception was not handled by the exception handling middleware.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "skipped",
                "value": "skipped",
                "brief": "Exception handling was skipped because the response had started.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "aborted",
                "value": "aborted",
                "brief": "Exception handling didn't run because the request was aborted.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "ASP.NET Core exception middleware handling result",
          "examples": [
            "handled",
            "unhandled"
          ],
          "requirement_level": "recommended",
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/aspnetcore/registry.yaml"
      },
      "display_name": "ASP.NET Core Attributes"
    },
    {
      "id": "metric.go.memory.used",
      "type": "metric",
      "brief": "Memory used by the Go runtime.",
      "note": "Computed from `(/memory/classes/total:bytes - /memory/classes/heap/released:bytes)`.\n",
      "stability": "development",
      "attributes": [
        {
          "name": "go.memory.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "stack",
                "value": "stack",
                "brief": "Memory allocated from the heap that is reserved for stack space, whether or not it is currently in-use.",
                "note": "Computed from `/memory/classes/heap/stacks:bytes`.\n",
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "other",
                "value": "other",
                "brief": "Memory used by the Go runtime, excluding other categories of memory usage described in this enumeration.",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The type of memory.",
          "examples": [
            "other",
            "stack"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "go.memory.used",
      "instrument": "updowncounter",
      "unit": "By",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/go/metrics.yaml",
        "attributes": {
          "go.memory.type": {
            "source_group": "registry.go",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.go.memory.limit",
      "type": "metric",
      "brief": "Go runtime memory limit configured by the user, if a limit exists.",
      "note": "Computed from `/gc/gomemlimit:bytes`. This metric is excluded if the limit obtained from the Go runtime is math.MaxInt64.\n",
      "stability": "development",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "go.memory.limit",
      "instrument": "updowncounter",
      "unit": "By",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/go/metrics.yaml"
      }
    },
    {
      "id": "metric.go.memory.allocated",
      "type": "metric",
      "brief": "Memory allocated to the heap by the application.",
      "note": "Computed from `/gc/heap/allocs:bytes`.\n",
      "stability": "development",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "go.memory.allocated",
      "instrument": "counter",
      "unit": "By",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/go/metrics.yaml"
      }
    },
    {
      "id": "metric.go.memory.allocations",
      "type": "metric",
      "brief": "Count of allocations to the heap by the application.",
      "note": "Computed from `/gc/heap/allocs:objects`.\n",
      "stability": "development",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "go.memory.allocations",
      "instrument": "counter",
      "unit": "{allocation}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/go/metrics.yaml"
      }
    },
    {
      "id": "metric.go.memory.gc.goal",
      "type": "metric",
      "brief": "Heap size target for the end of the GC cycle.",
      "note": "Computed from `/gc/heap/goal:bytes`.\n",
      "stability": "development",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "go.memory.gc.goal",
      "instrument": "updowncounter",
      "unit": "By",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/go/metrics.yaml"
      }
    },
    {
      "id": "metric.go.goroutine.count",
      "type": "metric",
      "brief": "Count of live goroutines.",
      "note": "Computed from `/sched/goroutines:goroutines`.\n",
      "stability": "development",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "go.goroutine.count",
      "instrument": "updowncounter",
      "unit": "{goroutine}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/go/metrics.yaml"
      }
    },
    {
      "id": "metric.go.processor.limit",
      "type": "metric",
      "brief": "The number of OS threads that can execute user-level Go code simultaneously.",
      "note": "Computed from `/sched/gomaxprocs:threads`.\n",
      "stability": "development",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "go.processor.limit",
      "instrument": "updowncounter",
      "unit": "{thread}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/go/metrics.yaml"
      }
    },
    {
      "id": "metric.go.schedule.duration",
      "type": "metric",
      "brief": "The time goroutines have spent in the scheduler in a runnable state before actually running.",
      "note": "Computed from `/sched/latencies:seconds`. Bucket boundaries are provided by the runtime, and are subject to change.\n",
      "stability": "development",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "go.schedule.duration",
      "instrument": "histogram",
      "unit": "s",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/go/metrics.yaml"
      }
    },
    {
      "id": "metric.go.config.gogc",
      "type": "metric",
      "brief": "Heap size target percentage configured by the user, otherwise 100.",
      "note": "The value range is [0.0,100.0]. Computed from `/gc/gogc:percent`.\n",
      "stability": "development",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "go.config.gogc",
      "instrument": "updowncounter",
      "unit": "%",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/go/metrics.yaml"
      }
    },
    {
      "id": "registry.azure.client.sdk",
      "type": "attribute_group",
      "brief": "This section defines generic attributes used by Azure Client Libraries.\n",
      "attributes": [
        {
          "name": "az.service_request_id",
          "type": "string",
          "brief": "The unique identifier of the service request. It's generated by the Azure service and returned with the response.",
          "examples": [
            "00000000-0000-0000-0000-000000000000"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "az.namespace",
          "type": "string",
          "brief": "[Azure Resource Provider Namespace](https://learn.microsoft.com/azure/azure-resource-manager/management/azure-services-resource-providers) as recognized by the client.\n",
          "examples": [
            "Microsoft.Storage",
            "Microsoft.KeyVault",
            "Microsoft.ServiceBus"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "azure.client.id",
          "type": "string",
          "brief": "The unique identifier of the client instance.",
          "examples": [
            "3ba4827d-4422-483f-b59f-85b74211c11d",
            "storage-client-1"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/azure/registry.yaml"
      },
      "display_name": "Azure Client Library Attributes"
    },
    {
      "id": "registry.azure.cosmosdb",
      "type": "attribute_group",
      "brief": "This section defines attributes for Azure Cosmos DB.\n",
      "stability": "development",
      "attributes": [
        {
          "name": "azure.cosmosdb.connection.mode",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "gateway",
                "value": "gateway",
                "brief": "Gateway (HTTP) connection.",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "direct",
                "value": "direct",
                "brief": "Direct connection.",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "Cosmos client connection mode.",
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "azure.cosmosdb.operation.request_charge",
          "type": "double",
          "brief": "The number of request units consumed by the operation.\n",
          "examples": [
            46.18,
            1.0
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "azure.cosmosdb.request.body.size",
          "type": "int",
          "brief": "Request payload size in bytes.",
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "azure.cosmosdb.operation.contacted_regions",
          "type": "string[]",
          "brief": "List of regions contacted during operation in the order that they were contacted. If there is more than one region listed, it indicates that the operation was performed on multiple regions i.e. cross-regional call.\n",
          "examples": [
            [
              "North Central US",
              "Australia East",
              "Australia Southeast"
            ]
          ],
          "requirement_level": "recommended",
          "note": "Region name matches the format of `displayName` in [Azure Location API](https://learn.microsoft.com/rest/api/subscription/subscriptions/list-locations?view=rest-subscription-2021-10-01&tabs=HTTP#location)\n",
          "stability": "development"
        },
        {
          "name": "azure.cosmosdb.response.sub_status_code",
          "type": "int",
          "brief": "Cosmos DB sub status code.",
          "examples": [
            1000,
            1002
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "azure.cosmosdb.consistency.level",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "strong",
                "value": "Strong",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "bounded_staleness",
                "value": "BoundedStaleness",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "session",
                "value": "Session",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "eventual",
                "value": "Eventual",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "consistent_prefix",
                "value": "ConsistentPrefix",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "Account or request [consistency level](https://learn.microsoft.com/azure/cosmos-db/consistency-levels).",
          "examples": [
            "Eventual",
            "ConsistentPrefix",
            "BoundedStaleness",
            "Strong",
            "Session"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/azure/registry.yaml"
      },
      "display_name": "Azure Cosmos DB Attributes"
    },
    {
      "id": "registry.k8s.deprecated",
      "type": "attribute_group",
      "brief": "Describes deprecated k8s attributes.",
      "attributes": [
        {
          "name": "k8s.pod.labels",
          "type": "template[string]",
          "brief": "Deprecated, use `k8s.pod.label` instead.",
          "examples": [
            "k8s.pod.label.app=my-app"
          ],
          "requirement_level": "recommended",
          "stability": "development",
          "deprecated": {
            "reason": "uncategorized",
            "note": "Replaced by `k8s.pod.label`."
          }
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/k8s/deprecated/registry-deprecated.yaml"
      },
      "display_name": "Deprecated Kubernetes Attributes"
    },
    {
      "id": "registry.enduser",
      "type": "attribute_group",
      "brief": "Describes the end user.\n",
      "attributes": [
        {
          "name": "enduser.id",
          "type": "string",
          "brief": "Unique identifier of an end user in the system. It maybe a username, email address, or other identifier.",
          "examples": [
            "username"
          ],
          "requirement_level": "recommended",
          "note": "Unique identifier of an end user in the system.\n\n> [!Warning]\n> This field contains sensitive (PII) information.\n",
          "stability": "development"
        },
        {
          "name": "enduser.pseudo.id",
          "type": "string",
          "brief": "Pseudonymous identifier of an end user. This identifier should be a random value that is not directly linked or associated with the end user's actual identity.\n",
          "examples": [
            "QdH5CAWJgqVT4rOr0qtumf"
          ],
          "requirement_level": "recommended",
          "note": "Pseudonymous identifier of an end user.\n\n> [!Warning]\n> This field contains sensitive (linkable PII) information.\n",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/enduser/registry.yaml"
      },
      "display_name": "End User Attributes"
    },
    {
      "id": "registry.v8js",
      "type": "attribute_group",
      "brief": "Describes V8 JS Engine Runtime related attributes.",
      "attributes": [
        {
          "name": "v8js.gc.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "major",
                "value": "major",
                "brief": "Major (Mark Sweep Compact).",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "minor",
                "value": "minor",
                "brief": "Minor (Scavenge).",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "incremental",
                "value": "incremental",
                "brief": "Incremental (Incremental Marking).",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "weakcb",
                "value": "weakcb",
                "brief": "Weak Callbacks (Process Weak Callbacks).",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The type of garbage collection.",
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "v8js.heap.space.name",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "new_space",
                "value": "new_space",
                "brief": "New memory space.",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "old_space",
                "value": "old_space",
                "brief": "Old memory space.",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "code_space",
                "value": "code_space",
                "brief": "Code memory space.",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "map_space",
                "value": "map_space",
                "brief": "Map memory space.",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "large_object_space",
                "value": "large_object_space",
                "brief": "Large object memory space.",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The name of the space type of heap memory.",
          "requirement_level": "recommended",
          "note": "Value can be retrieved from value `space_name` of [`v8.getHeapSpaceStatistics()`](https://nodejs.org/api/v8.html#v8getheapspacestatistics)\n",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/v8js/registry.yaml"
      },
      "display_name": "V8 JS Attributes"
    },
    {
      "id": "registry.network.deprecated",
      "type": "attribute_group",
      "brief": "These attributes may be used for any network related operation.\n",
      "attributes": [
        {
          "name": "net.sock.peer.name",
          "type": "string",
          "brief": "Deprecated, no replacement at this time.",
          "examples": [
            "/var/my.sock"
          ],
          "requirement_level": "recommended",
          "stability": "development",
          "deprecated": {
            "reason": "uncategorized",
            "note": "Removed."
          }
        },
        {
          "name": "net.sock.peer.addr",
          "type": "string",
          "brief": "Deprecated, use `network.peer.address`.",
          "examples": [
            "192.168.0.1"
          ],
          "requirement_level": "recommended",
          "stability": "development",
          "deprecated": {
            "reason": "uncategorized",
            "note": "Replaced by `network.peer.address`."
          }
        },
        {
          "name": "net.sock.peer.port",
          "type": "int",
          "brief": "Deprecated, use `network.peer.port`.",
          "examples": [
            65531
          ],
          "requirement_level": "recommended",
          "stability": "development",
          "deprecated": {
            "reason": "uncategorized",
            "note": "Replaced by `network.peer.port`."
          }
        },
        {
          "name": "net.peer.name",
          "type": "string",
          "brief": "Deprecated, use `server.address` on client spans and `client.address` on server spans.",
          "examples": [
            "example.com"
          ],
          "requirement_level": "recommended",
          "stability": "development",
          "deprecated": {
            "reason": "uncategorized",
            "note": "Replaced by `server.address` on client spans and `client.address` on server spans."
          }
        },
        {
          "name": "net.peer.port",
          "type": "int",
          "brief": "Deprecated, use `server.port` on client spans and `client.port` on server spans.",
          "examples": [
            8080
          ],
          "requirement_level": "recommended",
          "stability": "development",
          "deprecated": {
            "reason": "uncategorized",
            "note": "Replaced by `server.port` on client spans and `client.port` on server spans."
          }
        },
        {
          "name": "net.peer.ip",
          "type": "string",
          "brief": "Deprecated, use `network.peer.address`.",
          "examples": "127.0.0.1",
          "requirement_level": "recommended",
          "stability": "development",
          "deprecated": {
            "reason": "uncategorized",
            "note": "Replaced by `network.peer.address`."
          }
        },
        {
          "name": "net.host.name",
          "type": "string",
          "brief": "Deprecated, use `server.address`.",
          "examples": [
            "example.com"
          ],
          "requirement_level": "recommended",
          "stability": "development",
          "deprecated": {
            "reason": "uncategorized",
            "note": "Replaced by `server.address`."
          }
        },
        {
          "name": "net.host.ip",
          "type": "string",
          "brief": "Deprecated, use `network.local.address`.",
          "examples": "192.168.0.1",
          "requirement_level": "recommended",
          "stability": "development",
          "deprecated": {
            "reason": "uncategorized",
            "note": "Replaced by `network.local.address`."
          }
        },
        {
          "name": "net.host.port",
          "type": "int",
          "brief": "Deprecated, use `server.port`.",
          "examples": [
            8080
          ],
          "requirement_level": "recommended",
          "stability": "development",
          "deprecated": {
            "reason": "uncategorized",
            "note": "Replaced by `server.port`."
          }
        },
        {
          "name": "net.sock.host.addr",
          "type": "string",
          "brief": "Deprecated, use `network.local.address`.",
          "examples": [
            "/var/my.sock"
          ],
          "requirement_level": "recommended",
          "stability": "development",
          "deprecated": {
            "reason": "uncategorized",
            "note": "Replaced by `network.local.address`."
          }
        },
        {
          "name": "net.sock.host.port",
          "type": "int",
          "brief": "Deprecated, use `network.local.port`.",
          "examples": [
            8080
          ],
          "requirement_level": "recommended",
          "stability": "development",
          "deprecated": {
            "reason": "uncategorized",
            "note": "Replaced by `network.local.port`."
          }
        },
        {
          "name": "net.transport",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "ip_tcp",
                "value": "ip_tcp",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "ip_udp",
                "value": "ip_udp",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "pipe",
                "value": "pipe",
                "brief": "Named or anonymous pipe.",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "inproc",
                "value": "inproc",
                "brief": "In-process communication.",
                "note": "Signals that there is only in-process communication not using a \"real\" network protocol in cases where network attributes would normally be expected. Usually all other network attributes can be left out in that case.\n",
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "other",
                "value": "other",
                "brief": "Something else (non IP-based).",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "Deprecated, use `network.transport`.",
          "requirement_level": "recommended",
          "stability": "development",
          "deprecated": {
            "reason": "uncategorized",
            "note": "Replaced by `network.transport`."
          }
        },
        {
          "name": "net.protocol.name",
          "type": "string",
          "brief": "Deprecated, use `network.protocol.name`.",
          "examples": [
            "amqp",
            "http",
            "mqtt"
          ],
          "requirement_level": "recommended",
          "stability": "development",
          "deprecated": {
            "reason": "uncategorized",
            "note": "Replaced by `network.protocol.name`."
          }
        },
        {
          "name": "net.protocol.version",
          "type": "string",
          "brief": "Deprecated, use `network.protocol.version`.",
          "examples": "3.1.1",
          "requirement_level": "recommended",
          "stability": "development",
          "deprecated": {
            "reason": "uncategorized",
            "note": "Replaced by `network.protocol.version`."
          }
        },
        {
          "name": "net.sock.family",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "inet",
                "value": "inet",
                "brief": "IPv4 address",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "inet6",
                "value": "inet6",
                "brief": "IPv6 address",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "unix",
                "value": "unix",
                "brief": "Unix domain socket path",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "Deprecated, use `network.transport` and `network.type`.",
          "requirement_level": "recommended",
          "stability": "development",
          "deprecated": {
            "reason": "uncategorized",
            "note": "Split to `network.transport` and `network.type`."
          }
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/network/deprecated/registry-deprecated.yaml"
      },
      "display_name": "Deprecated Network Attributes"
    },
    {
      "id": "registry.oci.manifest",
      "type": "attribute_group",
      "brief": "An OCI image manifest.\n",
      "attributes": [
        {
          "name": "oci.manifest.digest",
          "type": "string",
          "brief": "The digest of the OCI image manifest. For container images specifically is the digest by which the container image is known.\n",
          "examples": [
            "sha256:e4ca62c0d62f3e886e684806dfe9d4e0cda60d54986898173c1083856cfda0f4"
          ],
          "requirement_level": "recommended",
          "note": "Follows [OCI Image Manifest Specification](https://github.com/opencontainers/image-spec/blob/main/manifest.md), and specifically the [Digest property](https://github.com/opencontainers/image-spec/blob/main/descriptor.md#digests).\nAn example can be found in [Example Image Manifest](https://github.com/opencontainers/image-spec/blob/main/manifest.md#example-image-manifest).\n",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/oci/registry.yaml"
      },
      "display_name": "Open Container Initiative (OCI) Attributes"
    },
    {
      "id": "registry.user",
      "type": "attribute_group",
      "brief": "Describes information about the user.",
      "attributes": [
        {
          "name": "user.email",
          "type": "string",
          "brief": "User email address.\n",
          "examples": [
            "a.einstein@example.com"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "user.full_name",
          "type": "string",
          "brief": "User's full name\n",
          "examples": [
            "Albert Einstein"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "user.hash",
          "type": "string",
          "brief": "Unique user hash to correlate information for a user in anonymized form.\n",
          "examples": [
            "364fc68eaf4c8acec74a4e52d7d1feaa"
          ],
          "requirement_level": "recommended",
          "note": "Useful if `user.id` or `user.name` contain confidential information and cannot be used.\n",
          "stability": "development"
        },
        {
          "name": "user.id",
          "type": "string",
          "brief": "Unique identifier of the user.\n",
          "examples": [
            "S-1-5-21-202424912787-2692429404-2351956786-1000"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "user.name",
          "type": "string",
          "brief": "Short name or login/username of the user.\n",
          "examples": [
            "a.einstein"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "user.roles",
          "type": "string[]",
          "brief": "Array of user roles at the time of the event.\n",
          "examples": [
            [
              "admin",
              "reporting_user"
            ]
          ],
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/user/registry.yaml"
      },
      "display_name": "User Attributes"
    },
    {
      "id": "registry.peer",
      "type": "attribute_group",
      "brief": "Operations that access some remote service.\n",
      "attributes": [
        {
          "name": "peer.service",
          "type": "string",
          "brief": "The [`service.name`](/docs/resource/README.md#service) of the remote service. SHOULD be equal to the actual `service.name` resource attribute of the remote service if any.\n",
          "examples": "AuthTokenCache",
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/peer/registry.yaml"
      },
      "display_name": "Peer Attributes"
    },
    {
      "id": "registry.cicd.pipeline",
      "type": "attribute_group",
      "brief": "This group describes attributes specific to pipelines within a Continuous Integration and Continuous Deployment (CI/CD) system. A [pipeline](https://wikipedia.org/wiki/Pipeline_(computing)) in this case is a series of steps that are performed in order to deliver a new version of software. This aligns with the [Britannica](https://www.britannica.com/dictionary/pipeline) definition of a pipeline where a **pipeline** is the system for developing and producing something. In the context of CI/CD, a pipeline produces or delivers software.\n",
      "attributes": [
        {
          "name": "cicd.pipeline.name",
          "type": "string",
          "brief": "The human readable name of the pipeline within a CI/CD system.\n",
          "examples": [
            "Build and Test",
            "Lint",
            "Deploy Go Project",
            "deploy_to_environment"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "cicd.pipeline.run.id",
          "type": "string",
          "brief": "The unique identifier of a pipeline run within a CI/CD system.\n",
          "examples": [
            "120912"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "cicd.pipeline.run.url.full",
          "type": "string",
          "brief": "The [URL](https://wikipedia.org/wiki/URL) of the pipeline run, providing the complete address in order to locate and identify the pipeline run.\n",
          "examples": [
            "https://github.com/open-telemetry/semantic-conventions/actions/runs/9753949763?pr=1075"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "cicd.pipeline.run.state",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "pending",
                "value": "pending",
                "brief": "The run pending state spans from the event triggering the pipeline run until the execution of the run starts (eg. time spent in a queue, provisioning agents, creating run resources).\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "executing",
                "value": "executing",
                "brief": "The executing state spans the execution of any run tasks (eg. build, test).",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "finalizing",
                "value": "finalizing",
                "brief": "The finalizing state spans from when the run has finished executing (eg. cleanup of run resources).",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The pipeline run goes through these states during its lifecycle.\n",
          "examples": [
            "pending",
            "executing",
            "finalizing"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "cicd.pipeline.task.name",
          "type": "string",
          "brief": "The human readable name of a task within a pipeline. Task here most closely aligns with a [computing process](https://wikipedia.org/wiki/Pipeline_(computing)) in a pipeline. Other terms for tasks include commands, steps, and procedures.\n",
          "examples": [
            "Run GoLang Linter",
            "Go Build",
            "go-test",
            "deploy_binary"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "cicd.pipeline.task.run.id",
          "type": "string",
          "brief": "The unique identifier of a task run within a pipeline.\n",
          "examples": [
            "12097"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "cicd.pipeline.task.run.url.full",
          "type": "string",
          "brief": "The [URL](https://wikipedia.org/wiki/URL) of the pipeline task run, providing the complete address in order to locate and identify the pipeline task run.\n",
          "examples": [
            "https://github.com/open-telemetry/semantic-conventions/actions/runs/9753949763/job/26920038674?pr=1075"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "cicd.pipeline.task.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "build",
                "value": "build",
                "brief": "build",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "test",
                "value": "test",
                "brief": "test",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "deploy",
                "value": "deploy",
                "brief": "deploy",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The type of the task within a pipeline.\n",
          "examples": [
            "build",
            "test",
            "deploy"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "cicd.pipeline.result",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "success",
                "value": "success",
                "brief": "The pipeline run finished successfully.",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "failure",
                "value": "failure",
                "brief": "The pipeline run did not finish successfully, eg. due to a compile error or a failing test. Such failures are usually detected by non-zero exit codes of the tools executed in the pipeline run.",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "error",
                "value": "error",
                "brief": "The pipeline run failed due to an error in the CICD system, eg. due to the worker being killed.",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "timeout",
                "value": "timeout",
                "brief": "A timeout caused the pipeline run to be interrupted.",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "cancellation",
                "value": "cancellation",
                "brief": "The pipeline run was cancelled, eg. by a user manually cancelling the pipeline run.",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "skip",
                "value": "skip",
                "brief": "The pipeline run was skipped, eg. due to a precondition not being met.",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The result of a pipeline run.\n",
          "examples": [
            "success",
            "failure",
            "timeout",
            "skipped"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "cicd.worker.state",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "available",
                "value": "available",
                "brief": "The worker is not performing work for the CICD system. It is available to the CICD system to perform work on (online / idle).",
                "note": "Pipelines might have conditions on which workers they are able to run so not every worker might be available to every pipeline.",
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "busy",
                "value": "busy",
                "brief": "The worker is performing work for the CICD system.",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "offline",
                "value": "offline",
                "brief": "The worker is not available to the CICD system (disconnected / down).",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The state of a CICD worker / agent.\n",
          "examples": [
            "idle",
            "busy",
            "down"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "cicd.system.component",
          "type": "string",
          "brief": "The name of a component of the CICD system.",
          "examples": [
            "controller",
            "scheduler",
            "agent"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/cicd/registry.yaml"
      },
      "display_name": "CI/CD Pipeline Attributes"
    },
    {
      "id": "metric.vcs.change.count",
      "type": "metric",
      "brief": "The number of changes (pull requests/merge requests/changelists) in a repository, categorized by their state (e.g. open or merged)",
      "stability": "development",
      "attributes": [
        {
          "name": "vcs.repository.name",
          "type": "string",
          "brief": "The human readable name of the repository. It SHOULD NOT include any additional identifier like Group/SubGroup in GitLab or organization in GitHub.\n",
          "examples": [
            "semantic-conventions",
            "my-cool-repo"
          ],
          "requirement_level": "recommended",
          "note": "Due to it only being the name, it can clash with forks of the same\nrepository if collecting telemetry across multiple orgs or groups in\nthe same backends.\n",
          "stability": "development"
        },
        {
          "name": "vcs.change.state",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "open",
                "value": "open",
                "brief": "Open means the change is currently active and under review. It hasn't been merged into the target branch yet, and it's still possible to make changes or add comments.",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "wip",
                "value": "wip",
                "brief": "WIP (work-in-progress, draft) means the change is still in progress and not yet ready for a full review. It might still undergo significant changes.",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "closed",
                "value": "closed",
                "brief": "Closed means the merge request has been closed without merging. This can happen for various reasons, such as the changes being deemed unnecessary, the issue being resolved in another way, or the author deciding to withdraw the request.",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "merged",
                "value": "merged",
                "brief": "Merged indicates that the change has been successfully integrated into the target codebase.",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The state of the change (pull request/merge request/changelist).\n",
          "examples": [
            "open",
            "closed",
            "merged"
          ],
          "requirement_level": "required",
          "stability": "development"
        },
        {
          "name": "vcs.repository.url.full",
          "type": "string",
          "brief": "The [canonical URL](https://support.google.com/webmasters/answer/10347851?hl=en#:~:text=A%20canonical%20URL%20is%20the,Google%20chooses%20one%20as%20canonical.) of the repository providing the complete HTTP(S) address in order to locate and identify the repository through a browser.\n",
          "examples": [
            "https://github.com/opentelemetry/open-telemetry-collector-contrib",
            "https://gitlab.com/my-org/my-project/my-projects-project/repo"
          ],
          "requirement_level": "required",
          "note": "In Git Version Control Systems, the canonical URL SHOULD NOT include\nthe `.git` extension.\n",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "vcs.change.count",
      "instrument": "updowncounter",
      "unit": "{change}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/vcs/metrics.yaml",
        "attributes": {
          "vcs.change.state": {
            "source_group": "registry.vcs.repository",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "vcs.repository.name": {
            "source_group": "registry.vcs.repository",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "vcs.repository.url.full": {
            "source_group": "registry.vcs.repository",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.vcs.change.duration",
      "type": "metric",
      "brief": "The time duration a change (pull request/merge request/changelist) has been in a given state.",
      "stability": "development",
      "attributes": [
        {
          "name": "vcs.repository.name",
          "type": "string",
          "brief": "The human readable name of the repository. It SHOULD NOT include any additional identifier like Group/SubGroup in GitLab or organization in GitHub.\n",
          "examples": [
            "semantic-conventions",
            "my-cool-repo"
          ],
          "requirement_level": "recommended",
          "note": "Due to it only being the name, it can clash with forks of the same\nrepository if collecting telemetry across multiple orgs or groups in\nthe same backends.\n",
          "stability": "development"
        },
        {
          "name": "vcs.change.state",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "open",
                "value": "open",
                "brief": "Open means the change is currently active and under review. It hasn't been merged into the target branch yet, and it's still possible to make changes or add comments.",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "wip",
                "value": "wip",
                "brief": "WIP (work-in-progress, draft) means the change is still in progress and not yet ready for a full review. It might still undergo significant changes.",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "closed",
                "value": "closed",
                "brief": "Closed means the merge request has been closed without merging. This can happen for various reasons, such as the changes being deemed unnecessary, the issue being resolved in another way, or the author deciding to withdraw the request.",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "merged",
                "value": "merged",
                "brief": "Merged indicates that the change has been successfully integrated into the target codebase.",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The state of the change (pull request/merge request/changelist).\n",
          "examples": [
            "open",
            "closed",
            "merged"
          ],
          "requirement_level": "required",
          "stability": "development"
        },
        {
          "name": "vcs.repository.url.full",
          "type": "string",
          "brief": "The [canonical URL](https://support.google.com/webmasters/answer/10347851?hl=en#:~:text=A%20canonical%20URL%20is%20the,Google%20chooses%20one%20as%20canonical.) of the repository providing the complete HTTP(S) address in order to locate and identify the repository through a browser.\n",
          "examples": [
            "https://github.com/opentelemetry/open-telemetry-collector-contrib",
            "https://gitlab.com/my-org/my-project/my-projects-project/repo"
          ],
          "requirement_level": "required",
          "note": "In Git Version Control Systems, the canonical URL SHOULD NOT include\nthe `.git` extension.\n",
          "stability": "development"
        },
        {
          "name": "vcs.ref.head.name",
          "type": "string",
          "brief": "The name of the [reference](https://git-scm.com/docs/gitglossary#def_ref) such as **branch** or **tag** in the repository.\n",
          "examples": [
            "my-feature-branch",
            "tag-1-test"
          ],
          "requirement_level": "required",
          "note": "`head` refers to where you are right now; the current reference at a\ngiven time.\n",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "vcs.change.duration",
      "instrument": "gauge",
      "unit": "s",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/vcs/metrics.yaml",
        "attributes": {
          "vcs.change.state": {
            "source_group": "registry.vcs.repository",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "vcs.ref.head.name": {
            "source_group": "registry.vcs.repository",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "vcs.repository.name": {
            "source_group": "registry.vcs.repository",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "vcs.repository.url.full": {
            "source_group": "registry.vcs.repository",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.vcs.change.time_to_approval",
      "type": "metric",
      "brief": "The amount of time since its creation it took a change (pull request/merge request/changelist) to get the first approval.",
      "stability": "development",
      "attributes": [
        {
          "name": "vcs.repository.name",
          "type": "string",
          "brief": "The human readable name of the repository. It SHOULD NOT include any additional identifier like Group/SubGroup in GitLab or organization in GitHub.\n",
          "examples": [
            "semantic-conventions",
            "my-cool-repo"
          ],
          "requirement_level": "recommended",
          "note": "Due to it only being the name, it can clash with forks of the same\nrepository if collecting telemetry across multiple orgs or groups in\nthe same backends.\n",
          "stability": "development"
        },
        {
          "name": "vcs.ref.base.name",
          "type": "string",
          "brief": "The name of the [reference](https://git-scm.com/docs/gitglossary#def_ref) such as **branch** or **tag** in the repository.\n",
          "examples": [
            "my-feature-branch",
            "tag-1-test"
          ],
          "requirement_level": "recommended",
          "note": "`base` refers to the starting point of a change. For example, `main`\nwould be the base reference of type branch if you've created a new\nreference of type branch from it and created new commits.\n",
          "stability": "development"
        },
        {
          "name": "vcs.repository.url.full",
          "type": "string",
          "brief": "The [canonical URL](https://support.google.com/webmasters/answer/10347851?hl=en#:~:text=A%20canonical%20URL%20is%20the,Google%20chooses%20one%20as%20canonical.) of the repository providing the complete HTTP(S) address in order to locate and identify the repository through a browser.\n",
          "examples": [
            "https://github.com/opentelemetry/open-telemetry-collector-contrib",
            "https://gitlab.com/my-org/my-project/my-projects-project/repo"
          ],
          "requirement_level": "required",
          "note": "In Git Version Control Systems, the canonical URL SHOULD NOT include\nthe `.git` extension.\n",
          "stability": "development"
        },
        {
          "name": "vcs.ref.head.name",
          "type": "string",
          "brief": "The name of the [reference](https://git-scm.com/docs/gitglossary#def_ref) such as **branch** or **tag** in the repository.\n",
          "examples": [
            "my-feature-branch",
            "tag-1-test"
          ],
          "requirement_level": "required",
          "note": "`head` refers to where you are right now; the current reference at a\ngiven time.\n",
          "stability": "development"
        },
        {
          "name": "vcs.ref.head.revision",
          "type": "string",
          "brief": "The revision, literally [revised version](https://www.merriam-webster.com/dictionary/revision), The revision most often refers to a commit object in Git, or a revision number in SVN.\n",
          "examples": [
            "9d59409acf479dfa0df1aa568182e43e43df8bbe28d60fcf2bc52e30068802cc",
            "main",
            "123",
            "HEAD"
          ],
          "requirement_level": "opt_in",
          "note": "`head` refers to where you are right now; the current reference at a\ngiven time.The revision can be a full [hash value (see\nglossary)](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.186-5.pdf),\nof the recorded change to a ref within a repository pointing to a\ncommit [commit](https://git-scm.com/docs/git-commit) object. It does\nnot necessarily have to be a hash; it can simply define a [revision\nnumber](https://svnbook.red-bean.com/en/1.7/svn.tour.revs.specifiers.html)\nwhich is an integer that is monotonically increasing. In cases where\nit is identical to the `ref.head.name`, it SHOULD still be included.\nIt is up to the implementer to decide which value to set as the\nrevision based on the VCS system and situational context.\n",
          "stability": "development"
        },
        {
          "name": "vcs.ref.base.revision",
          "type": "string",
          "brief": "The revision, literally [revised version](https://www.merriam-webster.com/dictionary/revision), The revision most often refers to a commit object in Git, or a revision number in SVN.\n",
          "examples": [
            "9d59409acf479dfa0df1aa568182e43e43df8bbe28d60fcf2bc52e30068802cc",
            "main",
            "123",
            "HEAD"
          ],
          "requirement_level": "opt_in",
          "note": "`base` refers to the starting point of a change. For example, `main`\nwould be the base reference of type branch if you've created a new\nreference of type branch from it and created new commits. The\nrevision can be a full [hash value (see\nglossary)](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.186-5.pdf),\nof the recorded change to a ref within a repository pointing to a\ncommit [commit](https://git-scm.com/docs/git-commit) object. It does\nnot necessarily have to be a hash; it can simply define a [revision\nnumber](https://svnbook.red-bean.com/en/1.7/svn.tour.revs.specifiers.html)\nwhich is an integer that is monotonically increasing. In cases where\nit is identical to the `ref.base.name`, it SHOULD still be included.\nIt is up to the implementer to decide which value to set as the\nrevision based on the VCS system and situational context.\n",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "vcs.change.time_to_approval",
      "instrument": "gauge",
      "unit": "s",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/vcs/metrics.yaml",
        "attributes": {
          "vcs.ref.base.name": {
            "source_group": "registry.vcs.repository",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "vcs.ref.base.revision": {
            "source_group": "registry.vcs.repository",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "vcs.ref.head.name": {
            "source_group": "registry.vcs.repository",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "vcs.ref.head.revision": {
            "source_group": "registry.vcs.repository",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "vcs.repository.name": {
            "source_group": "registry.vcs.repository",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "vcs.repository.url.full": {
            "source_group": "registry.vcs.repository",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.vcs.change.time_to_merge",
      "type": "metric",
      "brief": "The amount of time since its creation it took a change (pull request/merge request/changelist) to get merged into the target(base) ref.",
      "stability": "development",
      "attributes": [
        {
          "name": "vcs.repository.name",
          "type": "string",
          "brief": "The human readable name of the repository. It SHOULD NOT include any additional identifier like Group/SubGroup in GitLab or organization in GitHub.\n",
          "examples": [
            "semantic-conventions",
            "my-cool-repo"
          ],
          "requirement_level": "recommended",
          "note": "Due to it only being the name, it can clash with forks of the same\nrepository if collecting telemetry across multiple orgs or groups in\nthe same backends.\n",
          "stability": "development"
        },
        {
          "name": "vcs.ref.base.name",
          "type": "string",
          "brief": "The name of the [reference](https://git-scm.com/docs/gitglossary#def_ref) such as **branch** or **tag** in the repository.\n",
          "examples": [
            "my-feature-branch",
            "tag-1-test"
          ],
          "requirement_level": "recommended",
          "note": "`base` refers to the starting point of a change. For example, `main`\nwould be the base reference of type branch if you've created a new\nreference of type branch from it and created new commits.\n",
          "stability": "development"
        },
        {
          "name": "vcs.repository.url.full",
          "type": "string",
          "brief": "The [canonical URL](https://support.google.com/webmasters/answer/10347851?hl=en#:~:text=A%20canonical%20URL%20is%20the,Google%20chooses%20one%20as%20canonical.) of the repository providing the complete HTTP(S) address in order to locate and identify the repository through a browser.\n",
          "examples": [
            "https://github.com/opentelemetry/open-telemetry-collector-contrib",
            "https://gitlab.com/my-org/my-project/my-projects-project/repo"
          ],
          "requirement_level": "required",
          "note": "In Git Version Control Systems, the canonical URL SHOULD NOT include\nthe `.git` extension.\n",
          "stability": "development"
        },
        {
          "name": "vcs.ref.head.name",
          "type": "string",
          "brief": "The name of the [reference](https://git-scm.com/docs/gitglossary#def_ref) such as **branch** or **tag** in the repository.\n",
          "examples": [
            "my-feature-branch",
            "tag-1-test"
          ],
          "requirement_level": "required",
          "note": "`head` refers to where you are right now; the current reference at a\ngiven time.\n",
          "stability": "development"
        },
        {
          "name": "vcs.ref.head.revision",
          "type": "string",
          "brief": "The revision, literally [revised version](https://www.merriam-webster.com/dictionary/revision), The revision most often refers to a commit object in Git, or a revision number in SVN.\n",
          "examples": [
            "9d59409acf479dfa0df1aa568182e43e43df8bbe28d60fcf2bc52e30068802cc",
            "main",
            "123",
            "HEAD"
          ],
          "requirement_level": "opt_in",
          "note": "`head` refers to where you are right now; the current reference at a\ngiven time.The revision can be a full [hash value (see\nglossary)](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.186-5.pdf),\nof the recorded change to a ref within a repository pointing to a\ncommit [commit](https://git-scm.com/docs/git-commit) object. It does\nnot necessarily have to be a hash; it can simply define a [revision\nnumber](https://svnbook.red-bean.com/en/1.7/svn.tour.revs.specifiers.html)\nwhich is an integer that is monotonically increasing. In cases where\nit is identical to the `ref.head.name`, it SHOULD still be included.\nIt is up to the implementer to decide which value to set as the\nrevision based on the VCS system and situational context.\n",
          "stability": "development"
        },
        {
          "name": "vcs.ref.base.revision",
          "type": "string",
          "brief": "The revision, literally [revised version](https://www.merriam-webster.com/dictionary/revision), The revision most often refers to a commit object in Git, or a revision number in SVN.\n",
          "examples": [
            "9d59409acf479dfa0df1aa568182e43e43df8bbe28d60fcf2bc52e30068802cc",
            "main",
            "123",
            "HEAD"
          ],
          "requirement_level": "opt_in",
          "note": "`base` refers to the starting point of a change. For example, `main`\nwould be the base reference of type branch if you've created a new\nreference of type branch from it and created new commits. The\nrevision can be a full [hash value (see\nglossary)](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.186-5.pdf),\nof the recorded change to a ref within a repository pointing to a\ncommit [commit](https://git-scm.com/docs/git-commit) object. It does\nnot necessarily have to be a hash; it can simply define a [revision\nnumber](https://svnbook.red-bean.com/en/1.7/svn.tour.revs.specifiers.html)\nwhich is an integer that is monotonically increasing. In cases where\nit is identical to the `ref.base.name`, it SHOULD still be included.\nIt is up to the implementer to decide which value to set as the\nrevision based on the VCS system and situational context.\n",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "vcs.change.time_to_merge",
      "instrument": "gauge",
      "unit": "s",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/vcs/metrics.yaml",
        "attributes": {
          "vcs.ref.base.name": {
            "source_group": "registry.vcs.repository",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "vcs.ref.base.revision": {
            "source_group": "registry.vcs.repository",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "vcs.ref.head.name": {
            "source_group": "registry.vcs.repository",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "vcs.ref.head.revision": {
            "source_group": "registry.vcs.repository",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "vcs.repository.name": {
            "source_group": "registry.vcs.repository",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "vcs.repository.url.full": {
            "source_group": "registry.vcs.repository",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.vcs.repository.count",
      "type": "metric",
      "brief": "The number of repositories in an organization.",
      "stability": "development",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "vcs.repository.count",
      "instrument": "updowncounter",
      "unit": "{repository}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/vcs/metrics.yaml"
      }
    },
    {
      "id": "metric.vcs.ref.count",
      "type": "metric",
      "brief": "The number of refs of type branch or tag in a repository.",
      "stability": "development",
      "attributes": [
        {
          "name": "vcs.repository.name",
          "type": "string",
          "brief": "The human readable name of the repository. It SHOULD NOT include any additional identifier like Group/SubGroup in GitLab or organization in GitHub.\n",
          "examples": [
            "semantic-conventions",
            "my-cool-repo"
          ],
          "requirement_level": "recommended",
          "note": "Due to it only being the name, it can clash with forks of the same\nrepository if collecting telemetry across multiple orgs or groups in\nthe same backends.\n",
          "stability": "development"
        },
        {
          "name": "vcs.repository.url.full",
          "type": "string",
          "brief": "The [canonical URL](https://support.google.com/webmasters/answer/10347851?hl=en#:~:text=A%20canonical%20URL%20is%20the,Google%20chooses%20one%20as%20canonical.) of the repository providing the complete HTTP(S) address in order to locate and identify the repository through a browser.\n",
          "examples": [
            "https://github.com/opentelemetry/open-telemetry-collector-contrib",
            "https://gitlab.com/my-org/my-project/my-projects-project/repo"
          ],
          "requirement_level": "required",
          "note": "In Git Version Control Systems, the canonical URL SHOULD NOT include\nthe `.git` extension.\n",
          "stability": "development"
        },
        {
          "name": "vcs.ref.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "branch",
                "value": "branch",
                "brief": "[branch](https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddefbranchabranch)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "tag",
                "value": "tag",
                "brief": "[tag](https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddeftagatag)",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The type of the [reference](https://git-scm.com/docs/gitglossary#def_ref) in the repository.\n",
          "examples": [
            "branch",
            "tag"
          ],
          "requirement_level": "required",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "vcs.ref.count",
      "instrument": "updowncounter",
      "unit": "{ref}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/vcs/metrics.yaml",
        "attributes": {
          "vcs.ref.type": {
            "source_group": "registry.vcs.repository",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "vcs.repository.name": {
            "source_group": "registry.vcs.repository",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "vcs.repository.url.full": {
            "source_group": "registry.vcs.repository",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.vcs.ref.lines_delta",
      "type": "metric",
      "brief": "The number of lines added/removed in a ref (branch) relative to the ref from the `vcs.ref.base.name` attribute.",
      "note": "This metric should be reported for each `vcs.line_change.type` value. For example if a ref added 3 lines and removed 2 lines,\ninstrumentation SHOULD report two measurements: 3 and 2 (both positive numbers).\nIf number of lines added/removed should be calculated from the start of time, then `vcs.ref.base.name` SHOULD be set to an empty string.\n",
      "stability": "development",
      "attributes": [
        {
          "name": "vcs.repository.name",
          "type": "string",
          "brief": "The human readable name of the repository. It SHOULD NOT include any additional identifier like Group/SubGroup in GitLab or organization in GitHub.\n",
          "examples": [
            "semantic-conventions",
            "my-cool-repo"
          ],
          "requirement_level": "recommended",
          "note": "Due to it only being the name, it can clash with forks of the same\nrepository if collecting telemetry across multiple orgs or groups in\nthe same backends.\n",
          "stability": "development"
        },
        {
          "name": "vcs.repository.url.full",
          "type": "string",
          "brief": "The [canonical URL](https://support.google.com/webmasters/answer/10347851?hl=en#:~:text=A%20canonical%20URL%20is%20the,Google%20chooses%20one%20as%20canonical.) of the repository providing the complete HTTP(S) address in order to locate and identify the repository through a browser.\n",
          "examples": [
            "https://github.com/opentelemetry/open-telemetry-collector-contrib",
            "https://gitlab.com/my-org/my-project/my-projects-project/repo"
          ],
          "requirement_level": "required",
          "note": "In Git Version Control Systems, the canonical URL SHOULD NOT include\nthe `.git` extension.\n",
          "stability": "development"
        },
        {
          "name": "vcs.ref.head.name",
          "type": "string",
          "brief": "The name of the [reference](https://git-scm.com/docs/gitglossary#def_ref) such as **branch** or **tag** in the repository.\n",
          "examples": [
            "my-feature-branch",
            "tag-1-test"
          ],
          "requirement_level": "required",
          "note": "`head` refers to where you are right now; the current reference at a\ngiven time.\n",
          "stability": "development"
        },
        {
          "name": "vcs.change.id",
          "type": "string",
          "brief": "The ID of the change (pull request/merge request/changelist) if applicable. This is usually a unique (within repository) identifier generated by the VCS system.\n",
          "examples": [
            "123"
          ],
          "requirement_level": {
            "conditionally_required": "if a change is associate with the ref."
          },
          "stability": "development"
        },
        {
          "name": "vcs.ref.head.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "branch",
                "value": "branch",
                "brief": "[branch](https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddefbranchabranch)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "tag",
                "value": "tag",
                "brief": "[tag](https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddeftagatag)",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The type of the [reference](https://git-scm.com/docs/gitglossary#def_ref) in the repository.\n",
          "examples": [
            "branch",
            "tag"
          ],
          "requirement_level": "required",
          "note": "`head` refers to where you are right now; the current reference at a\ngiven time.\n",
          "stability": "development"
        },
        {
          "name": "vcs.ref.base.name",
          "type": "string",
          "brief": "The name of the [reference](https://git-scm.com/docs/gitglossary#def_ref) such as **branch** or **tag** in the repository.\n",
          "examples": [
            "my-feature-branch",
            "tag-1-test"
          ],
          "requirement_level": "required",
          "note": "`base` refers to the starting point of a change. For example, `main`\nwould be the base reference of type branch if you've created a new\nreference of type branch from it and created new commits.\n",
          "stability": "development"
        },
        {
          "name": "vcs.ref.base.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "branch",
                "value": "branch",
                "brief": "[branch](https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddefbranchabranch)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "tag",
                "value": "tag",
                "brief": "[tag](https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddeftagatag)",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The type of the [reference](https://git-scm.com/docs/gitglossary#def_ref) in the repository.\n",
          "examples": [
            "branch",
            "tag"
          ],
          "requirement_level": "required",
          "note": "`base` refers to the starting point of a change. For example, `main`\nwould be the base reference of type branch if you've created a new\nreference of type branch from it and created new commits.\n",
          "stability": "development"
        },
        {
          "name": "vcs.line_change.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "added",
                "value": "added",
                "brief": "How many lines were added.",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "removed",
                "value": "removed",
                "brief": "How many lines were removed.",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The type of line change being measured on a branch or change.\n",
          "examples": [
            "added",
            "removed"
          ],
          "requirement_level": "required",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "vcs.ref.lines_delta",
      "instrument": "gauge",
      "unit": "{line}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/vcs/metrics.yaml",
        "attributes": {
          "vcs.change.id": {
            "source_group": "registry.vcs.repository",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "vcs.line_change.type": {
            "source_group": "registry.vcs.repository",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "vcs.ref.base.name": {
            "source_group": "registry.vcs.repository",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "vcs.ref.base.type": {
            "source_group": "registry.vcs.repository",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "vcs.ref.head.name": {
            "source_group": "registry.vcs.repository",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "vcs.ref.head.type": {
            "source_group": "registry.vcs.repository",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "vcs.repository.name": {
            "source_group": "registry.vcs.repository",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "vcs.repository.url.full": {
            "source_group": "registry.vcs.repository",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.vcs.ref.revisions_delta",
      "type": "metric",
      "brief": "The number of revisions (commits) a ref (branch) is ahead/behind the branch from the `vcs.ref.base.name` attribute",
      "note": "This metric should be reported for each `vcs.revision_delta.direction` value. For example if branch `a` is 3 commits behind and 2 commits ahead of `trunk`,\ninstrumentation SHOULD report two measurements: 3 and 2 (both positive numbers) and `vcs.ref.base.name` is set to `trunk`.\n",
      "stability": "development",
      "attributes": [
        {
          "name": "vcs.repository.name",
          "type": "string",
          "brief": "The human readable name of the repository. It SHOULD NOT include any additional identifier like Group/SubGroup in GitLab or organization in GitHub.\n",
          "examples": [
            "semantic-conventions",
            "my-cool-repo"
          ],
          "requirement_level": "recommended",
          "note": "Due to it only being the name, it can clash with forks of the same\nrepository if collecting telemetry across multiple orgs or groups in\nthe same backends.\n",
          "stability": "development"
        },
        {
          "name": "vcs.repository.url.full",
          "type": "string",
          "brief": "The [canonical URL](https://support.google.com/webmasters/answer/10347851?hl=en#:~:text=A%20canonical%20URL%20is%20the,Google%20chooses%20one%20as%20canonical.) of the repository providing the complete HTTP(S) address in order to locate and identify the repository through a browser.\n",
          "examples": [
            "https://github.com/opentelemetry/open-telemetry-collector-contrib",
            "https://gitlab.com/my-org/my-project/my-projects-project/repo"
          ],
          "requirement_level": "required",
          "note": "In Git Version Control Systems, the canonical URL SHOULD NOT include\nthe `.git` extension.\n",
          "stability": "development"
        },
        {
          "name": "vcs.ref.head.name",
          "type": "string",
          "brief": "The name of the [reference](https://git-scm.com/docs/gitglossary#def_ref) such as **branch** or **tag** in the repository.\n",
          "examples": [
            "my-feature-branch",
            "tag-1-test"
          ],
          "requirement_level": "required",
          "note": "`head` refers to where you are right now; the current reference at a\ngiven time.\n",
          "stability": "development"
        },
        {
          "name": "vcs.change.id",
          "type": "string",
          "brief": "The ID of the change (pull request/merge request/changelist) if applicable. This is usually a unique (within repository) identifier generated by the VCS system.\n",
          "examples": [
            "123"
          ],
          "requirement_level": {
            "conditionally_required": "if a change is associate with the ref."
          },
          "stability": "development"
        },
        {
          "name": "vcs.ref.head.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "branch",
                "value": "branch",
                "brief": "[branch](https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddefbranchabranch)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "tag",
                "value": "tag",
                "brief": "[tag](https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddeftagatag)",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The type of the [reference](https://git-scm.com/docs/gitglossary#def_ref) in the repository.\n",
          "examples": [
            "branch",
            "tag"
          ],
          "requirement_level": "required",
          "note": "`head` refers to where you are right now; the current reference at a\ngiven time.\n",
          "stability": "development"
        },
        {
          "name": "vcs.ref.base.name",
          "type": "string",
          "brief": "The name of the [reference](https://git-scm.com/docs/gitglossary#def_ref) such as **branch** or **tag** in the repository.\n",
          "examples": [
            "my-feature-branch",
            "tag-1-test"
          ],
          "requirement_level": "required",
          "note": "`base` refers to the starting point of a change. For example, `main`\nwould be the base reference of type branch if you've created a new\nreference of type branch from it and created new commits.\n",
          "stability": "development"
        },
        {
          "name": "vcs.ref.base.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "branch",
                "value": "branch",
                "brief": "[branch](https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddefbranchabranch)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "tag",
                "value": "tag",
                "brief": "[tag](https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddeftagatag)",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The type of the [reference](https://git-scm.com/docs/gitglossary#def_ref) in the repository.\n",
          "examples": [
            "branch",
            "tag"
          ],
          "requirement_level": "required",
          "note": "`base` refers to the starting point of a change. For example, `main`\nwould be the base reference of type branch if you've created a new\nreference of type branch from it and created new commits.\n",
          "stability": "development"
        },
        {
          "name": "vcs.revision_delta.direction",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "behind",
                "value": "behind",
                "brief": "How many revisions the change is behind the target ref.",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "ahead",
                "value": "ahead",
                "brief": "How many revisions the change is ahead of the target ref.",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The type of revision comparison.\n",
          "examples": [
            "ahead",
            "behind"
          ],
          "requirement_level": "required",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "vcs.ref.revisions_delta",
      "instrument": "gauge",
      "unit": "{revision}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/vcs/metrics.yaml",
        "attributes": {
          "vcs.change.id": {
            "source_group": "registry.vcs.repository",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "vcs.ref.base.name": {
            "source_group": "registry.vcs.repository",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "vcs.ref.base.type": {
            "source_group": "registry.vcs.repository",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "vcs.ref.head.name": {
            "source_group": "registry.vcs.repository",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "vcs.ref.head.type": {
            "source_group": "registry.vcs.repository",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "vcs.repository.name": {
            "source_group": "registry.vcs.repository",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "vcs.repository.url.full": {
            "source_group": "registry.vcs.repository",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "vcs.revision_delta.direction": {
            "source_group": "registry.vcs.repository",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.vcs.ref.time",
      "type": "metric",
      "brief": "Time a ref (branch) created from the default branch (trunk) has existed. The `ref.type` attribute will always be `branch`",
      "stability": "development",
      "attributes": [
        {
          "name": "vcs.repository.name",
          "type": "string",
          "brief": "The human readable name of the repository. It SHOULD NOT include any additional identifier like Group/SubGroup in GitLab or organization in GitHub.\n",
          "examples": [
            "semantic-conventions",
            "my-cool-repo"
          ],
          "requirement_level": "recommended",
          "note": "Due to it only being the name, it can clash with forks of the same\nrepository if collecting telemetry across multiple orgs or groups in\nthe same backends.\n",
          "stability": "development"
        },
        {
          "name": "vcs.repository.url.full",
          "type": "string",
          "brief": "The [canonical URL](https://support.google.com/webmasters/answer/10347851?hl=en#:~:text=A%20canonical%20URL%20is%20the,Google%20chooses%20one%20as%20canonical.) of the repository providing the complete HTTP(S) address in order to locate and identify the repository through a browser.\n",
          "examples": [
            "https://github.com/opentelemetry/open-telemetry-collector-contrib",
            "https://gitlab.com/my-org/my-project/my-projects-project/repo"
          ],
          "requirement_level": "required",
          "note": "In Git Version Control Systems, the canonical URL SHOULD NOT include\nthe `.git` extension.\n",
          "stability": "development"
        },
        {
          "name": "vcs.ref.head.name",
          "type": "string",
          "brief": "The name of the [reference](https://git-scm.com/docs/gitglossary#def_ref) such as **branch** or **tag** in the repository.\n",
          "examples": [
            "my-feature-branch",
            "tag-1-test"
          ],
          "requirement_level": "required",
          "note": "`head` refers to where you are right now; the current reference at a\ngiven time.\n",
          "stability": "development"
        },
        {
          "name": "vcs.ref.head.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "branch",
                "value": "branch",
                "brief": "[branch](https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddefbranchabranch)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "tag",
                "value": "tag",
                "brief": "[tag](https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddeftagatag)",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The type of the [reference](https://git-scm.com/docs/gitglossary#def_ref) in the repository.\n",
          "examples": [
            "branch",
            "tag"
          ],
          "requirement_level": "required",
          "note": "`head` refers to where you are right now; the current reference at a\ngiven time.\n",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "vcs.ref.time",
      "instrument": "gauge",
      "unit": "s",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/vcs/metrics.yaml",
        "attributes": {
          "vcs.ref.head.name": {
            "source_group": "registry.vcs.repository",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "vcs.ref.head.type": {
            "source_group": "registry.vcs.repository",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "vcs.repository.name": {
            "source_group": "registry.vcs.repository",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "vcs.repository.url.full": {
            "source_group": "registry.vcs.repository",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.vcs.contributor.count",
      "type": "metric",
      "brief": "The number of unique contributors to a repository",
      "stability": "development",
      "attributes": [
        {
          "name": "vcs.repository.name",
          "type": "string",
          "brief": "The human readable name of the repository. It SHOULD NOT include any additional identifier like Group/SubGroup in GitLab or organization in GitHub.\n",
          "examples": [
            "semantic-conventions",
            "my-cool-repo"
          ],
          "requirement_level": "recommended",
          "note": "Due to it only being the name, it can clash with forks of the same\nrepository if collecting telemetry across multiple orgs or groups in\nthe same backends.\n",
          "stability": "development"
        },
        {
          "name": "vcs.repository.url.full",
          "type": "string",
          "brief": "The [canonical URL](https://support.google.com/webmasters/answer/10347851?hl=en#:~:text=A%20canonical%20URL%20is%20the,Google%20chooses%20one%20as%20canonical.) of the repository providing the complete HTTP(S) address in order to locate and identify the repository through a browser.\n",
          "examples": [
            "https://github.com/opentelemetry/open-telemetry-collector-contrib",
            "https://gitlab.com/my-org/my-project/my-projects-project/repo"
          ],
          "requirement_level": "required",
          "note": "In Git Version Control Systems, the canonical URL SHOULD NOT include\nthe `.git` extension.\n",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "vcs.contributor.count",
      "instrument": "gauge",
      "unit": "{contributor}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/vcs/metrics.yaml",
        "attributes": {
          "vcs.repository.name": {
            "source_group": "registry.vcs.repository",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "vcs.repository.url.full": {
            "source_group": "registry.vcs.repository",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "registry.deployment",
      "type": "attribute_group",
      "brief": "This document defines attributes for software deployments.\n",
      "attributes": [
        {
          "name": "deployment.name",
          "type": "string",
          "brief": "The name of the deployment.\n",
          "examples": [
            "deploy my app",
            "deploy-frontend"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "deployment.id",
          "type": "string",
          "brief": "The id of the deployment.\n",
          "examples": [
            "1208"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "deployment.status",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "failed",
                "value": "failed",
                "brief": "failed",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "succeeded",
                "value": "succeeded",
                "brief": "succeeded",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The status of the deployment.\n",
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "deployment.environment.name",
          "type": "string",
          "brief": "Name of the [deployment environment](https://wikipedia.org/wiki/Deployment_environment) (aka deployment tier).\n",
          "examples": [
            "staging",
            "production"
          ],
          "requirement_level": "recommended",
          "note": "`deployment.environment.name` does not affect the uniqueness constraints defined through\nthe `service.namespace`, `service.name` and `service.instance.id` resource attributes.\nThis implies that resources carrying the following attribute combinations MUST be\nconsidered to be identifying the same service:\n\n- `service.name=frontend`, `deployment.environment.name=production`\n- `service.name=frontend`, `deployment.environment.name=staging`.\n",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/deployment/registry.yaml"
      },
      "display_name": "Deployment Attributes"
    },
    {
      "id": "event.device.app.lifecycle",
      "type": "event",
      "brief": "This event represents an occurrence of a lifecycle transition on Android or iOS platform.\n",
      "note": "The event body fields MUST be used to describe the state of the application at the time of the event.\nThis event is meant to be used in conjunction with `os.name` [resource semantic convention](/docs/resource/os.md) to identify the mobile operating system (e.g. Android, iOS).\nThe `android.app.state` and `ios.app.state` fields are mutually exclusive and MUST NOT be used together, each field MUST be used with its corresponding `os.name` value.\n",
      "stability": "development",
      "attributes": [
        {
          "name": "ios.app.state",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "active",
                "value": "active",
                "brief": "The app has become `active`. Associated with UIKit notification `applicationDidBecomeActive`.\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "inactive",
                "value": "inactive",
                "brief": "The app is now `inactive`. Associated with UIKit notification `applicationWillResignActive`.\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "background",
                "value": "background",
                "brief": "The app is now in the background. This value is associated with UIKit notification `applicationDidEnterBackground`.\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "foreground",
                "value": "foreground",
                "brief": "The app is now in the foreground. This value is associated with UIKit notification `applicationWillEnterForeground`.\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "terminate",
                "value": "terminate",
                "brief": "The app is about to terminate. Associated with UIKit notification `applicationWillTerminate`.\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "This attribute represents the state of the application.\n",
          "requirement_level": {
            "conditionally_required": "if and only if `os.name` is `ios`"
          },
          "note": "The iOS lifecycle states are defined in the [UIApplicationDelegate documentation](https://developer.apple.com/documentation/uikit/uiapplicationdelegate), and from which the `OS terminology` column values are derived.\n",
          "stability": "development"
        },
        {
          "name": "android.app.state",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "created",
                "value": "created",
                "brief": "Any time before Activity.onResume() or, if the app has no Activity, Context.startService() has been called in the app for the first time.\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "background",
                "value": "background",
                "brief": "Any time after Activity.onPause() or, if the app has no Activity, Context.stopService() has been called when the app was in the foreground state.\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "foreground",
                "value": "foreground",
                "brief": "Any time after Activity.onResume() or, if the app has no Activity, Context.startService() has been called when the app was in either the created or background states.\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "This attribute represents the state of the application.\n",
          "examples": [
            "created"
          ],
          "requirement_level": {
            "conditionally_required": "if and only if `os.name` is `android`"
          },
          "note": "The Android lifecycle states are defined in [Activity lifecycle callbacks](https://developer.android.com/guide/components/activities/activity-lifecycle#lc), and from which the `OS identifiers` are derived.\n",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": "device.app.lifecycle",
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/device/events.yaml",
        "attributes": {
          "android.app.state": {
            "source_group": "registry.android",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "ios.app.state": {
            "source_group": "registry.ios",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "span.aws.lambda.server",
      "type": "span",
      "brief": "Span attributes used by AWS Lambda (in addition to general `faas` attributes).\n",
      "stability": "development",
      "attributes": [
        {
          "name": "aws.lambda.invoked_arn",
          "type": "string",
          "brief": "The full invoked ARN as provided on the `Context` passed to the function (`Lambda-Runtime-Invoked-Function-Arn` header on the `/runtime/invocation/next` applicable).\n",
          "examples": [
            "arn:aws:lambda:us-east-1:123456:function:myfunction:myalias"
          ],
          "requirement_level": "recommended",
          "note": "This may be different from `cloud.resource_id` if an alias is involved.",
          "stability": "development"
        }
      ],
      "span_kind": "server",
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/aws/lambda-spans.yaml",
        "attributes": {
          "aws.lambda.invoked_arn": {
            "source_group": "registry.aws.lambda",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "registry.service",
      "type": "attribute_group",
      "brief": "A service instance.\n",
      "attributes": [
        {
          "name": "service.name",
          "type": "string",
          "brief": "Logical name of the service.\n",
          "examples": [
            "shoppingcart"
          ],
          "requirement_level": "recommended",
          "note": "MUST be the same for all instances of horizontally scaled services. If the value was not specified, SDKs MUST fallback to `unknown_service:` concatenated with [`process.executable.name`](process.md), e.g. `unknown_service:bash`. If `process.executable.name` is not available, the value MUST be set to `unknown_service`.\n",
          "stability": "stable"
        },
        {
          "name": "service.version",
          "type": "string",
          "brief": "The version string of the service API or implementation. The format is not defined by these conventions.\n",
          "examples": [
            "2.0.0",
            "a01dbef8a"
          ],
          "requirement_level": "recommended",
          "stability": "stable"
        },
        {
          "name": "service.namespace",
          "type": "string",
          "brief": "A namespace for `service.name`.\n",
          "examples": [
            "Shop"
          ],
          "requirement_level": "recommended",
          "note": "A string value having a meaning that helps to distinguish a group of services, for example the team name that owns a group of services. `service.name` is expected to be unique within the same namespace. If `service.namespace` is not specified in the Resource then `service.name` is expected to be unique for all services that have no explicit namespace defined (so the empty/unspecified namespace is simply one more valid namespace). Zero-length namespace string is assumed equal to unspecified namespace.\n",
          "stability": "development"
        },
        {
          "name": "service.instance.id",
          "type": "string",
          "brief": "The string ID of the service instance.\n",
          "examples": [
            "627cc493-f310-47de-96bd-71410b7dec09"
          ],
          "requirement_level": "recommended",
          "note": "MUST be unique for each instance of the same `service.namespace,service.name` pair (in other words\n`service.namespace,service.name,service.instance.id` triplet MUST be globally unique). The ID helps to\ndistinguish instances of the same service that exist at the same time (e.g. instances of a horizontally scaled\nservice).\n\nImplementations, such as SDKs, are recommended to generate a random Version 1 or Version 4 [RFC\n4122](https://www.ietf.org/rfc/rfc4122.txt) UUID, but are free to use an inherent unique ID as the source of\nthis value if stability is desirable. In that case, the ID SHOULD be used as source of a UUID Version 5 and\nSHOULD use the following UUID as the namespace: `4d63009a-8d0f-11ee-aad7-4c796ed8e320`.\n\nUUIDs are typically recommended, as only an opaque value for the purposes of identifying a service instance is\nneeded. Similar to what can be seen in the man page for the\n[`/etc/machine-id`](https://www.freedesktop.org/software/systemd/man/latest/machine-id.html) file, the underlying\ndata, such as pod name and namespace should be treated as confidential, being the user's choice to expose it\nor not via another resource attribute.\n\nFor applications running behind an application server (like unicorn), we do not recommend using one identifier\nfor all processes participating in the application. Instead, it's recommended each division (e.g. a worker\nthread in unicorn) to have its own instance.id.\n\nIt's not recommended for a Collector to set `service.instance.id` if it can't unambiguously determine the\nservice instance that is generating that telemetry. For instance, creating an UUID based on `pod.name` will\nlikely be wrong, as the Collector might not know from which container within that pod the telemetry originated.\nHowever, Collectors can set the `service.instance.id` if they can unambiguously determine the service instance\nfor that telemetry. This is typically the case for scraping receivers, as they know the target address and\nport.\n",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/service/registry.yaml"
      },
      "display_name": "Service Attributes"
    },
    {
      "id": "metric.dns.lookup.duration",
      "type": "metric",
      "brief": "Measures the time taken to perform a DNS lookup.",
      "stability": "development",
      "attributes": [
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes the error the DNS lookup failed with.",
          "examples": [
            "host_not_found",
            "no_recovery",
            "java.net.UnknownHostException"
          ],
          "requirement_level": {
            "conditionally_required": "if and only if an error has occurred."
          },
          "note": "Instrumentations SHOULD use error code such as one of errors reported by `getaddrinfo`([Linux or other POSIX systems](https://man7.org/linux/man-pages/man3/getaddrinfo.3.html) / [Windows](https://learn.microsoft.com/windows/win32/api/ws2tcpip/nf-ws2tcpip-getaddrinfo)) or one reported by the runtime or client library. If error code is not available, the full name of exception type SHOULD be used.\n",
          "stability": "stable"
        },
        {
          "name": "dns.question.name",
          "type": "string",
          "brief": "The name being queried.",
          "examples": [
            "www.example.com",
            "dot.net"
          ],
          "requirement_level": "required",
          "note": "If the name field contains non-printable characters (below 32 or above 126), those characters should be represented as escaped base 10 integers (\\DDD). Back slashes and quotes should be escaped. Tabs, carriage returns, and line feeds should be converted to \\t, \\r, and \\n respectively.\n",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "dns.lookup.duration",
      "instrument": "histogram",
      "unit": "s",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/dns/metrics.yaml",
        "attributes": {
          "dns.question.name": {
            "source_group": "registry.dns",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ]
          },
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.messaging.attributes",
      "type": "attribute_group",
      "brief": "Common messaging metrics attributes.",
      "stability": "development",
      "attributes": [
        {
          "name": "server.port",
          "type": "int",
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": "recommended",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "server.address",
          "type": "string",
          "brief": "Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": {
            "conditionally_required": "If available."
          },
          "note": "Server domain name of the broker if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.\n",
          "stability": "stable"
        },
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "amqp:decode-error",
            "KAFKA_STORAGE_ERROR",
            "channel-error"
          ],
          "requirement_level": {
            "conditionally_required": "If and only if the messaging operation has failed."
          },
          "note": "The `error.type` SHOULD be predictable, and SHOULD have low cardinality.\n\nWhen `error.type` is set to a type (e.g., an exception type), its\ncanonical class name identifying the type within the artifact SHOULD be used.\n\nInstrumentations SHOULD document the list of errors they report.\n\nThe cardinality of `error.type` within one instrumentation library SHOULD be low.\nTelemetry consumers that aggregate data from multiple instrumentation libraries and applications\nshould be prepared for `error.type` to have high cardinality at query time when no\nadditional filters are applied.\n\nIf the operation has completed successfully, instrumentations SHOULD NOT set `error.type`.\n\nIf a specific domain defines its own set of error identifiers (such as HTTP or gRPC status codes),\nit's RECOMMENDED to:\n\n- Use a domain-specific attribute\n- Set `error.type` to capture all errors, regardless of whether they are defined within the domain-specific set or not.\n",
          "stability": "stable"
        },
        {
          "name": "messaging.destination.partition.id",
          "type": "string",
          "brief": "The identifier of the partition messages are sent to or received from, unique within the `messaging.destination.name`.\n",
          "examples": "1",
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "messaging.operation.name",
          "type": "string",
          "brief": "The system-specific name of the messaging operation.\n",
          "examples": [
            "ack",
            "nack",
            "send"
          ],
          "requirement_level": "required",
          "stability": "development"
        },
        {
          "name": "messaging.destination.name",
          "type": "string",
          "brief": "The message destination name",
          "examples": [
            "MyQueue",
            "MyTopic"
          ],
          "requirement_level": {
            "conditionally_required": "if and only if `messaging.destination.name` is known to have low cardinality. Otherwise, `messaging.destination.template` MAY be populated."
          },
          "note": "Destination name SHOULD uniquely identify a specific queue, topic or other entity within the broker. If\nthe broker doesn't have such notion, the destination name SHOULD uniquely identify the broker.\n",
          "stability": "development"
        },
        {
          "name": "messaging.destination.template",
          "type": "string",
          "brief": "Low cardinality representation of the messaging destination name",
          "examples": [
            "/customers/{customerId}"
          ],
          "requirement_level": {
            "conditionally_required": "if available."
          },
          "note": "Destination names could be constructed from templates. An example would be a destination name involving a user name or product id. Although the destination name in this case is of high cardinality, the underlying template is of low cardinality and can be effectively used for grouping and aggregation.\n",
          "stability": "development"
        },
        {
          "name": "messaging.system",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "activemq",
                "value": "activemq",
                "brief": "Apache ActiveMQ",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "aws_sqs",
                "value": "aws_sqs",
                "brief": "Amazon Simple Queue Service (SQS)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "eventgrid",
                "value": "eventgrid",
                "brief": "Azure Event Grid",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "eventhubs",
                "value": "eventhubs",
                "brief": "Azure Event Hubs",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "servicebus",
                "value": "servicebus",
                "brief": "Azure Service Bus",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "gcp_pubsub",
                "value": "gcp_pubsub",
                "brief": "Google Cloud Pub/Sub",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "jms",
                "value": "jms",
                "brief": "Java Message Service",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "kafka",
                "value": "kafka",
                "brief": "Apache Kafka",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "rabbitmq",
                "value": "rabbitmq",
                "brief": "RabbitMQ",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "rocketmq",
                "value": "rocketmq",
                "brief": "Apache RocketMQ",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "pulsar",
                "value": "pulsar",
                "brief": "Apache Pulsar",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The messaging system as identified by the client instrumentation.",
          "requirement_level": "required",
          "note": "The actual messaging system may differ from the one known by the client. For example, when using Kafka client libraries to communicate with Azure Event Hubs, the `messaging.system` is set to `kafka` based on the instrumentation's best knowledge.\n",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/messaging/metrics.yaml",
        "attributes": {
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ]
          },
          "messaging.destination.name": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "messaging.destination.partition.id": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "messaging.destination.template": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "messaging.operation.name": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "messaging.system": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "metric.messaging.consumer.attributes",
      "type": "attribute_group",
      "brief": "Messaging consumer metrics attributes.",
      "stability": "development",
      "attributes": [
        {
          "name": "server.port",
          "type": "int",
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": "recommended",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "server.address",
          "type": "string",
          "brief": "Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": {
            "conditionally_required": "If available."
          },
          "note": "Server domain name of the broker if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.\n",
          "stability": "stable"
        },
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "amqp:decode-error",
            "KAFKA_STORAGE_ERROR",
            "channel-error"
          ],
          "requirement_level": {
            "conditionally_required": "If and only if the messaging operation has failed."
          },
          "note": "The `error.type` SHOULD be predictable, and SHOULD have low cardinality.\n\nWhen `error.type` is set to a type (e.g., an exception type), its\ncanonical class name identifying the type within the artifact SHOULD be used.\n\nInstrumentations SHOULD document the list of errors they report.\n\nThe cardinality of `error.type` within one instrumentation library SHOULD be low.\nTelemetry consumers that aggregate data from multiple instrumentation libraries and applications\nshould be prepared for `error.type` to have high cardinality at query time when no\nadditional filters are applied.\n\nIf the operation has completed successfully, instrumentations SHOULD NOT set `error.type`.\n\nIf a specific domain defines its own set of error identifiers (such as HTTP or gRPC status codes),\nit's RECOMMENDED to:\n\n- Use a domain-specific attribute\n- Set `error.type` to capture all errors, regardless of whether they are defined within the domain-specific set or not.\n",
          "stability": "stable"
        },
        {
          "name": "messaging.destination.partition.id",
          "type": "string",
          "brief": "The identifier of the partition messages are sent to or received from, unique within the `messaging.destination.name`.\n",
          "examples": "1",
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "messaging.operation.name",
          "type": "string",
          "brief": "The system-specific name of the messaging operation.\n",
          "examples": [
            "ack",
            "nack",
            "send"
          ],
          "requirement_level": "required",
          "stability": "development"
        },
        {
          "name": "messaging.destination.name",
          "type": "string",
          "brief": "The message destination name",
          "examples": [
            "MyQueue",
            "MyTopic"
          ],
          "requirement_level": {
            "conditionally_required": "if and only if `messaging.destination.name` is known to have low cardinality. Otherwise, `messaging.destination.template` MAY be populated."
          },
          "note": "Destination name SHOULD uniquely identify a specific queue, topic or other entity within the broker. If\nthe broker doesn't have such notion, the destination name SHOULD uniquely identify the broker.\n",
          "stability": "development"
        },
        {
          "name": "messaging.destination.template",
          "type": "string",
          "brief": "Low cardinality representation of the messaging destination name",
          "examples": [
            "/customers/{customerId}"
          ],
          "requirement_level": {
            "conditionally_required": "if available."
          },
          "note": "Destination names could be constructed from templates. An example would be a destination name involving a user name or product id. Although the destination name in this case is of high cardinality, the underlying template is of low cardinality and can be effectively used for grouping and aggregation.\n",
          "stability": "development"
        },
        {
          "name": "messaging.system",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "activemq",
                "value": "activemq",
                "brief": "Apache ActiveMQ",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "aws_sqs",
                "value": "aws_sqs",
                "brief": "Amazon Simple Queue Service (SQS)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "eventgrid",
                "value": "eventgrid",
                "brief": "Azure Event Grid",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "eventhubs",
                "value": "eventhubs",
                "brief": "Azure Event Hubs",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "servicebus",
                "value": "servicebus",
                "brief": "Azure Service Bus",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "gcp_pubsub",
                "value": "gcp_pubsub",
                "brief": "Google Cloud Pub/Sub",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "jms",
                "value": "jms",
                "brief": "Java Message Service",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "kafka",
                "value": "kafka",
                "brief": "Apache Kafka",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "rabbitmq",
                "value": "rabbitmq",
                "brief": "RabbitMQ",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "rocketmq",
                "value": "rocketmq",
                "brief": "Apache RocketMQ",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "pulsar",
                "value": "pulsar",
                "brief": "Apache Pulsar",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The messaging system as identified by the client instrumentation.",
          "requirement_level": "required",
          "note": "The actual messaging system may differ from the one known by the client. For example, when using Kafka client libraries to communicate with Azure Event Hubs, the `messaging.system` is set to `kafka` based on the instrumentation's best knowledge.\n",
          "stability": "development"
        },
        {
          "name": "messaging.consumer.group.name",
          "type": "string",
          "brief": "The name of the consumer group with which a consumer is associated.\n",
          "examples": [
            "my-group",
            "indexer"
          ],
          "requirement_level": {
            "conditionally_required": "if applicable."
          },
          "note": "Semantic conventions for individual messaging systems SHOULD document whether `messaging.consumer.group.name` is applicable and what it means in the context of that system.\n",
          "stability": "development"
        },
        {
          "name": "messaging.destination.subscription.name",
          "type": "string",
          "brief": "The name of the destination subscription from which a message is consumed.",
          "examples": [
            "subscription-a"
          ],
          "requirement_level": {
            "conditionally_required": "if applicable."
          },
          "note": "Semantic conventions for individual messaging systems SHOULD document whether `messaging.destination.subscription.name` is applicable and what it means in the context of that system.\n",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/messaging/metrics.yaml",
        "attributes": {
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ]
          },
          "messaging.consumer.group.name": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "messaging.destination.name": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "messaging.destination.partition.id": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "messaging.destination.subscription.name": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "messaging.destination.template": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "messaging.operation.name": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "messaging.system": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "metric.messaging.client.operation.duration",
      "type": "metric",
      "brief": "Duration of messaging operation initiated by a producer or consumer client.",
      "note": "This metric SHOULD NOT be used to report processing duration - processing duration is reported in `messaging.process.duration` metric.\n",
      "stability": "development",
      "attributes": [
        {
          "name": "server.port",
          "type": "int",
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": "recommended",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "server.address",
          "type": "string",
          "brief": "Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": {
            "conditionally_required": "If available."
          },
          "note": "Server domain name of the broker if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.\n",
          "stability": "stable"
        },
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "amqp:decode-error",
            "KAFKA_STORAGE_ERROR",
            "channel-error"
          ],
          "requirement_level": {
            "conditionally_required": "If and only if the messaging operation has failed."
          },
          "note": "The `error.type` SHOULD be predictable, and SHOULD have low cardinality.\n\nWhen `error.type` is set to a type (e.g., an exception type), its\ncanonical class name identifying the type within the artifact SHOULD be used.\n\nInstrumentations SHOULD document the list of errors they report.\n\nThe cardinality of `error.type` within one instrumentation library SHOULD be low.\nTelemetry consumers that aggregate data from multiple instrumentation libraries and applications\nshould be prepared for `error.type` to have high cardinality at query time when no\nadditional filters are applied.\n\nIf the operation has completed successfully, instrumentations SHOULD NOT set `error.type`.\n\nIf a specific domain defines its own set of error identifiers (such as HTTP or gRPC status codes),\nit's RECOMMENDED to:\n\n- Use a domain-specific attribute\n- Set `error.type` to capture all errors, regardless of whether they are defined within the domain-specific set or not.\n",
          "stability": "stable"
        },
        {
          "name": "messaging.destination.partition.id",
          "type": "string",
          "brief": "The identifier of the partition messages are sent to or received from, unique within the `messaging.destination.name`.\n",
          "examples": "1",
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "messaging.destination.name",
          "type": "string",
          "brief": "The message destination name",
          "examples": [
            "MyQueue",
            "MyTopic"
          ],
          "requirement_level": {
            "conditionally_required": "if and only if `messaging.destination.name` is known to have low cardinality. Otherwise, `messaging.destination.template` MAY be populated."
          },
          "note": "Destination name SHOULD uniquely identify a specific queue, topic or other entity within the broker. If\nthe broker doesn't have such notion, the destination name SHOULD uniquely identify the broker.\n",
          "stability": "development"
        },
        {
          "name": "messaging.destination.template",
          "type": "string",
          "brief": "Low cardinality representation of the messaging destination name",
          "examples": [
            "/customers/{customerId}"
          ],
          "requirement_level": {
            "conditionally_required": "if available."
          },
          "note": "Destination names could be constructed from templates. An example would be a destination name involving a user name or product id. Although the destination name in this case is of high cardinality, the underlying template is of low cardinality and can be effectively used for grouping and aggregation.\n",
          "stability": "development"
        },
        {
          "name": "messaging.system",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "activemq",
                "value": "activemq",
                "brief": "Apache ActiveMQ",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "aws_sqs",
                "value": "aws_sqs",
                "brief": "Amazon Simple Queue Service (SQS)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "eventgrid",
                "value": "eventgrid",
                "brief": "Azure Event Grid",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "eventhubs",
                "value": "eventhubs",
                "brief": "Azure Event Hubs",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "servicebus",
                "value": "servicebus",
                "brief": "Azure Service Bus",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "gcp_pubsub",
                "value": "gcp_pubsub",
                "brief": "Google Cloud Pub/Sub",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "jms",
                "value": "jms",
                "brief": "Java Message Service",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "kafka",
                "value": "kafka",
                "brief": "Apache Kafka",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "rabbitmq",
                "value": "rabbitmq",
                "brief": "RabbitMQ",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "rocketmq",
                "value": "rocketmq",
                "brief": "Apache RocketMQ",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "pulsar",
                "value": "pulsar",
                "brief": "Apache Pulsar",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The messaging system as identified by the client instrumentation.",
          "requirement_level": "required",
          "note": "The actual messaging system may differ from the one known by the client. For example, when using Kafka client libraries to communicate with Azure Event Hubs, the `messaging.system` is set to `kafka` based on the instrumentation's best knowledge.\n",
          "stability": "development"
        },
        {
          "name": "messaging.consumer.group.name",
          "type": "string",
          "brief": "The name of the consumer group with which a consumer is associated.\n",
          "examples": [
            "my-group",
            "indexer"
          ],
          "requirement_level": {
            "conditionally_required": "if applicable."
          },
          "note": "Semantic conventions for individual messaging systems SHOULD document whether `messaging.consumer.group.name` is applicable and what it means in the context of that system.\n",
          "stability": "development"
        },
        {
          "name": "messaging.destination.subscription.name",
          "type": "string",
          "brief": "The name of the destination subscription from which a message is consumed.",
          "examples": [
            "subscription-a"
          ],
          "requirement_level": {
            "conditionally_required": "if applicable."
          },
          "note": "Semantic conventions for individual messaging systems SHOULD document whether `messaging.destination.subscription.name` is applicable and what it means in the context of that system.\n",
          "stability": "development"
        },
        {
          "name": "messaging.operation.name",
          "type": "string",
          "brief": "The system-specific name of the messaging operation.\n",
          "examples": [
            "send",
            "receive",
            "ack"
          ],
          "requirement_level": "required",
          "stability": "development"
        },
        {
          "name": "messaging.operation.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "create",
                "value": "create",
                "brief": "A message is created. \"Create\" spans always refer to a single message and are used to provide a unique creation context for messages in batch sending scenarios.\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "send",
                "value": "send",
                "brief": "One or more messages are provided for sending to an intermediary. If a single message is sent, the context of the \"Send\" span can be used as the creation context and no \"Create\" span needs to be created.\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "receive",
                "value": "receive",
                "brief": "One or more messages are requested by a consumer. This operation refers to pull-based scenarios, where consumers explicitly call methods of messaging SDKs to receive messages.\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "process",
                "value": "process",
                "brief": "One or more messages are processed by a consumer.\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "settle",
                "value": "settle",
                "brief": "One or more messages are settled.\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "deliver",
                "value": "deliver",
                "brief": "Deprecated. Use `process` instead.",
                "note": null,
                "stability": "development",
                "deprecated": "Replaced by `process`."
              },
              {
                "id": "publish",
                "value": "publish",
                "brief": "Deprecated. Use `send` instead.",
                "note": null,
                "stability": "development",
                "deprecated": "Replaced by `send`."
              }
            ]
          },
          "brief": "A string identifying the type of the messaging operation.\n",
          "requirement_level": {
            "conditionally_required": "If applicable."
          },
          "note": "If a custom value is used, it MUST be of low cardinality.",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "messaging.client.operation.duration",
      "instrument": "histogram",
      "unit": "s",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/messaging/metrics.yaml",
        "attributes": {
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ]
          },
          "messaging.consumer.group.name": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "messaging.destination.name": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "messaging.destination.partition.id": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "messaging.destination.subscription.name": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "messaging.destination.template": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "messaging.operation.name": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ]
          },
          "messaging.operation.type": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "messaging.system": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "metric.messaging.process.duration",
      "type": "metric",
      "brief": "Duration of processing operation.",
      "note": "This metric MUST be reported for operations with `messaging.operation.type` that matches `process`.\n",
      "stability": "development",
      "attributes": [
        {
          "name": "server.port",
          "type": "int",
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": "recommended",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "server.address",
          "type": "string",
          "brief": "Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": {
            "conditionally_required": "If available."
          },
          "note": "Server domain name of the broker if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.\n",
          "stability": "stable"
        },
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "amqp:decode-error",
            "KAFKA_STORAGE_ERROR",
            "channel-error"
          ],
          "requirement_level": {
            "conditionally_required": "If and only if the messaging operation has failed."
          },
          "note": "The `error.type` SHOULD be predictable, and SHOULD have low cardinality.\n\nWhen `error.type` is set to a type (e.g., an exception type), its\ncanonical class name identifying the type within the artifact SHOULD be used.\n\nInstrumentations SHOULD document the list of errors they report.\n\nThe cardinality of `error.type` within one instrumentation library SHOULD be low.\nTelemetry consumers that aggregate data from multiple instrumentation libraries and applications\nshould be prepared for `error.type` to have high cardinality at query time when no\nadditional filters are applied.\n\nIf the operation has completed successfully, instrumentations SHOULD NOT set `error.type`.\n\nIf a specific domain defines its own set of error identifiers (such as HTTP or gRPC status codes),\nit's RECOMMENDED to:\n\n- Use a domain-specific attribute\n- Set `error.type` to capture all errors, regardless of whether they are defined within the domain-specific set or not.\n",
          "stability": "stable"
        },
        {
          "name": "messaging.destination.partition.id",
          "type": "string",
          "brief": "The identifier of the partition messages are sent to or received from, unique within the `messaging.destination.name`.\n",
          "examples": "1",
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "messaging.destination.name",
          "type": "string",
          "brief": "The message destination name",
          "examples": [
            "MyQueue",
            "MyTopic"
          ],
          "requirement_level": {
            "conditionally_required": "if and only if `messaging.destination.name` is known to have low cardinality. Otherwise, `messaging.destination.template` MAY be populated."
          },
          "note": "Destination name SHOULD uniquely identify a specific queue, topic or other entity within the broker. If\nthe broker doesn't have such notion, the destination name SHOULD uniquely identify the broker.\n",
          "stability": "development"
        },
        {
          "name": "messaging.destination.template",
          "type": "string",
          "brief": "Low cardinality representation of the messaging destination name",
          "examples": [
            "/customers/{customerId}"
          ],
          "requirement_level": {
            "conditionally_required": "if available."
          },
          "note": "Destination names could be constructed from templates. An example would be a destination name involving a user name or product id. Although the destination name in this case is of high cardinality, the underlying template is of low cardinality and can be effectively used for grouping and aggregation.\n",
          "stability": "development"
        },
        {
          "name": "messaging.system",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "activemq",
                "value": "activemq",
                "brief": "Apache ActiveMQ",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "aws_sqs",
                "value": "aws_sqs",
                "brief": "Amazon Simple Queue Service (SQS)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "eventgrid",
                "value": "eventgrid",
                "brief": "Azure Event Grid",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "eventhubs",
                "value": "eventhubs",
                "brief": "Azure Event Hubs",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "servicebus",
                "value": "servicebus",
                "brief": "Azure Service Bus",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "gcp_pubsub",
                "value": "gcp_pubsub",
                "brief": "Google Cloud Pub/Sub",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "jms",
                "value": "jms",
                "brief": "Java Message Service",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "kafka",
                "value": "kafka",
                "brief": "Apache Kafka",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "rabbitmq",
                "value": "rabbitmq",
                "brief": "RabbitMQ",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "rocketmq",
                "value": "rocketmq",
                "brief": "Apache RocketMQ",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "pulsar",
                "value": "pulsar",
                "brief": "Apache Pulsar",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The messaging system as identified by the client instrumentation.",
          "requirement_level": "required",
          "note": "The actual messaging system may differ from the one known by the client. For example, when using Kafka client libraries to communicate with Azure Event Hubs, the `messaging.system` is set to `kafka` based on the instrumentation's best knowledge.\n",
          "stability": "development"
        },
        {
          "name": "messaging.consumer.group.name",
          "type": "string",
          "brief": "The name of the consumer group with which a consumer is associated.\n",
          "examples": [
            "my-group",
            "indexer"
          ],
          "requirement_level": {
            "conditionally_required": "if applicable."
          },
          "note": "Semantic conventions for individual messaging systems SHOULD document whether `messaging.consumer.group.name` is applicable and what it means in the context of that system.\n",
          "stability": "development"
        },
        {
          "name": "messaging.destination.subscription.name",
          "type": "string",
          "brief": "The name of the destination subscription from which a message is consumed.",
          "examples": [
            "subscription-a"
          ],
          "requirement_level": {
            "conditionally_required": "if applicable."
          },
          "note": "Semantic conventions for individual messaging systems SHOULD document whether `messaging.destination.subscription.name` is applicable and what it means in the context of that system.\n",
          "stability": "development"
        },
        {
          "name": "messaging.operation.name",
          "type": "string",
          "brief": "The system-specific name of the messaging operation.\n",
          "examples": [
            "process",
            "consume",
            "handle"
          ],
          "requirement_level": "required",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "messaging.process.duration",
      "instrument": "histogram",
      "unit": "s",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/messaging/metrics.yaml",
        "attributes": {
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ]
          },
          "messaging.consumer.group.name": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "messaging.destination.name": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "messaging.destination.partition.id": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "messaging.destination.subscription.name": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "messaging.destination.template": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "messaging.operation.name": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ]
          },
          "messaging.system": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "metric.messaging.client.sent.messages",
      "type": "metric",
      "brief": "Number of messages producer attempted to send to the broker.",
      "note": "This metric MUST NOT count messages that were created but haven't yet been sent.\n",
      "stability": "development",
      "attributes": [
        {
          "name": "server.port",
          "type": "int",
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": "recommended",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "server.address",
          "type": "string",
          "brief": "Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": {
            "conditionally_required": "If available."
          },
          "note": "Server domain name of the broker if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.\n",
          "stability": "stable"
        },
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "amqp:decode-error",
            "KAFKA_STORAGE_ERROR",
            "channel-error"
          ],
          "requirement_level": {
            "conditionally_required": "If and only if the messaging operation has failed."
          },
          "note": "The `error.type` SHOULD be predictable, and SHOULD have low cardinality.\n\nWhen `error.type` is set to a type (e.g., an exception type), its\ncanonical class name identifying the type within the artifact SHOULD be used.\n\nInstrumentations SHOULD document the list of errors they report.\n\nThe cardinality of `error.type` within one instrumentation library SHOULD be low.\nTelemetry consumers that aggregate data from multiple instrumentation libraries and applications\nshould be prepared for `error.type` to have high cardinality at query time when no\nadditional filters are applied.\n\nIf the operation has completed successfully, instrumentations SHOULD NOT set `error.type`.\n\nIf a specific domain defines its own set of error identifiers (such as HTTP or gRPC status codes),\nit's RECOMMENDED to:\n\n- Use a domain-specific attribute\n- Set `error.type` to capture all errors, regardless of whether they are defined within the domain-specific set or not.\n",
          "stability": "stable"
        },
        {
          "name": "messaging.destination.partition.id",
          "type": "string",
          "brief": "The identifier of the partition messages are sent to or received from, unique within the `messaging.destination.name`.\n",
          "examples": "1",
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "messaging.destination.name",
          "type": "string",
          "brief": "The message destination name",
          "examples": [
            "MyQueue",
            "MyTopic"
          ],
          "requirement_level": {
            "conditionally_required": "if and only if `messaging.destination.name` is known to have low cardinality. Otherwise, `messaging.destination.template` MAY be populated."
          },
          "note": "Destination name SHOULD uniquely identify a specific queue, topic or other entity within the broker. If\nthe broker doesn't have such notion, the destination name SHOULD uniquely identify the broker.\n",
          "stability": "development"
        },
        {
          "name": "messaging.destination.template",
          "type": "string",
          "brief": "Low cardinality representation of the messaging destination name",
          "examples": [
            "/customers/{customerId}"
          ],
          "requirement_level": {
            "conditionally_required": "if available."
          },
          "note": "Destination names could be constructed from templates. An example would be a destination name involving a user name or product id. Although the destination name in this case is of high cardinality, the underlying template is of low cardinality and can be effectively used for grouping and aggregation.\n",
          "stability": "development"
        },
        {
          "name": "messaging.system",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "activemq",
                "value": "activemq",
                "brief": "Apache ActiveMQ",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "aws_sqs",
                "value": "aws_sqs",
                "brief": "Amazon Simple Queue Service (SQS)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "eventgrid",
                "value": "eventgrid",
                "brief": "Azure Event Grid",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "eventhubs",
                "value": "eventhubs",
                "brief": "Azure Event Hubs",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "servicebus",
                "value": "servicebus",
                "brief": "Azure Service Bus",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "gcp_pubsub",
                "value": "gcp_pubsub",
                "brief": "Google Cloud Pub/Sub",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "jms",
                "value": "jms",
                "brief": "Java Message Service",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "kafka",
                "value": "kafka",
                "brief": "Apache Kafka",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "rabbitmq",
                "value": "rabbitmq",
                "brief": "RabbitMQ",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "rocketmq",
                "value": "rocketmq",
                "brief": "Apache RocketMQ",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "pulsar",
                "value": "pulsar",
                "brief": "Apache Pulsar",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The messaging system as identified by the client instrumentation.",
          "requirement_level": "required",
          "note": "The actual messaging system may differ from the one known by the client. For example, when using Kafka client libraries to communicate with Azure Event Hubs, the `messaging.system` is set to `kafka` based on the instrumentation's best knowledge.\n",
          "stability": "development"
        },
        {
          "name": "messaging.operation.name",
          "type": "string",
          "brief": "The system-specific name of the messaging operation.\n",
          "examples": [
            "send",
            "schedule",
            "enqueue"
          ],
          "requirement_level": "required",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "messaging.client.sent.messages",
      "instrument": "counter",
      "unit": "{message}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/messaging/metrics.yaml",
        "attributes": {
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ]
          },
          "messaging.destination.name": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "messaging.destination.partition.id": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "messaging.destination.template": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "messaging.operation.name": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ]
          },
          "messaging.system": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "metric.messaging.client.consumed.messages",
      "type": "metric",
      "brief": "Number of messages that were delivered to the application.",
      "note": "Records the number of messages pulled from the broker or number of messages dispatched to the application in push-based scenarios.\nThe metric SHOULD be reported once per message delivery. For example, if receiving and processing operations are both instrumented for a single message delivery, this counter is incremented when the message is received and not reported when it is processed.\n",
      "stability": "development",
      "attributes": [
        {
          "name": "server.port",
          "type": "int",
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": "recommended",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "server.address",
          "type": "string",
          "brief": "Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": {
            "conditionally_required": "If available."
          },
          "note": "Server domain name of the broker if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.\n",
          "stability": "stable"
        },
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "amqp:decode-error",
            "KAFKA_STORAGE_ERROR",
            "channel-error"
          ],
          "requirement_level": {
            "conditionally_required": "If and only if the messaging operation has failed."
          },
          "note": "The `error.type` SHOULD be predictable, and SHOULD have low cardinality.\n\nWhen `error.type` is set to a type (e.g., an exception type), its\ncanonical class name identifying the type within the artifact SHOULD be used.\n\nInstrumentations SHOULD document the list of errors they report.\n\nThe cardinality of `error.type` within one instrumentation library SHOULD be low.\nTelemetry consumers that aggregate data from multiple instrumentation libraries and applications\nshould be prepared for `error.type` to have high cardinality at query time when no\nadditional filters are applied.\n\nIf the operation has completed successfully, instrumentations SHOULD NOT set `error.type`.\n\nIf a specific domain defines its own set of error identifiers (such as HTTP or gRPC status codes),\nit's RECOMMENDED to:\n\n- Use a domain-specific attribute\n- Set `error.type` to capture all errors, regardless of whether they are defined within the domain-specific set or not.\n",
          "stability": "stable"
        },
        {
          "name": "messaging.destination.partition.id",
          "type": "string",
          "brief": "The identifier of the partition messages are sent to or received from, unique within the `messaging.destination.name`.\n",
          "examples": "1",
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "messaging.destination.name",
          "type": "string",
          "brief": "The message destination name",
          "examples": [
            "MyQueue",
            "MyTopic"
          ],
          "requirement_level": {
            "conditionally_required": "if and only if `messaging.destination.name` is known to have low cardinality. Otherwise, `messaging.destination.template` MAY be populated."
          },
          "note": "Destination name SHOULD uniquely identify a specific queue, topic or other entity within the broker. If\nthe broker doesn't have such notion, the destination name SHOULD uniquely identify the broker.\n",
          "stability": "development"
        },
        {
          "name": "messaging.destination.template",
          "type": "string",
          "brief": "Low cardinality representation of the messaging destination name",
          "examples": [
            "/customers/{customerId}"
          ],
          "requirement_level": {
            "conditionally_required": "if available."
          },
          "note": "Destination names could be constructed from templates. An example would be a destination name involving a user name or product id. Although the destination name in this case is of high cardinality, the underlying template is of low cardinality and can be effectively used for grouping and aggregation.\n",
          "stability": "development"
        },
        {
          "name": "messaging.system",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "activemq",
                "value": "activemq",
                "brief": "Apache ActiveMQ",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "aws_sqs",
                "value": "aws_sqs",
                "brief": "Amazon Simple Queue Service (SQS)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "eventgrid",
                "value": "eventgrid",
                "brief": "Azure Event Grid",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "eventhubs",
                "value": "eventhubs",
                "brief": "Azure Event Hubs",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "servicebus",
                "value": "servicebus",
                "brief": "Azure Service Bus",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "gcp_pubsub",
                "value": "gcp_pubsub",
                "brief": "Google Cloud Pub/Sub",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "jms",
                "value": "jms",
                "brief": "Java Message Service",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "kafka",
                "value": "kafka",
                "brief": "Apache Kafka",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "rabbitmq",
                "value": "rabbitmq",
                "brief": "RabbitMQ",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "rocketmq",
                "value": "rocketmq",
                "brief": "Apache RocketMQ",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "pulsar",
                "value": "pulsar",
                "brief": "Apache Pulsar",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The messaging system as identified by the client instrumentation.",
          "requirement_level": "required",
          "note": "The actual messaging system may differ from the one known by the client. For example, when using Kafka client libraries to communicate with Azure Event Hubs, the `messaging.system` is set to `kafka` based on the instrumentation's best knowledge.\n",
          "stability": "development"
        },
        {
          "name": "messaging.consumer.group.name",
          "type": "string",
          "brief": "The name of the consumer group with which a consumer is associated.\n",
          "examples": [
            "my-group",
            "indexer"
          ],
          "requirement_level": {
            "conditionally_required": "if applicable."
          },
          "note": "Semantic conventions for individual messaging systems SHOULD document whether `messaging.consumer.group.name` is applicable and what it means in the context of that system.\n",
          "stability": "development"
        },
        {
          "name": "messaging.destination.subscription.name",
          "type": "string",
          "brief": "The name of the destination subscription from which a message is consumed.",
          "examples": [
            "subscription-a"
          ],
          "requirement_level": {
            "conditionally_required": "if applicable."
          },
          "note": "Semantic conventions for individual messaging systems SHOULD document whether `messaging.destination.subscription.name` is applicable and what it means in the context of that system.\n",
          "stability": "development"
        },
        {
          "name": "messaging.operation.name",
          "type": "string",
          "brief": "The system-specific name of the messaging operation.\n",
          "examples": [
            "receive",
            "peek",
            "poll",
            "consume"
          ],
          "requirement_level": "required",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "messaging.client.consumed.messages",
      "instrument": "counter",
      "unit": "{message}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/messaging/metrics.yaml",
        "attributes": {
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ]
          },
          "messaging.consumer.group.name": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "messaging.destination.name": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "messaging.destination.partition.id": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "messaging.destination.subscription.name": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "messaging.destination.template": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "messaging.operation.name": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ]
          },
          "messaging.system": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "registry.process",
      "type": "attribute_group",
      "brief": "An operating system process.\n",
      "attributes": [
        {
          "name": "process.pid",
          "type": "int",
          "brief": "Process identifier (PID).\n",
          "examples": [
            1234
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "process.parent_pid",
          "type": "int",
          "brief": "Parent Process identifier (PPID).\n",
          "examples": [
            111
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "process.vpid",
          "type": "int",
          "brief": "Virtual process identifier.\n",
          "examples": [
            12
          ],
          "requirement_level": "recommended",
          "note": "The process ID within a PID namespace. This is not necessarily unique across all processes on the host but it is unique within the process namespace that the process exists within.\n",
          "stability": "development"
        },
        {
          "name": "process.session_leader.pid",
          "type": "int",
          "brief": "The PID of the process's session leader. This is also the session ID (SID) of the process.\n",
          "examples": [
            14
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "process.group_leader.pid",
          "type": "int",
          "brief": "The PID of the process's group leader. This is also the process group ID (PGID) of the process.\n",
          "examples": [
            23
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "process.executable.build_id.gnu",
          "type": "string",
          "brief": "The GNU build ID as found in the `.note.gnu.build-id` ELF section (hex string).\n",
          "examples": [
            "c89b11207f6479603b0d49bf291c092c2b719293"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "process.executable.build_id.go",
          "type": "string",
          "brief": "The Go build ID as retrieved by `go tool buildid <go executable>`.\n",
          "examples": [
            "foh3mEXu7BLZjsN9pOwG/kATcXlYVCDEFouRMQed_/WwRFB1hPo9LBkekthSPG/x8hMC8emW2cCjXD0_1aY"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "process.executable.build_id.htlhash",
          "type": "string",
          "brief": "Profiling specific build ID for executables. See the OTel specification for Profiles for more information.\n",
          "examples": [
            "600DCAFE4A110000F2BF38C493F5FB92"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "process.executable.name",
          "type": "string",
          "brief": "The name of the process executable. On Linux based systems, this SHOULD be set to the base name of the target of `/proc/[pid]/exe`. On Windows, this SHOULD be set to the base name of `GetProcessImageFileNameW`.\n",
          "examples": [
            "otelcol"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "process.executable.path",
          "type": "string",
          "brief": "The full path to the process executable. On Linux based systems, can be set to the target of `proc/[pid]/exe`. On Windows, can be set to the result of `GetProcessImageFileNameW`.\n",
          "examples": [
            "/usr/bin/cmd/otelcol"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "process.command",
          "type": "string",
          "brief": "The command used to launch the process (i.e. the command name). On Linux based systems, can be set to the zeroth string in `proc/[pid]/cmdline`. On Windows, can be set to the first parameter extracted from `GetCommandLineW`.\n",
          "examples": [
            "cmd/otelcol"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "process.command_line",
          "type": "string",
          "brief": "The full command used to launch the process as a single string representing the full command. On Windows, can be set to the result of `GetCommandLineW`. Do not set this if you have to assemble it just for monitoring; use `process.command_args` instead.\n",
          "examples": [
            "C:\\cmd\\otecol --config=\"my directory\\config.yaml\""
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "process.command_args",
          "type": "string[]",
          "brief": "All the command arguments (including the command/executable itself) as received by the process. On Linux-based systems (and some other Unixoid systems supporting procfs), can be set according to the list of null-delimited strings extracted from `proc/[pid]/cmdline`. For libc-based executables, this would be the full argv vector passed to `main`.\n",
          "examples": [
            [
              "cmd/otecol",
              "--config=config.yaml"
            ]
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "process.args_count",
          "type": "int",
          "brief": "Length of the process.command_args array\n",
          "examples": [
            4
          ],
          "requirement_level": "recommended",
          "note": "This field can be useful for querying or performing bucket analysis on how many arguments were provided to start a process. More arguments may be an indication of suspicious activity.\n",
          "stability": "development"
        },
        {
          "name": "process.owner",
          "type": "string",
          "brief": "The username of the user that owns the process.\n",
          "examples": [
            "root"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "process.user.id",
          "type": "int",
          "brief": "The effective user ID (EUID) of the process.\n",
          "examples": [
            1001
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "process.user.name",
          "type": "string",
          "brief": "The username of the effective user of the process.\n",
          "examples": [
            "root"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "process.real_user.id",
          "type": "int",
          "brief": "The real user ID (RUID) of the process.\n",
          "examples": [
            1000
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "process.real_user.name",
          "type": "string",
          "brief": "The username of the real user of the process.\n",
          "examples": [
            "operator"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "process.saved_user.id",
          "type": "int",
          "brief": "The saved user ID (SUID) of the process.\n",
          "examples": [
            1002
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "process.saved_user.name",
          "type": "string",
          "brief": "The username of the saved user.\n",
          "examples": [
            "operator"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "process.runtime.name",
          "type": "string",
          "brief": "The name of the runtime of this process.\n",
          "examples": [
            "OpenJDK Runtime Environment"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "process.runtime.version",
          "type": "string",
          "brief": "The version of the runtime of this process, as returned by the runtime without modification.\n",
          "examples": "14.0.2",
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "process.runtime.description",
          "type": "string",
          "brief": "An additional description about the runtime of the process, for example a specific vendor customization of the runtime environment.\n",
          "examples": "Eclipse OpenJ9 Eclipse OpenJ9 VM openj9-0.21.0",
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "process.title",
          "type": "string",
          "brief": "Process title (proctitle)\n",
          "examples": [
            "cat /etc/hostname",
            "xfce4-session",
            "bash"
          ],
          "requirement_level": "recommended",
          "note": "In many Unix-like systems, process title (proctitle), is the string that represents the name or command line of a running process, displayed by system monitoring tools like ps, top, and htop.\n",
          "stability": "development"
        },
        {
          "name": "process.creation.time",
          "type": "string",
          "brief": "The date and time the process was created, in ISO 8601 format.\n",
          "examples": [
            "2023-11-21T09:25:34.853Z"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "process.exit.time",
          "type": "string",
          "brief": "The date and time the process exited, in ISO 8601 format.\n",
          "examples": [
            "2023-11-21T09:26:12.315Z"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "process.exit.code",
          "type": "int",
          "brief": "The exit code of the process.\n",
          "examples": [
            127
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "process.interactive",
          "type": "boolean",
          "brief": "Whether the process is connected to an interactive shell.\n",
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "process.working_directory",
          "type": "string",
          "brief": "The working directory of the process.\n",
          "examples": [
            "/root"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "process.context_switch_type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "voluntary",
                "value": "voluntary",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "involuntary",
                "value": "involuntary",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "Specifies whether the context switches for this data point were voluntary or involuntary.",
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "process.paging.fault_type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "major",
                "value": "major",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "minor",
                "value": "minor",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The type of page fault for this data point. Type `major` is for major/hard page faults, and `minor` is for minor/soft page faults.\n",
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/process/registry.yaml"
      },
      "display_name": "Process Attributes"
    },
    {
      "id": "registry.process.linux",
      "type": "attribute_group",
      "brief": "Describes Linux Process attributes",
      "attributes": [
        {
          "name": "process.linux.cgroup",
          "type": "string",
          "brief": "The control group associated with the process.",
          "examples": [
            "1:name=systemd:/user.slice/user-1000.slice/session-3.scope",
            "0::/user.slice/user-1000.slice/user@1000.service/tmux-spawn-0267755b-4639-4a27-90ed-f19f88e53748.scope"
          ],
          "requirement_level": "recommended",
          "note": "Control groups (cgroups) are a kernel feature used to organize and manage process resources. This attribute provides the path(s) to the cgroup(s) associated with the process, which should match the contents of the [/proc/\\[PID\\]/cgroup](https://man7.org/linux/man-pages/man7/cgroups.7.html) file.\n",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/process/registry.yaml"
      }
    },
    {
      "id": "resource.webengine",
      "type": "resource",
      "brief": "Resource describing the packaged software running the application code. Web engines are typically executed using process.runtime.\n",
      "stability": "development",
      "attributes": [
        {
          "name": "webengine.version",
          "type": "string",
          "brief": "The version of the web engine.\n",
          "examples": [
            "21.0.0"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "webengine.description",
          "type": "string",
          "brief": "Additional description of the web engine (e.g. detailed version and edition information).\n",
          "examples": [
            "WildFly Full 21.0.0.Final (WildFly Core 13.0.1.Final) - 2.2.2.Final"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "webengine.name",
          "type": "string",
          "brief": "The name of the web engine.\n",
          "examples": [
            "WildFly"
          ],
          "requirement_level": "required",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": "webengine",
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/webengine/resources.yaml",
        "attributes": {
          "webengine.description": {
            "source_group": "registry.webengine",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "webengine.name": {
            "source_group": "registry.webengine",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "webengine.version": {
            "source_group": "registry.webengine",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "aspnetcore.common.rate_limiting.metrics.attributes",
      "type": "attribute_group",
      "brief": "Common ASP.NET Core rate-limiting metrics attributes",
      "attributes": [
        {
          "name": "aspnetcore.rate_limiting.policy",
          "type": "string",
          "brief": "Rate limiting policy name.",
          "examples": [
            "fixed",
            "sliding",
            "token"
          ],
          "requirement_level": {
            "conditionally_required": "if the matched endpoint for the request had a rate-limiting policy."
          },
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/aspnetcore/metrics.yaml",
        "attributes": {
          "aspnetcore.rate_limiting.policy": {
            "source_group": "registry.aspnetcore",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.aspnetcore.routing.match_attempts",
      "type": "metric",
      "brief": "Number of requests that were attempted to be matched to an endpoint.",
      "note": "Meter name: `Microsoft.AspNetCore.Routing`; Added in: ASP.NET Core 8.0\n",
      "stability": "stable",
      "attributes": [
        {
          "name": "aspnetcore.routing.is_fallback",
          "type": "boolean",
          "brief": "A value that indicates whether the matched route is a fallback route.",
          "examples": [
            true
          ],
          "requirement_level": {
            "conditionally_required": "if and only if a route was successfully matched."
          },
          "stability": "stable"
        },
        {
          "name": "aspnetcore.routing.match_status",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "success",
                "value": "success",
                "brief": "Match succeeded",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "failure",
                "value": "failure",
                "brief": "Match failed",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Match result - success or failure",
          "examples": [
            "success",
            "failure"
          ],
          "requirement_level": "required",
          "stability": "stable"
        },
        {
          "name": "http.route",
          "type": "string",
          "brief": "The matched route, that is, the path template in the format used by the respective server framework.\n",
          "examples": [
            "/users/:userID?",
            "{controller}/{action}/{id?}"
          ],
          "requirement_level": {
            "conditionally_required": "if and only if a route was successfully matched."
          },
          "note": "MUST NOT be populated when this is not supported by the HTTP server framework as the route attribute should have low-cardinality and the URI path can NOT substitute it.\nSHOULD include the [application root](/docs/http/http-spans.md#http-server-definitions) if there is one.\n",
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "aspnetcore.routing.match_attempts",
      "instrument": "counter",
      "unit": "{match_attempt}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/aspnetcore/metrics.yaml",
        "attributes": {
          "aspnetcore.routing.is_fallback": {
            "source_group": "registry.aspnetcore",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aspnetcore.routing.match_status": {
            "source_group": "registry.aspnetcore",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "http.route": {
            "source_group": "registry.http",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.aspnetcore.diagnostics.exceptions",
      "type": "metric",
      "brief": "Number of exceptions caught by exception handling middleware.",
      "note": "Meter name: `Microsoft.AspNetCore.Diagnostics`; Added in: ASP.NET Core 8.0\n",
      "stability": "stable",
      "attributes": [
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "The full name of exception type.",
          "examples": [
            "System.OperationCanceledException",
            "Contoso.MyException"
          ],
          "requirement_level": "required",
          "note": "The `error.type` SHOULD be predictable, and SHOULD have low cardinality.\n\nWhen `error.type` is set to a type (e.g., an exception type), its\ncanonical class name identifying the type within the artifact SHOULD be used.\n\nInstrumentations SHOULD document the list of errors they report.\n\nThe cardinality of `error.type` within one instrumentation library SHOULD be low.\nTelemetry consumers that aggregate data from multiple instrumentation libraries and applications\nshould be prepared for `error.type` to have high cardinality at query time when no\nadditional filters are applied.\n\nIf the operation has completed successfully, instrumentations SHOULD NOT set `error.type`.\n\nIf a specific domain defines its own set of error identifiers (such as HTTP or gRPC status codes),\nit's RECOMMENDED to:\n\n- Use a domain-specific attribute\n- Set `error.type` to capture all errors, regardless of whether they are defined within the domain-specific set or not.\n",
          "stability": "stable"
        },
        {
          "name": "aspnetcore.diagnostics.handler.type",
          "type": "string",
          "brief": "Full type name of the [`IExceptionHandler`](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.diagnostics.iexceptionhandler) implementation that handled the exception.",
          "examples": [
            "Contoso.MyHandler"
          ],
          "requirement_level": {
            "conditionally_required": "if and only if the exception was handled by this handler."
          },
          "stability": "stable"
        },
        {
          "name": "aspnetcore.diagnostics.exception.result",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "handled",
                "value": "handled",
                "brief": "Exception was handled by the exception handling middleware.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "unhandled",
                "value": "unhandled",
                "brief": "Exception was not handled by the exception handling middleware.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "skipped",
                "value": "skipped",
                "brief": "Exception handling was skipped because the response had started.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "aborted",
                "value": "aborted",
                "brief": "Exception handling didn't run because the request was aborted.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "ASP.NET Core exception middleware handling result",
          "examples": [
            "handled",
            "unhandled"
          ],
          "requirement_level": "required",
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "aspnetcore.diagnostics.exceptions",
      "instrument": "counter",
      "unit": "{exception}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/aspnetcore/metrics.yaml",
        "attributes": {
          "aspnetcore.diagnostics.exception.result": {
            "source_group": "registry.aspnetcore",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aspnetcore.diagnostics.handler.type": {
            "source_group": "registry.aspnetcore",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples",
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.aspnetcore.rate_limiting.active_request_leases",
      "type": "metric",
      "brief": "Number of requests that are currently active on the server that hold a rate limiting lease.",
      "note": "Meter name: `Microsoft.AspNetCore.RateLimiting`; Added in: ASP.NET Core 8.0\n",
      "stability": "stable",
      "attributes": [
        {
          "name": "aspnetcore.rate_limiting.policy",
          "type": "string",
          "brief": "Rate limiting policy name.",
          "examples": [
            "fixed",
            "sliding",
            "token"
          ],
          "requirement_level": {
            "conditionally_required": "if the matched endpoint for the request had a rate-limiting policy."
          },
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "aspnetcore.rate_limiting.active_request_leases",
      "instrument": "updowncounter",
      "unit": "{request}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/aspnetcore/metrics.yaml",
        "attributes": {
          "aspnetcore.rate_limiting.policy": {
            "source_group": "registry.aspnetcore",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.aspnetcore.rate_limiting.request_lease.duration",
      "type": "metric",
      "brief": "The duration of rate limiting lease held by requests on the server.",
      "note": "Meter name: `Microsoft.AspNetCore.RateLimiting`; Added in: ASP.NET Core 8.0\n",
      "stability": "stable",
      "attributes": [
        {
          "name": "aspnetcore.rate_limiting.policy",
          "type": "string",
          "brief": "Rate limiting policy name.",
          "examples": [
            "fixed",
            "sliding",
            "token"
          ],
          "requirement_level": {
            "conditionally_required": "if the matched endpoint for the request had a rate-limiting policy."
          },
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "aspnetcore.rate_limiting.request_lease.duration",
      "instrument": "histogram",
      "unit": "s",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/aspnetcore/metrics.yaml",
        "attributes": {
          "aspnetcore.rate_limiting.policy": {
            "source_group": "registry.aspnetcore",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.aspnetcore.rate_limiting.request.time_in_queue",
      "type": "metric",
      "brief": "The time the request spent in a queue waiting to acquire a rate limiting lease.",
      "note": "Meter name: `Microsoft.AspNetCore.RateLimiting`; Added in: ASP.NET Core 8.0\n",
      "stability": "stable",
      "attributes": [
        {
          "name": "aspnetcore.rate_limiting.policy",
          "type": "string",
          "brief": "Rate limiting policy name.",
          "examples": [
            "fixed",
            "sliding",
            "token"
          ],
          "requirement_level": {
            "conditionally_required": "if the matched endpoint for the request had a rate-limiting policy."
          },
          "stability": "stable"
        },
        {
          "name": "aspnetcore.rate_limiting.result",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "acquired",
                "value": "acquired",
                "brief": "Lease was acquired",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "endpoint_limiter",
                "value": "endpoint_limiter",
                "brief": "Lease request was rejected by the endpoint limiter",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "global_limiter",
                "value": "global_limiter",
                "brief": "Lease request was rejected by the global limiter",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "request_canceled",
                "value": "request_canceled",
                "brief": "Lease request was canceled",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Rate-limiting result, shows whether the lease was acquired or contains a rejection reason",
          "examples": [
            "acquired",
            "request_canceled"
          ],
          "requirement_level": "required",
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "aspnetcore.rate_limiting.request.time_in_queue",
      "instrument": "histogram",
      "unit": "s",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/aspnetcore/metrics.yaml",
        "attributes": {
          "aspnetcore.rate_limiting.policy": {
            "source_group": "registry.aspnetcore",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aspnetcore.rate_limiting.result": {
            "source_group": "registry.aspnetcore",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.aspnetcore.rate_limiting.queued_requests",
      "type": "metric",
      "brief": "Number of requests that are currently queued, waiting to acquire a rate limiting lease.",
      "note": "Meter name: `Microsoft.AspNetCore.RateLimiting`; Added in: ASP.NET Core 8.0\n",
      "stability": "stable",
      "attributes": [
        {
          "name": "aspnetcore.rate_limiting.policy",
          "type": "string",
          "brief": "Rate limiting policy name.",
          "examples": [
            "fixed",
            "sliding",
            "token"
          ],
          "requirement_level": {
            "conditionally_required": "if the matched endpoint for the request had a rate-limiting policy."
          },
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "aspnetcore.rate_limiting.queued_requests",
      "instrument": "updowncounter",
      "unit": "{request}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/aspnetcore/metrics.yaml",
        "attributes": {
          "aspnetcore.rate_limiting.policy": {
            "source_group": "registry.aspnetcore",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.aspnetcore.rate_limiting.requests",
      "type": "metric",
      "brief": "Number of requests that tried to acquire a rate limiting lease.",
      "note": "Requests could be:\n\n* Rejected by global or endpoint rate limiting policies\n* Canceled while waiting for the lease.\n\nMeter name: `Microsoft.AspNetCore.RateLimiting`; Added in: ASP.NET Core 8.0\n",
      "stability": "stable",
      "attributes": [
        {
          "name": "aspnetcore.rate_limiting.policy",
          "type": "string",
          "brief": "Rate limiting policy name.",
          "examples": [
            "fixed",
            "sliding",
            "token"
          ],
          "requirement_level": {
            "conditionally_required": "if the matched endpoint for the request had a rate-limiting policy."
          },
          "stability": "stable"
        },
        {
          "name": "aspnetcore.rate_limiting.result",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "acquired",
                "value": "acquired",
                "brief": "Lease was acquired",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "endpoint_limiter",
                "value": "endpoint_limiter",
                "brief": "Lease request was rejected by the endpoint limiter",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "global_limiter",
                "value": "global_limiter",
                "brief": "Lease request was rejected by the global limiter",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "request_canceled",
                "value": "request_canceled",
                "brief": "Lease request was canceled",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Rate-limiting result, shows whether the lease was acquired or contains a rejection reason",
          "examples": [
            "acquired",
            "request_canceled"
          ],
          "requirement_level": "required",
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "aspnetcore.rate_limiting.requests",
      "instrument": "counter",
      "unit": "{request}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/aspnetcore/metrics.yaml",
        "attributes": {
          "aspnetcore.rate_limiting.policy": {
            "source_group": "registry.aspnetcore",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aspnetcore.rate_limiting.result": {
            "source_group": "registry.aspnetcore",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "registry.file",
      "type": "attribute_group",
      "brief": "Describes file attributes.",
      "attributes": [
        {
          "name": "file.accessed",
          "type": "string",
          "brief": "Time when the file was last accessed, in ISO 8601 format.\n",
          "examples": [
            "2021-01-01T12:00:00Z"
          ],
          "requirement_level": "recommended",
          "note": "This attribute might not be supported by some file systems — NFS, FAT32, in embedded OS, etc.\n",
          "stability": "development"
        },
        {
          "name": "file.attributes",
          "type": "string[]",
          "brief": "Array of file attributes.\n",
          "examples": [
            [
              "readonly",
              "hidden"
            ]
          ],
          "requirement_level": "recommended",
          "note": "Attributes names depend on the OS or file system. Here’s a non-exhaustive list of values expected for this attribute: `archive`, `compressed`, `directory`, `encrypted`, `execute`, `hidden`, `immutable`, `journaled`, `read`, `readonly`, `symbolic link`, `system`, `temporary`, `write`.\n",
          "stability": "development"
        },
        {
          "name": "file.created",
          "type": "string",
          "brief": "Time when the file was created, in ISO 8601 format.\n",
          "examples": [
            "2021-01-01T12:00:00Z"
          ],
          "requirement_level": "recommended",
          "note": "This attribute might not be supported by some file systems — NFS, FAT32, in embedded OS, etc.\n",
          "stability": "development"
        },
        {
          "name": "file.changed",
          "type": "string",
          "brief": "Time when the file attributes or metadata was last changed, in ISO 8601 format.\n",
          "examples": [
            "2021-01-01T12:00:00Z"
          ],
          "requirement_level": "recommended",
          "note": "`file.changed` captures the time when any of the file's properties or attributes (including the content) are changed, while `file.modified` captures the timestamp when the file content is modified.\n",
          "stability": "development"
        },
        {
          "name": "file.directory",
          "type": "string",
          "brief": "Directory where the file is located. It should include the drive letter, when appropriate.\n",
          "examples": [
            "/home/user",
            "C:\\Program Files\\MyApp"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "file.extension",
          "type": "string",
          "brief": "File extension, excluding the leading dot.\n",
          "examples": [
            "png",
            "gz"
          ],
          "requirement_level": "recommended",
          "note": "When the file name has multiple extensions (example.tar.gz), only the last one should be captured (\"gz\", not \"tar.gz\").\n",
          "stability": "development"
        },
        {
          "name": "file.fork_name",
          "type": "string",
          "brief": "Name of the fork. A fork is additional data associated with a filesystem object.\n",
          "examples": [
            "Zone.Identifer"
          ],
          "requirement_level": "recommended",
          "note": "On Linux, a resource fork is used to store additional data with a filesystem object. A file always has at least one fork for the data portion, and additional forks may exist.\nOn NTFS, this is analogous to an Alternate Data Stream (ADS), and the default data stream for a file is just called $DATA. Zone.Identifier is commonly used by Windows to track contents downloaded from the Internet. An ADS is typically of the form: C:\\path\\to\\filename.extension:some_fork_name, and some_fork_name is the value that should populate `fork_name`. `filename.extension` should populate `file.name`, and `extension` should populate `file.extension`. The full path, `file.path`, will include the fork name.\n",
          "stability": "development"
        },
        {
          "name": "file.group.id",
          "type": "string",
          "brief": "Primary Group ID (GID) of the file.\n",
          "examples": [
            "1000"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "file.group.name",
          "type": "string",
          "brief": "Primary group name of the file.\n",
          "examples": [
            "users"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "file.inode",
          "type": "string",
          "brief": "Inode representing the file in the filesystem.\n",
          "examples": [
            "256383"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "file.mode",
          "type": "string",
          "brief": "Mode of the file in octal representation.\n",
          "examples": [
            "0640"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "file.modified",
          "type": "string",
          "brief": "Time when the file content was last modified, in ISO 8601 format.\n",
          "examples": [
            "2021-01-01T12:00:00Z"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "file.name",
          "type": "string",
          "brief": "Name of the file including the extension, without the directory.\n",
          "examples": [
            "example.png"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "file.owner.id",
          "type": "string",
          "brief": "The user ID (UID) or security identifier (SID) of the file owner.\n",
          "examples": [
            "1000"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "file.owner.name",
          "type": "string",
          "brief": "Username of the file owner.\n",
          "examples": [
            "root"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "file.path",
          "type": "string",
          "brief": "Full path to the file, including the file name. It should include the drive letter, when appropriate.\n",
          "examples": [
            "/home/alice/example.png",
            "C:\\Program Files\\MyApp\\myapp.exe"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "file.size",
          "type": "int",
          "brief": "File size in bytes.\n",
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "file.symbolic_link.target_path",
          "type": "string",
          "brief": "Path to the target of a symbolic link.\n",
          "examples": [
            "/usr/bin/python3"
          ],
          "requirement_level": "recommended",
          "note": "This attribute is only applicable to symbolic links.\n",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/file/registry.yaml"
      },
      "display_name": "File Attributes"
    },
    {
      "id": "registry.network",
      "type": "attribute_group",
      "brief": "These attributes may be used for any network related operation.\n",
      "attributes": [
        {
          "name": "network.carrier.icc",
          "type": "string",
          "brief": "The ISO 3166-1 alpha-2 2-character country code associated with the mobile carrier network.",
          "examples": "DE",
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "network.carrier.mcc",
          "type": "string",
          "brief": "The mobile carrier country code.",
          "examples": "310",
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "network.carrier.mnc",
          "type": "string",
          "brief": "The mobile carrier network code.",
          "examples": "001",
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "network.carrier.name",
          "type": "string",
          "brief": "The name of the mobile carrier.",
          "examples": "sprint",
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "network.connection.subtype",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "gprs",
                "value": "gprs",
                "brief": "GPRS",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "edge",
                "value": "edge",
                "brief": "EDGE",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "umts",
                "value": "umts",
                "brief": "UMTS",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "cdma",
                "value": "cdma",
                "brief": "CDMA",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "evdo_0",
                "value": "evdo_0",
                "brief": "EVDO Rel. 0",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "evdo_a",
                "value": "evdo_a",
                "brief": "EVDO Rev. A",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "cdma2000_1xrtt",
                "value": "cdma2000_1xrtt",
                "brief": "CDMA2000 1XRTT",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "hsdpa",
                "value": "hsdpa",
                "brief": "HSDPA",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "hsupa",
                "value": "hsupa",
                "brief": "HSUPA",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "hspa",
                "value": "hspa",
                "brief": "HSPA",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "iden",
                "value": "iden",
                "brief": "IDEN",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "evdo_b",
                "value": "evdo_b",
                "brief": "EVDO Rev. B",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "lte",
                "value": "lte",
                "brief": "LTE",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "ehrpd",
                "value": "ehrpd",
                "brief": "EHRPD",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "hspap",
                "value": "hspap",
                "brief": "HSPAP",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "gsm",
                "value": "gsm",
                "brief": "GSM",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "td_scdma",
                "value": "td_scdma",
                "brief": "TD-SCDMA",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "iwlan",
                "value": "iwlan",
                "brief": "IWLAN",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "nr",
                "value": "nr",
                "brief": "5G NR (New Radio)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "nrnsa",
                "value": "nrnsa",
                "brief": "5G NRNSA (New Radio Non-Standalone)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "lte_ca",
                "value": "lte_ca",
                "brief": "LTE CA",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.",
          "examples": "LTE",
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "network.connection.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "wifi",
                "value": "wifi",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "wired",
                "value": "wired",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "cell",
                "value": "cell",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "unavailable",
                "value": "unavailable",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "unknown",
                "value": "unknown",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The internet connection type.",
          "examples": "wifi",
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "network.local.address",
          "type": "string",
          "brief": "Local address of the network connection - IP address or Unix domain socket name.",
          "examples": [
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "recommended",
          "stability": "stable"
        },
        {
          "name": "network.local.port",
          "type": "int",
          "brief": "Local port number of the network connection.",
          "examples": [
            65123
          ],
          "requirement_level": "recommended",
          "stability": "stable"
        },
        {
          "name": "network.peer.address",
          "type": "string",
          "brief": "Peer address of the network connection - IP address or Unix domain socket name.",
          "examples": [
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "recommended",
          "stability": "stable"
        },
        {
          "name": "network.peer.port",
          "type": "int",
          "brief": "Peer port number of the network connection.",
          "examples": [
            65123
          ],
          "requirement_level": "recommended",
          "stability": "stable"
        },
        {
          "name": "network.protocol.name",
          "type": "string",
          "brief": "[OSI application layer](https://wikipedia.org/wiki/Application_layer) or non-OSI equivalent.",
          "examples": [
            "amqp",
            "http",
            "mqtt"
          ],
          "requirement_level": "recommended",
          "note": "The value SHOULD be normalized to lowercase.",
          "stability": "stable"
        },
        {
          "name": "network.protocol.version",
          "type": "string",
          "brief": "The actual version of the protocol used for network communication.",
          "examples": [
            "1.1",
            "2"
          ],
          "requirement_level": "recommended",
          "note": "If protocol version is subject to negotiation (for example using [ALPN](https://www.rfc-editor.org/rfc/rfc7301.html)), this attribute SHOULD be set to the negotiated version. If the actual protocol version is not known, this attribute SHOULD NOT be set.\n",
          "stability": "stable"
        },
        {
          "name": "network.transport",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "tcp",
                "value": "tcp",
                "brief": "TCP",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "udp",
                "value": "udp",
                "brief": "UDP",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "pipe",
                "value": "pipe",
                "brief": "Named or anonymous pipe.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "unix",
                "value": "unix",
                "brief": "Unix domain socket",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "quic",
                "value": "quic",
                "brief": "QUIC",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "[OSI transport layer](https://wikipedia.org/wiki/Transport_layer) or [inter-process communication method](https://wikipedia.org/wiki/Inter-process_communication).\n",
          "examples": [
            "tcp",
            "udp"
          ],
          "requirement_level": "recommended",
          "note": "The value SHOULD be normalized to lowercase.\n\nConsider always setting the transport when setting a port number, since\na port number is ambiguous without knowing the transport. For example\ndifferent processes could be listening on TCP port 12345 and UDP port 12345.\n",
          "stability": "stable"
        },
        {
          "name": "network.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "ipv4",
                "value": "ipv4",
                "brief": "IPv4",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "ipv6",
                "value": "ipv6",
                "brief": "IPv6",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "[OSI network layer](https://wikipedia.org/wiki/Network_layer) or non-OSI equivalent.",
          "examples": [
            "ipv4",
            "ipv6"
          ],
          "requirement_level": "recommended",
          "note": "The value SHOULD be normalized to lowercase.",
          "stability": "stable"
        },
        {
          "name": "network.io.direction",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "transmit",
                "value": "transmit",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "receive",
                "value": "receive",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The network IO operation direction.",
          "examples": [
            "transmit"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "network.interface.name",
          "type": "string",
          "brief": "The network interface name.",
          "examples": [
            "lo",
            "eth0"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "network.connection.state",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "closed",
                "value": "closed",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "close_wait",
                "value": "close_wait",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "closing",
                "value": "closing",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "established",
                "value": "established",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "fin_wait_1",
                "value": "fin_wait_1",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "fin_wait_2",
                "value": "fin_wait_2",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "last_ack",
                "value": "last_ack",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "listen",
                "value": "listen",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "syn_received",
                "value": "syn_received",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "syn_sent",
                "value": "syn_sent",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "time_wait",
                "value": "time_wait",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The state of network connection",
          "examples": [
            "close_wait"
          ],
          "requirement_level": "recommended",
          "note": "Connection states are defined as part of the [rfc9293](https://datatracker.ietf.org/doc/html/rfc9293#section-3.3.2)",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/network/registry.yaml"
      },
      "display_name": "Network Attributes"
    },
    {
      "id": "resource.gcp.cloud_run",
      "type": "resource",
      "brief": "Resource used by Google Cloud Run.\n",
      "stability": "development",
      "attributes": [
        {
          "name": "gcp.cloud_run.job.execution",
          "type": "string",
          "brief": "The name of the Cloud Run [execution](https://cloud.google.com/run/docs/managing/job-executions) being run for the Job, as set by the [`CLOUD_RUN_EXECUTION`](https://cloud.google.com/run/docs/container-contract#jobs-env-vars) environment variable.\n",
          "examples": [
            "job-name-xxxx",
            "sample-job-mdw84"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "gcp.cloud_run.job.task_index",
          "type": "int",
          "brief": "The index for a task within an execution as provided by the [`CLOUD_RUN_TASK_INDEX`](https://cloud.google.com/run/docs/container-contract#jobs-env-vars) environment variable.\n",
          "examples": [
            0,
            1
          ],
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": "gcp.cloud_run",
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/gcp/cloud-run-resources.yaml",
        "attributes": {
          "gcp.cloud_run.job.execution": {
            "source_group": "registry.gcp.cloud_run",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gcp.cloud_run.job.task_index": {
            "source_group": "registry.gcp.cloud_run",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "registry.ios.deprecated",
      "type": "attribute_group",
      "brief": "The iOS platform on which the iOS application is running.\n",
      "attributes": [
        {
          "name": "ios.state",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "active",
                "value": "active",
                "brief": "The app has become `active`. Associated with UIKit notification `applicationDidBecomeActive`.\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "inactive",
                "value": "inactive",
                "brief": "The app is now `inactive`. Associated with UIKit notification `applicationWillResignActive`.\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "background",
                "value": "background",
                "brief": "The app is now in the background. This value is associated with UIKit notification `applicationDidEnterBackground`.\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "foreground",
                "value": "foreground",
                "brief": "The app is now in the foreground. This value is associated with UIKit notification `applicationWillEnterForeground`.\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "terminate",
                "value": "terminate",
                "brief": "The app is about to terminate. Associated with UIKit notification `applicationWillTerminate`.\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "Deprecated. use the `ios.app.state` instead.",
          "requirement_level": "recommended",
          "note": "The iOS lifecycle states are defined in the [UIApplicationDelegate documentation](https://developer.apple.com/documentation/uikit/uiapplicationdelegate), and from which the `OS terminology` column values are derived.\n",
          "stability": "development",
          "deprecated": {
            "reason": "uncategorized",
            "note": "Renamed to `ios.app.state`"
          }
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/ios/deprecated/registry-deprecated.yaml"
      },
      "display_name": "Deprecated iOS Attributes"
    },
    {
      "id": "registry.container.deprecated",
      "type": "attribute_group",
      "brief": "Describes deprecated container attributes.",
      "attributes": [
        {
          "name": "container.labels",
          "type": "template[string]",
          "brief": "Deprecated, use `container.label` instead.",
          "examples": [
            "container.label.app=nginx"
          ],
          "requirement_level": "recommended",
          "stability": "development",
          "deprecated": {
            "reason": "uncategorized",
            "note": "Replaced by `container.label`."
          }
        },
        {
          "name": "container.cpu.state",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "user",
                "value": "user",
                "brief": "When tasks of the cgroup are in user mode (Linux). When all container processes are in user mode (Windows).",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "system",
                "value": "system",
                "brief": "When CPU is used by the system (host OS)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "kernel",
                "value": "kernel",
                "brief": "When tasks of the cgroup are in kernel mode (Linux). When all container processes are in kernel mode (Windows).",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "Deprecated, use `cpu.mode` instead.",
          "examples": [
            "user",
            "kernel"
          ],
          "requirement_level": "recommended",
          "stability": "development",
          "deprecated": {
            "reason": "uncategorized",
            "note": "Replaced by `cpu.mode`"
          }
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/container/deprecated/registry-deprecated.yaml"
      },
      "display_name": "Deprecated Container Attributes"
    },
    {
      "id": "profile.frame",
      "type": "attribute_group",
      "brief": "Describes the origin of a single frame in a Profile.\n",
      "attributes": [
        {
          "name": "profile.frame.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "dotnet",
                "value": "dotnet",
                "brief": "[.NET](https://wikipedia.org/wiki/.NET)\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "jvm",
                "value": "jvm",
                "brief": "[JVM](https://wikipedia.org/wiki/Java_virtual_machine)\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "kernel",
                "value": "kernel",
                "brief": "[Kernel](https://wikipedia.org/wiki/Kernel_(operating_system))\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "native",
                "value": "native",
                "brief": "[C](https://wikipedia.org/wiki/C_(programming_language)), [C++](https://wikipedia.org/wiki/C%2B%2B), [Go](https://wikipedia.org/wiki/Go_(programming_language)), [Rust](https://wikipedia.org/wiki/Rust_(programming_language))\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "perl",
                "value": "perl",
                "brief": "[Perl](https://wikipedia.org/wiki/Perl)\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "php",
                "value": "php",
                "brief": "[PHP](https://wikipedia.org/wiki/PHP)\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "cpython",
                "value": "cpython",
                "brief": "[Python](https://wikipedia.org/wiki/Python_(programming_language))\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "ruby",
                "value": "ruby",
                "brief": "[Ruby](https://wikipedia.org/wiki/Ruby_(programming_language))\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "v8js",
                "value": "v8js",
                "brief": "[V8JS](https://wikipedia.org/wiki/V8_(JavaScript_engine))\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "beam",
                "value": "beam",
                "brief": "[Erlang](https://en.wikipedia.org/wiki/BEAM_(Erlang_virtual_machine))\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes the interpreter or compiler of a single frame.\n",
          "examples": [
            "cpython"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/profile/common.yaml",
        "attributes": {
          "profile.frame.type": {
            "source_group": "registry.profile.frame",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "registry.http",
      "type": "attribute_group",
      "brief": "This document defines semantic convention attributes in the HTTP namespace.",
      "attributes": [
        {
          "name": "http.request.body.size",
          "type": "int",
          "brief": "The size of the request payload body in bytes. This is the number of bytes transferred excluding headers and is often, but not always, present as the [Content-Length](https://www.rfc-editor.org/rfc/rfc9110.html#field.content-length) header. For requests using transport encoding, this should be the compressed size.\n",
          "examples": 3495,
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "http.request.header",
          "type": "template[string[]]",
          "brief": "HTTP request headers, `<key>` being the normalized HTTP Header name (lowercase), the value being the header values.\n",
          "examples": [
            "http.request.header.content-type=[\"application/json\"]",
            "http.request.header.x-forwarded-for=[\"1.2.3.4\", \"1.2.3.5\"]"
          ],
          "requirement_level": "recommended",
          "note": "Instrumentations SHOULD require an explicit configuration of which headers are to be captured. Including all request headers can be a security risk - explicit configuration helps avoid leaking sensitive information.\nThe `User-Agent` header is already captured in the `user_agent.original` attribute. Users MAY explicitly configure instrumentations to capture them even though it is not recommended.\nThe attribute value MUST consist of either multiple header values as an array of strings or a single-item array containing a possibly comma-concatenated string, depending on the way the HTTP library provides access to headers.\n",
          "stability": "stable"
        },
        {
          "name": "http.request.method",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "connect",
                "value": "CONNECT",
                "brief": "CONNECT method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "delete",
                "value": "DELETE",
                "brief": "DELETE method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "get",
                "value": "GET",
                "brief": "GET method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "head",
                "value": "HEAD",
                "brief": "HEAD method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "options",
                "value": "OPTIONS",
                "brief": "OPTIONS method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "patch",
                "value": "PATCH",
                "brief": "PATCH method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "post",
                "value": "POST",
                "brief": "POST method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "put",
                "value": "PUT",
                "brief": "PUT method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "trace",
                "value": "TRACE",
                "brief": "TRACE method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "Any HTTP method that the instrumentation has no prior knowledge of.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "HTTP request method.",
          "examples": [
            "GET",
            "POST",
            "HEAD"
          ],
          "requirement_level": "recommended",
          "note": "HTTP request method value SHOULD be \"known\" to the instrumentation.\nBy default, this convention defines \"known\" methods as the ones listed in [RFC9110](https://www.rfc-editor.org/rfc/rfc9110.html#name-methods)\nand the PATCH method defined in [RFC5789](https://www.rfc-editor.org/rfc/rfc5789.html).\n\nIf the HTTP request method is not known to instrumentation, it MUST set the `http.request.method` attribute to `_OTHER`.\n\nIf the HTTP instrumentation could end up converting valid HTTP request methods to `_OTHER`, then it MUST provide a way to override\nthe list of known HTTP methods. If this override is done via environment variable, then the environment variable MUST be named\nOTEL_INSTRUMENTATION_HTTP_KNOWN_METHODS and support a comma-separated list of case-sensitive known HTTP methods\n(this list MUST be a full override of the default known method, it is not a list of known methods in addition to the defaults).\n\nHTTP method names are case-sensitive and `http.request.method` attribute value MUST match a known HTTP method name exactly.\nInstrumentations for specific web frameworks that consider HTTP methods to be case insensitive, SHOULD populate a canonical equivalent.\nTracing instrumentations that do so, MUST also set `http.request.method_original` to the original value.\n",
          "stability": "stable"
        },
        {
          "name": "http.request.method_original",
          "type": "string",
          "brief": "Original HTTP method sent by the client in the request line.",
          "examples": [
            "GeT",
            "ACL",
            "foo"
          ],
          "requirement_level": "recommended",
          "stability": "stable"
        },
        {
          "name": "http.request.resend_count",
          "type": "int",
          "brief": "The ordinal number of request resending attempt (for any reason, including redirects).\n",
          "examples": 3,
          "requirement_level": "recommended",
          "note": "The resend count SHOULD be updated each time an HTTP request gets resent by the client, regardless of what was the cause of the resending (e.g. redirection, authorization failure, 503 Server Unavailable, network issues, or any other).\n",
          "stability": "stable"
        },
        {
          "name": "http.request.size",
          "type": "int",
          "brief": "The total size of the request in bytes. This should be the total number of bytes sent over the wire, including the request line (HTTP/1.1), framing (HTTP/2 and HTTP/3), headers, and request body if any.\n",
          "examples": 1437,
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "http.response.body.size",
          "type": "int",
          "brief": "The size of the response payload body in bytes. This is the number of bytes transferred excluding headers and is often, but not always, present as the [Content-Length](https://www.rfc-editor.org/rfc/rfc9110.html#field.content-length) header. For requests using transport encoding, this should be the compressed size.\n",
          "examples": 3495,
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "http.response.header",
          "type": "template[string[]]",
          "brief": "HTTP response headers, `<key>` being the normalized HTTP Header name (lowercase), the value being the header values.\n",
          "examples": [
            "http.response.header.content-type=[\"application/json\"]",
            "http.response.header.my-custom-header=[\"abc\", \"def\"]"
          ],
          "requirement_level": "recommended",
          "note": "Instrumentations SHOULD require an explicit configuration of which headers are to be captured. Including all response headers can be a security risk - explicit configuration helps avoid leaking sensitive information.\nUsers MAY explicitly configure instrumentations to capture them even though it is not recommended.\nThe attribute value MUST consist of either multiple header values as an array of strings or a single-item array containing a possibly comma-concatenated string, depending on the way the HTTP library provides access to headers.\n",
          "stability": "stable"
        },
        {
          "name": "http.response.size",
          "type": "int",
          "brief": "The total size of the response in bytes. This should be the total number of bytes sent over the wire, including the status line (HTTP/1.1), framing (HTTP/2 and HTTP/3), headers, and response body and trailers if any.\n",
          "examples": 1437,
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "http.response.status_code",
          "type": "int",
          "brief": "[HTTP response status code](https://tools.ietf.org/html/rfc7231#section-6).",
          "examples": [
            200
          ],
          "requirement_level": "recommended",
          "stability": "stable"
        },
        {
          "name": "http.route",
          "type": "string",
          "brief": "The matched route, that is, the path template in the format used by the respective server framework.\n",
          "examples": [
            "/users/:userID?",
            "{controller}/{action}/{id?}"
          ],
          "requirement_level": "recommended",
          "note": "MUST NOT be populated when this is not supported by the HTTP server framework as the route attribute should have low-cardinality and the URI path can NOT substitute it.\nSHOULD include the [application root](/docs/http/http-spans.md#http-server-definitions) if there is one.\n",
          "stability": "stable"
        },
        {
          "name": "http.connection.state",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "active",
                "value": "active",
                "brief": "active state.",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "idle",
                "value": "idle",
                "brief": "idle state.",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "State of the HTTP connection in the HTTP connection pool.",
          "examples": [
            "active",
            "idle"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/http/registry.yaml"
      },
      "display_name": "HTTP Attributes"
    },
    {
      "id": "resource.cloud",
      "type": "resource",
      "brief": "A cloud environment (e.g. GCP, Azure, AWS)\n",
      "stability": "development",
      "attributes": [
        {
          "name": "cloud.provider",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "alibaba_cloud",
                "value": "alibaba_cloud",
                "brief": "Alibaba Cloud",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "aws",
                "value": "aws",
                "brief": "Amazon Web Services",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "azure",
                "value": "azure",
                "brief": "Microsoft Azure",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "gcp",
                "value": "gcp",
                "brief": "Google Cloud Platform",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "heroku",
                "value": "heroku",
                "brief": "Heroku Platform as a Service",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "ibm_cloud",
                "value": "ibm_cloud",
                "brief": "IBM Cloud",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "oracle_cloud",
                "value": "oracle_cloud",
                "brief": "Oracle Cloud Infrastructure (OCI)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "tencent_cloud",
                "value": "tencent_cloud",
                "brief": "Tencent Cloud",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "Name of the cloud provider.\n",
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "cloud.account.id",
          "type": "string",
          "brief": "The cloud account ID the resource is assigned to.\n",
          "examples": [
            "111111111111",
            "opentelemetry"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "cloud.region",
          "type": "string",
          "brief": "The geographical region the resource is running.\n",
          "examples": [
            "us-central1",
            "us-east-1"
          ],
          "requirement_level": "recommended",
          "note": "Refer to your provider's docs to see the available regions, for example [Alibaba Cloud regions](https://www.alibabacloud.com/help/doc-detail/40654.htm), [AWS regions](https://aws.amazon.com/about-aws/global-infrastructure/regions_az/), [Azure regions](https://azure.microsoft.com/global-infrastructure/geographies/), [Google Cloud regions](https://cloud.google.com/about/locations), or [Tencent Cloud regions](https://www.tencentcloud.com/document/product/213/6091).\n",
          "stability": "development"
        },
        {
          "name": "cloud.resource_id",
          "type": "string",
          "brief": "Cloud provider-specific native identifier of the monitored cloud resource (e.g. an [ARN](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) on AWS, a [fully qualified resource ID](https://learn.microsoft.com/rest/api/resources/resources/get-by-id) on Azure, a [full resource name](https://google.aip.dev/122#full-resource-names) on GCP)\n",
          "examples": [
            "arn:aws:lambda:REGION:ACCOUNT_ID:function:my-function",
            "//run.googleapis.com/projects/PROJECT_ID/locations/LOCATION_ID/services/SERVICE_ID",
            "/subscriptions/<SUBSCRIPTION_GUID>/resourceGroups/<RG>/providers/Microsoft.Web/sites/<FUNCAPP>/functions/<FUNC>"
          ],
          "requirement_level": "recommended",
          "note": "On some cloud providers, it may not be possible to determine the full ID at startup,\nso it may be necessary to set `cloud.resource_id` as a span attribute instead.\n\nThe exact value to use for `cloud.resource_id` depends on the cloud provider.\nThe following well-known definitions MUST be used if you set this attribute and they apply:\n\n- **AWS Lambda:** The function [ARN](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html).\n  Take care not to use the \"invoked ARN\" directly but replace any\n  [alias suffix](https://docs.aws.amazon.com/lambda/latest/dg/configuration-aliases.html)\n  with the resolved function version, as the same runtime instance may be invocable with\n  multiple different aliases.\n- **GCP:** The [URI of the resource](https://cloud.google.com/iam/docs/full-resource-names)\n- **Azure:** The [Fully Qualified Resource ID](https://docs.microsoft.com/rest/api/resources/resources/get-by-id) of the invoked function,\n  *not* the function app, having the form\n  `/subscriptions/<SUBSCRIPTION_GUID>/resourceGroups/<RG>/providers/Microsoft.Web/sites/<FUNCAPP>/functions/<FUNC>`.\n  This means that a span attribute MUST be used, as an Azure function app can host multiple functions that would usually share\n  a TracerProvider.\n",
          "stability": "development"
        },
        {
          "name": "cloud.availability_zone",
          "type": "string",
          "brief": "Cloud regions often have multiple, isolated locations known as zones to increase availability. Availability zone represents the zone where the resource is running.\n",
          "examples": [
            "us-east-1c"
          ],
          "requirement_level": "recommended",
          "note": "Availability zones are called \"zones\" on Alibaba Cloud and Google Cloud.\n",
          "stability": "development"
        },
        {
          "name": "cloud.platform",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "alibaba_cloud_ecs",
                "value": "alibaba_cloud_ecs",
                "brief": "Alibaba Cloud Elastic Compute Service",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "alibaba_cloud_fc",
                "value": "alibaba_cloud_fc",
                "brief": "Alibaba Cloud Function Compute",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "alibaba_cloud_openshift",
                "value": "alibaba_cloud_openshift",
                "brief": "Red Hat OpenShift on Alibaba Cloud",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "aws_ec2",
                "value": "aws_ec2",
                "brief": "AWS Elastic Compute Cloud",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "aws_ecs",
                "value": "aws_ecs",
                "brief": "AWS Elastic Container Service",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "aws_eks",
                "value": "aws_eks",
                "brief": "AWS Elastic Kubernetes Service",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "aws_lambda",
                "value": "aws_lambda",
                "brief": "AWS Lambda",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "aws_elastic_beanstalk",
                "value": "aws_elastic_beanstalk",
                "brief": "AWS Elastic Beanstalk",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "aws_app_runner",
                "value": "aws_app_runner",
                "brief": "AWS App Runner",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "aws_openshift",
                "value": "aws_openshift",
                "brief": "Red Hat OpenShift on AWS (ROSA)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "azure_vm",
                "value": "azure_vm",
                "brief": "Azure Virtual Machines",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "azure_container_apps",
                "value": "azure_container_apps",
                "brief": "Azure Container Apps",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "azure_container_instances",
                "value": "azure_container_instances",
                "brief": "Azure Container Instances",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "azure_aks",
                "value": "azure_aks",
                "brief": "Azure Kubernetes Service",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "azure_functions",
                "value": "azure_functions",
                "brief": "Azure Functions",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "azure_app_service",
                "value": "azure_app_service",
                "brief": "Azure App Service",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "azure_openshift",
                "value": "azure_openshift",
                "brief": "Azure Red Hat OpenShift",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "gcp_bare_metal_solution",
                "value": "gcp_bare_metal_solution",
                "brief": "Google Bare Metal Solution (BMS)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "gcp_compute_engine",
                "value": "gcp_compute_engine",
                "brief": "Google Cloud Compute Engine (GCE)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "gcp_cloud_run",
                "value": "gcp_cloud_run",
                "brief": "Google Cloud Run",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "gcp_kubernetes_engine",
                "value": "gcp_kubernetes_engine",
                "brief": "Google Cloud Kubernetes Engine (GKE)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "gcp_cloud_functions",
                "value": "gcp_cloud_functions",
                "brief": "Google Cloud Functions (GCF)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "gcp_app_engine",
                "value": "gcp_app_engine",
                "brief": "Google Cloud App Engine (GAE)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "gcp_openshift",
                "value": "gcp_openshift",
                "brief": "Red Hat OpenShift on Google Cloud",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "ibm_cloud_openshift",
                "value": "ibm_cloud_openshift",
                "brief": "Red Hat OpenShift on IBM Cloud",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "oracle_cloud_compute",
                "value": "oracle_cloud_compute",
                "brief": "Compute on Oracle Cloud Infrastructure (OCI)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "oracle_cloud_oke",
                "value": "oracle_cloud_oke",
                "brief": "Kubernetes Engine (OKE) on Oracle Cloud Infrastructure (OCI)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "tencent_cloud_cvm",
                "value": "tencent_cloud_cvm",
                "brief": "Tencent Cloud Cloud Virtual Machine (CVM)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "tencent_cloud_eks",
                "value": "tencent_cloud_eks",
                "brief": "Tencent Cloud Elastic Kubernetes Service (EKS)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "tencent_cloud_scf",
                "value": "tencent_cloud_scf",
                "brief": "Tencent Cloud Serverless Cloud Function (SCF)",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The cloud platform in use.\n",
          "requirement_level": "recommended",
          "note": "The prefix of the service SHOULD match the one specified in `cloud.provider`.\n",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": "cloud",
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/cloud/resources.yaml",
        "attributes": {
          "cloud.account.id": {
            "source_group": "registry.cloud",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "cloud.availability_zone": {
            "source_group": "registry.cloud",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "cloud.platform": {
            "source_group": "registry.cloud",
            "inherited_fields": [
              "brief",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "cloud.provider": {
            "source_group": "registry.cloud",
            "inherited_fields": [
              "brief",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "cloud.region": {
            "source_group": "registry.cloud",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "cloud.resource_id": {
            "source_group": "registry.cloud",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "resource.device",
      "type": "resource",
      "brief": "The device on which the process represented by this resource is running.\n",
      "stability": "development",
      "attributes": [
        {
          "name": "device.id",
          "type": "string",
          "brief": "A unique identifier representing the device\n",
          "examples": [
            "2ab2916d-a51f-4ac8-80ee-45ac31a28092"
          ],
          "requirement_level": "recommended",
          "note": "The device identifier MUST only be defined using the values outlined below. This value is not an advertising identifier and MUST NOT be used as such. On iOS (Swift or Objective-C), this value MUST be equal to the [vendor identifier](https://developer.apple.com/documentation/uikit/uidevice/1620059-identifierforvendor). On Android (Java or Kotlin), this value MUST be equal to the Firebase Installation ID or a globally unique UUID which is persisted across sessions in your application. More information can be found [here](https://developer.android.com/training/articles/user-data-ids) on best practices and exact implementation details. Caution should be taken when storing personal data or anything which can identify a user. GDPR and data protection laws may apply, ensure you do your own due diligence.\n",
          "stability": "development"
        },
        {
          "name": "device.manufacturer",
          "type": "string",
          "brief": "The name of the device manufacturer\n",
          "examples": [
            "Apple",
            "Samsung"
          ],
          "requirement_level": "recommended",
          "note": "The Android OS provides this field via [Build](https://developer.android.com/reference/android/os/Build#MANUFACTURER). iOS apps SHOULD hardcode the value `Apple`.\n",
          "stability": "development"
        },
        {
          "name": "device.model.identifier",
          "type": "string",
          "brief": "The model identifier for the device\n",
          "examples": [
            "iPhone3,4",
            "SM-G920F"
          ],
          "requirement_level": "recommended",
          "note": "It's recommended this value represents a machine-readable version of the model identifier rather than the market or consumer-friendly name of the device.\n",
          "stability": "development"
        },
        {
          "name": "device.model.name",
          "type": "string",
          "brief": "The marketing name for the device model\n",
          "examples": [
            "iPhone 6s Plus",
            "Samsung Galaxy S6"
          ],
          "requirement_level": "recommended",
          "note": "It's recommended this value represents a human-readable version of the device model rather than a machine-readable alternative.\n",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": "device",
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/device/resources.yaml",
        "attributes": {
          "device.id": {
            "source_group": "registry.device",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "device.manufacturer": {
            "source_group": "registry.device",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "device.model.identifier": {
            "source_group": "registry.device",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "device.model.name": {
            "source_group": "registry.device",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "span.aws.client",
      "type": "span",
      "brief": "The `aws` conventions apply to operations using the AWS SDK. They map request or response parameters in AWS SDK API calls to attributes on a Span. The conventions have been collected over time based on feedback from AWS users of tracing and will continue to evolve as new interesting conventions are found.\nSome descriptions are also provided for populating general OpenTelemetry semantic conventions based on these APIs.\n",
      "stability": "development",
      "attributes": [
        {
          "name": "aws.request_id",
          "type": "string",
          "brief": "The AWS request ID as returned in the response headers `x-amzn-requestid`, `x-amzn-request-id` or `x-amz-request-id`.",
          "examples": [
            "79b9da39-b7ae-508a-a6bc-864b2829c622",
            "C9ER4AJX75574TDJ"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "rpc.system",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "grpc",
                "value": "grpc",
                "brief": "gRPC",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "java_rmi",
                "value": "java_rmi",
                "brief": "Java RMI",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "dotnet_wcf",
                "value": "dotnet_wcf",
                "brief": ".NET WCF",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "apache_dubbo",
                "value": "apache_dubbo",
                "brief": "Apache Dubbo",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "connect_rpc",
                "value": "connect_rpc",
                "brief": "Connect RPC",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The value `aws-api`.",
          "examples": [
            "aws-api"
          ],
          "requirement_level": "required",
          "stability": "development"
        },
        {
          "name": "rpc.service",
          "type": "string",
          "brief": "The name of the service to which a request is made, as returned by the AWS SDK.",
          "examples": [
            "DynamoDB",
            "S3"
          ],
          "requirement_level": "recommended",
          "note": "This is the logical name of the service from the RPC interface perspective, which can be different from the name of any implementing class. The `code.namespace` attribute may be used to store the latter (despite the attribute name, it may include a class name; e.g., class with method actually executing the call on the server side, RPC client stub class on the client side).\n",
          "stability": "development"
        },
        {
          "name": "rpc.method",
          "type": "string",
          "brief": "The name of the operation corresponding to the request, as returned by the AWS SDK",
          "examples": [
            "GetItem",
            "PutItem"
          ],
          "requirement_level": "recommended",
          "note": "This is the logical name of the method from the RPC interface perspective, which can be different from the name of any implementing method/function. The `code.function.name` attribute may be used to store the latter (e.g., method actually executing the call on the server side, RPC client stub method on the client side).\n",
          "stability": "development"
        },
        {
          "name": "aws.extended_request_id",
          "type": "string",
          "brief": "The AWS extended request ID as returned in the response header `x-amz-id-2`.",
          "examples": [
            "wzHcyEWfmOGDIE5QOhTAqFDoDWP3y8IUvpNINCwL9N4TEHbUw0/gZJ+VZTmCNCWR7fezEN3eCiQ="
          ],
          "requirement_level": {
            "conditionally_required": "If available."
          },
          "stability": "development"
        }
      ],
      "span_kind": "client",
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/aws/sdk-spans.yml",
        "attributes": {
          "aws.extended_request_id": {
            "source_group": "registry.aws",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.request_id": {
            "source_group": "registry.aws",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "rpc.method": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples"
            ]
          },
          "rpc.service": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples"
            ]
          },
          "rpc.system": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples",
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "span.dynamodb.batchgetitem.client",
      "type": "span",
      "brief": "DynamoDB.BatchGetItem",
      "stability": "development",
      "attributes": [
        {
          "name": "aws.request_id",
          "type": "string",
          "brief": "The AWS request ID as returned in the response headers `x-amzn-requestid`, `x-amzn-request-id` or `x-amz-request-id`.",
          "examples": [
            "79b9da39-b7ae-508a-a6bc-864b2829c622",
            "C9ER4AJX75574TDJ"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "aws.dynamodb.table_names",
          "type": "string[]",
          "brief": "The keys in the `RequestItems` object field.",
          "examples": [
            [
              "Users",
              "Cats"
            ]
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "aws.dynamodb.consumed_capacity",
          "type": "string[]",
          "brief": "The JSON-serialized value of each item in the `ConsumedCapacity` response field.",
          "examples": [
            [
              "{ \"CapacityUnits\": number, \"GlobalSecondaryIndexes\": { \"string\" : { \"CapacityUnits\": number, \"ReadCapacityUnits\": number, \"WriteCapacityUnits\": number } }, \"LocalSecondaryIndexes\": { \"string\" : { \"CapacityUnits\": number, \"ReadCapacityUnits\": number, \"WriteCapacityUnits\": number } }, \"ReadCapacityUnits\": number, \"Table\": { \"CapacityUnits\": number, \"ReadCapacityUnits\": number, \"WriteCapacityUnits\": number }, \"TableName\": \"string\", \"WriteCapacityUnits\": number }"
            ]
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "rpc.system",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "grpc",
                "value": "grpc",
                "brief": "gRPC",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "java_rmi",
                "value": "java_rmi",
                "brief": "Java RMI",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "dotnet_wcf",
                "value": "dotnet_wcf",
                "brief": ".NET WCF",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "apache_dubbo",
                "value": "apache_dubbo",
                "brief": "Apache Dubbo",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "connect_rpc",
                "value": "connect_rpc",
                "brief": "Connect RPC",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The value `aws-api`.",
          "examples": [
            "aws-api"
          ],
          "requirement_level": "required",
          "stability": "development"
        },
        {
          "name": "rpc.service",
          "type": "string",
          "brief": "The name of the service to which a request is made, as returned by the AWS SDK.",
          "examples": [
            "DynamoDB",
            "S3"
          ],
          "requirement_level": "recommended",
          "note": "This is the logical name of the service from the RPC interface perspective, which can be different from the name of any implementing class. The `code.namespace` attribute may be used to store the latter (despite the attribute name, it may include a class name; e.g., class with method actually executing the call on the server side, RPC client stub class on the client side).\n",
          "stability": "development"
        },
        {
          "name": "rpc.method",
          "type": "string",
          "brief": "The name of the operation corresponding to the request, as returned by the AWS SDK",
          "examples": [
            "GetItem",
            "PutItem"
          ],
          "requirement_level": "recommended",
          "note": "This is the logical name of the method from the RPC interface perspective, which can be different from the name of any implementing method/function. The `code.function.name` attribute may be used to store the latter (e.g., method actually executing the call on the server side, RPC client stub method on the client side).\n",
          "stability": "development"
        },
        {
          "name": "aws.extended_request_id",
          "type": "string",
          "brief": "The AWS extended request ID as returned in the response header `x-amz-id-2`.",
          "examples": [
            "wzHcyEWfmOGDIE5QOhTAqFDoDWP3y8IUvpNINCwL9N4TEHbUw0/gZJ+VZTmCNCWR7fezEN3eCiQ="
          ],
          "requirement_level": {
            "conditionally_required": "If available."
          },
          "stability": "development"
        }
      ],
      "span_kind": "client",
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/aws/sdk-spans.yml",
        "attributes": {
          "aws.dynamodb.consumed_capacity": {
            "source_group": "registry.aws.dynamodb",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.dynamodb.table_names": {
            "source_group": "registry.aws.dynamodb",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.extended_request_id": {
            "source_group": "registry.aws",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.request_id": {
            "source_group": "registry.aws",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "rpc.method": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples"
            ]
          },
          "rpc.service": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples"
            ]
          },
          "rpc.system": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples",
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "span.dynamodb.batchwriteitem.client",
      "type": "span",
      "brief": "DynamoDB.BatchWriteItem",
      "stability": "development",
      "attributes": [
        {
          "name": "aws.request_id",
          "type": "string",
          "brief": "The AWS request ID as returned in the response headers `x-amzn-requestid`, `x-amzn-request-id` or `x-amz-request-id`.",
          "examples": [
            "79b9da39-b7ae-508a-a6bc-864b2829c622",
            "C9ER4AJX75574TDJ"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "aws.dynamodb.table_names",
          "type": "string[]",
          "brief": "The keys in the `RequestItems` object field.",
          "examples": [
            [
              "Users",
              "Cats"
            ]
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "aws.dynamodb.consumed_capacity",
          "type": "string[]",
          "brief": "The JSON-serialized value of each item in the `ConsumedCapacity` response field.",
          "examples": [
            [
              "{ \"CapacityUnits\": number, \"GlobalSecondaryIndexes\": { \"string\" : { \"CapacityUnits\": number, \"ReadCapacityUnits\": number, \"WriteCapacityUnits\": number } }, \"LocalSecondaryIndexes\": { \"string\" : { \"CapacityUnits\": number, \"ReadCapacityUnits\": number, \"WriteCapacityUnits\": number } }, \"ReadCapacityUnits\": number, \"Table\": { \"CapacityUnits\": number, \"ReadCapacityUnits\": number, \"WriteCapacityUnits\": number }, \"TableName\": \"string\", \"WriteCapacityUnits\": number }"
            ]
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "aws.dynamodb.item_collection_metrics",
          "type": "string",
          "brief": "The JSON-serialized value of the `ItemCollectionMetrics` response field.",
          "examples": [
            "{ \"string\" : [ { \"ItemCollectionKey\": { \"string\" : { \"B\": blob, \"BOOL\": boolean, \"BS\": [ blob ], \"L\": [ \"AttributeValue\" ], \"M\": { \"string\" : \"AttributeValue\" }, \"N\": \"string\", \"NS\": [ \"string\" ], \"NULL\": boolean, \"S\": \"string\", \"SS\": [ \"string\" ] } }, \"SizeEstimateRangeGB\": [ number ] } ] }"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "rpc.system",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "grpc",
                "value": "grpc",
                "brief": "gRPC",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "java_rmi",
                "value": "java_rmi",
                "brief": "Java RMI",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "dotnet_wcf",
                "value": "dotnet_wcf",
                "brief": ".NET WCF",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "apache_dubbo",
                "value": "apache_dubbo",
                "brief": "Apache Dubbo",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "connect_rpc",
                "value": "connect_rpc",
                "brief": "Connect RPC",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The value `aws-api`.",
          "examples": [
            "aws-api"
          ],
          "requirement_level": "required",
          "stability": "development"
        },
        {
          "name": "rpc.service",
          "type": "string",
          "brief": "The name of the service to which a request is made, as returned by the AWS SDK.",
          "examples": [
            "DynamoDB",
            "S3"
          ],
          "requirement_level": "recommended",
          "note": "This is the logical name of the service from the RPC interface perspective, which can be different from the name of any implementing class. The `code.namespace` attribute may be used to store the latter (despite the attribute name, it may include a class name; e.g., class with method actually executing the call on the server side, RPC client stub class on the client side).\n",
          "stability": "development"
        },
        {
          "name": "rpc.method",
          "type": "string",
          "brief": "The name of the operation corresponding to the request, as returned by the AWS SDK",
          "examples": [
            "GetItem",
            "PutItem"
          ],
          "requirement_level": "recommended",
          "note": "This is the logical name of the method from the RPC interface perspective, which can be different from the name of any implementing method/function. The `code.function.name` attribute may be used to store the latter (e.g., method actually executing the call on the server side, RPC client stub method on the client side).\n",
          "stability": "development"
        },
        {
          "name": "aws.extended_request_id",
          "type": "string",
          "brief": "The AWS extended request ID as returned in the response header `x-amz-id-2`.",
          "examples": [
            "wzHcyEWfmOGDIE5QOhTAqFDoDWP3y8IUvpNINCwL9N4TEHbUw0/gZJ+VZTmCNCWR7fezEN3eCiQ="
          ],
          "requirement_level": {
            "conditionally_required": "If available."
          },
          "stability": "development"
        }
      ],
      "span_kind": "client",
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/aws/sdk-spans.yml",
        "attributes": {
          "aws.dynamodb.consumed_capacity": {
            "source_group": "registry.aws.dynamodb",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.dynamodb.item_collection_metrics": {
            "source_group": "registry.aws.dynamodb",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.dynamodb.table_names": {
            "source_group": "registry.aws.dynamodb",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.extended_request_id": {
            "source_group": "registry.aws",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.request_id": {
            "source_group": "registry.aws",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "rpc.method": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples"
            ]
          },
          "rpc.service": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples"
            ]
          },
          "rpc.system": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples",
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "span.dynamodb.createtable.client",
      "type": "span",
      "brief": "DynamoDB.CreateTable",
      "stability": "development",
      "attributes": [
        {
          "name": "aws.request_id",
          "type": "string",
          "brief": "The AWS request ID as returned in the response headers `x-amzn-requestid`, `x-amzn-request-id` or `x-amz-request-id`.",
          "examples": [
            "79b9da39-b7ae-508a-a6bc-864b2829c622",
            "C9ER4AJX75574TDJ"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "aws.dynamodb.consumed_capacity",
          "type": "string[]",
          "brief": "The JSON-serialized value of each item in the `ConsumedCapacity` response field.",
          "examples": [
            [
              "{ \"CapacityUnits\": number, \"GlobalSecondaryIndexes\": { \"string\" : { \"CapacityUnits\": number, \"ReadCapacityUnits\": number, \"WriteCapacityUnits\": number } }, \"LocalSecondaryIndexes\": { \"string\" : { \"CapacityUnits\": number, \"ReadCapacityUnits\": number, \"WriteCapacityUnits\": number } }, \"ReadCapacityUnits\": number, \"Table\": { \"CapacityUnits\": number, \"ReadCapacityUnits\": number, \"WriteCapacityUnits\": number }, \"TableName\": \"string\", \"WriteCapacityUnits\": number }"
            ]
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "aws.dynamodb.item_collection_metrics",
          "type": "string",
          "brief": "The JSON-serialized value of the `ItemCollectionMetrics` response field.",
          "examples": [
            "{ \"string\" : [ { \"ItemCollectionKey\": { \"string\" : { \"B\": blob, \"BOOL\": boolean, \"BS\": [ blob ], \"L\": [ \"AttributeValue\" ], \"M\": { \"string\" : \"AttributeValue\" }, \"N\": \"string\", \"NS\": [ \"string\" ], \"NULL\": boolean, \"S\": \"string\", \"SS\": [ \"string\" ] } }, \"SizeEstimateRangeGB\": [ number ] } ] }"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "aws.dynamodb.provisioned_read_capacity",
          "type": "double",
          "brief": "The value of the `ProvisionedThroughput.ReadCapacityUnits` request parameter.",
          "examples": [
            1.0,
            2.0
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "aws.dynamodb.provisioned_write_capacity",
          "type": "double",
          "brief": "The value of the `ProvisionedThroughput.WriteCapacityUnits` request parameter.",
          "examples": [
            1.0,
            2.0
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "aws.dynamodb.global_secondary_indexes",
          "type": "string[]",
          "brief": "The JSON-serialized value of each item of the `GlobalSecondaryIndexes` request field",
          "examples": [
            [
              "{ \"IndexName\": \"string\", \"KeySchema\": [ { \"AttributeName\": \"string\", \"KeyType\": \"string\" } ], \"Projection\": { \"NonKeyAttributes\": [ \"string\" ], \"ProjectionType\": \"string\" }, \"ProvisionedThroughput\": { \"ReadCapacityUnits\": number, \"WriteCapacityUnits\": number } }"
            ]
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "aws.dynamodb.local_secondary_indexes",
          "type": "string[]",
          "brief": "The JSON-serialized value of each item of the `LocalSecondaryIndexes` request field.",
          "examples": [
            [
              "{ \"IndexArn\": \"string\", \"IndexName\": \"string\", \"IndexSizeBytes\": number, \"ItemCount\": number, \"KeySchema\": [ { \"AttributeName\": \"string\", \"KeyType\": \"string\" } ], \"Projection\": { \"NonKeyAttributes\": [ \"string\" ], \"ProjectionType\": \"string\" } }"
            ]
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "rpc.system",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "grpc",
                "value": "grpc",
                "brief": "gRPC",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "java_rmi",
                "value": "java_rmi",
                "brief": "Java RMI",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "dotnet_wcf",
                "value": "dotnet_wcf",
                "brief": ".NET WCF",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "apache_dubbo",
                "value": "apache_dubbo",
                "brief": "Apache Dubbo",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "connect_rpc",
                "value": "connect_rpc",
                "brief": "Connect RPC",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The value `aws-api`.",
          "examples": [
            "aws-api"
          ],
          "requirement_level": "required",
          "stability": "development"
        },
        {
          "name": "rpc.service",
          "type": "string",
          "brief": "The name of the service to which a request is made, as returned by the AWS SDK.",
          "examples": [
            "DynamoDB",
            "S3"
          ],
          "requirement_level": "recommended",
          "note": "This is the logical name of the service from the RPC interface perspective, which can be different from the name of any implementing class. The `code.namespace` attribute may be used to store the latter (despite the attribute name, it may include a class name; e.g., class with method actually executing the call on the server side, RPC client stub class on the client side).\n",
          "stability": "development"
        },
        {
          "name": "rpc.method",
          "type": "string",
          "brief": "The name of the operation corresponding to the request, as returned by the AWS SDK",
          "examples": [
            "GetItem",
            "PutItem"
          ],
          "requirement_level": "recommended",
          "note": "This is the logical name of the method from the RPC interface perspective, which can be different from the name of any implementing method/function. The `code.function.name` attribute may be used to store the latter (e.g., method actually executing the call on the server side, RPC client stub method on the client side).\n",
          "stability": "development"
        },
        {
          "name": "aws.extended_request_id",
          "type": "string",
          "brief": "The AWS extended request ID as returned in the response header `x-amz-id-2`.",
          "examples": [
            "wzHcyEWfmOGDIE5QOhTAqFDoDWP3y8IUvpNINCwL9N4TEHbUw0/gZJ+VZTmCNCWR7fezEN3eCiQ="
          ],
          "requirement_level": {
            "conditionally_required": "If available."
          },
          "stability": "development"
        },
        {
          "name": "aws.dynamodb.table_names",
          "type": "string[]",
          "brief": "A single-element array with the value of the TableName request parameter.",
          "examples": [
            "Users"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": "client",
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/aws/sdk-spans.yml",
        "attributes": {
          "aws.dynamodb.consumed_capacity": {
            "source_group": "registry.aws.dynamodb",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.dynamodb.global_secondary_indexes": {
            "source_group": "registry.aws.dynamodb",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.dynamodb.item_collection_metrics": {
            "source_group": "registry.aws.dynamodb",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.dynamodb.local_secondary_indexes": {
            "source_group": "registry.aws.dynamodb",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.dynamodb.provisioned_read_capacity": {
            "source_group": "registry.aws.dynamodb",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.dynamodb.provisioned_write_capacity": {
            "source_group": "registry.aws.dynamodb",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.dynamodb.table_names": {
            "source_group": "registry.aws.dynamodb",
            "inherited_fields": [
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples",
              "requirement_level"
            ]
          },
          "aws.extended_request_id": {
            "source_group": "registry.aws",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.request_id": {
            "source_group": "registry.aws",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "rpc.method": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples"
            ]
          },
          "rpc.service": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples"
            ]
          },
          "rpc.system": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples",
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "span.dynamodb.deleteitem.client",
      "type": "span",
      "brief": "DynamoDB.DeleteItem",
      "stability": "development",
      "attributes": [
        {
          "name": "aws.request_id",
          "type": "string",
          "brief": "The AWS request ID as returned in the response headers `x-amzn-requestid`, `x-amzn-request-id` or `x-amz-request-id`.",
          "examples": [
            "79b9da39-b7ae-508a-a6bc-864b2829c622",
            "C9ER4AJX75574TDJ"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "aws.dynamodb.consumed_capacity",
          "type": "string[]",
          "brief": "The JSON-serialized value of each item in the `ConsumedCapacity` response field.",
          "examples": [
            [
              "{ \"CapacityUnits\": number, \"GlobalSecondaryIndexes\": { \"string\" : { \"CapacityUnits\": number, \"ReadCapacityUnits\": number, \"WriteCapacityUnits\": number } }, \"LocalSecondaryIndexes\": { \"string\" : { \"CapacityUnits\": number, \"ReadCapacityUnits\": number, \"WriteCapacityUnits\": number } }, \"ReadCapacityUnits\": number, \"Table\": { \"CapacityUnits\": number, \"ReadCapacityUnits\": number, \"WriteCapacityUnits\": number }, \"TableName\": \"string\", \"WriteCapacityUnits\": number }"
            ]
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "aws.dynamodb.item_collection_metrics",
          "type": "string",
          "brief": "The JSON-serialized value of the `ItemCollectionMetrics` response field.",
          "examples": [
            "{ \"string\" : [ { \"ItemCollectionKey\": { \"string\" : { \"B\": blob, \"BOOL\": boolean, \"BS\": [ blob ], \"L\": [ \"AttributeValue\" ], \"M\": { \"string\" : \"AttributeValue\" }, \"N\": \"string\", \"NS\": [ \"string\" ], \"NULL\": boolean, \"S\": \"string\", \"SS\": [ \"string\" ] } }, \"SizeEstimateRangeGB\": [ number ] } ] }"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "rpc.system",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "grpc",
                "value": "grpc",
                "brief": "gRPC",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "java_rmi",
                "value": "java_rmi",
                "brief": "Java RMI",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "dotnet_wcf",
                "value": "dotnet_wcf",
                "brief": ".NET WCF",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "apache_dubbo",
                "value": "apache_dubbo",
                "brief": "Apache Dubbo",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "connect_rpc",
                "value": "connect_rpc",
                "brief": "Connect RPC",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The value `aws-api`.",
          "examples": [
            "aws-api"
          ],
          "requirement_level": "required",
          "stability": "development"
        },
        {
          "name": "rpc.service",
          "type": "string",
          "brief": "The name of the service to which a request is made, as returned by the AWS SDK.",
          "examples": [
            "DynamoDB",
            "S3"
          ],
          "requirement_level": "recommended",
          "note": "This is the logical name of the service from the RPC interface perspective, which can be different from the name of any implementing class. The `code.namespace` attribute may be used to store the latter (despite the attribute name, it may include a class name; e.g., class with method actually executing the call on the server side, RPC client stub class on the client side).\n",
          "stability": "development"
        },
        {
          "name": "rpc.method",
          "type": "string",
          "brief": "The name of the operation corresponding to the request, as returned by the AWS SDK",
          "examples": [
            "GetItem",
            "PutItem"
          ],
          "requirement_level": "recommended",
          "note": "This is the logical name of the method from the RPC interface perspective, which can be different from the name of any implementing method/function. The `code.function.name` attribute may be used to store the latter (e.g., method actually executing the call on the server side, RPC client stub method on the client side).\n",
          "stability": "development"
        },
        {
          "name": "aws.extended_request_id",
          "type": "string",
          "brief": "The AWS extended request ID as returned in the response header `x-amz-id-2`.",
          "examples": [
            "wzHcyEWfmOGDIE5QOhTAqFDoDWP3y8IUvpNINCwL9N4TEHbUw0/gZJ+VZTmCNCWR7fezEN3eCiQ="
          ],
          "requirement_level": {
            "conditionally_required": "If available."
          },
          "stability": "development"
        },
        {
          "name": "aws.dynamodb.table_names",
          "type": "string[]",
          "brief": "A single-element array with the value of the TableName request parameter.",
          "examples": [
            "Users"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": "client",
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/aws/sdk-spans.yml",
        "attributes": {
          "aws.dynamodb.consumed_capacity": {
            "source_group": "registry.aws.dynamodb",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.dynamodb.item_collection_metrics": {
            "source_group": "registry.aws.dynamodb",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.dynamodb.table_names": {
            "source_group": "registry.aws.dynamodb",
            "inherited_fields": [
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples",
              "requirement_level"
            ]
          },
          "aws.extended_request_id": {
            "source_group": "registry.aws",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.request_id": {
            "source_group": "registry.aws",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "rpc.method": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples"
            ]
          },
          "rpc.service": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples"
            ]
          },
          "rpc.system": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples",
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "span.dynamodb.deletetable.client",
      "type": "span",
      "brief": "DynamoDB.DeleteTable",
      "stability": "development",
      "attributes": [
        {
          "name": "aws.request_id",
          "type": "string",
          "brief": "The AWS request ID as returned in the response headers `x-amzn-requestid`, `x-amzn-request-id` or `x-amz-request-id`.",
          "examples": [
            "79b9da39-b7ae-508a-a6bc-864b2829c622",
            "C9ER4AJX75574TDJ"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "rpc.system",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "grpc",
                "value": "grpc",
                "brief": "gRPC",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "java_rmi",
                "value": "java_rmi",
                "brief": "Java RMI",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "dotnet_wcf",
                "value": "dotnet_wcf",
                "brief": ".NET WCF",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "apache_dubbo",
                "value": "apache_dubbo",
                "brief": "Apache Dubbo",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "connect_rpc",
                "value": "connect_rpc",
                "brief": "Connect RPC",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The value `aws-api`.",
          "examples": [
            "aws-api"
          ],
          "requirement_level": "required",
          "stability": "development"
        },
        {
          "name": "rpc.service",
          "type": "string",
          "brief": "The name of the service to which a request is made, as returned by the AWS SDK.",
          "examples": [
            "DynamoDB",
            "S3"
          ],
          "requirement_level": "recommended",
          "note": "This is the logical name of the service from the RPC interface perspective, which can be different from the name of any implementing class. The `code.namespace` attribute may be used to store the latter (despite the attribute name, it may include a class name; e.g., class with method actually executing the call on the server side, RPC client stub class on the client side).\n",
          "stability": "development"
        },
        {
          "name": "rpc.method",
          "type": "string",
          "brief": "The name of the operation corresponding to the request, as returned by the AWS SDK",
          "examples": [
            "GetItem",
            "PutItem"
          ],
          "requirement_level": "recommended",
          "note": "This is the logical name of the method from the RPC interface perspective, which can be different from the name of any implementing method/function. The `code.function.name` attribute may be used to store the latter (e.g., method actually executing the call on the server side, RPC client stub method on the client side).\n",
          "stability": "development"
        },
        {
          "name": "aws.extended_request_id",
          "type": "string",
          "brief": "The AWS extended request ID as returned in the response header `x-amz-id-2`.",
          "examples": [
            "wzHcyEWfmOGDIE5QOhTAqFDoDWP3y8IUvpNINCwL9N4TEHbUw0/gZJ+VZTmCNCWR7fezEN3eCiQ="
          ],
          "requirement_level": {
            "conditionally_required": "If available."
          },
          "stability": "development"
        },
        {
          "name": "aws.dynamodb.table_names",
          "type": "string[]",
          "brief": "A single-element array with the value of the TableName request parameter.",
          "examples": [
            "Users"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": "client",
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/aws/sdk-spans.yml",
        "attributes": {
          "aws.dynamodb.table_names": {
            "source_group": "registry.aws.dynamodb",
            "inherited_fields": [
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples",
              "requirement_level"
            ]
          },
          "aws.extended_request_id": {
            "source_group": "registry.aws",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.request_id": {
            "source_group": "registry.aws",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "rpc.method": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples"
            ]
          },
          "rpc.service": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples"
            ]
          },
          "rpc.system": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples",
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "span.dynamodb.describetable.client",
      "type": "span",
      "brief": "DynamoDB.DescribeTable",
      "stability": "development",
      "attributes": [
        {
          "name": "aws.request_id",
          "type": "string",
          "brief": "The AWS request ID as returned in the response headers `x-amzn-requestid`, `x-amzn-request-id` or `x-amz-request-id`.",
          "examples": [
            "79b9da39-b7ae-508a-a6bc-864b2829c622",
            "C9ER4AJX75574TDJ"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "rpc.system",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "grpc",
                "value": "grpc",
                "brief": "gRPC",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "java_rmi",
                "value": "java_rmi",
                "brief": "Java RMI",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "dotnet_wcf",
                "value": "dotnet_wcf",
                "brief": ".NET WCF",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "apache_dubbo",
                "value": "apache_dubbo",
                "brief": "Apache Dubbo",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "connect_rpc",
                "value": "connect_rpc",
                "brief": "Connect RPC",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The value `aws-api`.",
          "examples": [
            "aws-api"
          ],
          "requirement_level": "required",
          "stability": "development"
        },
        {
          "name": "rpc.service",
          "type": "string",
          "brief": "The name of the service to which a request is made, as returned by the AWS SDK.",
          "examples": [
            "DynamoDB",
            "S3"
          ],
          "requirement_level": "recommended",
          "note": "This is the logical name of the service from the RPC interface perspective, which can be different from the name of any implementing class. The `code.namespace` attribute may be used to store the latter (despite the attribute name, it may include a class name; e.g., class with method actually executing the call on the server side, RPC client stub class on the client side).\n",
          "stability": "development"
        },
        {
          "name": "rpc.method",
          "type": "string",
          "brief": "The name of the operation corresponding to the request, as returned by the AWS SDK",
          "examples": [
            "GetItem",
            "PutItem"
          ],
          "requirement_level": "recommended",
          "note": "This is the logical name of the method from the RPC interface perspective, which can be different from the name of any implementing method/function. The `code.function.name` attribute may be used to store the latter (e.g., method actually executing the call on the server side, RPC client stub method on the client side).\n",
          "stability": "development"
        },
        {
          "name": "aws.extended_request_id",
          "type": "string",
          "brief": "The AWS extended request ID as returned in the response header `x-amz-id-2`.",
          "examples": [
            "wzHcyEWfmOGDIE5QOhTAqFDoDWP3y8IUvpNINCwL9N4TEHbUw0/gZJ+VZTmCNCWR7fezEN3eCiQ="
          ],
          "requirement_level": {
            "conditionally_required": "If available."
          },
          "stability": "development"
        },
        {
          "name": "aws.dynamodb.table_names",
          "type": "string[]",
          "brief": "A single-element array with the value of the TableName request parameter.",
          "examples": [
            "Users"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": "client",
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/aws/sdk-spans.yml",
        "attributes": {
          "aws.dynamodb.table_names": {
            "source_group": "registry.aws.dynamodb",
            "inherited_fields": [
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples",
              "requirement_level"
            ]
          },
          "aws.extended_request_id": {
            "source_group": "registry.aws",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.request_id": {
            "source_group": "registry.aws",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "rpc.method": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples"
            ]
          },
          "rpc.service": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples"
            ]
          },
          "rpc.system": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples",
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "span.dynamodb.getitem.client",
      "type": "span",
      "brief": "DynamoDB.GetItem",
      "stability": "development",
      "attributes": [
        {
          "name": "aws.request_id",
          "type": "string",
          "brief": "The AWS request ID as returned in the response headers `x-amzn-requestid`, `x-amzn-request-id` or `x-amz-request-id`.",
          "examples": [
            "79b9da39-b7ae-508a-a6bc-864b2829c622",
            "C9ER4AJX75574TDJ"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "aws.dynamodb.consumed_capacity",
          "type": "string[]",
          "brief": "The JSON-serialized value of each item in the `ConsumedCapacity` response field.",
          "examples": [
            [
              "{ \"CapacityUnits\": number, \"GlobalSecondaryIndexes\": { \"string\" : { \"CapacityUnits\": number, \"ReadCapacityUnits\": number, \"WriteCapacityUnits\": number } }, \"LocalSecondaryIndexes\": { \"string\" : { \"CapacityUnits\": number, \"ReadCapacityUnits\": number, \"WriteCapacityUnits\": number } }, \"ReadCapacityUnits\": number, \"Table\": { \"CapacityUnits\": number, \"ReadCapacityUnits\": number, \"WriteCapacityUnits\": number }, \"TableName\": \"string\", \"WriteCapacityUnits\": number }"
            ]
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "aws.dynamodb.consistent_read",
          "type": "boolean",
          "brief": "The value of the `ConsistentRead` request parameter.",
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "aws.dynamodb.projection",
          "type": "string",
          "brief": "The value of the `ProjectionExpression` request parameter.",
          "examples": [
            "Title",
            "Title, Price, Color",
            "Title, Description, RelatedItems, ProductReviews"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "rpc.system",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "grpc",
                "value": "grpc",
                "brief": "gRPC",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "java_rmi",
                "value": "java_rmi",
                "brief": "Java RMI",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "dotnet_wcf",
                "value": "dotnet_wcf",
                "brief": ".NET WCF",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "apache_dubbo",
                "value": "apache_dubbo",
                "brief": "Apache Dubbo",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "connect_rpc",
                "value": "connect_rpc",
                "brief": "Connect RPC",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The value `aws-api`.",
          "examples": [
            "aws-api"
          ],
          "requirement_level": "required",
          "stability": "development"
        },
        {
          "name": "rpc.service",
          "type": "string",
          "brief": "The name of the service to which a request is made, as returned by the AWS SDK.",
          "examples": [
            "DynamoDB",
            "S3"
          ],
          "requirement_level": "recommended",
          "note": "This is the logical name of the service from the RPC interface perspective, which can be different from the name of any implementing class. The `code.namespace` attribute may be used to store the latter (despite the attribute name, it may include a class name; e.g., class with method actually executing the call on the server side, RPC client stub class on the client side).\n",
          "stability": "development"
        },
        {
          "name": "rpc.method",
          "type": "string",
          "brief": "The name of the operation corresponding to the request, as returned by the AWS SDK",
          "examples": [
            "GetItem",
            "PutItem"
          ],
          "requirement_level": "recommended",
          "note": "This is the logical name of the method from the RPC interface perspective, which can be different from the name of any implementing method/function. The `code.function.name` attribute may be used to store the latter (e.g., method actually executing the call on the server side, RPC client stub method on the client side).\n",
          "stability": "development"
        },
        {
          "name": "aws.extended_request_id",
          "type": "string",
          "brief": "The AWS extended request ID as returned in the response header `x-amz-id-2`.",
          "examples": [
            "wzHcyEWfmOGDIE5QOhTAqFDoDWP3y8IUvpNINCwL9N4TEHbUw0/gZJ+VZTmCNCWR7fezEN3eCiQ="
          ],
          "requirement_level": {
            "conditionally_required": "If available."
          },
          "stability": "development"
        },
        {
          "name": "aws.dynamodb.table_names",
          "type": "string[]",
          "brief": "A single-element array with the value of the TableName request parameter.",
          "examples": [
            "Users"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": "client",
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/aws/sdk-spans.yml",
        "attributes": {
          "aws.dynamodb.consistent_read": {
            "source_group": "registry.aws.dynamodb",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.dynamodb.consumed_capacity": {
            "source_group": "registry.aws.dynamodb",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.dynamodb.projection": {
            "source_group": "registry.aws.dynamodb",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.dynamodb.table_names": {
            "source_group": "registry.aws.dynamodb",
            "inherited_fields": [
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples",
              "requirement_level"
            ]
          },
          "aws.extended_request_id": {
            "source_group": "registry.aws",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.request_id": {
            "source_group": "registry.aws",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "rpc.method": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples"
            ]
          },
          "rpc.service": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples"
            ]
          },
          "rpc.system": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples",
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "span.dynamodb.listtables.client",
      "type": "span",
      "brief": "DynamoDB.ListTables",
      "stability": "development",
      "attributes": [
        {
          "name": "aws.request_id",
          "type": "string",
          "brief": "The AWS request ID as returned in the response headers `x-amzn-requestid`, `x-amzn-request-id` or `x-amz-request-id`.",
          "examples": [
            "79b9da39-b7ae-508a-a6bc-864b2829c622",
            "C9ER4AJX75574TDJ"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "aws.dynamodb.limit",
          "type": "int",
          "brief": "The value of the `Limit` request parameter.",
          "examples": [
            10
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "aws.dynamodb.exclusive_start_table",
          "type": "string",
          "brief": "The value of the `ExclusiveStartTableName` request parameter.",
          "examples": [
            "Users",
            "CatsTable"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "aws.dynamodb.table_count",
          "type": "int",
          "brief": "The number of items in the `TableNames` response parameter.",
          "examples": [
            20
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "rpc.system",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "grpc",
                "value": "grpc",
                "brief": "gRPC",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "java_rmi",
                "value": "java_rmi",
                "brief": "Java RMI",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "dotnet_wcf",
                "value": "dotnet_wcf",
                "brief": ".NET WCF",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "apache_dubbo",
                "value": "apache_dubbo",
                "brief": "Apache Dubbo",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "connect_rpc",
                "value": "connect_rpc",
                "brief": "Connect RPC",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The value `aws-api`.",
          "examples": [
            "aws-api"
          ],
          "requirement_level": "required",
          "stability": "development"
        },
        {
          "name": "rpc.service",
          "type": "string",
          "brief": "The name of the service to which a request is made, as returned by the AWS SDK.",
          "examples": [
            "DynamoDB",
            "S3"
          ],
          "requirement_level": "recommended",
          "note": "This is the logical name of the service from the RPC interface perspective, which can be different from the name of any implementing class. The `code.namespace` attribute may be used to store the latter (despite the attribute name, it may include a class name; e.g., class with method actually executing the call on the server side, RPC client stub class on the client side).\n",
          "stability": "development"
        },
        {
          "name": "rpc.method",
          "type": "string",
          "brief": "The name of the operation corresponding to the request, as returned by the AWS SDK",
          "examples": [
            "GetItem",
            "PutItem"
          ],
          "requirement_level": "recommended",
          "note": "This is the logical name of the method from the RPC interface perspective, which can be different from the name of any implementing method/function. The `code.function.name` attribute may be used to store the latter (e.g., method actually executing the call on the server side, RPC client stub method on the client side).\n",
          "stability": "development"
        },
        {
          "name": "aws.extended_request_id",
          "type": "string",
          "brief": "The AWS extended request ID as returned in the response header `x-amz-id-2`.",
          "examples": [
            "wzHcyEWfmOGDIE5QOhTAqFDoDWP3y8IUvpNINCwL9N4TEHbUw0/gZJ+VZTmCNCWR7fezEN3eCiQ="
          ],
          "requirement_level": {
            "conditionally_required": "If available."
          },
          "stability": "development"
        }
      ],
      "span_kind": "client",
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/aws/sdk-spans.yml",
        "attributes": {
          "aws.dynamodb.exclusive_start_table": {
            "source_group": "registry.aws.dynamodb",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.dynamodb.limit": {
            "source_group": "registry.aws.dynamodb",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.dynamodb.table_count": {
            "source_group": "registry.aws.dynamodb",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.extended_request_id": {
            "source_group": "registry.aws",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.request_id": {
            "source_group": "registry.aws",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "rpc.method": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples"
            ]
          },
          "rpc.service": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples"
            ]
          },
          "rpc.system": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples",
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "span.dynamodb.putitem.client",
      "type": "span",
      "brief": "DynamoDB.PutItem",
      "stability": "development",
      "attributes": [
        {
          "name": "aws.request_id",
          "type": "string",
          "brief": "The AWS request ID as returned in the response headers `x-amzn-requestid`, `x-amzn-request-id` or `x-amz-request-id`.",
          "examples": [
            "79b9da39-b7ae-508a-a6bc-864b2829c622",
            "C9ER4AJX75574TDJ"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "aws.dynamodb.table_names",
          "type": "string[]",
          "brief": "The keys in the `RequestItems` object field.",
          "examples": [
            [
              "Users",
              "Cats"
            ]
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "aws.dynamodb.consumed_capacity",
          "type": "string[]",
          "brief": "The JSON-serialized value of each item in the `ConsumedCapacity` response field.",
          "examples": [
            [
              "{ \"CapacityUnits\": number, \"GlobalSecondaryIndexes\": { \"string\" : { \"CapacityUnits\": number, \"ReadCapacityUnits\": number, \"WriteCapacityUnits\": number } }, \"LocalSecondaryIndexes\": { \"string\" : { \"CapacityUnits\": number, \"ReadCapacityUnits\": number, \"WriteCapacityUnits\": number } }, \"ReadCapacityUnits\": number, \"Table\": { \"CapacityUnits\": number, \"ReadCapacityUnits\": number, \"WriteCapacityUnits\": number }, \"TableName\": \"string\", \"WriteCapacityUnits\": number }"
            ]
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "aws.dynamodb.item_collection_metrics",
          "type": "string",
          "brief": "The JSON-serialized value of the `ItemCollectionMetrics` response field.",
          "examples": [
            "{ \"string\" : [ { \"ItemCollectionKey\": { \"string\" : { \"B\": blob, \"BOOL\": boolean, \"BS\": [ blob ], \"L\": [ \"AttributeValue\" ], \"M\": { \"string\" : \"AttributeValue\" }, \"N\": \"string\", \"NS\": [ \"string\" ], \"NULL\": boolean, \"S\": \"string\", \"SS\": [ \"string\" ] } }, \"SizeEstimateRangeGB\": [ number ] } ] }"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "rpc.system",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "grpc",
                "value": "grpc",
                "brief": "gRPC",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "java_rmi",
                "value": "java_rmi",
                "brief": "Java RMI",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "dotnet_wcf",
                "value": "dotnet_wcf",
                "brief": ".NET WCF",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "apache_dubbo",
                "value": "apache_dubbo",
                "brief": "Apache Dubbo",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "connect_rpc",
                "value": "connect_rpc",
                "brief": "Connect RPC",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The value `aws-api`.",
          "examples": [
            "aws-api"
          ],
          "requirement_level": "required",
          "stability": "development"
        },
        {
          "name": "rpc.service",
          "type": "string",
          "brief": "The name of the service to which a request is made, as returned by the AWS SDK.",
          "examples": [
            "DynamoDB",
            "S3"
          ],
          "requirement_level": "recommended",
          "note": "This is the logical name of the service from the RPC interface perspective, which can be different from the name of any implementing class. The `code.namespace` attribute may be used to store the latter (despite the attribute name, it may include a class name; e.g., class with method actually executing the call on the server side, RPC client stub class on the client side).\n",
          "stability": "development"
        },
        {
          "name": "rpc.method",
          "type": "string",
          "brief": "The name of the operation corresponding to the request, as returned by the AWS SDK",
          "examples": [
            "GetItem",
            "PutItem"
          ],
          "requirement_level": "recommended",
          "note": "This is the logical name of the method from the RPC interface perspective, which can be different from the name of any implementing method/function. The `code.function.name` attribute may be used to store the latter (e.g., method actually executing the call on the server side, RPC client stub method on the client side).\n",
          "stability": "development"
        },
        {
          "name": "aws.extended_request_id",
          "type": "string",
          "brief": "The AWS extended request ID as returned in the response header `x-amz-id-2`.",
          "examples": [
            "wzHcyEWfmOGDIE5QOhTAqFDoDWP3y8IUvpNINCwL9N4TEHbUw0/gZJ+VZTmCNCWR7fezEN3eCiQ="
          ],
          "requirement_level": {
            "conditionally_required": "If available."
          },
          "stability": "development"
        }
      ],
      "span_kind": "client",
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/aws/sdk-spans.yml",
        "attributes": {
          "aws.dynamodb.consumed_capacity": {
            "source_group": "registry.aws.dynamodb",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.dynamodb.item_collection_metrics": {
            "source_group": "registry.aws.dynamodb",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.dynamodb.table_names": {
            "source_group": "registry.aws.dynamodb",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.extended_request_id": {
            "source_group": "registry.aws",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.request_id": {
            "source_group": "registry.aws",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "rpc.method": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples"
            ]
          },
          "rpc.service": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples"
            ]
          },
          "rpc.system": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples",
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "span.dynamodb.query.client",
      "type": "span",
      "brief": "DynamoDB.Query",
      "stability": "development",
      "attributes": [
        {
          "name": "aws.request_id",
          "type": "string",
          "brief": "The AWS request ID as returned in the response headers `x-amzn-requestid`, `x-amzn-request-id` or `x-amz-request-id`.",
          "examples": [
            "79b9da39-b7ae-508a-a6bc-864b2829c622",
            "C9ER4AJX75574TDJ"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "aws.dynamodb.consumed_capacity",
          "type": "string[]",
          "brief": "The JSON-serialized value of each item in the `ConsumedCapacity` response field.",
          "examples": [
            [
              "{ \"CapacityUnits\": number, \"GlobalSecondaryIndexes\": { \"string\" : { \"CapacityUnits\": number, \"ReadCapacityUnits\": number, \"WriteCapacityUnits\": number } }, \"LocalSecondaryIndexes\": { \"string\" : { \"CapacityUnits\": number, \"ReadCapacityUnits\": number, \"WriteCapacityUnits\": number } }, \"ReadCapacityUnits\": number, \"Table\": { \"CapacityUnits\": number, \"ReadCapacityUnits\": number, \"WriteCapacityUnits\": number }, \"TableName\": \"string\", \"WriteCapacityUnits\": number }"
            ]
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "aws.dynamodb.consistent_read",
          "type": "boolean",
          "brief": "The value of the `ConsistentRead` request parameter.",
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "aws.dynamodb.projection",
          "type": "string",
          "brief": "The value of the `ProjectionExpression` request parameter.",
          "examples": [
            "Title",
            "Title, Price, Color",
            "Title, Description, RelatedItems, ProductReviews"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "aws.dynamodb.limit",
          "type": "int",
          "brief": "The value of the `Limit` request parameter.",
          "examples": [
            10
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "aws.dynamodb.attributes_to_get",
          "type": "string[]",
          "brief": "The value of the `AttributesToGet` request parameter.",
          "examples": [
            [
              "lives",
              "id"
            ]
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "aws.dynamodb.index_name",
          "type": "string",
          "brief": "The value of the `IndexName` request parameter.",
          "examples": [
            "name_to_group"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "aws.dynamodb.select",
          "type": "string",
          "brief": "The value of the `Select` request parameter.",
          "examples": [
            "ALL_ATTRIBUTES",
            "COUNT"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "aws.dynamodb.scan_forward",
          "type": "boolean",
          "brief": "The value of the `ScanIndexForward` request parameter.",
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "rpc.system",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "grpc",
                "value": "grpc",
                "brief": "gRPC",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "java_rmi",
                "value": "java_rmi",
                "brief": "Java RMI",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "dotnet_wcf",
                "value": "dotnet_wcf",
                "brief": ".NET WCF",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "apache_dubbo",
                "value": "apache_dubbo",
                "brief": "Apache Dubbo",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "connect_rpc",
                "value": "connect_rpc",
                "brief": "Connect RPC",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The value `aws-api`.",
          "examples": [
            "aws-api"
          ],
          "requirement_level": "required",
          "stability": "development"
        },
        {
          "name": "rpc.service",
          "type": "string",
          "brief": "The name of the service to which a request is made, as returned by the AWS SDK.",
          "examples": [
            "DynamoDB",
            "S3"
          ],
          "requirement_level": "recommended",
          "note": "This is the logical name of the service from the RPC interface perspective, which can be different from the name of any implementing class. The `code.namespace` attribute may be used to store the latter (despite the attribute name, it may include a class name; e.g., class with method actually executing the call on the server side, RPC client stub class on the client side).\n",
          "stability": "development"
        },
        {
          "name": "rpc.method",
          "type": "string",
          "brief": "The name of the operation corresponding to the request, as returned by the AWS SDK",
          "examples": [
            "GetItem",
            "PutItem"
          ],
          "requirement_level": "recommended",
          "note": "This is the logical name of the method from the RPC interface perspective, which can be different from the name of any implementing method/function. The `code.function.name` attribute may be used to store the latter (e.g., method actually executing the call on the server side, RPC client stub method on the client side).\n",
          "stability": "development"
        },
        {
          "name": "aws.extended_request_id",
          "type": "string",
          "brief": "The AWS extended request ID as returned in the response header `x-amz-id-2`.",
          "examples": [
            "wzHcyEWfmOGDIE5QOhTAqFDoDWP3y8IUvpNINCwL9N4TEHbUw0/gZJ+VZTmCNCWR7fezEN3eCiQ="
          ],
          "requirement_level": {
            "conditionally_required": "If available."
          },
          "stability": "development"
        },
        {
          "name": "aws.dynamodb.table_names",
          "type": "string[]",
          "brief": "A single-element array with the value of the TableName request parameter.",
          "examples": [
            "Users"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": "client",
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/aws/sdk-spans.yml",
        "attributes": {
          "aws.dynamodb.attributes_to_get": {
            "source_group": "registry.aws.dynamodb",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.dynamodb.consistent_read": {
            "source_group": "registry.aws.dynamodb",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.dynamodb.consumed_capacity": {
            "source_group": "registry.aws.dynamodb",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.dynamodb.index_name": {
            "source_group": "registry.aws.dynamodb",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.dynamodb.limit": {
            "source_group": "registry.aws.dynamodb",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.dynamodb.projection": {
            "source_group": "registry.aws.dynamodb",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.dynamodb.scan_forward": {
            "source_group": "registry.aws.dynamodb",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.dynamodb.select": {
            "source_group": "registry.aws.dynamodb",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.dynamodb.table_names": {
            "source_group": "registry.aws.dynamodb",
            "inherited_fields": [
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples",
              "requirement_level"
            ]
          },
          "aws.extended_request_id": {
            "source_group": "registry.aws",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.request_id": {
            "source_group": "registry.aws",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "rpc.method": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples"
            ]
          },
          "rpc.service": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples"
            ]
          },
          "rpc.system": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples",
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "span.dynamodb.scan.client",
      "type": "span",
      "brief": "DynamoDB.Scan",
      "stability": "development",
      "attributes": [
        {
          "name": "aws.request_id",
          "type": "string",
          "brief": "The AWS request ID as returned in the response headers `x-amzn-requestid`, `x-amzn-request-id` or `x-amz-request-id`.",
          "examples": [
            "79b9da39-b7ae-508a-a6bc-864b2829c622",
            "C9ER4AJX75574TDJ"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "aws.dynamodb.consumed_capacity",
          "type": "string[]",
          "brief": "The JSON-serialized value of each item in the `ConsumedCapacity` response field.",
          "examples": [
            [
              "{ \"CapacityUnits\": number, \"GlobalSecondaryIndexes\": { \"string\" : { \"CapacityUnits\": number, \"ReadCapacityUnits\": number, \"WriteCapacityUnits\": number } }, \"LocalSecondaryIndexes\": { \"string\" : { \"CapacityUnits\": number, \"ReadCapacityUnits\": number, \"WriteCapacityUnits\": number } }, \"ReadCapacityUnits\": number, \"Table\": { \"CapacityUnits\": number, \"ReadCapacityUnits\": number, \"WriteCapacityUnits\": number }, \"TableName\": \"string\", \"WriteCapacityUnits\": number }"
            ]
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "aws.dynamodb.consistent_read",
          "type": "boolean",
          "brief": "The value of the `ConsistentRead` request parameter.",
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "aws.dynamodb.projection",
          "type": "string",
          "brief": "The value of the `ProjectionExpression` request parameter.",
          "examples": [
            "Title",
            "Title, Price, Color",
            "Title, Description, RelatedItems, ProductReviews"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "aws.dynamodb.limit",
          "type": "int",
          "brief": "The value of the `Limit` request parameter.",
          "examples": [
            10
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "aws.dynamodb.attributes_to_get",
          "type": "string[]",
          "brief": "The value of the `AttributesToGet` request parameter.",
          "examples": [
            [
              "lives",
              "id"
            ]
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "aws.dynamodb.index_name",
          "type": "string",
          "brief": "The value of the `IndexName` request parameter.",
          "examples": [
            "name_to_group"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "aws.dynamodb.select",
          "type": "string",
          "brief": "The value of the `Select` request parameter.",
          "examples": [
            "ALL_ATTRIBUTES",
            "COUNT"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "aws.dynamodb.segment",
          "type": "int",
          "brief": "The value of the `Segment` request parameter.",
          "examples": [
            10
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "aws.dynamodb.total_segments",
          "type": "int",
          "brief": "The value of the `TotalSegments` request parameter.",
          "examples": [
            100
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "aws.dynamodb.count",
          "type": "int",
          "brief": "The value of the `Count` response parameter.",
          "examples": [
            10
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "aws.dynamodb.scanned_count",
          "type": "int",
          "brief": "The value of the `ScannedCount` response parameter.",
          "examples": [
            50
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "rpc.system",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "grpc",
                "value": "grpc",
                "brief": "gRPC",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "java_rmi",
                "value": "java_rmi",
                "brief": "Java RMI",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "dotnet_wcf",
                "value": "dotnet_wcf",
                "brief": ".NET WCF",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "apache_dubbo",
                "value": "apache_dubbo",
                "brief": "Apache Dubbo",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "connect_rpc",
                "value": "connect_rpc",
                "brief": "Connect RPC",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The value `aws-api`.",
          "examples": [
            "aws-api"
          ],
          "requirement_level": "required",
          "stability": "development"
        },
        {
          "name": "rpc.service",
          "type": "string",
          "brief": "The name of the service to which a request is made, as returned by the AWS SDK.",
          "examples": [
            "DynamoDB",
            "S3"
          ],
          "requirement_level": "recommended",
          "note": "This is the logical name of the service from the RPC interface perspective, which can be different from the name of any implementing class. The `code.namespace` attribute may be used to store the latter (despite the attribute name, it may include a class name; e.g., class with method actually executing the call on the server side, RPC client stub class on the client side).\n",
          "stability": "development"
        },
        {
          "name": "rpc.method",
          "type": "string",
          "brief": "The name of the operation corresponding to the request, as returned by the AWS SDK",
          "examples": [
            "GetItem",
            "PutItem"
          ],
          "requirement_level": "recommended",
          "note": "This is the logical name of the method from the RPC interface perspective, which can be different from the name of any implementing method/function. The `code.function.name` attribute may be used to store the latter (e.g., method actually executing the call on the server side, RPC client stub method on the client side).\n",
          "stability": "development"
        },
        {
          "name": "aws.extended_request_id",
          "type": "string",
          "brief": "The AWS extended request ID as returned in the response header `x-amz-id-2`.",
          "examples": [
            "wzHcyEWfmOGDIE5QOhTAqFDoDWP3y8IUvpNINCwL9N4TEHbUw0/gZJ+VZTmCNCWR7fezEN3eCiQ="
          ],
          "requirement_level": {
            "conditionally_required": "If available."
          },
          "stability": "development"
        },
        {
          "name": "aws.dynamodb.table_names",
          "type": "string[]",
          "brief": "A single-element array with the value of the TableName request parameter.",
          "examples": [
            "Users"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": "client",
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/aws/sdk-spans.yml",
        "attributes": {
          "aws.dynamodb.attributes_to_get": {
            "source_group": "registry.aws.dynamodb",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.dynamodb.consistent_read": {
            "source_group": "registry.aws.dynamodb",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.dynamodb.consumed_capacity": {
            "source_group": "registry.aws.dynamodb",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.dynamodb.count": {
            "source_group": "registry.aws.dynamodb",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.dynamodb.index_name": {
            "source_group": "registry.aws.dynamodb",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.dynamodb.limit": {
            "source_group": "registry.aws.dynamodb",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.dynamodb.projection": {
            "source_group": "registry.aws.dynamodb",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.dynamodb.scanned_count": {
            "source_group": "registry.aws.dynamodb",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.dynamodb.segment": {
            "source_group": "registry.aws.dynamodb",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.dynamodb.select": {
            "source_group": "registry.aws.dynamodb",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.dynamodb.table_names": {
            "source_group": "registry.aws.dynamodb",
            "inherited_fields": [
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples",
              "requirement_level"
            ]
          },
          "aws.dynamodb.total_segments": {
            "source_group": "registry.aws.dynamodb",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.extended_request_id": {
            "source_group": "registry.aws",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.request_id": {
            "source_group": "registry.aws",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "rpc.method": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples"
            ]
          },
          "rpc.service": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples"
            ]
          },
          "rpc.system": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples",
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "span.dynamodb.updateitem.client",
      "type": "span",
      "brief": "DynamoDB.UpdateItem",
      "stability": "development",
      "attributes": [
        {
          "name": "aws.request_id",
          "type": "string",
          "brief": "The AWS request ID as returned in the response headers `x-amzn-requestid`, `x-amzn-request-id` or `x-amz-request-id`.",
          "examples": [
            "79b9da39-b7ae-508a-a6bc-864b2829c622",
            "C9ER4AJX75574TDJ"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "aws.dynamodb.consumed_capacity",
          "type": "string[]",
          "brief": "The JSON-serialized value of each item in the `ConsumedCapacity` response field.",
          "examples": [
            [
              "{ \"CapacityUnits\": number, \"GlobalSecondaryIndexes\": { \"string\" : { \"CapacityUnits\": number, \"ReadCapacityUnits\": number, \"WriteCapacityUnits\": number } }, \"LocalSecondaryIndexes\": { \"string\" : { \"CapacityUnits\": number, \"ReadCapacityUnits\": number, \"WriteCapacityUnits\": number } }, \"ReadCapacityUnits\": number, \"Table\": { \"CapacityUnits\": number, \"ReadCapacityUnits\": number, \"WriteCapacityUnits\": number }, \"TableName\": \"string\", \"WriteCapacityUnits\": number }"
            ]
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "aws.dynamodb.item_collection_metrics",
          "type": "string",
          "brief": "The JSON-serialized value of the `ItemCollectionMetrics` response field.",
          "examples": [
            "{ \"string\" : [ { \"ItemCollectionKey\": { \"string\" : { \"B\": blob, \"BOOL\": boolean, \"BS\": [ blob ], \"L\": [ \"AttributeValue\" ], \"M\": { \"string\" : \"AttributeValue\" }, \"N\": \"string\", \"NS\": [ \"string\" ], \"NULL\": boolean, \"S\": \"string\", \"SS\": [ \"string\" ] } }, \"SizeEstimateRangeGB\": [ number ] } ] }"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "rpc.system",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "grpc",
                "value": "grpc",
                "brief": "gRPC",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "java_rmi",
                "value": "java_rmi",
                "brief": "Java RMI",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "dotnet_wcf",
                "value": "dotnet_wcf",
                "brief": ".NET WCF",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "apache_dubbo",
                "value": "apache_dubbo",
                "brief": "Apache Dubbo",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "connect_rpc",
                "value": "connect_rpc",
                "brief": "Connect RPC",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The value `aws-api`.",
          "examples": [
            "aws-api"
          ],
          "requirement_level": "required",
          "stability": "development"
        },
        {
          "name": "rpc.service",
          "type": "string",
          "brief": "The name of the service to which a request is made, as returned by the AWS SDK.",
          "examples": [
            "DynamoDB",
            "S3"
          ],
          "requirement_level": "recommended",
          "note": "This is the logical name of the service from the RPC interface perspective, which can be different from the name of any implementing class. The `code.namespace` attribute may be used to store the latter (despite the attribute name, it may include a class name; e.g., class with method actually executing the call on the server side, RPC client stub class on the client side).\n",
          "stability": "development"
        },
        {
          "name": "rpc.method",
          "type": "string",
          "brief": "The name of the operation corresponding to the request, as returned by the AWS SDK",
          "examples": [
            "GetItem",
            "PutItem"
          ],
          "requirement_level": "recommended",
          "note": "This is the logical name of the method from the RPC interface perspective, which can be different from the name of any implementing method/function. The `code.function.name` attribute may be used to store the latter (e.g., method actually executing the call on the server side, RPC client stub method on the client side).\n",
          "stability": "development"
        },
        {
          "name": "aws.extended_request_id",
          "type": "string",
          "brief": "The AWS extended request ID as returned in the response header `x-amz-id-2`.",
          "examples": [
            "wzHcyEWfmOGDIE5QOhTAqFDoDWP3y8IUvpNINCwL9N4TEHbUw0/gZJ+VZTmCNCWR7fezEN3eCiQ="
          ],
          "requirement_level": {
            "conditionally_required": "If available."
          },
          "stability": "development"
        },
        {
          "name": "aws.dynamodb.table_names",
          "type": "string[]",
          "brief": "A single-element array with the value of the TableName request parameter.",
          "examples": [
            "Users"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": "client",
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/aws/sdk-spans.yml",
        "attributes": {
          "aws.dynamodb.consumed_capacity": {
            "source_group": "registry.aws.dynamodb",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.dynamodb.item_collection_metrics": {
            "source_group": "registry.aws.dynamodb",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.dynamodb.table_names": {
            "source_group": "registry.aws.dynamodb",
            "inherited_fields": [
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples",
              "requirement_level"
            ]
          },
          "aws.extended_request_id": {
            "source_group": "registry.aws",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.request_id": {
            "source_group": "registry.aws",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "rpc.method": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples"
            ]
          },
          "rpc.service": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples"
            ]
          },
          "rpc.system": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples",
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "span.dynamodb.updatetable.client",
      "type": "span",
      "brief": "DynamoDB.UpdateTable",
      "stability": "development",
      "attributes": [
        {
          "name": "aws.request_id",
          "type": "string",
          "brief": "The AWS request ID as returned in the response headers `x-amzn-requestid`, `x-amzn-request-id` or `x-amz-request-id`.",
          "examples": [
            "79b9da39-b7ae-508a-a6bc-864b2829c622",
            "C9ER4AJX75574TDJ"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "aws.dynamodb.consumed_capacity",
          "type": "string[]",
          "brief": "The JSON-serialized value of each item in the `ConsumedCapacity` response field.",
          "examples": [
            [
              "{ \"CapacityUnits\": number, \"GlobalSecondaryIndexes\": { \"string\" : { \"CapacityUnits\": number, \"ReadCapacityUnits\": number, \"WriteCapacityUnits\": number } }, \"LocalSecondaryIndexes\": { \"string\" : { \"CapacityUnits\": number, \"ReadCapacityUnits\": number, \"WriteCapacityUnits\": number } }, \"ReadCapacityUnits\": number, \"Table\": { \"CapacityUnits\": number, \"ReadCapacityUnits\": number, \"WriteCapacityUnits\": number }, \"TableName\": \"string\", \"WriteCapacityUnits\": number }"
            ]
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "aws.dynamodb.provisioned_read_capacity",
          "type": "double",
          "brief": "The value of the `ProvisionedThroughput.ReadCapacityUnits` request parameter.",
          "examples": [
            1.0,
            2.0
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "aws.dynamodb.provisioned_write_capacity",
          "type": "double",
          "brief": "The value of the `ProvisionedThroughput.WriteCapacityUnits` request parameter.",
          "examples": [
            1.0,
            2.0
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "aws.dynamodb.attribute_definitions",
          "type": "string[]",
          "brief": "The JSON-serialized value of each item in the `AttributeDefinitions` request field.",
          "examples": [
            [
              "{ \"AttributeName\": \"string\", \"AttributeType\": \"string\" }"
            ]
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "aws.dynamodb.global_secondary_index_updates",
          "type": "string[]",
          "brief": "The JSON-serialized value of each item in the `GlobalSecondaryIndexUpdates` request field.",
          "examples": [
            [
              "{ \"Create\": { \"IndexName\": \"string\", \"KeySchema\": [ { \"AttributeName\": \"string\", \"KeyType\": \"string\" } ], \"Projection\": { \"NonKeyAttributes\": [ \"string\" ], \"ProjectionType\": \"string\" }, \"ProvisionedThroughput\": { \"ReadCapacityUnits\": number, \"WriteCapacityUnits\": number } }"
            ]
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "rpc.system",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "grpc",
                "value": "grpc",
                "brief": "gRPC",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "java_rmi",
                "value": "java_rmi",
                "brief": "Java RMI",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "dotnet_wcf",
                "value": "dotnet_wcf",
                "brief": ".NET WCF",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "apache_dubbo",
                "value": "apache_dubbo",
                "brief": "Apache Dubbo",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "connect_rpc",
                "value": "connect_rpc",
                "brief": "Connect RPC",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The value `aws-api`.",
          "examples": [
            "aws-api"
          ],
          "requirement_level": "required",
          "stability": "development"
        },
        {
          "name": "rpc.service",
          "type": "string",
          "brief": "The name of the service to which a request is made, as returned by the AWS SDK.",
          "examples": [
            "DynamoDB",
            "S3"
          ],
          "requirement_level": "recommended",
          "note": "This is the logical name of the service from the RPC interface perspective, which can be different from the name of any implementing class. The `code.namespace` attribute may be used to store the latter (despite the attribute name, it may include a class name; e.g., class with method actually executing the call on the server side, RPC client stub class on the client side).\n",
          "stability": "development"
        },
        {
          "name": "rpc.method",
          "type": "string",
          "brief": "The name of the operation corresponding to the request, as returned by the AWS SDK",
          "examples": [
            "GetItem",
            "PutItem"
          ],
          "requirement_level": "recommended",
          "note": "This is the logical name of the method from the RPC interface perspective, which can be different from the name of any implementing method/function. The `code.function.name` attribute may be used to store the latter (e.g., method actually executing the call on the server side, RPC client stub method on the client side).\n",
          "stability": "development"
        },
        {
          "name": "aws.extended_request_id",
          "type": "string",
          "brief": "The AWS extended request ID as returned in the response header `x-amz-id-2`.",
          "examples": [
            "wzHcyEWfmOGDIE5QOhTAqFDoDWP3y8IUvpNINCwL9N4TEHbUw0/gZJ+VZTmCNCWR7fezEN3eCiQ="
          ],
          "requirement_level": {
            "conditionally_required": "If available."
          },
          "stability": "development"
        },
        {
          "name": "aws.dynamodb.table_names",
          "type": "string[]",
          "brief": "A single-element array with the value of the TableName request parameter.",
          "examples": [
            "Users"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": "client",
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/aws/sdk-spans.yml",
        "attributes": {
          "aws.dynamodb.attribute_definitions": {
            "source_group": "registry.aws.dynamodb",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.dynamodb.consumed_capacity": {
            "source_group": "registry.aws.dynamodb",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.dynamodb.global_secondary_index_updates": {
            "source_group": "registry.aws.dynamodb",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.dynamodb.provisioned_read_capacity": {
            "source_group": "registry.aws.dynamodb",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.dynamodb.provisioned_write_capacity": {
            "source_group": "registry.aws.dynamodb",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.dynamodb.table_names": {
            "source_group": "registry.aws.dynamodb",
            "inherited_fields": [
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples",
              "requirement_level"
            ]
          },
          "aws.extended_request_id": {
            "source_group": "registry.aws",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.request_id": {
            "source_group": "registry.aws",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "rpc.method": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples"
            ]
          },
          "rpc.service": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples"
            ]
          },
          "rpc.system": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples",
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "span.aws.s3.client",
      "type": "span",
      "brief": "Attributes that exist for S3 request types.",
      "stability": "development",
      "attributes": [
        {
          "name": "aws.request_id",
          "type": "string",
          "brief": "The AWS request ID as returned in the response headers `x-amzn-requestid`, `x-amzn-request-id` or `x-amz-request-id`.",
          "examples": [
            "79b9da39-b7ae-508a-a6bc-864b2829c622",
            "C9ER4AJX75574TDJ"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "aws.s3.bucket",
          "type": "string",
          "brief": "The S3 bucket name the request refers to. Corresponds to the `--bucket` parameter of the [S3 API](https://docs.aws.amazon.com/cli/latest/reference/s3api/index.html) operations.",
          "examples": [
            "some-bucket-name"
          ],
          "requirement_level": "recommended",
          "note": "The `bucket` attribute is applicable to all S3 operations that reference a bucket, i.e. that require the bucket name as a mandatory parameter.\nThis applies to almost all S3 operations except `list-buckets`.\n",
          "stability": "development"
        },
        {
          "name": "aws.s3.key",
          "type": "string",
          "brief": "The S3 object key the request refers to. Corresponds to the `--key` parameter of the [S3 API](https://docs.aws.amazon.com/cli/latest/reference/s3api/index.html) operations.",
          "examples": [
            "someFile.yml"
          ],
          "requirement_level": "recommended",
          "note": "The `key` attribute is applicable to all object-related S3 operations, i.e. that require the object key as a mandatory parameter.\nThis applies in particular to the following operations:\n\n- [copy-object](https://docs.aws.amazon.com/cli/latest/reference/s3api/copy-object.html)\n- [delete-object](https://docs.aws.amazon.com/cli/latest/reference/s3api/delete-object.html)\n- [get-object](https://docs.aws.amazon.com/cli/latest/reference/s3api/get-object.html)\n- [head-object](https://docs.aws.amazon.com/cli/latest/reference/s3api/head-object.html)\n- [put-object](https://docs.aws.amazon.com/cli/latest/reference/s3api/put-object.html)\n- [restore-object](https://docs.aws.amazon.com/cli/latest/reference/s3api/restore-object.html)\n- [select-object-content](https://docs.aws.amazon.com/cli/latest/reference/s3api/select-object-content.html)\n- [abort-multipart-upload](https://docs.aws.amazon.com/cli/latest/reference/s3api/abort-multipart-upload.html)\n- [complete-multipart-upload](https://docs.aws.amazon.com/cli/latest/reference/s3api/complete-multipart-upload.html)\n- [create-multipart-upload](https://docs.aws.amazon.com/cli/latest/reference/s3api/create-multipart-upload.html)\n- [list-parts](https://docs.aws.amazon.com/cli/latest/reference/s3api/list-parts.html)\n- [upload-part](https://docs.aws.amazon.com/cli/latest/reference/s3api/upload-part.html)\n- [upload-part-copy](https://docs.aws.amazon.com/cli/latest/reference/s3api/upload-part-copy.html)\n",
          "stability": "development"
        },
        {
          "name": "aws.s3.copy_source",
          "type": "string",
          "brief": "The source object (in the form `bucket`/`key`) for the copy operation.",
          "examples": [
            "someFile.yml"
          ],
          "requirement_level": "recommended",
          "note": "The `copy_source` attribute applies to S3 copy operations and corresponds to the `--copy-source` parameter\nof the [copy-object operation within the S3 API](https://docs.aws.amazon.com/cli/latest/reference/s3api/copy-object.html).\nThis applies in particular to the following operations:\n\n- [copy-object](https://docs.aws.amazon.com/cli/latest/reference/s3api/copy-object.html)\n- [upload-part-copy](https://docs.aws.amazon.com/cli/latest/reference/s3api/upload-part-copy.html)\n",
          "stability": "development"
        },
        {
          "name": "aws.s3.upload_id",
          "type": "string",
          "brief": "Upload ID that identifies the multipart upload.",
          "examples": [
            "dfRtDYWFbkRONycy.Yxwh66Yjlx.cph0gtNBtJ"
          ],
          "requirement_level": "recommended",
          "note": "The `upload_id` attribute applies to S3 multipart-upload operations and corresponds to the `--upload-id` parameter\nof the [S3 API](https://docs.aws.amazon.com/cli/latest/reference/s3api/index.html) multipart operations.\nThis applies in particular to the following operations:\n\n- [abort-multipart-upload](https://docs.aws.amazon.com/cli/latest/reference/s3api/abort-multipart-upload.html)\n- [complete-multipart-upload](https://docs.aws.amazon.com/cli/latest/reference/s3api/complete-multipart-upload.html)\n- [list-parts](https://docs.aws.amazon.com/cli/latest/reference/s3api/list-parts.html)\n- [upload-part](https://docs.aws.amazon.com/cli/latest/reference/s3api/upload-part.html)\n- [upload-part-copy](https://docs.aws.amazon.com/cli/latest/reference/s3api/upload-part-copy.html)\n",
          "stability": "development"
        },
        {
          "name": "aws.s3.delete",
          "type": "string",
          "brief": "The delete request container that specifies the objects to be deleted.",
          "examples": [
            "Objects=[{Key=string,VersionId=string},{Key=string,VersionId=string}],Quiet=boolean"
          ],
          "requirement_level": "recommended",
          "note": "The `delete` attribute is only applicable to the [delete-object](https://docs.aws.amazon.com/cli/latest/reference/s3api/delete-object.html) operation.\nThe `delete` attribute corresponds to the `--delete` parameter of the\n[delete-objects operation within the S3 API](https://docs.aws.amazon.com/cli/latest/reference/s3api/delete-objects.html).\n",
          "stability": "development"
        },
        {
          "name": "aws.s3.part_number",
          "type": "int",
          "brief": "The part number of the part being uploaded in a multipart-upload operation. This is a positive integer between 1 and 10,000.",
          "examples": [
            3456
          ],
          "requirement_level": "recommended",
          "note": "The `part_number` attribute is only applicable to the [upload-part](https://docs.aws.amazon.com/cli/latest/reference/s3api/upload-part.html)\nand [upload-part-copy](https://docs.aws.amazon.com/cli/latest/reference/s3api/upload-part-copy.html) operations.\nThe `part_number` attribute corresponds to the `--part-number` parameter of the\n[upload-part operation within the S3 API](https://docs.aws.amazon.com/cli/latest/reference/s3api/upload-part.html).\n",
          "stability": "development"
        },
        {
          "name": "rpc.system",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "grpc",
                "value": "grpc",
                "brief": "gRPC",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "java_rmi",
                "value": "java_rmi",
                "brief": "Java RMI",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "dotnet_wcf",
                "value": "dotnet_wcf",
                "brief": ".NET WCF",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "apache_dubbo",
                "value": "apache_dubbo",
                "brief": "Apache Dubbo",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "connect_rpc",
                "value": "connect_rpc",
                "brief": "Connect RPC",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The value `aws-api`.",
          "examples": [
            "aws-api"
          ],
          "requirement_level": "required",
          "stability": "development"
        },
        {
          "name": "rpc.service",
          "type": "string",
          "brief": "The name of the service to which a request is made, as returned by the AWS SDK.",
          "examples": [
            "DynamoDB",
            "S3"
          ],
          "requirement_level": "recommended",
          "note": "This is the logical name of the service from the RPC interface perspective, which can be different from the name of any implementing class. The `code.namespace` attribute may be used to store the latter (despite the attribute name, it may include a class name; e.g., class with method actually executing the call on the server side, RPC client stub class on the client side).\n",
          "stability": "development"
        },
        {
          "name": "rpc.method",
          "type": "string",
          "brief": "The name of the operation corresponding to the request, as returned by the AWS SDK",
          "examples": [
            "GetItem",
            "PutItem"
          ],
          "requirement_level": "recommended",
          "note": "This is the logical name of the method from the RPC interface perspective, which can be different from the name of any implementing method/function. The `code.function.name` attribute may be used to store the latter (e.g., method actually executing the call on the server side, RPC client stub method on the client side).\n",
          "stability": "development"
        },
        {
          "name": "aws.extended_request_id",
          "type": "string",
          "brief": "The AWS extended request ID as returned in the response header `x-amz-id-2`.",
          "examples": [
            "wzHcyEWfmOGDIE5QOhTAqFDoDWP3y8IUvpNINCwL9N4TEHbUw0/gZJ+VZTmCNCWR7fezEN3eCiQ="
          ],
          "requirement_level": {
            "conditionally_required": "If available."
          },
          "stability": "development"
        }
      ],
      "span_kind": "client",
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/aws/sdk-spans.yml",
        "attributes": {
          "aws.extended_request_id": {
            "source_group": "registry.aws",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.request_id": {
            "source_group": "registry.aws",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.s3.bucket": {
            "source_group": "registry.aws.s3",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.s3.copy_source": {
            "source_group": "registry.aws.s3",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.s3.delete": {
            "source_group": "registry.aws.s3",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.s3.key": {
            "source_group": "registry.aws.s3",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.s3.part_number": {
            "source_group": "registry.aws.s3",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.s3.upload_id": {
            "source_group": "registry.aws.s3",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "rpc.method": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples"
            ]
          },
          "rpc.service": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples"
            ]
          },
          "rpc.system": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples",
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "registry.messaging",
      "type": "attribute_group",
      "brief": "Attributes describing telemetry around messaging systems and messaging activities.",
      "stability": "development",
      "attributes": [
        {
          "name": "messaging.batch.message_count",
          "type": "int",
          "brief": "The number of messages sent, received, or processed in the scope of the batching operation.",
          "examples": [
            0,
            1,
            2
          ],
          "requirement_level": "recommended",
          "note": "Instrumentations SHOULD NOT set `messaging.batch.message_count` on spans that operate with a single message. When a messaging client library supports both batch and single-message API for the same operation, instrumentations SHOULD use `messaging.batch.message_count` for batching APIs and SHOULD NOT use it for single-message APIs.\n",
          "stability": "development"
        },
        {
          "name": "messaging.client.id",
          "type": "string",
          "brief": "A unique identifier for the client that consumes or produces a message.\n",
          "examples": [
            "client-5",
            "myhost@8742@s8083jm"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "messaging.consumer.group.name",
          "type": "string",
          "brief": "The name of the consumer group with which a consumer is associated.\n",
          "examples": [
            "my-group",
            "indexer"
          ],
          "requirement_level": "recommended",
          "note": "Semantic conventions for individual messaging systems SHOULD document whether `messaging.consumer.group.name` is applicable and what it means in the context of that system.\n",
          "stability": "development"
        },
        {
          "name": "messaging.destination.name",
          "type": "string",
          "brief": "The message destination name",
          "examples": [
            "MyQueue",
            "MyTopic"
          ],
          "requirement_level": "recommended",
          "note": "Destination name SHOULD uniquely identify a specific queue, topic or other entity within the broker. If\nthe broker doesn't have such notion, the destination name SHOULD uniquely identify the broker.\n",
          "stability": "development"
        },
        {
          "name": "messaging.destination.subscription.name",
          "type": "string",
          "brief": "The name of the destination subscription from which a message is consumed.",
          "examples": [
            "subscription-a"
          ],
          "requirement_level": "recommended",
          "note": "Semantic conventions for individual messaging systems SHOULD document whether `messaging.destination.subscription.name` is applicable and what it means in the context of that system.\n",
          "stability": "development"
        },
        {
          "name": "messaging.destination.template",
          "type": "string",
          "brief": "Low cardinality representation of the messaging destination name",
          "examples": [
            "/customers/{customerId}"
          ],
          "requirement_level": "recommended",
          "note": "Destination names could be constructed from templates. An example would be a destination name involving a user name or product id. Although the destination name in this case is of high cardinality, the underlying template is of low cardinality and can be effectively used for grouping and aggregation.\n",
          "stability": "development"
        },
        {
          "name": "messaging.destination.anonymous",
          "type": "boolean",
          "brief": "A boolean that is true if the message destination is anonymous (could be unnamed or have auto-generated name).",
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "messaging.destination.temporary",
          "type": "boolean",
          "brief": "A boolean that is true if the message destination is temporary and might not exist anymore after messages are processed.",
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "messaging.destination.partition.id",
          "type": "string",
          "brief": "The identifier of the partition messages are sent to or received from, unique within the `messaging.destination.name`.\n",
          "examples": "1",
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "messaging.message.conversation_id",
          "type": "string",
          "brief": "The conversation ID identifying the conversation to which the message belongs, represented as a string. Sometimes called \"Correlation ID\".\n",
          "examples": "MyConversationId",
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "messaging.message.envelope.size",
          "type": "int",
          "brief": "The size of the message body and metadata in bytes.\n",
          "examples": 2738,
          "requirement_level": "recommended",
          "note": "This can refer to both the compressed or uncompressed size. If both sizes are known, the uncompressed\nsize should be used.\n",
          "stability": "development"
        },
        {
          "name": "messaging.message.id",
          "type": "string",
          "brief": "A value used by the messaging system as an identifier for the message, represented as a string.",
          "examples": "452a7c7c7c7048c2f887f61572b18fc2",
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "messaging.message.body.size",
          "type": "int",
          "brief": "The size of the message body in bytes.\n",
          "examples": 1439,
          "requirement_level": "recommended",
          "note": "This can refer to both the compressed or uncompressed body size. If both sizes are known, the uncompressed\nbody size should be used.\n",
          "stability": "development"
        },
        {
          "name": "messaging.operation.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "create",
                "value": "create",
                "brief": "A message is created. \"Create\" spans always refer to a single message and are used to provide a unique creation context for messages in batch sending scenarios.\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "send",
                "value": "send",
                "brief": "One or more messages are provided for sending to an intermediary. If a single message is sent, the context of the \"Send\" span can be used as the creation context and no \"Create\" span needs to be created.\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "receive",
                "value": "receive",
                "brief": "One or more messages are requested by a consumer. This operation refers to pull-based scenarios, where consumers explicitly call methods of messaging SDKs to receive messages.\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "process",
                "value": "process",
                "brief": "One or more messages are processed by a consumer.\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "settle",
                "value": "settle",
                "brief": "One or more messages are settled.\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "deliver",
                "value": "deliver",
                "brief": "Deprecated. Use `process` instead.",
                "note": null,
                "stability": "development",
                "deprecated": "Replaced by `process`."
              },
              {
                "id": "publish",
                "value": "publish",
                "brief": "Deprecated. Use `send` instead.",
                "note": null,
                "stability": "development",
                "deprecated": "Replaced by `send`."
              }
            ]
          },
          "brief": "A string identifying the type of the messaging operation.\n",
          "requirement_level": "recommended",
          "note": "If a custom value is used, it MUST be of low cardinality.",
          "stability": "development"
        },
        {
          "name": "messaging.operation.name",
          "type": "string",
          "brief": "The system-specific name of the messaging operation.\n",
          "examples": [
            "ack",
            "nack",
            "send"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "messaging.system",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "activemq",
                "value": "activemq",
                "brief": "Apache ActiveMQ",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "aws_sqs",
                "value": "aws_sqs",
                "brief": "Amazon Simple Queue Service (SQS)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "eventgrid",
                "value": "eventgrid",
                "brief": "Azure Event Grid",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "eventhubs",
                "value": "eventhubs",
                "brief": "Azure Event Hubs",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "servicebus",
                "value": "servicebus",
                "brief": "Azure Service Bus",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "gcp_pubsub",
                "value": "gcp_pubsub",
                "brief": "Google Cloud Pub/Sub",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "jms",
                "value": "jms",
                "brief": "Java Message Service",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "kafka",
                "value": "kafka",
                "brief": "Apache Kafka",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "rabbitmq",
                "value": "rabbitmq",
                "brief": "RabbitMQ",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "rocketmq",
                "value": "rocketmq",
                "brief": "Apache RocketMQ",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "pulsar",
                "value": "pulsar",
                "brief": "Apache Pulsar",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The messaging system as identified by the client instrumentation.",
          "requirement_level": "recommended",
          "note": "The actual messaging system may differ from the one known by the client. For example, when using Kafka client libraries to communicate with Azure Event Hubs, the `messaging.system` is set to `kafka` based on the instrumentation's best knowledge.\n",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/messaging/registry.yaml"
      },
      "display_name": "General Messaging Attributes"
    },
    {
      "id": "registry.messaging.kafka",
      "type": "attribute_group",
      "brief": "This group describes attributes specific to Apache Kafka.\n",
      "attributes": [
        {
          "name": "messaging.kafka.message.key",
          "type": "string",
          "brief": "Message keys in Kafka are used for grouping alike messages to ensure they're processed on the same partition. They differ from `messaging.message.id` in that they're not unique. If the key is `null`, the attribute MUST NOT be set.\n",
          "examples": "myKey",
          "requirement_level": "recommended",
          "note": "If the key type is not string, it's string representation has to be supplied for the attribute. If the key has no unambiguous, canonical string form, don't include its value.\n",
          "stability": "development"
        },
        {
          "name": "messaging.kafka.offset",
          "type": "int",
          "brief": "The offset of a record in the corresponding Kafka partition.\n",
          "examples": 42,
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "messaging.kafka.message.tombstone",
          "type": "boolean",
          "brief": "A boolean that is true if the message is a tombstone.",
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/messaging/registry.yaml"
      },
      "display_name": "Kafka Attributes"
    },
    {
      "id": "registry.messaging.rabbitmq",
      "type": "attribute_group",
      "brief": "This group describes attributes specific to RabbitMQ.\n",
      "attributes": [
        {
          "name": "messaging.rabbitmq.destination.routing_key",
          "type": "string",
          "brief": "RabbitMQ message routing key.\n",
          "examples": "myKey",
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "messaging.rabbitmq.message.delivery_tag",
          "type": "int",
          "brief": "RabbitMQ message delivery tag\n",
          "examples": 123,
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/messaging/registry.yaml"
      },
      "display_name": "RabbitMQ Attributes"
    },
    {
      "id": "registry.messaging.rocketmq",
      "type": "attribute_group",
      "brief": "This group describes attributes specific to RocketMQ.\n",
      "attributes": [
        {
          "name": "messaging.rocketmq.consumption_model",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "clustering",
                "value": "clustering",
                "brief": "Clustering consumption model",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "broadcasting",
                "value": "broadcasting",
                "brief": "Broadcasting consumption model",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "Model of message consumption. This only applies to consumer spans.\n",
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "messaging.rocketmq.message.delay_time_level",
          "type": "int",
          "brief": "The delay time level for delay message, which determines the message delay time.\n",
          "examples": 3,
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "messaging.rocketmq.message.delivery_timestamp",
          "type": "int",
          "brief": "The timestamp in milliseconds that the delay message is expected to be delivered to consumer.\n",
          "examples": 1665987217045,
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "messaging.rocketmq.message.group",
          "type": "string",
          "brief": "It is essential for FIFO message. Messages that belong to the same message group are always processed one by one within the same consumer group.\n",
          "examples": "myMessageGroup",
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "messaging.rocketmq.message.keys",
          "type": "string[]",
          "brief": "Key(s) of message, another way to mark message besides message id.\n",
          "examples": [
            [
              "keyA",
              "keyB"
            ]
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "messaging.rocketmq.message.tag",
          "type": "string",
          "brief": "The secondary classifier of message besides topic.\n",
          "examples": "tagA",
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "messaging.rocketmq.message.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "normal",
                "value": "normal",
                "brief": "Normal message",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "fifo",
                "value": "fifo",
                "brief": "FIFO message",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "delay",
                "value": "delay",
                "brief": "Delay message",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "transaction",
                "value": "transaction",
                "brief": "Transaction message",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "Type of message.\n",
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "messaging.rocketmq.namespace",
          "type": "string",
          "brief": "Namespace of RocketMQ resources, resources in different namespaces are individual.\n",
          "examples": "myNamespace",
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/messaging/registry.yaml"
      },
      "display_name": "RocketMQ Attributes"
    },
    {
      "id": "registry.messaging.gcp_pubsub",
      "type": "attribute_group",
      "brief": "This group describes attributes specific to GCP Pub/Sub.\n",
      "attributes": [
        {
          "name": "messaging.gcp_pubsub.message.ordering_key",
          "type": "string",
          "brief": "The ordering key for a given message. If the attribute is not present, the message does not have an ordering key.\n",
          "examples": "ordering_key",
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "messaging.gcp_pubsub.message.ack_id",
          "type": "string",
          "brief": "The ack id for a given message.\n",
          "examples": "ack_id",
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "messaging.gcp_pubsub.message.ack_deadline",
          "type": "int",
          "brief": "The ack deadline in seconds set for the modify ack deadline request.\n",
          "examples": 10,
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "messaging.gcp_pubsub.message.delivery_attempt",
          "type": "int",
          "brief": "The delivery attempt for a given message.\n",
          "examples": 2,
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/messaging/registry.yaml"
      },
      "display_name": "GCP Pub/Sub Attributes"
    },
    {
      "id": "registry.messaging.servicebus",
      "type": "attribute_group",
      "brief": "This group describes attributes specific to Azure Service Bus.\n",
      "attributes": [
        {
          "name": "messaging.servicebus.message.delivery_count",
          "type": "int",
          "brief": "Number of deliveries that have been attempted for this message.\n",
          "examples": 2,
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "messaging.servicebus.message.enqueued_time",
          "type": "int",
          "brief": "The UTC epoch seconds at which the message has been accepted and stored in the entity.\n",
          "examples": 1701393730,
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "messaging.servicebus.disposition_status",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "complete",
                "value": "complete",
                "brief": "Message is completed",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "abandon",
                "value": "abandon",
                "brief": "Message is abandoned",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "dead_letter",
                "value": "dead_letter",
                "brief": "Message is sent to dead letter queue",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "defer",
                "value": "defer",
                "brief": "Message is deferred",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes the [settlement type](https://learn.microsoft.com/azure/service-bus-messaging/message-transfers-locks-settlement#peeklock).\n",
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/messaging/registry.yaml"
      },
      "display_name": "Azure Service Bus Attributes"
    },
    {
      "id": "registry.messaging.eventhubs",
      "type": "attribute_group",
      "brief": "This group describes attributes specific to Azure Event Hubs.\n",
      "attributes": [
        {
          "name": "messaging.eventhubs.message.enqueued_time",
          "type": "int",
          "brief": "The UTC epoch seconds at which the message has been accepted and stored in the entity.\n",
          "examples": 1701393730,
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/messaging/registry.yaml"
      },
      "display_name": "Azure Event Hubs Attributes"
    },
    {
      "id": "registry.webengine",
      "type": "attribute_group",
      "brief": "This document defines the attributes used to describe the packaged software running the application code.\n",
      "stability": "development",
      "attributes": [
        {
          "name": "webengine.name",
          "type": "string",
          "brief": "The name of the web engine.\n",
          "examples": [
            "WildFly"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "webengine.version",
          "type": "string",
          "brief": "The version of the web engine.\n",
          "examples": [
            "21.0.0"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "webengine.description",
          "type": "string",
          "brief": "Additional description of the web engine (e.g. detailed version and edition information).\n",
          "examples": [
            "WildFly Full 21.0.0.Final (WildFly Core 13.0.1.Final) - 2.2.2.Final"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/webengine/registry.yaml"
      },
      "display_name": "Web Engine Attributes"
    },
    {
      "id": "registry.cloudevents",
      "type": "attribute_group",
      "brief": "This document defines attributes for CloudEvents.\n",
      "attributes": [
        {
          "name": "cloudevents.event_id",
          "type": "string",
          "brief": "The [event_id](https://github.com/cloudevents/spec/blob/v1.0.2/cloudevents/spec.md#id) uniquely identifies the event.\n",
          "examples": [
            "123e4567-e89b-12d3-a456-426614174000",
            "0001"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "cloudevents.event_source",
          "type": "string",
          "brief": "The [source](https://github.com/cloudevents/spec/blob/v1.0.2/cloudevents/spec.md#source-1) identifies the context in which an event happened.\n",
          "examples": [
            "https://github.com/cloudevents",
            "/cloudevents/spec/pull/123",
            "my-service"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "cloudevents.event_spec_version",
          "type": "string",
          "brief": "The [version of the CloudEvents specification](https://github.com/cloudevents/spec/blob/v1.0.2/cloudevents/spec.md#specversion) which the event uses.\n",
          "examples": "1.0",
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "cloudevents.event_type",
          "type": "string",
          "brief": "The [event_type](https://github.com/cloudevents/spec/blob/v1.0.2/cloudevents/spec.md#type) contains a value describing the type of event related to the originating occurrence.\n",
          "examples": [
            "com.github.pull_request.opened",
            "com.example.object.deleted.v2"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "cloudevents.event_subject",
          "type": "string",
          "brief": "The [subject](https://github.com/cloudevents/spec/blob/v1.0.2/cloudevents/spec.md#subject) of the event in the context of the event producer (identified by source).\n",
          "examples": "mynewfile.jpg",
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/cloudevents/registry.yaml"
      },
      "display_name": "CloudEvents Attributes"
    },
    {
      "id": "registry.hardware",
      "type": "attribute_group",
      "brief": "Attributes for hardware.\n",
      "attributes": [
        {
          "name": "hw.id",
          "type": "string",
          "brief": "An identifier for the hardware component, unique within the monitored host\n",
          "examples": [
            "win32battery_battery_testsysa33_1"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "hw.name",
          "type": "string",
          "brief": "An easily-recognizable name for the hardware component\n",
          "examples": [
            "eth0"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "hw.parent",
          "type": "string",
          "brief": "Unique identifier of the parent component (typically the `hw.id` attribute of the enclosure, or disk controller)\n",
          "examples": [
            "dellStorage_perc_0"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "hw.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "battery",
                "value": "battery",
                "brief": "Battery",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "cpu",
                "value": "cpu",
                "brief": "CPU",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "disk_controller",
                "value": "disk_controller",
                "brief": "Disk controller",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "enclosure",
                "value": "enclosure",
                "brief": "Enclosure",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "fan",
                "value": "fan",
                "brief": "Fan",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "gpu",
                "value": "gpu",
                "brief": "GPU",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "logical_disk",
                "value": "logical_disk",
                "brief": "Logical disk",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "memory",
                "value": "memory",
                "brief": "Memory",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "network",
                "value": "network",
                "brief": "Network",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "physical_disk",
                "value": "physical_disk",
                "brief": "Physical disk",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "power_supply",
                "value": "power_supply",
                "brief": "Power supply",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "tape_drive",
                "value": "tape_drive",
                "brief": "Tape drive",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "temperature",
                "value": "temperature",
                "brief": "Temperature",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "voltage",
                "value": "voltage",
                "brief": "Voltage",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "Type of the component\n",
          "requirement_level": "recommended",
          "note": "Describes the category of the hardware component for which `hw.state` is being reported. For example, `hw.type=temperature` along with `hw.state=degraded` would indicate that the temperature of the hardware component has been reported as `degraded`.\n",
          "stability": "development"
        },
        {
          "name": "hw.state",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "ok",
                "value": "ok",
                "brief": "Ok",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "degraded",
                "value": "degraded",
                "brief": "Degraded",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "failed",
                "value": "failed",
                "brief": "Failed",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The current state of the component\n",
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/hardware/registry.yaml"
      },
      "display_name": "Hardware Attributes"
    },
    {
      "id": "metric.cpu.time",
      "type": "metric",
      "brief": "Seconds each logical CPU spent on each mode",
      "stability": "development",
      "attributes": [
        {
          "name": "cpu.logical_number",
          "type": "int",
          "brief": "The logical CPU number [0..n-1]",
          "examples": [
            1
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "cpu.mode",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "user",
                "value": "user",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "system",
                "value": "system",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "nice",
                "value": "nice",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "idle",
                "value": "idle",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "iowait",
                "value": "iowait",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "interrupt",
                "value": "interrupt",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "steal",
                "value": "steal",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "kernel",
                "value": "kernel",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The mode of the CPU",
          "examples": [
            "user",
            "system"
          ],
          "requirement_level": "recommended",
          "note": "Following states SHOULD be used: `user`, `system`, `nice`, `idle`, `iowait`, `interrupt`, `steal`",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "cpu.time",
      "instrument": "counter",
      "unit": "s",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/cpu/metrics.yaml",
        "attributes": {
          "cpu.logical_number": {
            "source_group": "registry.cpu",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "cpu.mode": {
            "source_group": "registry.cpu",
            "inherited_fields": [
              "brief",
              "examples",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "note"
            ]
          }
        }
      }
    },
    {
      "id": "metric.cpu.utilization",
      "type": "metric",
      "brief": "For each logical CPU, the utilization is calculated as the change in cumulative CPU time (cpu.time) over a measurement interval, divided by the elapsed time.",
      "stability": "development",
      "attributes": [
        {
          "name": "cpu.logical_number",
          "type": "int",
          "brief": "The logical CPU number [0..n-1]",
          "examples": [
            1
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "cpu.mode",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "user",
                "value": "user",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "system",
                "value": "system",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "nice",
                "value": "nice",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "idle",
                "value": "idle",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "iowait",
                "value": "iowait",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "interrupt",
                "value": "interrupt",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "steal",
                "value": "steal",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "kernel",
                "value": "kernel",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The mode of the CPU",
          "examples": [
            "user",
            "system"
          ],
          "requirement_level": "recommended",
          "note": "Following modes SHOULD be used: `user`, `system`, `nice`, `idle`, `iowait`, `interrupt`, `steal`",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "cpu.utilization",
      "instrument": "gauge",
      "unit": "1",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/cpu/metrics.yaml",
        "attributes": {
          "cpu.logical_number": {
            "source_group": "registry.cpu",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "cpu.mode": {
            "source_group": "registry.cpu",
            "inherited_fields": [
              "brief",
              "examples",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "note"
            ]
          }
        }
      }
    },
    {
      "id": "metric.cpu.frequency",
      "type": "metric",
      "brief": "Operating frequency of the logical CPU in Hertz.",
      "stability": "development",
      "attributes": [
        {
          "name": "cpu.logical_number",
          "type": "int",
          "brief": "The logical CPU number [0..n-1]",
          "examples": [
            1
          ],
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "cpu.frequency",
      "instrument": "gauge",
      "unit": "Hz",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/cpu/metrics.yaml",
        "attributes": {
          "cpu.logical_number": {
            "source_group": "registry.cpu",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "metric.signalr.server.connection.duration",
      "type": "metric",
      "brief": "The duration of connections on the server.",
      "note": "Meter name: `Microsoft.AspNetCore.Http.Connections`; Added in: ASP.NET Core 8.0\n",
      "stability": "stable",
      "attributes": [
        {
          "name": "signalr.connection.status",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "normal_closure",
                "value": "normal_closure",
                "brief": "The connection was closed normally.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "timeout",
                "value": "timeout",
                "brief": "The connection was closed due to a timeout.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "app_shutdown",
                "value": "app_shutdown",
                "brief": "The connection was closed because the app is shutting down.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "SignalR HTTP connection closure status.",
          "examples": [
            "app_shutdown",
            "timeout"
          ],
          "requirement_level": "recommended",
          "stability": "stable"
        },
        {
          "name": "signalr.transport",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "server_sent_events",
                "value": "server_sent_events",
                "brief": "ServerSentEvents protocol",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "long_polling",
                "value": "long_polling",
                "brief": "LongPolling protocol",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "web_sockets",
                "value": "web_sockets",
                "brief": "WebSockets protocol",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "[SignalR transport type](https://github.com/dotnet/aspnetcore/blob/main/src/SignalR/docs/specs/TransportProtocols.md)",
          "examples": [
            "web_sockets",
            "long_polling"
          ],
          "requirement_level": "recommended",
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "signalr.server.connection.duration",
      "instrument": "histogram",
      "unit": "s",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/signalr/metrics.yaml",
        "attributes": {
          "signalr.connection.status": {
            "source_group": "registry.signalr",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "signalr.transport": {
            "source_group": "registry.signalr",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "metric.signalr.server.active_connections",
      "type": "metric",
      "brief": "Number of connections that are currently active on the server.",
      "note": "Meter name: `Microsoft.AspNetCore.Http.Connections`; Added in: ASP.NET Core 8.0\n",
      "stability": "stable",
      "attributes": [
        {
          "name": "signalr.connection.status",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "normal_closure",
                "value": "normal_closure",
                "brief": "The connection was closed normally.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "timeout",
                "value": "timeout",
                "brief": "The connection was closed due to a timeout.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "app_shutdown",
                "value": "app_shutdown",
                "brief": "The connection was closed because the app is shutting down.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "SignalR HTTP connection closure status.",
          "examples": [
            "app_shutdown",
            "timeout"
          ],
          "requirement_level": "recommended",
          "stability": "stable"
        },
        {
          "name": "signalr.transport",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "server_sent_events",
                "value": "server_sent_events",
                "brief": "ServerSentEvents protocol",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "long_polling",
                "value": "long_polling",
                "brief": "LongPolling protocol",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "web_sockets",
                "value": "web_sockets",
                "brief": "WebSockets protocol",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "[SignalR transport type](https://github.com/dotnet/aspnetcore/blob/main/src/SignalR/docs/specs/TransportProtocols.md)",
          "examples": [
            "web_sockets",
            "long_polling"
          ],
          "requirement_level": "recommended",
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "signalr.server.active_connections",
      "instrument": "updowncounter",
      "unit": "{connection}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/signalr/metrics.yaml",
        "attributes": {
          "signalr.connection.status": {
            "source_group": "registry.signalr",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "signalr.transport": {
            "source_group": "registry.signalr",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "resource.cloudfoundry.system",
      "type": "resource",
      "brief": "The system component which is monitored.\n",
      "stability": "development",
      "attributes": [
        {
          "name": "cloudfoundry.system.id",
          "type": "string",
          "brief": "A guid or another name describing the event source.\n",
          "examples": [
            "cf/gorouter"
          ],
          "requirement_level": "recommended",
          "note": "CloudFoundry defines the `source_id` in the [Loggregator v2 envelope](https://github.com/cloudfoundry/loggregator-api#v2-envelope).\nIt is used for logs and metrics emitted by CloudFoundry. It is\nsupposed to contain the component name, e.g. \"gorouter\", for\nCloudFoundry components.\n\nWhen system components are instrumented, values from the\n[Bosh spec](https://bosh.io/docs/jobs/#properties-spec)\nshould be used. The `system.id` should be set to\n`spec.deployment/spec.name`.\n",
          "stability": "development"
        },
        {
          "name": "cloudfoundry.system.instance.id",
          "type": "string",
          "brief": "A guid describing the concrete instance of the event source.\n",
          "examples": [
            "218fc5a9-a5f1-4b54-aa05-46717d0ab26d"
          ],
          "requirement_level": "recommended",
          "note": "CloudFoundry defines the `instance_id` in the [Loggregator v2 envelope](https://github.com/cloudfoundry/loggregator-api#v2-envelope).\nIt is used for logs and metrics emitted by CloudFoundry. It is\nsupposed to contain the vm id for CloudFoundry components.\n\nWhen system components are instrumented, values from the\n[Bosh spec](https://bosh.io/docs/jobs/#properties-spec)\nshould be used. The `system.instance.id` should be set to `spec.id`.\n",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": "cloudfoundry.system",
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/cloudfoundry/resources.yaml",
        "attributes": {
          "cloudfoundry.system.id": {
            "source_group": "registry.cloudfoundry",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "cloudfoundry.system.instance.id": {
            "source_group": "registry.cloudfoundry",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "resource.cloudfoundry.app",
      "type": "resource",
      "brief": "The application which is monitored.\n",
      "stability": "development",
      "attributes": [
        {
          "name": "cloudfoundry.app.name",
          "type": "string",
          "brief": "The name of the application.\n",
          "examples": [
            "my-app-name"
          ],
          "requirement_level": "recommended",
          "note": "Application instrumentation should use the value from environment\nvariable `VCAP_APPLICATION.application_name`. This is the same value\nas reported by `cf apps`.\n",
          "stability": "development"
        },
        {
          "name": "cloudfoundry.app.id",
          "type": "string",
          "brief": "The guid of the application.\n",
          "examples": [
            "218fc5a9-a5f1-4b54-aa05-46717d0ab26d"
          ],
          "requirement_level": "recommended",
          "note": "Application instrumentation should use the value from environment\nvariable `VCAP_APPLICATION.application_id`. This is the same value as\nreported by `cf app <app-name> --guid`.\n",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": "cloudfoundry.app",
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/cloudfoundry/resources.yaml",
        "attributes": {
          "cloudfoundry.app.id": {
            "source_group": "registry.cloudfoundry",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "cloudfoundry.app.name": {
            "source_group": "registry.cloudfoundry",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "resource.cloudfoundry.space",
      "type": "resource",
      "brief": "The space of the application which is monitored.\n",
      "stability": "development",
      "attributes": [
        {
          "name": "cloudfoundry.space.name",
          "type": "string",
          "brief": "The name of the CloudFoundry space the application is running in.\n",
          "examples": [
            "my-space-name"
          ],
          "requirement_level": "recommended",
          "note": "Application instrumentation should use the value from environment\nvariable `VCAP_APPLICATION.space_name`. This is the same value as\nreported by `cf spaces`.\n",
          "stability": "development"
        },
        {
          "name": "cloudfoundry.space.id",
          "type": "string",
          "brief": "The guid of the CloudFoundry space the application is running in.\n",
          "examples": [
            "218fc5a9-a5f1-4b54-aa05-46717d0ab26d"
          ],
          "requirement_level": "recommended",
          "note": "Application instrumentation should use the value from environment\nvariable `VCAP_APPLICATION.space_id`. This is the same value as\nreported by `cf space <space-name> --guid`.\n",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": "cloudfoundry.space",
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/cloudfoundry/resources.yaml",
        "attributes": {
          "cloudfoundry.space.id": {
            "source_group": "registry.cloudfoundry",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "cloudfoundry.space.name": {
            "source_group": "registry.cloudfoundry",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "resource.cloudfoundry.org",
      "type": "resource",
      "brief": "The organization of the application which is monitored.\n",
      "stability": "development",
      "attributes": [
        {
          "name": "cloudfoundry.org.name",
          "type": "string",
          "brief": "The name of the CloudFoundry organization the app is running in.\n",
          "examples": [
            "my-org-name"
          ],
          "requirement_level": "recommended",
          "note": "Application instrumentation should use the value from environment\nvariable `VCAP_APPLICATION.org_name`. This is the same value as\nreported by `cf orgs`.\n",
          "stability": "development"
        },
        {
          "name": "cloudfoundry.org.id",
          "type": "string",
          "brief": "The guid of the CloudFoundry org the application is running in.\n",
          "examples": [
            "218fc5a9-a5f1-4b54-aa05-46717d0ab26d"
          ],
          "requirement_level": "recommended",
          "note": "Application instrumentation should use the value from environment\nvariable `VCAP_APPLICATION.org_id`. This is the same value as\nreported by `cf org <org-name> --guid`.\n",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": "cloudfoundry.org",
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/cloudfoundry/resources.yaml",
        "attributes": {
          "cloudfoundry.org.id": {
            "source_group": "registry.cloudfoundry",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "cloudfoundry.org.name": {
            "source_group": "registry.cloudfoundry",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "resource.cloudfoundry.process",
      "type": "resource",
      "brief": "The process of the application which is monitored.\n",
      "stability": "development",
      "attributes": [
        {
          "name": "cloudfoundry.process.id",
          "type": "string",
          "brief": "The UID identifying the process.\n",
          "examples": [
            "218fc5a9-a5f1-4b54-aa05-46717d0ab26d"
          ],
          "requirement_level": "recommended",
          "note": "Application instrumentation should use the value from environment\nvariable `VCAP_APPLICATION.process_id`. It is supposed to be equal to\n`VCAP_APPLICATION.app_id` for applications deployed to the runtime.\nFor system components, this could be the actual PID.\n",
          "stability": "development"
        },
        {
          "name": "cloudfoundry.process.type",
          "type": "string",
          "brief": "The type of process.\n",
          "examples": [
            "web"
          ],
          "requirement_level": "recommended",
          "note": "CloudFoundry applications can consist of multiple jobs. Usually the\nmain process will be of type `web`. There can be additional background\ntasks or side-cars with different process types.\n",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": "cloudfoundry.process",
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/cloudfoundry/resources.yaml",
        "attributes": {
          "cloudfoundry.process.id": {
            "source_group": "registry.cloudfoundry",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "cloudfoundry.process.type": {
            "source_group": "registry.cloudfoundry",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "metric.k8s.replication_controller.desired_pods",
      "type": "metric",
      "brief": "Deprecated, use `k8s.replicationcontroller.desired_pods` instead.",
      "note": "This metric aligns with the `replicas` field of the\n[K8s ReplicationControllerSpec](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#replicationcontrollerspec-v1-core)\n\nThis metric SHOULD, at a minimum, be reported against a\n[`k8s.replicationcontroller`](../resource/k8s.md#replicationcontroller) resource.\n",
      "stability": "development",
      "deprecated": {
        "reason": "uncategorized",
        "note": "Replaced by `k8s.replicationcontroller.desired_pods`."
      },
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "k8s.replication_controller.desired_pods",
      "instrument": "updowncounter",
      "unit": "{pod}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/k8s/deprecated/metrics-deprecated.yaml"
      }
    },
    {
      "id": "metric.k8s.replication_controller.available_pods",
      "type": "metric",
      "brief": "Deprecated, use `k8s.replicationcontroller.available_pods` instead.",
      "note": "This metric aligns with the `availableReplicas` field of the\n[K8s ReplicationControllerStatus](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#replicationcontrollerstatus-v1-core)\n\nThis metric SHOULD, at a minimum, be reported against a\n[`k8s.replicationcontroller`](../resource/k8s.md#replicationcontroller) resource.\n",
      "stability": "development",
      "deprecated": {
        "reason": "uncategorized",
        "note": "Replaced by `k8s.replicationcontroller.available_pods`."
      },
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "k8s.replication_controller.available_pods",
      "instrument": "updowncounter",
      "unit": "{pod}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/k8s/deprecated/metrics-deprecated.yaml"
      }
    },
    {
      "id": "metric.v8js.gc.duration",
      "type": "metric",
      "brief": "Garbage collection duration.",
      "note": "The values can be retrieve from [`perf_hooks.PerformanceObserver(...).observe({ entryTypes: ['gc'] })`](https://nodejs.org/api/perf_hooks.html#performanceobserverobserveoptions)\n",
      "stability": "development",
      "attributes": [
        {
          "name": "v8js.gc.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "major",
                "value": "major",
                "brief": "Major (Mark Sweep Compact).",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "minor",
                "value": "minor",
                "brief": "Minor (Scavenge).",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "incremental",
                "value": "incremental",
                "brief": "Incremental (Incremental Marking).",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "weakcb",
                "value": "weakcb",
                "brief": "Weak Callbacks (Process Weak Callbacks).",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The type of garbage collection.",
          "requirement_level": "required",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "v8js.gc.duration",
      "instrument": "histogram",
      "unit": "s",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/v8js/metrics.yaml",
        "attributes": {
          "v8js.gc.type": {
            "source_group": "registry.v8js",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.v8js.memory.heap.limit",
      "type": "metric",
      "brief": "Total heap memory size pre-allocated.",
      "note": "The value can be retrieved from value `space_size` of [`v8.getHeapSpaceStatistics()`](https://nodejs.org/api/v8.html#v8getheapspacestatistics)\n",
      "stability": "development",
      "attributes": [
        {
          "name": "v8js.heap.space.name",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "new_space",
                "value": "new_space",
                "brief": "New memory space.",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "old_space",
                "value": "old_space",
                "brief": "Old memory space.",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "code_space",
                "value": "code_space",
                "brief": "Code memory space.",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "map_space",
                "value": "map_space",
                "brief": "Map memory space.",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "large_object_space",
                "value": "large_object_space",
                "brief": "Large object memory space.",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The name of the space type of heap memory.",
          "requirement_level": "required",
          "note": "Value can be retrieved from value `space_name` of [`v8.getHeapSpaceStatistics()`](https://nodejs.org/api/v8.html#v8getheapspacestatistics)\n",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "v8js.memory.heap.limit",
      "instrument": "updowncounter",
      "unit": "By",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/v8js/metrics.yaml",
        "attributes": {
          "v8js.heap.space.name": {
            "source_group": "registry.v8js",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.v8js.memory.heap.used",
      "type": "metric",
      "brief": "Heap Memory size allocated.",
      "note": "The value can be retrieved from value `space_used_size` of [`v8.getHeapSpaceStatistics()`](https://nodejs.org/api/v8.html#v8getheapspacestatistics)\n",
      "stability": "development",
      "attributes": [
        {
          "name": "v8js.heap.space.name",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "new_space",
                "value": "new_space",
                "brief": "New memory space.",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "old_space",
                "value": "old_space",
                "brief": "Old memory space.",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "code_space",
                "value": "code_space",
                "brief": "Code memory space.",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "map_space",
                "value": "map_space",
                "brief": "Map memory space.",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "large_object_space",
                "value": "large_object_space",
                "brief": "Large object memory space.",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The name of the space type of heap memory.",
          "requirement_level": "required",
          "note": "Value can be retrieved from value `space_name` of [`v8.getHeapSpaceStatistics()`](https://nodejs.org/api/v8.html#v8getheapspacestatistics)\n",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "v8js.memory.heap.used",
      "instrument": "updowncounter",
      "unit": "By",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/v8js/metrics.yaml",
        "attributes": {
          "v8js.heap.space.name": {
            "source_group": "registry.v8js",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.v8js.heap.space.available_size",
      "type": "metric",
      "brief": "Heap space available size.",
      "note": "Value can be retrieved from value `space_available_size` of [`v8.getHeapSpaceStatistics()`](https://nodejs.org/api/v8.html#v8getheapspacestatistics)\n",
      "stability": "development",
      "attributes": [
        {
          "name": "v8js.heap.space.name",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "new_space",
                "value": "new_space",
                "brief": "New memory space.",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "old_space",
                "value": "old_space",
                "brief": "Old memory space.",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "code_space",
                "value": "code_space",
                "brief": "Code memory space.",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "map_space",
                "value": "map_space",
                "brief": "Map memory space.",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "large_object_space",
                "value": "large_object_space",
                "brief": "Large object memory space.",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The name of the space type of heap memory.",
          "requirement_level": "required",
          "note": "Value can be retrieved from value `space_name` of [`v8.getHeapSpaceStatistics()`](https://nodejs.org/api/v8.html#v8getheapspacestatistics)\n",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "v8js.heap.space.available_size",
      "instrument": "updowncounter",
      "unit": "By",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/v8js/metrics.yaml",
        "attributes": {
          "v8js.heap.space.name": {
            "source_group": "registry.v8js",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.v8js.heap.space.physical_size",
      "type": "metric",
      "brief": "Committed size of a heap space.",
      "note": "Value can be retrieved from value `physical_space_size` of [`v8.getHeapSpaceStatistics()`](https://nodejs.org/api/v8.html#v8getheapspacestatistics)\n",
      "stability": "development",
      "attributes": [
        {
          "name": "v8js.heap.space.name",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "new_space",
                "value": "new_space",
                "brief": "New memory space.",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "old_space",
                "value": "old_space",
                "brief": "Old memory space.",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "code_space",
                "value": "code_space",
                "brief": "Code memory space.",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "map_space",
                "value": "map_space",
                "brief": "Map memory space.",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "large_object_space",
                "value": "large_object_space",
                "brief": "Large object memory space.",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The name of the space type of heap memory.",
          "requirement_level": "required",
          "note": "Value can be retrieved from value `space_name` of [`v8.getHeapSpaceStatistics()`](https://nodejs.org/api/v8.html#v8getheapspacestatistics)\n",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "v8js.heap.space.physical_size",
      "instrument": "updowncounter",
      "unit": "By",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/v8js/metrics.yaml",
        "attributes": {
          "v8js.heap.space.name": {
            "source_group": "registry.v8js",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "network-core",
      "type": "attribute_group",
      "brief": "These attributes may be used for any network related operation.\n",
      "attributes": [
        {
          "name": "network.local.address",
          "type": "string",
          "brief": "Local address of the network connection - IP address or Unix domain socket name.",
          "examples": [
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "recommended",
          "stability": "stable"
        },
        {
          "name": "network.local.port",
          "type": "int",
          "brief": "Local port number of the network connection.",
          "examples": [
            65123
          ],
          "requirement_level": "recommended",
          "stability": "stable"
        },
        {
          "name": "network.peer.address",
          "type": "string",
          "brief": "Peer address of the network connection - IP address or Unix domain socket name.",
          "examples": [
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "recommended",
          "stability": "stable"
        },
        {
          "name": "network.peer.port",
          "type": "int",
          "brief": "Peer port number of the network connection.",
          "examples": [
            65123
          ],
          "requirement_level": "recommended",
          "stability": "stable"
        },
        {
          "name": "network.protocol.name",
          "type": "string",
          "brief": "[OSI application layer](https://wikipedia.org/wiki/Application_layer) or non-OSI equivalent.",
          "examples": [
            "amqp",
            "http",
            "mqtt"
          ],
          "requirement_level": "recommended",
          "note": "The value SHOULD be normalized to lowercase.",
          "stability": "stable"
        },
        {
          "name": "network.protocol.version",
          "type": "string",
          "brief": "The actual version of the protocol used for network communication.",
          "examples": [
            "1.1",
            "2"
          ],
          "requirement_level": "recommended",
          "note": "If protocol version is subject to negotiation (for example using [ALPN](https://www.rfc-editor.org/rfc/rfc7301.html)), this attribute SHOULD be set to the negotiated version. If the actual protocol version is not known, this attribute SHOULD NOT be set.\n",
          "stability": "stable"
        },
        {
          "name": "network.transport",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "tcp",
                "value": "tcp",
                "brief": "TCP",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "udp",
                "value": "udp",
                "brief": "UDP",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "pipe",
                "value": "pipe",
                "brief": "Named or anonymous pipe.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "unix",
                "value": "unix",
                "brief": "Unix domain socket",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "quic",
                "value": "quic",
                "brief": "QUIC",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "[OSI transport layer](https://wikipedia.org/wiki/Transport_layer) or [inter-process communication method](https://wikipedia.org/wiki/Inter-process_communication).\n",
          "examples": [
            "tcp",
            "udp"
          ],
          "requirement_level": "recommended",
          "note": "The value SHOULD be normalized to lowercase.\n\nConsider always setting the transport when setting a port number, since\na port number is ambiguous without knowing the transport. For example\ndifferent processes could be listening on TCP port 12345 and UDP port 12345.\n",
          "stability": "stable"
        },
        {
          "name": "network.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "ipv4",
                "value": "ipv4",
                "brief": "IPv4",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "ipv6",
                "value": "ipv6",
                "brief": "IPv6",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "[OSI network layer](https://wikipedia.org/wiki/Network_layer) or non-OSI equivalent.",
          "examples": [
            "ipv4",
            "ipv6"
          ],
          "requirement_level": "recommended",
          "note": "The value SHOULD be normalized to lowercase.",
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/network/common.yaml",
        "attributes": {
          "network.local.address": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "network.local.port": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "network.peer.address": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "network.peer.port": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "network.protocol.name": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "network.protocol.version": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "network.transport": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "network.type": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "network-connection-and-carrier",
      "type": "attribute_group",
      "brief": "These attributes may be used for any network related operation.\n",
      "attributes": [
        {
          "name": "network.carrier.icc",
          "type": "string",
          "brief": "The ISO 3166-1 alpha-2 2-character country code associated with the mobile carrier network.",
          "examples": "DE",
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "network.carrier.mcc",
          "type": "string",
          "brief": "The mobile carrier country code.",
          "examples": "310",
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "network.carrier.mnc",
          "type": "string",
          "brief": "The mobile carrier network code.",
          "examples": "001",
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "network.carrier.name",
          "type": "string",
          "brief": "The name of the mobile carrier.",
          "examples": "sprint",
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "network.connection.subtype",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "gprs",
                "value": "gprs",
                "brief": "GPRS",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "edge",
                "value": "edge",
                "brief": "EDGE",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "umts",
                "value": "umts",
                "brief": "UMTS",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "cdma",
                "value": "cdma",
                "brief": "CDMA",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "evdo_0",
                "value": "evdo_0",
                "brief": "EVDO Rel. 0",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "evdo_a",
                "value": "evdo_a",
                "brief": "EVDO Rev. A",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "cdma2000_1xrtt",
                "value": "cdma2000_1xrtt",
                "brief": "CDMA2000 1XRTT",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "hsdpa",
                "value": "hsdpa",
                "brief": "HSDPA",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "hsupa",
                "value": "hsupa",
                "brief": "HSUPA",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "hspa",
                "value": "hspa",
                "brief": "HSPA",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "iden",
                "value": "iden",
                "brief": "IDEN",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "evdo_b",
                "value": "evdo_b",
                "brief": "EVDO Rev. B",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "lte",
                "value": "lte",
                "brief": "LTE",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "ehrpd",
                "value": "ehrpd",
                "brief": "EHRPD",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "hspap",
                "value": "hspap",
                "brief": "HSPAP",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "gsm",
                "value": "gsm",
                "brief": "GSM",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "td_scdma",
                "value": "td_scdma",
                "brief": "TD-SCDMA",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "iwlan",
                "value": "iwlan",
                "brief": "IWLAN",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "nr",
                "value": "nr",
                "brief": "5G NR (New Radio)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "nrnsa",
                "value": "nrnsa",
                "brief": "5G NRNSA (New Radio Non-Standalone)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "lte_ca",
                "value": "lte_ca",
                "brief": "LTE CA",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.",
          "examples": "LTE",
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "network.connection.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "wifi",
                "value": "wifi",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "wired",
                "value": "wired",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "cell",
                "value": "cell",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "unavailable",
                "value": "unavailable",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "unknown",
                "value": "unknown",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The internet connection type.",
          "examples": "wifi",
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/network/common.yaml",
        "attributes": {
          "network.carrier.icc": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "network.carrier.mcc": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "network.carrier.mnc": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "network.carrier.name": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "network.connection.subtype": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "network.connection.type": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "attributes.faas.common",
      "type": "attribute_group",
      "brief": "Describes FaaS attributes.",
      "attributes": [
        {
          "name": "faas.trigger",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "datasource",
                "value": "datasource",
                "brief": "A response to some data source operation such as a database or filesystem read/write",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "http",
                "value": "http",
                "brief": "To provide an answer to an inbound HTTP request",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "pubsub",
                "value": "pubsub",
                "brief": "A function is set to be executed when messages are sent to a messaging system",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "timer",
                "value": "timer",
                "brief": "A function is scheduled to be executed regularly",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "other",
                "value": "other",
                "brief": "If none of the others apply",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "Type of the trigger which caused this function invocation.\n",
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "faas.invoked_name",
          "type": "string",
          "brief": "The name of the invoked function.\n",
          "examples": "my-function",
          "requirement_level": "required",
          "note": "SHOULD be equal to the `faas.name` resource attribute of the invoked function.\n",
          "stability": "development"
        },
        {
          "name": "faas.invoked_provider",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "alibaba_cloud",
                "value": "alibaba_cloud",
                "brief": "Alibaba Cloud",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "aws",
                "value": "aws",
                "brief": "Amazon Web Services",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "azure",
                "value": "azure",
                "brief": "Microsoft Azure",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "gcp",
                "value": "gcp",
                "brief": "Google Cloud Platform",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "tencent_cloud",
                "value": "tencent_cloud",
                "brief": "Tencent Cloud",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The cloud provider of the invoked function.\n",
          "requirement_level": "required",
          "note": "SHOULD be equal to the `cloud.provider` resource attribute of the invoked function.\n",
          "stability": "development"
        },
        {
          "name": "faas.invoked_region",
          "type": "string",
          "brief": "The cloud region of the invoked function.\n",
          "examples": "eu-central-1",
          "requirement_level": {
            "conditionally_required": "For some cloud providers, like AWS or GCP, the region in which a function is hosted is essential to uniquely identify the function and also part of its endpoint. Since it's part of the endpoint being called, the region is always known to clients. In these cases, `faas.invoked_region` MUST be set accordingly. If the region is unknown to the client or not required for identifying the invoked function, setting `faas.invoked_region` is optional.\n"
          },
          "note": "SHOULD be equal to the `cloud.region` resource attribute of the invoked function.\n",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/faas/common.yaml",
        "attributes": {
          "faas.invoked_name": {
            "source_group": "registry.faas",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "faas.invoked_provider": {
            "source_group": "registry.faas",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "faas.invoked_region": {
            "source_group": "registry.faas",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "faas.trigger": {
            "source_group": "registry.faas",
            "inherited_fields": [
              "brief",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "registry.code.deprecated",
      "type": "attribute_group",
      "brief": "These deprecated attributes provide context about source code\n",
      "attributes": [
        {
          "name": "code.function",
          "type": "string",
          "brief": "Deprecated, use `code.function.name` instead\n",
          "examples": "serveRequest",
          "requirement_level": "recommended",
          "stability": "development",
          "deprecated": {
            "reason": "uncategorized",
            "note": "Replaced by `code.function.name`"
          }
        },
        {
          "name": "code.filepath",
          "type": "string",
          "brief": "Deprecated, use `code.file.path` instead\n",
          "examples": "/usr/local/MyApplication/content_root/app/index.php",
          "requirement_level": "recommended",
          "stability": "development",
          "deprecated": {
            "reason": "uncategorized",
            "note": "Replaced by `code.file.path`"
          }
        },
        {
          "name": "code.lineno",
          "type": "int",
          "brief": "Deprecated, use `code.line.number` instead\n",
          "examples": 42,
          "requirement_level": "recommended",
          "stability": "development",
          "deprecated": {
            "reason": "uncategorized",
            "note": "Replaced by `code.line.number`"
          }
        },
        {
          "name": "code.column",
          "type": "int",
          "brief": "Deprecated, use `code.column.number`\n",
          "examples": 16,
          "requirement_level": "recommended",
          "stability": "development",
          "deprecated": {
            "reason": "uncategorized",
            "note": "Replaced by `code.column.number`"
          }
        },
        {
          "name": "code.namespace",
          "type": "string",
          "brief": "Deprecated, namespace is now included into `code.function.name`\n",
          "examples": "com.example.MyHttpService",
          "requirement_level": "recommended",
          "stability": "development",
          "deprecated": {
            "reason": "uncategorized",
            "note": "Value should be included in `code.function.name` which is expected to be a fully-qualified name."
          }
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/code/registry-deprecated.yaml"
      },
      "display_name": "Deprecated Code Attributes"
    },
    {
      "id": "resource.otel.scope",
      "type": "resource",
      "brief": "Attributes used by non-OTLP exporters to represent OpenTelemetry Scope's concepts.",
      "stability": "development",
      "attributes": [
        {
          "name": "otel.scope.name",
          "type": "string",
          "brief": "The name of the instrumentation scope - (`InstrumentationScope.Name` in OTLP).",
          "examples": [
            "io.opentelemetry.contrib.mongodb"
          ],
          "requirement_level": "recommended",
          "stability": "stable"
        },
        {
          "name": "otel.scope.version",
          "type": "string",
          "brief": "The version of the instrumentation scope - (`InstrumentationScope.Version` in OTLP).",
          "examples": [
            "1.0.0"
          ],
          "requirement_level": "recommended",
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": "otel.scope",
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/otel/resources.yaml",
        "attributes": {
          "otel.scope.name": {
            "source_group": "registry.otel.scope",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "otel.scope.version": {
            "source_group": "registry.otel.scope",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "resource.gcp.gce",
      "type": "resource",
      "brief": "Resources used by Google Compute Engine (GCE).\n",
      "stability": "development",
      "attributes": [
        {
          "name": "gcp.gce.instance.name",
          "type": "string",
          "brief": "The instance name of a GCE instance. This is the value provided by `host.name`, the visible name of the instance in the Cloud Console UI, and the prefix for the default hostname of the instance as defined by the [default internal DNS name](https://cloud.google.com/compute/docs/internal-dns#instance-fully-qualified-domain-names).\n",
          "examples": [
            "instance-1",
            "my-vm-name"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "gcp.gce.instance.hostname",
          "type": "string",
          "brief": "The hostname of a GCE instance. This is the full value of the default or [custom hostname](https://cloud.google.com/compute/docs/instances/custom-hostname-vm).\n",
          "examples": [
            "my-host1234.example.com",
            "sample-vm.us-west1-b.c.my-project.internal"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": "gcp.gce",
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/gcp/gce-resources.yaml",
        "attributes": {
          "gcp.gce.instance.hostname": {
            "source_group": "registry.gcp.gce",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gcp.gce.instance.name": {
            "source_group": "registry.gcp.gce",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "peer",
      "type": "attribute_group",
      "brief": "Operations that access some remote service.",
      "attributes": [
        {
          "name": "peer.service",
          "type": "string",
          "brief": "The [`service.name`](/docs/resource/README.md#service) of the remote service. SHOULD be equal to the actual `service.name` resource attribute of the remote service if any.\n",
          "examples": "AuthTokenCache",
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/peer/common.yaml",
        "attributes": {
          "peer.service": {
            "source_group": "registry.peer",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "registry.dotnet",
      "type": "attribute_group",
      "brief": "This document defines .NET related attributes.\n",
      "attributes": [
        {
          "name": "dotnet.gc.heap.generation",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "gen0",
                "value": "gen0",
                "brief": "Generation 0",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "gen1",
                "value": "gen1",
                "brief": "Generation 1",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "gen2",
                "value": "gen2",
                "brief": "Generation 2",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "loh",
                "value": "loh",
                "brief": "Large Object Heap",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "poh",
                "value": "poh",
                "brief": "Pinned Object Heap",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Name of the garbage collector managed heap generation.",
          "examples": [
            "gen0",
            "gen1",
            "gen2"
          ],
          "requirement_level": "recommended",
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/dotnet/registry.yaml"
      },
      "display_name": ".NET Attributes"
    },
    {
      "id": "metric.system.uptime",
      "type": "metric",
      "brief": "The time the system has been running",
      "note": "Instrumentations SHOULD use a gauge with type `double` and measure uptime in seconds as a floating point number with the highest precision available.\nThe actual accuracy would depend on the instrumentation and operating system.\n",
      "stability": "development",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "system.uptime",
      "instrument": "gauge",
      "unit": "s",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/system/metrics.yaml"
      }
    },
    {
      "id": "metric.system.cpu.physical.count",
      "type": "metric",
      "brief": "Reports the number of actual physical processor cores on the hardware",
      "note": "Calculated by multiplying the number of sockets by the number of cores per socket",
      "stability": "development",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "system.cpu.physical.count",
      "instrument": "updowncounter",
      "unit": "{cpu}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/system/metrics.yaml"
      }
    },
    {
      "id": "metric.system.cpu.logical.count",
      "type": "metric",
      "brief": "Reports the number of logical (virtual) processor cores created by the operating system to manage multitasking",
      "note": "Calculated by multiplying the number of sockets by the number of cores per socket, and then by the number of threads per core",
      "stability": "development",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "system.cpu.logical.count",
      "instrument": "updowncounter",
      "unit": "{cpu}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/system/metrics.yaml"
      }
    },
    {
      "id": "metric.system.memory.usage",
      "type": "metric",
      "brief": "Reports memory in use by state.",
      "note": "The sum over all `system.memory.state` values SHOULD equal the total memory\navailable on the system, that is `system.memory.limit`.\n",
      "stability": "development",
      "attributes": [
        {
          "name": "system.memory.state",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "used",
                "value": "used",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "free",
                "value": "free",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "shared",
                "value": "shared",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": "Removed, report shared memory usage with `metric.system.memory.shared` metric"
              },
              {
                "id": "buffers",
                "value": "buffers",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "cached",
                "value": "cached",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The memory state",
          "examples": [
            "free",
            "cached"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "system.memory.usage",
      "instrument": "updowncounter",
      "unit": "By",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/system/metrics.yaml",
        "attributes": {
          "system.memory.state": {
            "source_group": "registry.system.memory",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "metric.system.memory.limit",
      "type": "metric",
      "brief": "Total memory available in the system.",
      "note": "Its value SHOULD equal the sum of `system.memory.state` over all states.\n",
      "stability": "development",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "system.memory.limit",
      "instrument": "updowncounter",
      "unit": "By",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/system/metrics.yaml"
      }
    },
    {
      "id": "metric.system.memory.shared",
      "type": "metric",
      "brief": "Shared memory used (mostly by tmpfs).",
      "note": "Equivalent of `shared` from [`free` command](https://man7.org/linux/man-pages/man1/free.1.html) or\n`Shmem` from [`/proc/meminfo`](https://man7.org/linux/man-pages/man5/proc.5.html)\"\n",
      "stability": "development",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "system.memory.shared",
      "instrument": "updowncounter",
      "unit": "By",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/system/metrics.yaml"
      }
    },
    {
      "id": "metric.system.memory.utilization",
      "type": "metric",
      "stability": "development",
      "attributes": [
        {
          "name": "system.memory.state",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "used",
                "value": "used",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "free",
                "value": "free",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "shared",
                "value": "shared",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": "Removed, report shared memory usage with `metric.system.memory.shared` metric"
              },
              {
                "id": "buffers",
                "value": "buffers",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "cached",
                "value": "cached",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The memory state",
          "examples": [
            "free",
            "cached"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "system.memory.utilization",
      "instrument": "gauge",
      "unit": "1",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/system/metrics.yaml",
        "attributes": {
          "system.memory.state": {
            "source_group": "registry.system.memory",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "metric.system.paging.usage",
      "type": "metric",
      "brief": "Unix swap or windows pagefile usage",
      "stability": "development",
      "attributes": [
        {
          "name": "system.paging.state",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "used",
                "value": "used",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "free",
                "value": "free",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The memory paging state",
          "examples": [
            "free"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "system.device",
          "type": "string",
          "brief": "Unique identifier for the device responsible for managing paging operations.",
          "examples": [
            "/dev/dm-0"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "system.paging.usage",
      "instrument": "updowncounter",
      "unit": "By",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/system/metrics.yaml",
        "attributes": {
          "system.device": {
            "source_group": "registry.system",
            "inherited_fields": [
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples"
            ]
          },
          "system.paging.state": {
            "source_group": "registry.system.paging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "metric.system.paging.utilization",
      "type": "metric",
      "stability": "development",
      "attributes": [
        {
          "name": "system.paging.state",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "used",
                "value": "used",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "free",
                "value": "free",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The memory paging state",
          "examples": [
            "free"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "system.device",
          "type": "string",
          "brief": "Unique identifier for the device responsible for managing paging operations.",
          "examples": [
            "/dev/dm-0"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "system.paging.utilization",
      "instrument": "gauge",
      "unit": "1",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/system/metrics.yaml",
        "attributes": {
          "system.device": {
            "source_group": "registry.system",
            "inherited_fields": [
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples"
            ]
          },
          "system.paging.state": {
            "source_group": "registry.system.paging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "metric.system.paging.faults",
      "type": "metric",
      "stability": "development",
      "attributes": [
        {
          "name": "system.paging.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "major",
                "value": "major",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "minor",
                "value": "minor",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The memory paging type",
          "examples": [
            "minor"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "system.paging.faults",
      "instrument": "counter",
      "unit": "{fault}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/system/metrics.yaml",
        "attributes": {
          "system.paging.type": {
            "source_group": "registry.system.paging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "metric.system.paging.operations",
      "type": "metric",
      "stability": "development",
      "attributes": [
        {
          "name": "system.paging.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "major",
                "value": "major",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "minor",
                "value": "minor",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The memory paging type",
          "examples": [
            "minor"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "system.paging.direction",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "in",
                "value": "in",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "out",
                "value": "out",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The paging access direction",
          "examples": [
            "in"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "system.paging.operations",
      "instrument": "counter",
      "unit": "{operation}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/system/metrics.yaml",
        "attributes": {
          "system.paging.direction": {
            "source_group": "registry.system.paging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "system.paging.type": {
            "source_group": "registry.system.paging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "metric.system.disk.io",
      "type": "metric",
      "stability": "development",
      "attributes": [
        {
          "name": "disk.io.direction",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "read",
                "value": "read",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "write",
                "value": "write",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The disk IO operation direction.",
          "examples": [
            "read"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "system.device",
          "type": "string",
          "brief": "The device identifier",
          "examples": [
            "(identifier)"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "system.disk.io",
      "instrument": "counter",
      "unit": "By",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/system/metrics.yaml",
        "attributes": {
          "disk.io.direction": {
            "source_group": "registry.disk",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "system.device": {
            "source_group": "registry.system",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "metric.system.disk.operations",
      "type": "metric",
      "stability": "development",
      "attributes": [
        {
          "name": "disk.io.direction",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "read",
                "value": "read",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "write",
                "value": "write",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The disk IO operation direction.",
          "examples": [
            "read"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "system.device",
          "type": "string",
          "brief": "The device identifier",
          "examples": [
            "(identifier)"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "system.disk.operations",
      "instrument": "counter",
      "unit": "{operation}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/system/metrics.yaml",
        "attributes": {
          "disk.io.direction": {
            "source_group": "registry.disk",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "system.device": {
            "source_group": "registry.system",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "metric.system.disk.io_time",
      "type": "metric",
      "brief": "Time disk spent activated",
      "note": "The real elapsed time (\"wall clock\") used in the I/O path (time from operations running in parallel are not counted). Measured as:\n\n- Linux: Field 13 from [procfs-diskstats](https://www.kernel.org/doc/Documentation/ABI/testing/procfs-diskstats)\n- Windows: The complement of\n  [\"Disk\\% Idle Time\"](https://learn.microsoft.com/archive/blogs/askcore/windows-performance-monitor-disk-counters-explained#windows-performance-monitor-disk-counters-explained)\n  performance counter: `uptime * (100 - \"Disk\\% Idle Time\") / 100`\n",
      "stability": "development",
      "attributes": [
        {
          "name": "system.device",
          "type": "string",
          "brief": "The device identifier",
          "examples": [
            "(identifier)"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "system.disk.io_time",
      "instrument": "counter",
      "unit": "s",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/system/metrics.yaml",
        "attributes": {
          "system.device": {
            "source_group": "registry.system",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "metric.system.disk.operation_time",
      "type": "metric",
      "brief": "Sum of the time each operation took to complete",
      "note": "Because it is the sum of time each request took, parallel-issued requests each contribute to make the count grow. Measured as:\n\n- Linux: Fields 7 & 11 from [procfs-diskstats](https://www.kernel.org/doc/Documentation/ABI/testing/procfs-diskstats)\n- Windows: \"Avg. Disk sec/Read\" perf counter multiplied by \"Disk Reads/sec\" perf counter (similar for Writes)\n",
      "stability": "development",
      "attributes": [
        {
          "name": "disk.io.direction",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "read",
                "value": "read",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "write",
                "value": "write",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The disk IO operation direction.",
          "examples": [
            "read"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "system.device",
          "type": "string",
          "brief": "The device identifier",
          "examples": [
            "(identifier)"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "system.disk.operation_time",
      "instrument": "counter",
      "unit": "s",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/system/metrics.yaml",
        "attributes": {
          "disk.io.direction": {
            "source_group": "registry.disk",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "system.device": {
            "source_group": "registry.system",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "metric.system.disk.merged",
      "type": "metric",
      "stability": "development",
      "attributes": [
        {
          "name": "disk.io.direction",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "read",
                "value": "read",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "write",
                "value": "write",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The disk IO operation direction.",
          "examples": [
            "read"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "system.device",
          "type": "string",
          "brief": "The device identifier",
          "examples": [
            "(identifier)"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "system.disk.merged",
      "instrument": "counter",
      "unit": "{operation}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/system/metrics.yaml",
        "attributes": {
          "disk.io.direction": {
            "source_group": "registry.disk",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "system.device": {
            "source_group": "registry.system",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "metric.system.disk.limit",
      "type": "metric",
      "brief": "The total storage capacity of the disk",
      "stability": "development",
      "attributes": [
        {
          "name": "system.device",
          "type": "string",
          "brief": "The device identifier",
          "examples": [
            "(identifier)"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "system.disk.limit",
      "instrument": "updowncounter",
      "unit": "By",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/system/metrics.yaml",
        "attributes": {
          "system.device": {
            "source_group": "registry.system",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "metric.system.filesystem.usage",
      "type": "metric",
      "brief": "Reports a filesystem's space usage across different states.",
      "note": "The sum of all `system.filesystem.usage` values over the different `system.filesystem.state` attributes\nSHOULD equal the total storage capacity of the filesystem, that is `system.filesystem.limit`.\n",
      "stability": "development",
      "attributes": [
        {
          "name": "system.filesystem.state",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "used",
                "value": "used",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "free",
                "value": "free",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "reserved",
                "value": "reserved",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The filesystem state",
          "examples": [
            "used"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "system.filesystem.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "fat32",
                "value": "fat32",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "exfat",
                "value": "exfat",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "ntfs",
                "value": "ntfs",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "refs",
                "value": "refs",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "hfsplus",
                "value": "hfsplus",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "ext4",
                "value": "ext4",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The filesystem type",
          "examples": [
            "ext4"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "system.filesystem.mode",
          "type": "string",
          "brief": "The filesystem mode",
          "examples": [
            "rw, ro"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "system.filesystem.mountpoint",
          "type": "string",
          "brief": "The filesystem mount path",
          "examples": [
            "/mnt/data"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "system.device",
          "type": "string",
          "brief": "Identifier for the device where the filesystem resides.",
          "examples": [
            "/dev/sda",
            "\\network-drive"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "system.filesystem.usage",
      "instrument": "updowncounter",
      "unit": "By",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/system/metrics.yaml",
        "attributes": {
          "system.device": {
            "source_group": "registry.system",
            "inherited_fields": [
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples"
            ]
          },
          "system.filesystem.mode": {
            "source_group": "registry.system.filesystem",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "system.filesystem.mountpoint": {
            "source_group": "registry.system.filesystem",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "system.filesystem.state": {
            "source_group": "registry.system.filesystem",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "system.filesystem.type": {
            "source_group": "registry.system.filesystem",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "metric.system.filesystem.utilization",
      "type": "metric",
      "stability": "development",
      "attributes": [
        {
          "name": "system.filesystem.state",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "used",
                "value": "used",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "free",
                "value": "free",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "reserved",
                "value": "reserved",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The filesystem state",
          "examples": [
            "used"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "system.filesystem.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "fat32",
                "value": "fat32",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "exfat",
                "value": "exfat",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "ntfs",
                "value": "ntfs",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "refs",
                "value": "refs",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "hfsplus",
                "value": "hfsplus",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "ext4",
                "value": "ext4",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The filesystem type",
          "examples": [
            "ext4"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "system.filesystem.mode",
          "type": "string",
          "brief": "The filesystem mode",
          "examples": [
            "rw, ro"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "system.filesystem.mountpoint",
          "type": "string",
          "brief": "The filesystem mount path",
          "examples": [
            "/mnt/data"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "system.device",
          "type": "string",
          "brief": "Identifier for the device where the filesystem resides.",
          "examples": [
            "/dev/sda",
            "\\network-drive"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "system.filesystem.utilization",
      "instrument": "gauge",
      "unit": "1",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/system/metrics.yaml",
        "attributes": {
          "system.device": {
            "source_group": "registry.system",
            "inherited_fields": [
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples"
            ]
          },
          "system.filesystem.mode": {
            "source_group": "registry.system.filesystem",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "system.filesystem.mountpoint": {
            "source_group": "registry.system.filesystem",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "system.filesystem.state": {
            "source_group": "registry.system.filesystem",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "system.filesystem.type": {
            "source_group": "registry.system.filesystem",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "metric.system.filesystem.limit",
      "type": "metric",
      "brief": "The total storage capacity of the filesystem",
      "stability": "development",
      "attributes": [
        {
          "name": "system.filesystem.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "fat32",
                "value": "fat32",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "exfat",
                "value": "exfat",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "ntfs",
                "value": "ntfs",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "refs",
                "value": "refs",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "hfsplus",
                "value": "hfsplus",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "ext4",
                "value": "ext4",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The filesystem type",
          "examples": [
            "ext4"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "system.filesystem.mode",
          "type": "string",
          "brief": "The filesystem mode",
          "examples": [
            "rw, ro"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "system.filesystem.mountpoint",
          "type": "string",
          "brief": "The filesystem mount path",
          "examples": [
            "/mnt/data"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "system.device",
          "type": "string",
          "brief": "Identifier for the device where the filesystem resides.",
          "examples": [
            "/dev/sda",
            "\\network-drive"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "system.filesystem.limit",
      "instrument": "updowncounter",
      "unit": "By",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/system/metrics.yaml",
        "attributes": {
          "system.device": {
            "source_group": "registry.system",
            "inherited_fields": [
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples"
            ]
          },
          "system.filesystem.mode": {
            "source_group": "registry.system.filesystem",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "system.filesystem.mountpoint": {
            "source_group": "registry.system.filesystem",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "system.filesystem.type": {
            "source_group": "registry.system.filesystem",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "metric.system.network.dropped",
      "type": "metric",
      "brief": "Count of packets that are dropped or discarded even though there was no error",
      "note": "Measured as:\n\n- Linux: the `drop` column in `/proc/dev/net` ([source](https://web.archive.org/web/20180321091318/http://www.onlamp.com/pub/a/linux/2000/11/16/LinuxAdmin.html))\n- Windows: [`InDiscards`/`OutDiscards`](https://docs.microsoft.com/windows/win32/api/netioapi/ns-netioapi-mib_if_row2)\n  from [`GetIfEntry2`](https://docs.microsoft.com/windows/win32/api/netioapi/nf-netioapi-getifentry2)\n",
      "stability": "development",
      "attributes": [
        {
          "name": "network.io.direction",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "transmit",
                "value": "transmit",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "receive",
                "value": "receive",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The network IO operation direction.",
          "examples": [
            "transmit"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "network.interface.name",
          "type": "string",
          "brief": "The network interface name.",
          "examples": [
            "lo",
            "eth0"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "system.network.dropped",
      "instrument": "counter",
      "unit": "{packet}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/system/metrics.yaml",
        "attributes": {
          "network.interface.name": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "network.io.direction": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "metric.system.network.packets",
      "type": "metric",
      "stability": "development",
      "attributes": [
        {
          "name": "system.device",
          "type": "string",
          "brief": "The device identifier",
          "examples": [
            "(identifier)"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "network.io.direction",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "transmit",
                "value": "transmit",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "receive",
                "value": "receive",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The network IO operation direction.",
          "examples": [
            "transmit"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "system.network.packets",
      "instrument": "counter",
      "unit": "{packet}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/system/metrics.yaml",
        "attributes": {
          "network.io.direction": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "system.device": {
            "source_group": "registry.system",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "metric.system.network.errors",
      "type": "metric",
      "brief": "Count of network errors detected",
      "note": "Measured as:\n\n- Linux: the `errs` column in `/proc/dev/net` ([source](https://web.archive.org/web/20180321091318/http://www.onlamp.com/pub/a/linux/2000/11/16/LinuxAdmin.html)).\n- Windows: [`InErrors`/`OutErrors`](https://docs.microsoft.com/windows/win32/api/netioapi/ns-netioapi-mib_if_row2)\n  from [`GetIfEntry2`](https://docs.microsoft.com/windows/win32/api/netioapi/nf-netioapi-getifentry2).\n",
      "stability": "development",
      "attributes": [
        {
          "name": "network.io.direction",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "transmit",
                "value": "transmit",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "receive",
                "value": "receive",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The network IO operation direction.",
          "examples": [
            "transmit"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "network.interface.name",
          "type": "string",
          "brief": "The network interface name.",
          "examples": [
            "lo",
            "eth0"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "system.network.errors",
      "instrument": "counter",
      "unit": "{error}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/system/metrics.yaml",
        "attributes": {
          "network.interface.name": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "network.io.direction": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "metric.system.network.io",
      "type": "metric",
      "stability": "development",
      "attributes": [
        {
          "name": "network.io.direction",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "transmit",
                "value": "transmit",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "receive",
                "value": "receive",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The network IO operation direction.",
          "examples": [
            "transmit"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "network.interface.name",
          "type": "string",
          "brief": "The network interface name.",
          "examples": [
            "lo",
            "eth0"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "system.network.io",
      "instrument": "counter",
      "unit": "By",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/system/metrics.yaml",
        "attributes": {
          "network.interface.name": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "network.io.direction": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "metric.system.network.connections",
      "type": "metric",
      "stability": "development",
      "attributes": [
        {
          "name": "network.transport",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "tcp",
                "value": "tcp",
                "brief": "TCP",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "udp",
                "value": "udp",
                "brief": "UDP",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "pipe",
                "value": "pipe",
                "brief": "Named or anonymous pipe.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "unix",
                "value": "unix",
                "brief": "Unix domain socket",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "quic",
                "value": "quic",
                "brief": "QUIC",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "[OSI transport layer](https://wikipedia.org/wiki/Transport_layer) or [inter-process communication method](https://wikipedia.org/wiki/Inter-process_communication).\n",
          "examples": [
            "tcp",
            "udp"
          ],
          "requirement_level": "recommended",
          "note": "The value SHOULD be normalized to lowercase.\n\nConsider always setting the transport when setting a port number, since\na port number is ambiguous without knowing the transport. For example\ndifferent processes could be listening on TCP port 12345 and UDP port 12345.\n",
          "stability": "stable"
        },
        {
          "name": "network.interface.name",
          "type": "string",
          "brief": "The network interface name.",
          "examples": [
            "lo",
            "eth0"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "network.connection.state",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "closed",
                "value": "closed",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "close_wait",
                "value": "close_wait",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "closing",
                "value": "closing",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "established",
                "value": "established",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "fin_wait_1",
                "value": "fin_wait_1",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "fin_wait_2",
                "value": "fin_wait_2",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "last_ack",
                "value": "last_ack",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "listen",
                "value": "listen",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "syn_received",
                "value": "syn_received",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "syn_sent",
                "value": "syn_sent",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "time_wait",
                "value": "time_wait",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The state of network connection",
          "examples": [
            "close_wait"
          ],
          "requirement_level": "recommended",
          "note": "Connection states are defined as part of the [rfc9293](https://datatracker.ietf.org/doc/html/rfc9293#section-3.3.2)",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "system.network.connections",
      "instrument": "updowncounter",
      "unit": "{connection}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/system/metrics.yaml",
        "attributes": {
          "network.connection.state": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "network.interface.name": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "network.transport": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "metric.system.process.count",
      "type": "metric",
      "brief": "Total number of processes in each state",
      "stability": "development",
      "attributes": [
        {
          "name": "system.process.status",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "running",
                "value": "running",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "sleeping",
                "value": "sleeping",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "stopped",
                "value": "stopped",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "defunct",
                "value": "defunct",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The process state, e.g., [Linux Process State Codes](https://man7.org/linux/man-pages/man1/ps.1.html#PROCESS_STATE_CODES)\n",
          "examples": [
            "running"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "system.process.count",
      "instrument": "updowncounter",
      "unit": "{process}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/system/metrics.yaml",
        "attributes": {
          "system.process.status": {
            "source_group": "registry.system.process",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "metric.system.process.created",
      "type": "metric",
      "brief": "Total number of processes created over uptime of the host",
      "stability": "development",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "system.process.created",
      "instrument": "counter",
      "unit": "{process}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/system/metrics.yaml"
      }
    },
    {
      "id": "metric.system.linux.memory.available",
      "type": "metric",
      "brief": "An estimate of how much memory is available for starting new applications, without causing swapping",
      "note": "This is an alternative to `system.memory.usage` metric with `state=free`.\nLinux starting from 3.14 exports \"available\" memory. It takes \"free\" memory as a baseline, and then factors in kernel-specific values.\nThis is supposed to be more accurate than just \"free\" memory.\nFor reference, see the calculations [here](https://superuser.com/a/980821).\nSee also `MemAvailable` in [/proc/meminfo](https://man7.org/linux/man-pages/man5/proc.5.html).\n",
      "stability": "development",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "system.linux.memory.available",
      "instrument": "updowncounter",
      "unit": "By",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/system/metrics.yaml"
      }
    },
    {
      "id": "metric.system.linux.memory.slab.usage",
      "type": "metric",
      "brief": "Reports the memory used by the Linux kernel for managing caches of frequently used objects.",
      "note": "The sum over the `reclaimable` and `unreclaimable` state values in `linux.memory.slab.usage` SHOULD be equal to the total slab memory available on the system.\nNote that the total slab memory is not constant and may vary over time.\nSee also the [Slab allocator](https://blogs.oracle.com/linux/post/understanding-linux-kernel-memory-statistics) and `Slab` in [/proc/meminfo](https://man7.org/linux/man-pages/man5/proc.5.html).\n",
      "stability": "development",
      "attributes": [
        {
          "name": "linux.memory.slab.state",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "reclaimable",
                "value": "reclaimable",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "unreclaimable",
                "value": "unreclaimable",
                "brief": null,
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The Linux Slab memory state",
          "examples": [
            "reclaimable",
            "unreclaimable"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "system.linux.memory.slab.usage",
      "instrument": "updowncounter",
      "unit": "By",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/system/metrics.yaml",
        "attributes": {
          "linux.memory.slab.state": {
            "source_group": "registry.linux.memory",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "span.graphql.server",
      "type": "span",
      "brief": "This document defines semantic conventions to apply when instrumenting the GraphQL implementation. They map GraphQL operations to attributes on a Span.\n",
      "stability": "development",
      "attributes": [
        {
          "name": "graphql.operation.name",
          "type": "string",
          "brief": "The name of the operation being executed.",
          "examples": "findBookById",
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "graphql.operation.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "query",
                "value": "query",
                "brief": "GraphQL query",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "mutation",
                "value": "mutation",
                "brief": "GraphQL mutation",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "subscription",
                "value": "subscription",
                "brief": "GraphQL subscription",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The type of the operation being executed.",
          "examples": [
            "query",
            "mutation",
            "subscription"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "graphql.document",
          "type": "string",
          "brief": "The GraphQL document being executed.",
          "examples": "query findBookById { bookById(id: ?) { name } }",
          "requirement_level": "recommended",
          "note": "The value may be sanitized to exclude sensitive information.",
          "stability": "development"
        }
      ],
      "span_kind": "server",
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/graphql/spans.yml",
        "attributes": {
          "graphql.document": {
            "source_group": "registry.graphql",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "graphql.operation.name": {
            "source_group": "registry.graphql",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "graphql.operation.type": {
            "source_group": "registry.graphql",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "registry.deployment.deprecated",
      "type": "attribute_group",
      "brief": "\"Describes deprecated deployment attributes.\"\n",
      "attributes": [
        {
          "name": "deployment.environment",
          "type": "string",
          "brief": "'Deprecated, use `deployment.environment.name` instead.'\n",
          "examples": [
            "staging",
            "production"
          ],
          "requirement_level": "recommended",
          "stability": "development",
          "deprecated": {
            "reason": "uncategorized",
            "note": "Deprecated, use `deployment.environment.name` instead."
          }
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/deployment/deprecated/registry-deprecated.yaml"
      }
    },
    {
      "id": "common.kestrel.attributes",
      "type": "attribute_group",
      "brief": "Common kestrel attributes",
      "attributes": [
        {
          "name": "server.address",
          "type": "string",
          "brief": "Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "recommended",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": "recommended",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "network.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "ipv4",
                "value": "ipv4",
                "brief": "IPv4",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "ipv6",
                "value": "ipv6",
                "brief": "IPv6",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "[OSI network layer](https://wikipedia.org/wiki/Network_layer) or non-OSI equivalent.",
          "examples": [
            "ipv4",
            "ipv6"
          ],
          "requirement_level": {
            "recommended": "if the transport is `tcp` or `udp`"
          },
          "note": "The value SHOULD be normalized to lowercase.",
          "stability": "stable"
        },
        {
          "name": "network.transport",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "tcp",
                "value": "tcp",
                "brief": "TCP",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "udp",
                "value": "udp",
                "brief": "UDP",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "pipe",
                "value": "pipe",
                "brief": "Named or anonymous pipe.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "unix",
                "value": "unix",
                "brief": "Unix domain socket",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "quic",
                "value": "quic",
                "brief": "QUIC",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "[OSI transport layer](https://wikipedia.org/wiki/Transport_layer) or [inter-process communication method](https://wikipedia.org/wiki/Inter-process_communication).\n",
          "examples": [
            "tcp",
            "unix"
          ],
          "requirement_level": "recommended",
          "note": "The value SHOULD be normalized to lowercase.\n\nConsider always setting the transport when setting a port number, since\na port number is ambiguous without knowing the transport. For example\ndifferent processes could be listening on TCP port 12345 and UDP port 12345.\n",
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/kestrel/metrics.yaml",
        "attributes": {
          "network.transport": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples"
            ]
          },
          "network.type": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "metric.kestrel.active_connections",
      "type": "metric",
      "brief": "Number of connections that are currently active on the server.",
      "note": "Meter name: `Microsoft.AspNetCore.Server.Kestrel`; Added in: ASP.NET Core 8.0\n",
      "stability": "stable",
      "attributes": [
        {
          "name": "server.address",
          "type": "string",
          "brief": "Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "recommended",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": "recommended",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "network.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "ipv4",
                "value": "ipv4",
                "brief": "IPv4",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "ipv6",
                "value": "ipv6",
                "brief": "IPv6",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "[OSI network layer](https://wikipedia.org/wiki/Network_layer) or non-OSI equivalent.",
          "examples": [
            "ipv4",
            "ipv6"
          ],
          "requirement_level": {
            "recommended": "if the transport is `tcp` or `udp`"
          },
          "note": "The value SHOULD be normalized to lowercase.",
          "stability": "stable"
        },
        {
          "name": "network.transport",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "tcp",
                "value": "tcp",
                "brief": "TCP",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "udp",
                "value": "udp",
                "brief": "UDP",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "pipe",
                "value": "pipe",
                "brief": "Named or anonymous pipe.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "unix",
                "value": "unix",
                "brief": "Unix domain socket",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "quic",
                "value": "quic",
                "brief": "QUIC",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "[OSI transport layer](https://wikipedia.org/wiki/Transport_layer) or [inter-process communication method](https://wikipedia.org/wiki/Inter-process_communication).\n",
          "examples": [
            "tcp",
            "unix"
          ],
          "requirement_level": "recommended",
          "note": "The value SHOULD be normalized to lowercase.\n\nConsider always setting the transport when setting a port number, since\na port number is ambiguous without knowing the transport. For example\ndifferent processes could be listening on TCP port 12345 and UDP port 12345.\n",
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "kestrel.active_connections",
      "instrument": "updowncounter",
      "unit": "{connection}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/kestrel/metrics.yaml",
        "attributes": {
          "network.transport": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples"
            ]
          },
          "network.type": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "metric.kestrel.connection.duration",
      "type": "metric",
      "brief": "The duration of connections on the server.",
      "note": "Meter name: `Microsoft.AspNetCore.Server.Kestrel`; Added in: ASP.NET Core 8.0\n",
      "stability": "stable",
      "attributes": [
        {
          "name": "tls.protocol.version",
          "type": "string",
          "brief": "Numeric part of the version parsed from the original string of the negotiated [SSL/TLS protocol version](https://docs.openssl.org/1.1.1/man3/SSL_get_version/#return-values)\n",
          "examples": [
            "1.2",
            "3"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "server.address",
          "type": "string",
          "brief": "Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "recommended",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": "recommended",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "network.protocol.version",
          "type": "string",
          "brief": "The actual version of the protocol used for network communication.",
          "examples": [
            "1.1",
            "2"
          ],
          "requirement_level": "recommended",
          "note": "If protocol version is subject to negotiation (for example using [ALPN](https://www.rfc-editor.org/rfc/rfc7301.html)), this attribute SHOULD be set to the negotiated version. If the actual protocol version is not known, this attribute SHOULD NOT be set.\n",
          "stability": "stable"
        },
        {
          "name": "network.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "ipv4",
                "value": "ipv4",
                "brief": "IPv4",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "ipv6",
                "value": "ipv6",
                "brief": "IPv6",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "[OSI network layer](https://wikipedia.org/wiki/Network_layer) or non-OSI equivalent.",
          "examples": [
            "ipv4",
            "ipv6"
          ],
          "requirement_level": {
            "recommended": "if the transport is `tcp` or `udp`"
          },
          "note": "The value SHOULD be normalized to lowercase.",
          "stability": "stable"
        },
        {
          "name": "network.transport",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "tcp",
                "value": "tcp",
                "brief": "TCP",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "udp",
                "value": "udp",
                "brief": "UDP",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "pipe",
                "value": "pipe",
                "brief": "Named or anonymous pipe.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "unix",
                "value": "unix",
                "brief": "Unix domain socket",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "quic",
                "value": "quic",
                "brief": "QUIC",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "[OSI transport layer](https://wikipedia.org/wiki/Transport_layer) or [inter-process communication method](https://wikipedia.org/wiki/Inter-process_communication).\n",
          "examples": [
            "tcp",
            "unix"
          ],
          "requirement_level": "recommended",
          "note": "The value SHOULD be normalized to lowercase.\n\nConsider always setting the transport when setting a port number, since\na port number is ambiguous without knowing the transport. For example\ndifferent processes could be listening on TCP port 12345 and UDP port 12345.\n",
          "stability": "stable"
        },
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "The full name of exception type.",
          "examples": [
            "System.OperationCanceledException",
            "Contoso.MyException"
          ],
          "requirement_level": {
            "conditionally_required": "if and only if an error has occurred."
          },
          "note": "Starting from .NET 9, Kestrel `kestrel.connection.duration` metric reports\nthe following errors types when a corresponding error occurs:\n\n| Value  | Description | Stability |\n|---|---|---|\n| `aborted_by_app` | The HTTP/1.1 connection was aborted when app code aborted an HTTP request with `HttpContext.Abort()`. |\n| `app_shutdown_timeout` | The connection was aborted during app shutdown. During shutdown, the server stops accepting new connections and HTTP requests, and it is given time for active requests to complete. If the app shutdown timeout is exceeded, all remaining connections are aborted. |\n| `closed_critical_stream` | A critical control stream for an HTTP/3 connection was closed. |\n| `connection_reset` | The connection was reset while there were active HTTP/2 or HTTP/3 streams on the connection. |\n| `error_after_starting_response` | An error such as an unhandled application exception or invalid request body occurred after the response was started, causing an abort of the HTTP/1.1 connection. |\n| `error_reading_headers` | An error occurred when decoding HPACK headers in an HTTP/2 `HEADERS` frame. |\n| `error_writing_headers` | An error occurred when encoding HPACK headers in an HTTP/2 `HEADERS` frame. |\n| `flow_control_queue_size_exceeded` | The connection exceeded the outgoing flow control maximum queue size and was closed with `INTERNAL_ERROR`. This can be caused by an excessive number of HTTP/2 stream resets. For more information, see [Microsoft Security Advisory CVE-2023-44487](https://github.com/dotnet/runtime/issues/93303). |\n| `flow_control_window_exceeded` | The client sent more data than allowed by the current flow-control window. |\n| `frame_after_stream_close` | An HTTP/2 frame was received on a closed stream. |\n| `insufficient_tls_version` | The connection doesn't have TLS 1.2 or greater, as required by HTTP/2. |\n| `invalid_body_reader_state` | An error occurred when draining the request body, aborting the HTTP/1.1 connection. This could be caused by app code reading the request body and missing a call to `PipeReader.AdvanceTo` in a finally block. |\n| `invalid_data_padding` | An HTTP/2 `HEADER` or `DATA` frame has an invalid amount of padding. |\n| `invalid_frame_length` | An HTTP/2 frame was received with an invalid frame payload length. The frame could contain a payload that is not valid for the type, or a `DATA` frame payload does not match the length specified in the frame header. |\n| `invalid_handshake` | An invalid HTTP/2 handshake was received. |\n| `invalid_http_version` | The connection received an HTTP request with the wrong version. For example, a browser sends an HTTP/1.1 request to a plain-text HTTP/2 connection. |\n| `invalid_request_headers` | The HTTP request contains invalid headers. This error can occur in a number of scenarios: a header might not be allowed by the HTTP protocol, such as a pseudo-header in the `HEADERS` frame of an HTTP/2 request. A header could also have an invalid value, such as a non-integer `content-length`, or a header name or value might contain invalid characters. |\n| `invalid_request_line` | The first line of an HTTP/1.1 request was invalid, potentially due to invalid content or exceeding the allowed limit. Configured by `KestrelServerLimits.MaxRequestLineSize`. |\n| `invalid_settings` | The connection received an HTTP/2 or HTTP/3 `SETTINGS` frame with invalid settings. |\n| `invalid_stream_id` | An HTTP/2 stream with an invalid stream ID was received. |\n| `invalid_window_update_size` | The server received an HTTP/2 `WINDOW_UPDATE` frame with a zero increment, or an increment that caused a flow-control window to exceed the maximum size. |\n| `io_error` | An `IOException` occurred while reading or writing HTTP/2 or HTTP/3 connection data. |\n| `keep_alive_timeout` | There was no activity on the connection, and the keep-alive timeout configured by `KestrelServerLimits.KeepAliveTimeout` was exceeded. |\n| `max_concurrent_connections_exceeded` | The connection exceeded the maximum concurrent connection limit. Configured by `KestrelServerLimits.MaxConcurrentConnections`. |\n| `max_frame_length_exceeded` | The connection received an HTTP/2 frame that exceeded the size limit specified by `Http2Limits.MaxFrameSize`. |\n| `max_request_body_size_exceeded` | The HTTP request body exceeded the maximum request body size limit. Configured by `KestrelServerLimits.MaxRequestBodySize`. |\n| `max_request_header_count_exceeded` | The HTTP request headers exceeded the maximum count limit. Configured by `KestrelServerLimits.MaxRequestHeaderCount`. |\n| `max_request_headers_total_size_exceeded` | The HTTP request headers exceeded the maximum total size limit. Configured by `KestrelServerLimits.MaxRequestHeadersTotalSize`. |\n| `min_request_body_data_rate` | Reading the request body timed out due to data arriving too slowly. Configured by `KestrelServerLimits.MinRequestBodyDataRate`. |\n| `min_response_data_rate` | Writing the response timed out because the client did not read it at the specified minimum data rate. Configured by `KestrelServerLimits.MinResponseDataRate`. |\n| `missing_stream_end` | The connection received an HTTP/2 `HEADERS` frame for trailers without a stream end flag. |\n| `output_queue_size_exceeded` | The connection exceeded the output queue size and was closed with `INTERNAL_ERROR`. This can be caused by an excessive number of HTTP/2 stream resets. For more information, see [Microsoft Security Advisory CVE-2023-44487](https://github.com/dotnet/runtime/issues/93303). |\n| `request_headers_timeout` | Request headers timed out while waiting for headers to be received after the request started. Configured by `KestrelServerLimits.RequestHeadersTimeout`. |\n| `response_content_length_mismatch` | The HTTP response body sent data that didn't match the response's `content-length` header. |\n| `server_timeout` | The connection timed out with the `IConnectionTimeoutFeature`. |\n| `stream_creation_error` | The HTTP/3 connection received a stream that it wouldn't accept. For example, the client created duplicate control streams. |\n| `stream_reset_limit_exceeded` | The connection received an excessive number of HTTP/2 stream resets and was closed with `ENHANCE_YOUR_CALM`. For more information, see [Microsoft Security Advisory CVE-2023-44487](https://github.com/dotnet/runtime/issues/93303). |\n| `stream_self_dependency` | The connection received an HTTP/2 frame that caused a frame to depend on itself. |\n| `tls_handshake_failed` | An error occurred during the TLS handshake for a connection. Only reported for HTTP/1.1 and HTTP/2 connections. The TLS handshake for HTTP/3 is internal to QUIC transport. ![Development](https://img.shields.io/badge/-development-blue) |\n| `tls_not_supported` | A TLS handshake was received by an endpoint that isn't configured to support TLS. |\n| `unexpected_end_of_request_content` | The HTTP/1.1 request body ended before the data specified by the `content-length` header or chunked transfer encoding mechanism was received. |\n| `unexpected_frame` | An unexpected HTTP/2 or HTTP/3 frame type was received. The frame type is either unknown, unsupported, or invalid for the current stream state. |\n| `unknown_stream` | An HTTP/2 frame was received on an unknown stream. |\n| `write_canceled` | The cancellation of a response body write aborted the HTTP/1.1 connection. |\n\nIn other cases, `error.type` contains the fully qualified type name of the exception.\n",
          "stability": "stable"
        },
        {
          "name": "network.protocol.name",
          "type": "string",
          "brief": "[OSI application layer](https://wikipedia.org/wiki/Application_layer) or non-OSI equivalent.",
          "examples": [
            "http",
            "web_sockets"
          ],
          "requirement_level": "recommended",
          "note": "The value SHOULD be normalized to lowercase.",
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "kestrel.connection.duration",
      "instrument": "histogram",
      "unit": "s",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/kestrel/metrics.yaml",
        "attributes": {
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level"
            ]
          },
          "network.protocol.name": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples"
            ]
          },
          "network.protocol.version": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples"
            ]
          },
          "network.transport": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples"
            ]
          },
          "network.type": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "tls.protocol.version": {
            "source_group": "registry.tls",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "metric.kestrel.rejected_connections",
      "type": "metric",
      "brief": "Number of connections rejected by the server.",
      "note": "Connections are rejected when the currently active count exceeds the value configured with `MaxConcurrentConnections`.\nMeter name: `Microsoft.AspNetCore.Server.Kestrel`; Added in: ASP.NET Core 8.0\n",
      "stability": "stable",
      "attributes": [
        {
          "name": "server.address",
          "type": "string",
          "brief": "Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "recommended",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": "recommended",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "network.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "ipv4",
                "value": "ipv4",
                "brief": "IPv4",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "ipv6",
                "value": "ipv6",
                "brief": "IPv6",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "[OSI network layer](https://wikipedia.org/wiki/Network_layer) or non-OSI equivalent.",
          "examples": [
            "ipv4",
            "ipv6"
          ],
          "requirement_level": {
            "recommended": "if the transport is `tcp` or `udp`"
          },
          "note": "The value SHOULD be normalized to lowercase.",
          "stability": "stable"
        },
        {
          "name": "network.transport",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "tcp",
                "value": "tcp",
                "brief": "TCP",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "udp",
                "value": "udp",
                "brief": "UDP",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "pipe",
                "value": "pipe",
                "brief": "Named or anonymous pipe.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "unix",
                "value": "unix",
                "brief": "Unix domain socket",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "quic",
                "value": "quic",
                "brief": "QUIC",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "[OSI transport layer](https://wikipedia.org/wiki/Transport_layer) or [inter-process communication method](https://wikipedia.org/wiki/Inter-process_communication).\n",
          "examples": [
            "tcp",
            "unix"
          ],
          "requirement_level": "recommended",
          "note": "The value SHOULD be normalized to lowercase.\n\nConsider always setting the transport when setting a port number, since\na port number is ambiguous without knowing the transport. For example\ndifferent processes could be listening on TCP port 12345 and UDP port 12345.\n",
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "kestrel.rejected_connections",
      "instrument": "counter",
      "unit": "{connection}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/kestrel/metrics.yaml",
        "attributes": {
          "network.transport": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples"
            ]
          },
          "network.type": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "metric.kestrel.queued_connections",
      "type": "metric",
      "brief": "Number of connections that are currently queued and are waiting to start.",
      "note": "Meter name: `Microsoft.AspNetCore.Server.Kestrel`; Added in: ASP.NET Core 8.0\n",
      "stability": "stable",
      "attributes": [
        {
          "name": "server.address",
          "type": "string",
          "brief": "Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "recommended",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": "recommended",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "network.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "ipv4",
                "value": "ipv4",
                "brief": "IPv4",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "ipv6",
                "value": "ipv6",
                "brief": "IPv6",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "[OSI network layer](https://wikipedia.org/wiki/Network_layer) or non-OSI equivalent.",
          "examples": [
            "ipv4",
            "ipv6"
          ],
          "requirement_level": {
            "recommended": "if the transport is `tcp` or `udp`"
          },
          "note": "The value SHOULD be normalized to lowercase.",
          "stability": "stable"
        },
        {
          "name": "network.transport",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "tcp",
                "value": "tcp",
                "brief": "TCP",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "udp",
                "value": "udp",
                "brief": "UDP",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "pipe",
                "value": "pipe",
                "brief": "Named or anonymous pipe.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "unix",
                "value": "unix",
                "brief": "Unix domain socket",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "quic",
                "value": "quic",
                "brief": "QUIC",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "[OSI transport layer](https://wikipedia.org/wiki/Transport_layer) or [inter-process communication method](https://wikipedia.org/wiki/Inter-process_communication).\n",
          "examples": [
            "tcp",
            "unix"
          ],
          "requirement_level": "recommended",
          "note": "The value SHOULD be normalized to lowercase.\n\nConsider always setting the transport when setting a port number, since\na port number is ambiguous without knowing the transport. For example\ndifferent processes could be listening on TCP port 12345 and UDP port 12345.\n",
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "kestrel.queued_connections",
      "instrument": "updowncounter",
      "unit": "{connection}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/kestrel/metrics.yaml",
        "attributes": {
          "network.transport": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples"
            ]
          },
          "network.type": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "metric.kestrel.queued_requests",
      "type": "metric",
      "brief": "Number of HTTP requests on multiplexed connections (HTTP/2 and HTTP/3) that are currently queued and are waiting to start.",
      "note": "Meter name: `Microsoft.AspNetCore.Server.Kestrel`; Added in: ASP.NET Core 8.0\n",
      "stability": "stable",
      "attributes": [
        {
          "name": "server.address",
          "type": "string",
          "brief": "Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "recommended",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": "recommended",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "network.protocol.version",
          "type": "string",
          "brief": "The actual version of the protocol used for network communication.",
          "examples": [
            "1.1",
            "2"
          ],
          "requirement_level": "recommended",
          "note": "If protocol version is subject to negotiation (for example using [ALPN](https://www.rfc-editor.org/rfc/rfc7301.html)), this attribute SHOULD be set to the negotiated version. If the actual protocol version is not known, this attribute SHOULD NOT be set.\n",
          "stability": "stable"
        },
        {
          "name": "network.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "ipv4",
                "value": "ipv4",
                "brief": "IPv4",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "ipv6",
                "value": "ipv6",
                "brief": "IPv6",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "[OSI network layer](https://wikipedia.org/wiki/Network_layer) or non-OSI equivalent.",
          "examples": [
            "ipv4",
            "ipv6"
          ],
          "requirement_level": {
            "recommended": "if the transport is `tcp` or `udp`"
          },
          "note": "The value SHOULD be normalized to lowercase.",
          "stability": "stable"
        },
        {
          "name": "network.transport",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "tcp",
                "value": "tcp",
                "brief": "TCP",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "udp",
                "value": "udp",
                "brief": "UDP",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "pipe",
                "value": "pipe",
                "brief": "Named or anonymous pipe.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "unix",
                "value": "unix",
                "brief": "Unix domain socket",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "quic",
                "value": "quic",
                "brief": "QUIC",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "[OSI transport layer](https://wikipedia.org/wiki/Transport_layer) or [inter-process communication method](https://wikipedia.org/wiki/Inter-process_communication).\n",
          "examples": [
            "tcp",
            "unix"
          ],
          "requirement_level": "recommended",
          "note": "The value SHOULD be normalized to lowercase.\n\nConsider always setting the transport when setting a port number, since\na port number is ambiguous without knowing the transport. For example\ndifferent processes could be listening on TCP port 12345 and UDP port 12345.\n",
          "stability": "stable"
        },
        {
          "name": "network.protocol.name",
          "type": "string",
          "brief": "[OSI application layer](https://wikipedia.org/wiki/Application_layer) or non-OSI equivalent.",
          "examples": [
            "http",
            "web_sockets"
          ],
          "requirement_level": "recommended",
          "note": "The value SHOULD be normalized to lowercase.",
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "kestrel.queued_requests",
      "instrument": "updowncounter",
      "unit": "{request}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/kestrel/metrics.yaml",
        "attributes": {
          "network.protocol.name": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples"
            ]
          },
          "network.protocol.version": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples"
            ]
          },
          "network.transport": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples"
            ]
          },
          "network.type": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "metric.kestrel.upgraded_connections",
      "type": "metric",
      "brief": "Number of connections that are currently upgraded (WebSockets). .",
      "note": "The counter only tracks HTTP/1.1 connections.\n\nMeter name: `Microsoft.AspNetCore.Server.Kestrel`; Added in: ASP.NET Core 8.0\n",
      "stability": "stable",
      "attributes": [
        {
          "name": "server.address",
          "type": "string",
          "brief": "Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "recommended",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": "recommended",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "network.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "ipv4",
                "value": "ipv4",
                "brief": "IPv4",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "ipv6",
                "value": "ipv6",
                "brief": "IPv6",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "[OSI network layer](https://wikipedia.org/wiki/Network_layer) or non-OSI equivalent.",
          "examples": [
            "ipv4",
            "ipv6"
          ],
          "requirement_level": {
            "recommended": "if the transport is `tcp` or `udp`"
          },
          "note": "The value SHOULD be normalized to lowercase.",
          "stability": "stable"
        },
        {
          "name": "network.transport",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "tcp",
                "value": "tcp",
                "brief": "TCP",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "udp",
                "value": "udp",
                "brief": "UDP",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "pipe",
                "value": "pipe",
                "brief": "Named or anonymous pipe.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "unix",
                "value": "unix",
                "brief": "Unix domain socket",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "quic",
                "value": "quic",
                "brief": "QUIC",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "[OSI transport layer](https://wikipedia.org/wiki/Transport_layer) or [inter-process communication method](https://wikipedia.org/wiki/Inter-process_communication).\n",
          "examples": [
            "tcp",
            "unix"
          ],
          "requirement_level": "recommended",
          "note": "The value SHOULD be normalized to lowercase.\n\nConsider always setting the transport when setting a port number, since\na port number is ambiguous without knowing the transport. For example\ndifferent processes could be listening on TCP port 12345 and UDP port 12345.\n",
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "kestrel.upgraded_connections",
      "instrument": "updowncounter",
      "unit": "{connection}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/kestrel/metrics.yaml",
        "attributes": {
          "network.transport": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples"
            ]
          },
          "network.type": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "metric.kestrel.tls_handshake.duration",
      "type": "metric",
      "brief": "The duration of TLS handshakes on the server.",
      "note": "Meter name: `Microsoft.AspNetCore.Server.Kestrel`; Added in: ASP.NET Core 8.0\n",
      "stability": "stable",
      "attributes": [
        {
          "name": "tls.protocol.version",
          "type": "string",
          "brief": "Numeric part of the version parsed from the original string of the negotiated [SSL/TLS protocol version](https://docs.openssl.org/1.1.1/man3/SSL_get_version/#return-values)\n",
          "examples": [
            "1.2",
            "3"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "server.address",
          "type": "string",
          "brief": "Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "recommended",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": "recommended",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "network.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "ipv4",
                "value": "ipv4",
                "brief": "IPv4",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "ipv6",
                "value": "ipv6",
                "brief": "IPv6",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "[OSI network layer](https://wikipedia.org/wiki/Network_layer) or non-OSI equivalent.",
          "examples": [
            "ipv4",
            "ipv6"
          ],
          "requirement_level": {
            "recommended": "if the transport is `tcp` or `udp`"
          },
          "note": "The value SHOULD be normalized to lowercase.",
          "stability": "stable"
        },
        {
          "name": "network.transport",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "tcp",
                "value": "tcp",
                "brief": "TCP",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "udp",
                "value": "udp",
                "brief": "UDP",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "pipe",
                "value": "pipe",
                "brief": "Named or anonymous pipe.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "unix",
                "value": "unix",
                "brief": "Unix domain socket",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "quic",
                "value": "quic",
                "brief": "QUIC",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "[OSI transport layer](https://wikipedia.org/wiki/Transport_layer) or [inter-process communication method](https://wikipedia.org/wiki/Inter-process_communication).\n",
          "examples": [
            "tcp",
            "unix"
          ],
          "requirement_level": "recommended",
          "note": "The value SHOULD be normalized to lowercase.\n\nConsider always setting the transport when setting a port number, since\na port number is ambiguous without knowing the transport. For example\ndifferent processes could be listening on TCP port 12345 and UDP port 12345.\n",
          "stability": "stable"
        },
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "The full name of exception type.",
          "examples": [
            "System.OperationCanceledException",
            "Contoso.MyException"
          ],
          "requirement_level": {
            "conditionally_required": "if and only if an error has occurred."
          },
          "note": "Captures the exception type when a TLS handshake fails.",
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "kestrel.tls_handshake.duration",
      "instrument": "histogram",
      "unit": "s",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/kestrel/metrics.yaml",
        "attributes": {
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level"
            ]
          },
          "network.transport": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples"
            ]
          },
          "network.type": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "tls.protocol.version": {
            "source_group": "registry.tls",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "metric.kestrel.active_tls_handshakes",
      "type": "metric",
      "brief": "Number of TLS handshakes that are currently in progress on the server.",
      "note": "Meter name: `Microsoft.AspNetCore.Server.Kestrel`; Added in: ASP.NET Core 8.0\n",
      "stability": "stable",
      "attributes": [
        {
          "name": "server.address",
          "type": "string",
          "brief": "Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "recommended",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": "recommended",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "network.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "ipv4",
                "value": "ipv4",
                "brief": "IPv4",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "ipv6",
                "value": "ipv6",
                "brief": "IPv6",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "[OSI network layer](https://wikipedia.org/wiki/Network_layer) or non-OSI equivalent.",
          "examples": [
            "ipv4",
            "ipv6"
          ],
          "requirement_level": {
            "recommended": "if the transport is `tcp` or `udp`"
          },
          "note": "The value SHOULD be normalized to lowercase.",
          "stability": "stable"
        },
        {
          "name": "network.transport",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "tcp",
                "value": "tcp",
                "brief": "TCP",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "udp",
                "value": "udp",
                "brief": "UDP",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "pipe",
                "value": "pipe",
                "brief": "Named or anonymous pipe.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "unix",
                "value": "unix",
                "brief": "Unix domain socket",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "quic",
                "value": "quic",
                "brief": "QUIC",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "[OSI transport layer](https://wikipedia.org/wiki/Transport_layer) or [inter-process communication method](https://wikipedia.org/wiki/Inter-process_communication).\n",
          "examples": [
            "tcp",
            "unix"
          ],
          "requirement_level": "recommended",
          "note": "The value SHOULD be normalized to lowercase.\n\nConsider always setting the transport when setting a port number, since\na port number is ambiguous without knowing the transport. For example\ndifferent processes could be listening on TCP port 12345 and UDP port 12345.\n",
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "kestrel.active_tls_handshakes",
      "instrument": "updowncounter",
      "unit": "{handshake}",
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/kestrel/metrics.yaml",
        "attributes": {
          "network.transport": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples"
            ]
          },
          "network.type": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "trace.gen_ai.client.common_attributes",
      "type": "attribute_group",
      "brief": "Describes GenAI operation span.\n",
      "stability": "development",
      "attributes": [
        {
          "name": "gen_ai.request.max_tokens",
          "type": "int",
          "brief": "The maximum number of tokens the model generates for a request.",
          "examples": [
            100
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "gen_ai.request.temperature",
          "type": "double",
          "brief": "The temperature setting for the GenAI request.",
          "examples": [
            0.0
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "gen_ai.request.top_p",
          "type": "double",
          "brief": "The top_p sampling setting for the GenAI request.",
          "examples": [
            1.0
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "gen_ai.request.stop_sequences",
          "type": "string[]",
          "brief": "List of sequences that the model will use to stop generating further tokens.",
          "examples": [
            [
              "forest",
              "lived"
            ]
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "gen_ai.request.frequency_penalty",
          "type": "double",
          "brief": "The frequency penalty setting for the GenAI request.",
          "examples": [
            0.1
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "gen_ai.request.presence_penalty",
          "type": "double",
          "brief": "The presence penalty setting for the GenAI request.",
          "examples": [
            0.1
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "gen_ai.request.encoding_formats",
          "type": "string[]",
          "brief": "The encoding formats requested in an embeddings operation, if specified.",
          "examples": [
            [
              "base64"
            ],
            [
              "float",
              "binary"
            ]
          ],
          "requirement_level": "recommended",
          "note": "In some GenAI systems the encoding formats are called embedding types. Also, some GenAI systems only accept a single format per request.\n",
          "stability": "development"
        },
        {
          "name": "gen_ai.response.id",
          "type": "string",
          "brief": "The unique identifier for the completion.",
          "examples": [
            "chatcmpl-123"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "gen_ai.response.finish_reasons",
          "type": "string[]",
          "brief": "Array of reasons the model stopped generating tokens, corresponding to each generation received.",
          "examples": [
            [
              "stop"
            ],
            [
              "stop",
              "length"
            ]
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "gen_ai.usage.input_tokens",
          "type": "int",
          "brief": "The number of tokens used in the GenAI input (prompt).",
          "examples": [
            100
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "gen_ai.usage.output_tokens",
          "type": "int",
          "brief": "The number of tokens used in the GenAI response (completion).",
          "examples": [
            180
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "server.address",
          "type": "string",
          "brief": "GenAI server address.",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "recommended",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "GenAI server port.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": {
            "conditionally_required": "If `server.address` is set."
          },
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "gen_ai.operation.name",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "chat",
                "value": "chat",
                "brief": "Chat completion operation such as [OpenAI Chat API](https://platform.openai.com/docs/api-reference/chat)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "text_completion",
                "value": "text_completion",
                "brief": "Text completions operation such as [OpenAI Completions API (Legacy)](https://platform.openai.com/docs/api-reference/completions)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "embeddings",
                "value": "embeddings",
                "brief": "Embeddings operation such as [OpenAI Create embeddings API](https://platform.openai.com/docs/api-reference/embeddings/create)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "create_agent",
                "value": "create_agent",
                "brief": "Create GenAI agent",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "execute_tool",
                "value": "execute_tool",
                "brief": "Execute a tool",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The name of the operation being performed.",
          "requirement_level": "required",
          "note": "If one of the predefined values applies, but specific system uses a different name it's RECOMMENDED to document it in the semantic conventions for specific GenAI system and use system-specific name in the instrumentation. If a different name is not documented, instrumentation libraries SHOULD use applicable predefined value.\n",
          "stability": "development"
        },
        {
          "name": "gen_ai.request.model",
          "type": "string",
          "brief": "The name of the GenAI model a request is being made to.",
          "examples": "gpt-4",
          "requirement_level": {
            "conditionally_required": "If available."
          },
          "note": "The name of the GenAI model a request is being made to. If the model is supplied by a vendor, then the value must be the exact name of the model requested. If the model is a fine-tuned custom model, the value should have a more specific name than the base model that's been fine-tuned.\n",
          "stability": "development"
        },
        {
          "name": "gen_ai.request.choice.count",
          "type": "int",
          "brief": "The target number of candidate completions to return.",
          "examples": [
            3
          ],
          "requirement_level": {
            "conditionally_required": "if available, in the request, and !=1"
          },
          "stability": "development"
        },
        {
          "name": "gen_ai.request.seed",
          "type": "int",
          "brief": "Requests with same seed value more likely to return same result.",
          "examples": [
            100
          ],
          "requirement_level": {
            "conditionally_required": "if applicable and if the request includes a seed"
          },
          "stability": "development"
        },
        {
          "name": "gen_ai.output.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "text",
                "value": "text",
                "brief": "Plain text",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "json",
                "value": "json",
                "brief": "JSON object with known or unknown schema",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "image",
                "value": "image",
                "brief": "Image",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "speech",
                "value": "speech",
                "brief": "Speech",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "Represents the content type requested by the client.",
          "requirement_level": {
            "conditionally_required": "when applicable and if the request includes an output format."
          },
          "note": "This attribute SHOULD be used when the client requests output of a specific type. The model may return zero or more outputs of this type.\nThis attribute specifies the output modality and not the actual output format. For example, if an image is requested, the actual output could be a URL pointing to an image file.\nAdditional output format details may be recorded in the future in the `gen_ai.output.{type}.*` attributes.\n",
          "stability": "development"
        },
        {
          "name": "gen_ai.response.model",
          "type": "string",
          "brief": "The name of the model that generated the response.",
          "examples": [
            "gpt-4-0613"
          ],
          "requirement_level": "recommended",
          "note": "If available. The name of the GenAI model that provided the response. If the model is supplied by a vendor, then the value must be the exact name of the model actually used. If the model is a fine-tuned custom model, the value should have a more specific name than the base model that's been fine-tuned.\n",
          "stability": "development"
        },
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "timeout",
            "java.net.UnknownHostException",
            "server_certificate_invalid",
            "500"
          ],
          "requirement_level": {
            "conditionally_required": "if the operation ended in an error"
          },
          "note": "The `error.type` SHOULD match the error code returned by the Generative AI provider or the client library,\nthe canonical name of exception that occurred, or another low-cardinality error identifier.\nInstrumentations SHOULD document the list of errors they report.\n",
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/gen-ai/spans.yaml",
        "attributes": {
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ]
          },
          "gen_ai.operation.name": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.output.type": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.request.choice.count": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.request.encoding_formats": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.request.frequency_penalty": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.request.max_tokens": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.request.model": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ]
          },
          "gen_ai.request.presence_penalty": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.request.seed": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.request.stop_sequences": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.request.temperature": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.request.top_p": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.response.finish_reasons": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.response.id": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.response.model": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ]
          },
          "gen_ai.usage.input_tokens": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.usage.output_tokens": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "requirement_level"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "span.gen_ai.client",
      "type": "span",
      "brief": "Describes GenAI operation span.\n",
      "stability": "development",
      "attributes": [
        {
          "name": "gen_ai.request.max_tokens",
          "type": "int",
          "brief": "The maximum number of tokens the model generates for a request.",
          "examples": [
            100
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "gen_ai.request.temperature",
          "type": "double",
          "brief": "The temperature setting for the GenAI request.",
          "examples": [
            0.0
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "gen_ai.request.top_p",
          "type": "double",
          "brief": "The top_p sampling setting for the GenAI request.",
          "examples": [
            1.0
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "gen_ai.request.top_k",
          "type": "double",
          "brief": "The top_k sampling setting for the GenAI request.",
          "examples": [
            1.0
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "gen_ai.request.stop_sequences",
          "type": "string[]",
          "brief": "List of sequences that the model will use to stop generating further tokens.",
          "examples": [
            [
              "forest",
              "lived"
            ]
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "gen_ai.request.frequency_penalty",
          "type": "double",
          "brief": "The frequency penalty setting for the GenAI request.",
          "examples": [
            0.1
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "gen_ai.request.presence_penalty",
          "type": "double",
          "brief": "The presence penalty setting for the GenAI request.",
          "examples": [
            0.1
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "gen_ai.request.encoding_formats",
          "type": "string[]",
          "brief": "The encoding formats requested in an embeddings operation, if specified.",
          "examples": [
            [
              "base64"
            ],
            [
              "float",
              "binary"
            ]
          ],
          "requirement_level": "recommended",
          "note": "In some GenAI systems the encoding formats are called embedding types. Also, some GenAI systems only accept a single format per request.\n",
          "stability": "development"
        },
        {
          "name": "gen_ai.response.id",
          "type": "string",
          "brief": "The unique identifier for the completion.",
          "examples": [
            "chatcmpl-123"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "gen_ai.response.finish_reasons",
          "type": "string[]",
          "brief": "Array of reasons the model stopped generating tokens, corresponding to each generation received.",
          "examples": [
            [
              "stop"
            ],
            [
              "stop",
              "length"
            ]
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "gen_ai.usage.input_tokens",
          "type": "int",
          "brief": "The number of tokens used in the GenAI input (prompt).",
          "examples": [
            100
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "gen_ai.usage.output_tokens",
          "type": "int",
          "brief": "The number of tokens used in the GenAI response (completion).",
          "examples": [
            180
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "server.address",
          "type": "string",
          "brief": "GenAI server address.",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "recommended",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "GenAI server port.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": {
            "conditionally_required": "If `server.address` is set."
          },
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "gen_ai.system",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "openai",
                "value": "openai",
                "brief": "OpenAI",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "vertex_ai",
                "value": "vertex_ai",
                "brief": "Vertex AI",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "gemini",
                "value": "gemini",
                "brief": "Gemini",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "anthropic",
                "value": "anthropic",
                "brief": "Anthropic",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "cohere",
                "value": "cohere",
                "brief": "Cohere",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "az.ai.inference",
                "value": "az.ai.inference",
                "brief": "Azure AI Inference",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "az.ai.openai",
                "value": "az.ai.openai",
                "brief": "Azure OpenAI",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "ibm.watsonx.ai",
                "value": "ibm.watsonx.ai",
                "brief": "IBM Watsonx AI",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "aws.bedrock",
                "value": "aws.bedrock",
                "brief": "AWS Bedrock",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "perplexity",
                "value": "perplexity",
                "brief": "Perplexity",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "xai",
                "value": "xai",
                "brief": "xAI",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "deepseek",
                "value": "deepseek",
                "brief": "DeepSeek",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "groq",
                "value": "groq",
                "brief": "Groq",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "mistral_ai",
                "value": "mistral_ai",
                "brief": "Mistral AI",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The Generative AI product as identified by the client or server instrumentation.",
          "examples": "openai",
          "requirement_level": "required",
          "note": "The `gen_ai.system` describes a family of GenAI models with specific model identified\nby `gen_ai.request.model` and `gen_ai.response.model` attributes.\n\nThe actual GenAI product may differ from the one identified by the client.\nMultiple systems, including Azure OpenAI and Gemini, are accessible by OpenAI client\nlibraries. In such cases, the `gen_ai.system` is set to `openai` based on the\ninstrumentation's best knowledge, instead of the actual system. The `server.address`\nattribute may help identify the actual system in use for `openai`.\n\nFor custom model, a custom friendly name SHOULD be used.\nIf none of these options apply, the `gen_ai.system` SHOULD be set to `_OTHER`.\n",
          "stability": "development"
        },
        {
          "name": "gen_ai.operation.name",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "chat",
                "value": "chat",
                "brief": "Chat completion operation such as [OpenAI Chat API](https://platform.openai.com/docs/api-reference/chat)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "text_completion",
                "value": "text_completion",
                "brief": "Text completions operation such as [OpenAI Completions API (Legacy)](https://platform.openai.com/docs/api-reference/completions)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "embeddings",
                "value": "embeddings",
                "brief": "Embeddings operation such as [OpenAI Create embeddings API](https://platform.openai.com/docs/api-reference/embeddings/create)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "create_agent",
                "value": "create_agent",
                "brief": "Create GenAI agent",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "execute_tool",
                "value": "execute_tool",
                "brief": "Execute a tool",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The name of the operation being performed.",
          "requirement_level": "required",
          "note": "If one of the predefined values applies, but specific system uses a different name it's RECOMMENDED to document it in the semantic conventions for specific GenAI system and use system-specific name in the instrumentation. If a different name is not documented, instrumentation libraries SHOULD use applicable predefined value.\n",
          "stability": "development"
        },
        {
          "name": "gen_ai.request.model",
          "type": "string",
          "brief": "The name of the GenAI model a request is being made to.",
          "examples": "gpt-4",
          "requirement_level": {
            "conditionally_required": "If available."
          },
          "note": "The name of the GenAI model a request is being made to. If the model is supplied by a vendor, then the value must be the exact name of the model requested. If the model is a fine-tuned custom model, the value should have a more specific name than the base model that's been fine-tuned.\n",
          "stability": "development"
        },
        {
          "name": "gen_ai.request.choice.count",
          "type": "int",
          "brief": "The target number of candidate completions to return.",
          "examples": [
            3
          ],
          "requirement_level": {
            "conditionally_required": "if available, in the request, and !=1"
          },
          "stability": "development"
        },
        {
          "name": "gen_ai.request.seed",
          "type": "int",
          "brief": "Requests with same seed value more likely to return same result.",
          "examples": [
            100
          ],
          "requirement_level": {
            "conditionally_required": "if applicable and if the request includes a seed"
          },
          "stability": "development"
        },
        {
          "name": "gen_ai.output.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "text",
                "value": "text",
                "brief": "Plain text",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "json",
                "value": "json",
                "brief": "JSON object with known or unknown schema",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "image",
                "value": "image",
                "brief": "Image",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "speech",
                "value": "speech",
                "brief": "Speech",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "Represents the content type requested by the client.",
          "requirement_level": {
            "conditionally_required": "when applicable and if the request includes an output format."
          },
          "note": "This attribute SHOULD be used when the client requests output of a specific type. The model may return zero or more outputs of this type.\nThis attribute specifies the output modality and not the actual output format. For example, if an image is requested, the actual output could be a URL pointing to an image file.\nAdditional output format details may be recorded in the future in the `gen_ai.output.{type}.*` attributes.\n",
          "stability": "development"
        },
        {
          "name": "gen_ai.response.model",
          "type": "string",
          "brief": "The name of the model that generated the response.",
          "examples": [
            "gpt-4-0613"
          ],
          "requirement_level": "recommended",
          "note": "If available. The name of the GenAI model that provided the response. If the model is supplied by a vendor, then the value must be the exact name of the model actually used. If the model is a fine-tuned custom model, the value should have a more specific name than the base model that's been fine-tuned.\n",
          "stability": "development"
        },
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "timeout",
            "java.net.UnknownHostException",
            "server_certificate_invalid",
            "500"
          ],
          "requirement_level": {
            "conditionally_required": "if the operation ended in an error"
          },
          "note": "The `error.type` SHOULD match the error code returned by the Generative AI provider or the client library,\nthe canonical name of exception that occurred, or another low-cardinality error identifier.\nInstrumentations SHOULD document the list of errors they report.\n",
          "stability": "stable"
        }
      ],
      "span_kind": "client",
      "events": [
        "gen_ai.content.prompt",
        "gen_ai.content.completion"
      ],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/gen-ai/spans.yaml",
        "attributes": {
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ]
          },
          "gen_ai.operation.name": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.output.type": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.request.choice.count": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.request.encoding_formats": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.request.frequency_penalty": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.request.max_tokens": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.request.model": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ]
          },
          "gen_ai.request.presence_penalty": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.request.seed": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.request.stop_sequences": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.request.temperature": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.request.top_k": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.request.top_p": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.response.finish_reasons": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.response.id": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.response.model": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ]
          },
          "gen_ai.system": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.usage.input_tokens": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.usage.output_tokens": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "requirement_level"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "attributes.gen_ai.openai_based",
      "type": "attribute_group",
      "brief": "Describes attributes that are common to OpenAI-based Generative AI services.\n",
      "stability": "development",
      "attributes": [
        {
          "name": "gen_ai.request.max_tokens",
          "type": "int",
          "brief": "The maximum number of tokens the model generates for a request.",
          "examples": [
            100
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "gen_ai.request.temperature",
          "type": "double",
          "brief": "The temperature setting for the GenAI request.",
          "examples": [
            0.0
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "gen_ai.request.top_p",
          "type": "double",
          "brief": "The top_p sampling setting for the GenAI request.",
          "examples": [
            1.0
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "gen_ai.request.stop_sequences",
          "type": "string[]",
          "brief": "List of sequences that the model will use to stop generating further tokens.",
          "examples": [
            [
              "forest",
              "lived"
            ]
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "gen_ai.request.frequency_penalty",
          "type": "double",
          "brief": "The frequency penalty setting for the GenAI request.",
          "examples": [
            0.1
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "gen_ai.request.presence_penalty",
          "type": "double",
          "brief": "The presence penalty setting for the GenAI request.",
          "examples": [
            0.1
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "gen_ai.request.encoding_formats",
          "type": "string[]",
          "brief": "The encoding formats requested in an embeddings operation, if specified.",
          "examples": [
            [
              "base64"
            ],
            [
              "float",
              "binary"
            ]
          ],
          "requirement_level": "recommended",
          "note": "In some GenAI systems the encoding formats are called embedding types. Also, some GenAI systems only accept a single format per request.\n",
          "stability": "development"
        },
        {
          "name": "gen_ai.response.id",
          "type": "string",
          "brief": "The unique identifier for the completion.",
          "examples": [
            "chatcmpl-123"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "gen_ai.response.finish_reasons",
          "type": "string[]",
          "brief": "Array of reasons the model stopped generating tokens, corresponding to each generation received.",
          "examples": [
            [
              "stop"
            ],
            [
              "stop",
              "length"
            ]
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "gen_ai.usage.input_tokens",
          "type": "int",
          "brief": "The number of tokens used in the GenAI input (prompt).",
          "examples": [
            100
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "gen_ai.usage.output_tokens",
          "type": "int",
          "brief": "The number of tokens used in the GenAI response (completion).",
          "examples": [
            180
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "server.address",
          "type": "string",
          "brief": "GenAI server address.",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "recommended",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "GenAI server port.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": {
            "conditionally_required": "If `server.address` is set."
          },
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "gen_ai.operation.name",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "chat",
                "value": "chat",
                "brief": "Chat completion operation such as [OpenAI Chat API](https://platform.openai.com/docs/api-reference/chat)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "text_completion",
                "value": "text_completion",
                "brief": "Text completions operation such as [OpenAI Completions API (Legacy)](https://platform.openai.com/docs/api-reference/completions)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "embeddings",
                "value": "embeddings",
                "brief": "Embeddings operation such as [OpenAI Create embeddings API](https://platform.openai.com/docs/api-reference/embeddings/create)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "create_agent",
                "value": "create_agent",
                "brief": "Create GenAI agent",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "execute_tool",
                "value": "execute_tool",
                "brief": "Execute a tool",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The name of the operation being performed.",
          "requirement_level": "required",
          "note": "If one of the predefined values applies, but specific system uses a different name it's RECOMMENDED to document it in the semantic conventions for specific GenAI system and use system-specific name in the instrumentation. If a different name is not documented, instrumentation libraries SHOULD use applicable predefined value.\n",
          "stability": "development"
        },
        {
          "name": "gen_ai.request.model",
          "type": "string",
          "brief": "The name of the GenAI model a request is being made to.",
          "examples": "gpt-4",
          "requirement_level": {
            "conditionally_required": "If available."
          },
          "note": "The name of the GenAI model a request is being made to. If the model is supplied by a vendor, then the value must be the exact name of the model requested. If the model is a fine-tuned custom model, the value should have a more specific name than the base model that's been fine-tuned.\n",
          "stability": "development"
        },
        {
          "name": "gen_ai.request.choice.count",
          "type": "int",
          "brief": "The target number of candidate completions to return.",
          "examples": [
            3
          ],
          "requirement_level": {
            "conditionally_required": "if available, in the request, and !=1"
          },
          "stability": "development"
        },
        {
          "name": "gen_ai.request.seed",
          "type": "int",
          "brief": "Requests with same seed value more likely to return same result.",
          "examples": [
            100
          ],
          "requirement_level": {
            "conditionally_required": "if applicable and if the request includes a seed"
          },
          "stability": "development"
        },
        {
          "name": "gen_ai.response.model",
          "type": "string",
          "brief": "The name of the model that generated the response.",
          "examples": [
            "gpt-4-0613"
          ],
          "requirement_level": "recommended",
          "note": "If available. The name of the GenAI model that provided the response. If the model is supplied by a vendor, then the value must be the exact name of the model actually used. If the model is a fine-tuned custom model, the value should have a more specific name than the base model that's been fine-tuned.\n",
          "stability": "development"
        },
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "timeout",
            "java.net.UnknownHostException",
            "server_certificate_invalid",
            "500"
          ],
          "requirement_level": {
            "conditionally_required": "if the operation ended in an error"
          },
          "note": "The `error.type` SHOULD match the error code returned by the Generative AI provider or the client library,\nthe canonical name of exception that occurred, or another low-cardinality error identifier.\nInstrumentations SHOULD document the list of errors they report.\n",
          "stability": "stable"
        },
        {
          "name": "gen_ai.output.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "text",
                "value": "text",
                "brief": "Plain text",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "json",
                "value": "json",
                "brief": "JSON object with known or unknown schema",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "image",
                "value": "image",
                "brief": "Image",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "speech",
                "value": "speech",
                "brief": "Speech",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "Represents the content type requested by the client.",
          "requirement_level": {
            "conditionally_required": "when applicable and if the request includes an output format."
          },
          "note": "This attribute SHOULD be set to the output type requested by the client: - `json` for structured outputs with defined or undefined schema - `image` for image output - `speech` for speech output - `text` for plain text output\nThe attribute specifies the output modality and not the actual output format. For example, if an image is requested, the actual output could be a URL pointing to an image file.\nAdditional output format details may be recorded in the future in the `gen_ai.output.{type}.*` attributes.\n",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/gen-ai/spans.yaml",
        "attributes": {
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ]
          },
          "gen_ai.operation.name": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.output.type": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ]
          },
          "gen_ai.request.choice.count": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.request.encoding_formats": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.request.frequency_penalty": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.request.max_tokens": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.request.model": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ]
          },
          "gen_ai.request.presence_penalty": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.request.seed": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.request.stop_sequences": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.request.temperature": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.request.top_p": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.response.finish_reasons": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.response.id": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.response.model": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ]
          },
          "gen_ai.usage.input_tokens": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.usage.output_tokens": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "requirement_level"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "span.gen_ai.openai.client",
      "type": "span",
      "brief": "Describes an OpenAI operation span.\n",
      "stability": "development",
      "attributes": [
        {
          "name": "gen_ai.request.max_tokens",
          "type": "int",
          "brief": "The maximum number of tokens the model generates for a request.",
          "examples": [
            100
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "gen_ai.request.temperature",
          "type": "double",
          "brief": "The temperature setting for the GenAI request.",
          "examples": [
            0.0
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "gen_ai.request.top_p",
          "type": "double",
          "brief": "The top_p sampling setting for the GenAI request.",
          "examples": [
            1.0
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "gen_ai.request.stop_sequences",
          "type": "string[]",
          "brief": "List of sequences that the model will use to stop generating further tokens.",
          "examples": [
            [
              "forest",
              "lived"
            ]
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "gen_ai.request.frequency_penalty",
          "type": "double",
          "brief": "The frequency penalty setting for the GenAI request.",
          "examples": [
            0.1
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "gen_ai.request.presence_penalty",
          "type": "double",
          "brief": "The presence penalty setting for the GenAI request.",
          "examples": [
            0.1
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "gen_ai.request.encoding_formats",
          "type": "string[]",
          "brief": "The encoding formats requested in an embeddings operation, if specified.",
          "examples": [
            [
              "base64"
            ],
            [
              "float",
              "binary"
            ]
          ],
          "requirement_level": "recommended",
          "note": "In some GenAI systems the encoding formats are called embedding types. Also, some GenAI systems only accept a single format per request.\n",
          "stability": "development"
        },
        {
          "name": "gen_ai.response.id",
          "type": "string",
          "brief": "The unique identifier for the completion.",
          "examples": [
            "chatcmpl-123"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "gen_ai.response.finish_reasons",
          "type": "string[]",
          "brief": "Array of reasons the model stopped generating tokens, corresponding to each generation received.",
          "examples": [
            [
              "stop"
            ],
            [
              "stop",
              "length"
            ]
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "gen_ai.openai.response.system_fingerprint",
          "type": "string",
          "brief": "A fingerprint to track any eventual change in the Generative AI environment.",
          "examples": [
            "fp_44709d6fcb"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "server.address",
          "type": "string",
          "brief": "GenAI server address.",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "recommended",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "GenAI server port.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": {
            "conditionally_required": "If `server.address` is set."
          },
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "gen_ai.operation.name",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "chat",
                "value": "chat",
                "brief": "Chat completion operation such as [OpenAI Chat API](https://platform.openai.com/docs/api-reference/chat)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "text_completion",
                "value": "text_completion",
                "brief": "Text completions operation such as [OpenAI Completions API (Legacy)](https://platform.openai.com/docs/api-reference/completions)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "embeddings",
                "value": "embeddings",
                "brief": "Embeddings operation such as [OpenAI Create embeddings API](https://platform.openai.com/docs/api-reference/embeddings/create)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "create_agent",
                "value": "create_agent",
                "brief": "Create GenAI agent",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "execute_tool",
                "value": "execute_tool",
                "brief": "Execute a tool",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The name of the operation being performed.",
          "requirement_level": "required",
          "note": "If one of the predefined values applies, but specific system uses a different name it's RECOMMENDED to document it in the semantic conventions for specific GenAI system and use system-specific name in the instrumentation. If a different name is not documented, instrumentation libraries SHOULD use applicable predefined value.\n",
          "stability": "development"
        },
        {
          "name": "gen_ai.request.choice.count",
          "type": "int",
          "brief": "The target number of candidate completions to return.",
          "examples": [
            3
          ],
          "requirement_level": {
            "conditionally_required": "if available, in the request, and !=1"
          },
          "stability": "development"
        },
        {
          "name": "gen_ai.request.seed",
          "type": "int",
          "brief": "Requests with same seed value more likely to return same result.",
          "examples": [
            100
          ],
          "requirement_level": {
            "conditionally_required": "if applicable and if the request includes a seed"
          },
          "stability": "development"
        },
        {
          "name": "gen_ai.response.model",
          "type": "string",
          "brief": "The name of the model that generated the response.",
          "examples": [
            "gpt-4-0613"
          ],
          "requirement_level": "recommended",
          "note": "If available. The name of the GenAI model that provided the response. If the model is supplied by a vendor, then the value must be the exact name of the model actually used. If the model is a fine-tuned custom model, the value should have a more specific name than the base model that's been fine-tuned.\n",
          "stability": "development"
        },
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "timeout",
            "java.net.UnknownHostException",
            "server_certificate_invalid",
            "500"
          ],
          "requirement_level": {
            "conditionally_required": "if the operation ended in an error"
          },
          "note": "The `error.type` SHOULD match the error code returned by the Generative AI provider or the client library,\nthe canonical name of exception that occurred, or another low-cardinality error identifier.\nInstrumentations SHOULD document the list of errors they report.\n",
          "stability": "stable"
        },
        {
          "name": "gen_ai.output.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "text",
                "value": "text",
                "brief": "Plain text",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "json",
                "value": "json",
                "brief": "JSON object with known or unknown schema",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "image",
                "value": "image",
                "brief": "Image",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "speech",
                "value": "speech",
                "brief": "Speech",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "Represents the content type requested by the client.",
          "requirement_level": {
            "conditionally_required": "when applicable and if the request includes an output format."
          },
          "note": "This attribute SHOULD be set to the output type requested by the client: - `json` for structured outputs with defined or undefined schema - `image` for image output - `speech` for speech output - `text` for plain text output\nThe attribute specifies the output modality and not the actual output format. For example, if an image is requested, the actual output could be a URL pointing to an image file.\nAdditional output format details may be recorded in the future in the `gen_ai.output.{type}.*` attributes.\n",
          "stability": "development"
        },
        {
          "name": "gen_ai.openai.request.service_tier",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "auto",
                "value": "auto",
                "brief": "The system will utilize scale tier credits until they are exhausted.",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "default",
                "value": "default",
                "brief": "The system will utilize the default scale tier.",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The service tier requested. May be a specific tier, default, or auto.",
          "examples": [
            "auto",
            "default"
          ],
          "requirement_level": {
            "conditionally_required": "if the request includes a service_tier and the value is not 'auto'"
          },
          "stability": "development"
        },
        {
          "name": "gen_ai.openai.response.service_tier",
          "type": "string",
          "brief": "The service tier used for the response.",
          "examples": [
            "scale",
            "default"
          ],
          "requirement_level": {
            "conditionally_required": "if the response was received and includes a service_tier"
          },
          "stability": "development"
        },
        {
          "name": "gen_ai.request.model",
          "type": "string",
          "brief": "The name of the GenAI model a request is being made to.",
          "examples": "gpt-4",
          "requirement_level": "required",
          "note": "The name of the GenAI model a request is being made to. If the model is supplied by a vendor, then the value must be the exact name of the model requested. If the model is a fine-tuned custom model, the value should have a more specific name than the base model that's been fine-tuned.\n",
          "stability": "development"
        },
        {
          "name": "gen_ai.usage.input_tokens",
          "type": "int",
          "brief": "The number of tokens used in the prompt sent to OpenAI.",
          "examples": [
            100
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "gen_ai.usage.output_tokens",
          "type": "int",
          "brief": "The number of tokens used in the completions from OpenAI.",
          "examples": [
            180
          ],
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": "client",
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/gen-ai/spans.yaml",
        "attributes": {
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ]
          },
          "gen_ai.openai.request.service_tier": {
            "source_group": "registry.gen_ai.openai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.openai.response.service_tier": {
            "source_group": "registry.gen_ai.openai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.openai.response.system_fingerprint": {
            "source_group": "registry.gen_ai.openai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.operation.name": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.output.type": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ]
          },
          "gen_ai.request.choice.count": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.request.encoding_formats": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.request.frequency_penalty": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.request.max_tokens": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.request.model": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ]
          },
          "gen_ai.request.presence_penalty": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.request.seed": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.request.stop_sequences": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.request.temperature": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.request.top_p": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.response.finish_reasons": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.response.id": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.response.model": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ]
          },
          "gen_ai.usage.input_tokens": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "requirement_level"
            ]
          },
          "gen_ai.usage.output_tokens": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "requirement_level"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "span.gen_ai.az.ai.inference.client",
      "type": "span",
      "brief": "Describes Azure AI Inference span attributes.\n",
      "stability": "development",
      "attributes": [
        {
          "name": "gen_ai.request.max_tokens",
          "type": "int",
          "brief": "The maximum number of tokens the model generates for a request.",
          "examples": [
            100
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "gen_ai.request.temperature",
          "type": "double",
          "brief": "The temperature setting for the GenAI request.",
          "examples": [
            0.0
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "gen_ai.request.top_p",
          "type": "double",
          "brief": "The top_p sampling setting for the GenAI request.",
          "examples": [
            1.0
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "gen_ai.request.stop_sequences",
          "type": "string[]",
          "brief": "List of sequences that the model will use to stop generating further tokens.",
          "examples": [
            [
              "forest",
              "lived"
            ]
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "gen_ai.request.frequency_penalty",
          "type": "double",
          "brief": "The frequency penalty setting for the GenAI request.",
          "examples": [
            0.1
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "gen_ai.request.presence_penalty",
          "type": "double",
          "brief": "The presence penalty setting for the GenAI request.",
          "examples": [
            0.1
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "gen_ai.request.encoding_formats",
          "type": "string[]",
          "brief": "The encoding formats requested in an embeddings operation, if specified.",
          "examples": [
            [
              "base64"
            ],
            [
              "float",
              "binary"
            ]
          ],
          "requirement_level": "recommended",
          "note": "In some GenAI systems the encoding formats are called embedding types. Also, some GenAI systems only accept a single format per request.\n",
          "stability": "development"
        },
        {
          "name": "gen_ai.response.id",
          "type": "string",
          "brief": "The unique identifier for the completion.",
          "examples": [
            "chatcmpl-123"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "gen_ai.response.finish_reasons",
          "type": "string[]",
          "brief": "Array of reasons the model stopped generating tokens, corresponding to each generation received.",
          "examples": [
            [
              "stop"
            ],
            [
              "stop",
              "length"
            ]
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "server.address",
          "type": "string",
          "brief": "GenAI server address.",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "recommended",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "gen_ai.operation.name",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "chat",
                "value": "chat",
                "brief": "Chat completion operation such as [OpenAI Chat API](https://platform.openai.com/docs/api-reference/chat)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "text_completion",
                "value": "text_completion",
                "brief": "Text completions operation such as [OpenAI Completions API (Legacy)](https://platform.openai.com/docs/api-reference/completions)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "embeddings",
                "value": "embeddings",
                "brief": "Embeddings operation such as [OpenAI Create embeddings API](https://platform.openai.com/docs/api-reference/embeddings/create)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "create_agent",
                "value": "create_agent",
                "brief": "Create GenAI agent",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "execute_tool",
                "value": "execute_tool",
                "brief": "Execute a tool",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The name of the operation being performed.",
          "requirement_level": "required",
          "note": "If one of the predefined values applies, but specific system uses a different name it's RECOMMENDED to document it in the semantic conventions for specific GenAI system and use system-specific name in the instrumentation. If a different name is not documented, instrumentation libraries SHOULD use applicable predefined value.\n",
          "stability": "development"
        },
        {
          "name": "gen_ai.request.model",
          "type": "string",
          "brief": "The name of the GenAI model a request is being made to.",
          "examples": "gpt-4",
          "requirement_level": {
            "conditionally_required": "If available."
          },
          "note": "The name of the GenAI model a request is being made to. If the model is supplied by a vendor, then the value must be the exact name of the model requested. If the model is a fine-tuned custom model, the value should have a more specific name than the base model that's been fine-tuned.\n",
          "stability": "development"
        },
        {
          "name": "gen_ai.request.choice.count",
          "type": "int",
          "brief": "The target number of candidate completions to return.",
          "examples": [
            3
          ],
          "requirement_level": {
            "conditionally_required": "if available, in the request, and !=1"
          },
          "stability": "development"
        },
        {
          "name": "gen_ai.request.seed",
          "type": "int",
          "brief": "Requests with same seed value more likely to return same result.",
          "examples": [
            100
          ],
          "requirement_level": {
            "conditionally_required": "if applicable and if the request includes a seed"
          },
          "stability": "development"
        },
        {
          "name": "gen_ai.response.model",
          "type": "string",
          "brief": "The name of the model that generated the response.",
          "examples": [
            "gpt-4-0613"
          ],
          "requirement_level": "recommended",
          "note": "If available. The name of the GenAI model that provided the response. If the model is supplied by a vendor, then the value must be the exact name of the model actually used. If the model is a fine-tuned custom model, the value should have a more specific name than the base model that's been fine-tuned.\n",
          "stability": "development"
        },
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "timeout",
            "java.net.UnknownHostException",
            "server_certificate_invalid",
            "500"
          ],
          "requirement_level": {
            "conditionally_required": "if the operation ended in an error"
          },
          "note": "The `error.type` SHOULD match the error code returned by the Generative AI provider or the client library,\nthe canonical name of exception that occurred, or another low-cardinality error identifier.\nInstrumentations SHOULD document the list of errors they report.\n",
          "stability": "stable"
        },
        {
          "name": "gen_ai.output.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "text",
                "value": "text",
                "brief": "Plain text",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "json",
                "value": "json",
                "brief": "JSON object with known or unknown schema",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "image",
                "value": "image",
                "brief": "Image",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "speech",
                "value": "speech",
                "brief": "Speech",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "Represents the content type requested by the client.",
          "requirement_level": {
            "conditionally_required": "when applicable and if the request includes an output format."
          },
          "note": "This attribute SHOULD be set to the output type requested by the client: - `json` for structured outputs with defined or undefined schema - `image` for image output - `speech` for speech output - `text` for plain text output\nThe attribute specifies the output modality and not the actual output format. For example, if an image is requested, the actual output could be a URL pointing to an image file.\nAdditional output format details may be recorded in the future in the `gen_ai.output.{type}.*` attributes.\n",
          "stability": "development"
        },
        {
          "name": "az.namespace",
          "type": "string",
          "brief": "[Azure Resource Provider Namespace](https://learn.microsoft.com/azure/azure-resource-manager/management/azure-services-resource-providers) as recognized by the client.\n",
          "examples": [
            "Microsoft.CognitiveServices"
          ],
          "requirement_level": "recommended",
          "note": "When `az.namespace` attribute is populated, it MUST be set to `Microsoft.CognitiveServices` for all operations performed by Azure AI Inference clients.\n",
          "stability": "development"
        },
        {
          "name": "gen_ai.usage.input_tokens",
          "type": "int",
          "brief": "The number of prompt tokens as reported in the usage prompt_tokens property of the response.\n",
          "examples": [
            100
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "gen_ai.usage.output_tokens",
          "type": "int",
          "brief": "The number of completion tokens as reported in the usage completion_tokens property of the response.\n",
          "examples": [
            180
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "GenAI server port.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": {
            "conditionally_required": "If not default (443)."
          },
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        }
      ],
      "span_kind": "client",
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/gen-ai/spans.yaml",
        "attributes": {
          "az.namespace": {
            "source_group": "registry.azure.client.sdk",
            "inherited_fields": [
              "brief",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "note"
            ]
          },
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ]
          },
          "gen_ai.operation.name": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.output.type": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ]
          },
          "gen_ai.request.choice.count": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.request.encoding_formats": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.request.frequency_penalty": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.request.max_tokens": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.request.model": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ]
          },
          "gen_ai.request.presence_penalty": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.request.seed": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.request.stop_sequences": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.request.temperature": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.request.top_p": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.response.finish_reasons": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.response.id": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.response.model": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ]
          },
          "gen_ai.usage.input_tokens": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "requirement_level"
            ]
          },
          "gen_ai.usage.output_tokens": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "requirement_level"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "span.gen_ai.create_agent.client",
      "type": "span",
      "brief": "Describes GenAI agent creation and is usually applicable when working with remote agent services.\n",
      "note": "The `gen_ai.operation.name` SHOULD be `create_agent`.\nThe **span name** SHOULD be `create_agent {gen_ai.agent.name}`.\nSemantic conventions for individual GenAI systems and frameworks MAY specify different span name format.\n",
      "stability": "development",
      "attributes": [
        {
          "name": "gen_ai.request.max_tokens",
          "type": "int",
          "brief": "The maximum number of tokens the model generates for a request.",
          "examples": [
            100
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "gen_ai.request.stop_sequences",
          "type": "string[]",
          "brief": "List of sequences that the model will use to stop generating further tokens.",
          "examples": [
            [
              "forest",
              "lived"
            ]
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "gen_ai.request.frequency_penalty",
          "type": "double",
          "brief": "The frequency penalty setting for the GenAI request.",
          "examples": [
            0.1
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "gen_ai.request.presence_penalty",
          "type": "double",
          "brief": "The presence penalty setting for the GenAI request.",
          "examples": [
            0.1
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "gen_ai.request.encoding_formats",
          "type": "string[]",
          "brief": "The encoding formats requested in an embeddings operation, if specified.",
          "examples": [
            [
              "base64"
            ],
            [
              "float",
              "binary"
            ]
          ],
          "requirement_level": "recommended",
          "note": "In some GenAI systems the encoding formats are called embedding types. Also, some GenAI systems only accept a single format per request.\n",
          "stability": "development"
        },
        {
          "name": "gen_ai.response.id",
          "type": "string",
          "brief": "The unique identifier for the completion.",
          "examples": [
            "chatcmpl-123"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "gen_ai.response.finish_reasons",
          "type": "string[]",
          "brief": "Array of reasons the model stopped generating tokens, corresponding to each generation received.",
          "examples": [
            [
              "stop"
            ],
            [
              "stop",
              "length"
            ]
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "gen_ai.usage.input_tokens",
          "type": "int",
          "brief": "The number of tokens used in the GenAI input (prompt).",
          "examples": [
            100
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "gen_ai.usage.output_tokens",
          "type": "int",
          "brief": "The number of tokens used in the GenAI response (completion).",
          "examples": [
            180
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "server.address",
          "type": "string",
          "brief": "GenAI server address.",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "recommended",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "GenAI server port.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": {
            "conditionally_required": "If `server.address` is set."
          },
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "gen_ai.system",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "openai",
                "value": "openai",
                "brief": "OpenAI",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "vertex_ai",
                "value": "vertex_ai",
                "brief": "Vertex AI",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "gemini",
                "value": "gemini",
                "brief": "Gemini",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "anthropic",
                "value": "anthropic",
                "brief": "Anthropic",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "cohere",
                "value": "cohere",
                "brief": "Cohere",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "az.ai.inference",
                "value": "az.ai.inference",
                "brief": "Azure AI Inference",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "az.ai.openai",
                "value": "az.ai.openai",
                "brief": "Azure OpenAI",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "ibm.watsonx.ai",
                "value": "ibm.watsonx.ai",
                "brief": "IBM Watsonx AI",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "aws.bedrock",
                "value": "aws.bedrock",
                "brief": "AWS Bedrock",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "perplexity",
                "value": "perplexity",
                "brief": "Perplexity",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "xai",
                "value": "xai",
                "brief": "xAI",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "deepseek",
                "value": "deepseek",
                "brief": "DeepSeek",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "groq",
                "value": "groq",
                "brief": "Groq",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "mistral_ai",
                "value": "mistral_ai",
                "brief": "Mistral AI",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The Generative AI product as identified by the client or server instrumentation.",
          "examples": "openai",
          "requirement_level": "required",
          "note": "The `gen_ai.system` describes a family of GenAI models with specific model identified\nby `gen_ai.request.model` and `gen_ai.response.model` attributes.\n\nThe actual GenAI product may differ from the one identified by the client.\nMultiple systems, including Azure OpenAI and Gemini, are accessible by OpenAI client\nlibraries. In such cases, the `gen_ai.system` is set to `openai` based on the\ninstrumentation's best knowledge, instead of the actual system. The `server.address`\nattribute may help identify the actual system in use for `openai`.\n\nFor custom model, a custom friendly name SHOULD be used.\nIf none of these options apply, the `gen_ai.system` SHOULD be set to `_OTHER`.\n",
          "stability": "development"
        },
        {
          "name": "gen_ai.operation.name",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "chat",
                "value": "chat",
                "brief": "Chat completion operation such as [OpenAI Chat API](https://platform.openai.com/docs/api-reference/chat)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "text_completion",
                "value": "text_completion",
                "brief": "Text completions operation such as [OpenAI Completions API (Legacy)](https://platform.openai.com/docs/api-reference/completions)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "embeddings",
                "value": "embeddings",
                "brief": "Embeddings operation such as [OpenAI Create embeddings API](https://platform.openai.com/docs/api-reference/embeddings/create)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "create_agent",
                "value": "create_agent",
                "brief": "Create GenAI agent",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "execute_tool",
                "value": "execute_tool",
                "brief": "Execute a tool",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The name of the operation being performed.",
          "requirement_level": "required",
          "note": "If one of the predefined values applies, but specific system uses a different name it's RECOMMENDED to document it in the semantic conventions for specific GenAI system and use system-specific name in the instrumentation. If a different name is not documented, instrumentation libraries SHOULD use applicable predefined value.\n",
          "stability": "development"
        },
        {
          "name": "gen_ai.request.choice.count",
          "type": "int",
          "brief": "The target number of candidate completions to return.",
          "examples": [
            3
          ],
          "requirement_level": {
            "conditionally_required": "if available, in the request, and !=1"
          },
          "stability": "development"
        },
        {
          "name": "gen_ai.request.seed",
          "type": "int",
          "brief": "Requests with same seed value more likely to return same result.",
          "examples": [
            100
          ],
          "requirement_level": {
            "conditionally_required": "if applicable and if the request includes a seed"
          },
          "stability": "development"
        },
        {
          "name": "gen_ai.output.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "text",
                "value": "text",
                "brief": "Plain text",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "json",
                "value": "json",
                "brief": "JSON object with known or unknown schema",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "image",
                "value": "image",
                "brief": "Image",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "speech",
                "value": "speech",
                "brief": "Speech",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "Represents the content type requested by the client.",
          "requirement_level": {
            "conditionally_required": "when applicable and if the request includes an output format."
          },
          "note": "This attribute SHOULD be used when the client requests output of a specific type. The model may return zero or more outputs of this type.\nThis attribute specifies the output modality and not the actual output format. For example, if an image is requested, the actual output could be a URL pointing to an image file.\nAdditional output format details may be recorded in the future in the `gen_ai.output.{type}.*` attributes.\n",
          "stability": "development"
        },
        {
          "name": "gen_ai.response.model",
          "type": "string",
          "brief": "The name of the model that generated the response.",
          "examples": [
            "gpt-4-0613"
          ],
          "requirement_level": "recommended",
          "note": "If available. The name of the GenAI model that provided the response. If the model is supplied by a vendor, then the value must be the exact name of the model actually used. If the model is a fine-tuned custom model, the value should have a more specific name than the base model that's been fine-tuned.\n",
          "stability": "development"
        },
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "timeout",
            "java.net.UnknownHostException",
            "server_certificate_invalid",
            "500"
          ],
          "requirement_level": {
            "conditionally_required": "if the operation ended in an error"
          },
          "note": "The `error.type` SHOULD match the error code returned by the Generative AI provider or the client library,\nthe canonical name of exception that occurred, or another low-cardinality error identifier.\nInstrumentations SHOULD document the list of errors they report.\n",
          "stability": "stable"
        },
        {
          "name": "gen_ai.agent.description",
          "type": "string",
          "brief": "Free-form description of the GenAI agent provided by the application.",
          "examples": [
            "Helps with math problems",
            "Generates fiction stories"
          ],
          "requirement_level": {
            "conditionally_required": "If provided by the application."
          },
          "stability": "development"
        },
        {
          "name": "gen_ai.agent.id",
          "type": "string",
          "brief": "The unique identifier of the GenAI agent.",
          "examples": [
            "asst_5j66UpCpwteGg4YSxUnt7lPY"
          ],
          "requirement_level": {
            "conditionally_required": "if applicable."
          },
          "stability": "development"
        },
        {
          "name": "gen_ai.agent.name",
          "type": "string",
          "brief": "Human-readable name of the GenAI agent provided by the application.",
          "examples": [
            "Math Tutor",
            "Fiction Writer"
          ],
          "requirement_level": {
            "conditionally_required": "If provided by the application."
          },
          "stability": "development"
        },
        {
          "name": "gen_ai.request.model",
          "type": "string",
          "brief": "The name of the GenAI model a request is being made to.",
          "examples": "gpt-4",
          "requirement_level": {
            "conditionally_required": "If provided by the application."
          },
          "note": "The name of the GenAI model a request is being made to. If the model is supplied by a vendor, then the value must be the exact name of the model requested. If the model is a fine-tuned custom model, the value should have a more specific name than the base model that's been fine-tuned.\n",
          "stability": "development"
        },
        {
          "name": "gen_ai.request.temperature",
          "type": "double",
          "brief": "The temperature setting for the GenAI request.",
          "examples": [
            0.0
          ],
          "requirement_level": {
            "conditionally_required": "If provided by the application."
          },
          "stability": "development"
        },
        {
          "name": "gen_ai.request.top_p",
          "type": "double",
          "brief": "The top_p sampling setting for the GenAI request.",
          "examples": [
            1.0
          ],
          "requirement_level": {
            "conditionally_required": "If provided by the application."
          },
          "stability": "development"
        }
      ],
      "span_kind": "client",
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/gen-ai/spans.yaml",
        "attributes": {
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ]
          },
          "gen_ai.agent.description": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.agent.id": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.agent.name": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.operation.name": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.output.type": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.request.choice.count": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.request.encoding_formats": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.request.frequency_penalty": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.request.max_tokens": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.request.model": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ]
          },
          "gen_ai.request.presence_penalty": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.request.seed": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.request.stop_sequences": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.request.temperature": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.request.top_p": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.response.finish_reasons": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.response.id": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.response.model": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ]
          },
          "gen_ai.system": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.usage.input_tokens": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.usage.output_tokens": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "requirement_level"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "span.gen_ai.execute_tool.internal",
      "type": "span",
      "brief": "Describes tool execution span.",
      "note": "`gen_ai.operation.name` SHOULD be `execute_tool`.\nSpan name SHOULD be `execute_tool {gen_ai.tool.name}`.\nGenAI instrumentations that are able to instrument tool execution call SHOULD do so.\nHowever, it's common for tools to be executed by the application code. It's recommended\nfor the application developers to follow this semantic conventions for tool invoked\nby the application code.\n",
      "stability": "development",
      "attributes": [
        {
          "name": "gen_ai.tool.name",
          "type": "string",
          "brief": "Name of the tool utilized by the agent.",
          "examples": [
            "Flights"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "timeout",
            "java.net.UnknownHostException",
            "server_certificate_invalid",
            "500"
          ],
          "requirement_level": {
            "conditionally_required": "if the operation ended in an error"
          },
          "note": "The `error.type` SHOULD match the error code returned by the Generative AI provider or the client library,\nthe canonical name of exception that occurred, or another low-cardinality error identifier.\nInstrumentations SHOULD document the list of errors they report.\n",
          "stability": "stable"
        },
        {
          "name": "gen_ai.tool.call.id",
          "type": "string",
          "brief": "The tool call identifier.",
          "examples": [
            "call_mszuSIzqtI65i1wAUOE8w5H4"
          ],
          "requirement_level": {
            "recommended": "if available"
          },
          "stability": "development"
        }
      ],
      "span_kind": "internal",
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/gen-ai/spans.yaml",
        "attributes": {
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ]
          },
          "gen_ai.tool.call.id": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.tool.name": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "registry.dns",
      "type": "attribute_group",
      "brief": "This document defines the shared attributes used to report a DNS query.\n",
      "attributes": [
        {
          "name": "dns.question.name",
          "type": "string",
          "brief": "The name being queried.",
          "examples": [
            "www.example.com",
            "opentelemetry.io"
          ],
          "requirement_level": "recommended",
          "note": "If the name field contains non-printable characters (below 32 or above 126), those characters should be represented as escaped base 10 integers (\\DDD). Back slashes and quotes should be escaped. Tabs, carriage returns, and line feeds should be converted to \\t, \\r, and \\n respectively.\n",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/dns/registry.yaml"
      },
      "display_name": "DNS Attributes"
    },
    {
      "id": "thread",
      "type": "attribute_group",
      "brief": "These attributes may be used for any operation to store information about a thread that started a span.\n",
      "attributes": [
        {
          "name": "thread.id",
          "type": "int",
          "brief": "Current \"managed\" thread ID (as opposed to OS thread ID).\n",
          "examples": 42,
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "thread.name",
          "type": "string",
          "brief": "Current thread name.\n",
          "examples": "main",
          "requirement_level": "recommended",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/thread/common.yaml",
        "attributes": {
          "thread.id": {
            "source_group": "registry.thread",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "thread.name": {
            "source_group": "registry.thread",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "attributes.messaging.trace.minimal",
      "type": "attribute_group",
      "brief": "Defines minimal set of attributes used by all messaging systems.\n",
      "stability": "development",
      "attributes": [
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "amqp:decode-error",
            "KAFKA_STORAGE_ERROR",
            "channel-error"
          ],
          "requirement_level": {
            "conditionally_required": "If and only if the messaging operation has failed."
          },
          "note": "The `error.type` SHOULD be predictable, and SHOULD have low cardinality.\n\nWhen `error.type` is set to a type (e.g., an exception type), its\ncanonical class name identifying the type within the artifact SHOULD be used.\n\nInstrumentations SHOULD document the list of errors they report.\n\nThe cardinality of `error.type` within one instrumentation library SHOULD be low.\nTelemetry consumers that aggregate data from multiple instrumentation libraries and applications\nshould be prepared for `error.type` to have high cardinality at query time when no\nadditional filters are applied.\n\nIf the operation has completed successfully, instrumentations SHOULD NOT set `error.type`.\n\nIf a specific domain defines its own set of error identifiers (such as HTTP or gRPC status codes),\nit's RECOMMENDED to:\n\n- Use a domain-specific attribute\n- Set `error.type` to capture all errors, regardless of whether they are defined within the domain-specific set or not.\n",
          "stability": "stable"
        },
        {
          "name": "messaging.destination.name",
          "type": "string",
          "brief": "The message destination name",
          "examples": [
            "MyQueue",
            "MyTopic"
          ],
          "requirement_level": {
            "conditionally_required": "If span describes operation on a single message or if the value applies to all messages in the batch."
          },
          "sampling_relevant": true,
          "note": "Destination name SHOULD uniquely identify a specific queue, topic or other entity within the broker. If\nthe broker doesn't have such notion, the destination name SHOULD uniquely identify the broker.\n",
          "stability": "development"
        },
        {
          "name": "messaging.message.id",
          "type": "string",
          "brief": "A value used by the messaging system as an identifier for the message, represented as a string.",
          "examples": "452a7c7c7c7048c2f887f61572b18fc2",
          "requirement_level": {
            "recommended": "If span describes operation on a single message."
          },
          "stability": "development"
        },
        {
          "name": "messaging.operation.name",
          "type": "string",
          "brief": "The system-specific name of the messaging operation.\n",
          "examples": [
            "ack",
            "nack",
            "send"
          ],
          "requirement_level": "required",
          "sampling_relevant": true,
          "stability": "development"
        },
        {
          "name": "messaging.operation.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "create",
                "value": "create",
                "brief": "A message is created. \"Create\" spans always refer to a single message and are used to provide a unique creation context for messages in batch sending scenarios.\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "send",
                "value": "send",
                "brief": "One or more messages are provided for sending to an intermediary. If a single message is sent, the context of the \"Send\" span can be used as the creation context and no \"Create\" span needs to be created.\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "receive",
                "value": "receive",
                "brief": "One or more messages are requested by a consumer. This operation refers to pull-based scenarios, where consumers explicitly call methods of messaging SDKs to receive messages.\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "process",
                "value": "process",
                "brief": "One or more messages are processed by a consumer.\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "settle",
                "value": "settle",
                "brief": "One or more messages are settled.\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "deliver",
                "value": "deliver",
                "brief": "Deprecated. Use `process` instead.",
                "note": null,
                "stability": "development",
                "deprecated": "Replaced by `process`."
              },
              {
                "id": "publish",
                "value": "publish",
                "brief": "Deprecated. Use `send` instead.",
                "note": null,
                "stability": "development",
                "deprecated": "Replaced by `send`."
              }
            ]
          },
          "brief": "A string identifying the type of the messaging operation.\n",
          "requirement_level": {
            "conditionally_required": "If applicable."
          },
          "sampling_relevant": true,
          "note": "If a custom value is used, it MUST be of low cardinality.",
          "stability": "development"
        },
        {
          "name": "server.address",
          "type": "string",
          "brief": "Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": {
            "conditionally_required": "If available."
          },
          "sampling_relevant": true,
          "note": "Server domain name of the broker if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": "recommended",
          "sampling_relevant": true,
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/messaging/spans.yaml",
        "attributes": {
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ]
          },
          "messaging.destination.name": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "messaging.message.id": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "messaging.operation.name": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "messaging.operation.type": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "sampling_relevant"
            ]
          }
        }
      }
    },
    {
      "id": "messaging.attributes",
      "type": "attribute_group",
      "brief": "Defines a full set of attributes used in messaging systems.\n",
      "stability": "development",
      "attributes": [
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "amqp:decode-error",
            "KAFKA_STORAGE_ERROR",
            "channel-error"
          ],
          "requirement_level": {
            "conditionally_required": "If and only if the messaging operation has failed."
          },
          "note": "The `error.type` SHOULD be predictable, and SHOULD have low cardinality.\n\nWhen `error.type` is set to a type (e.g., an exception type), its\ncanonical class name identifying the type within the artifact SHOULD be used.\n\nInstrumentations SHOULD document the list of errors they report.\n\nThe cardinality of `error.type` within one instrumentation library SHOULD be low.\nTelemetry consumers that aggregate data from multiple instrumentation libraries and applications\nshould be prepared for `error.type` to have high cardinality at query time when no\nadditional filters are applied.\n\nIf the operation has completed successfully, instrumentations SHOULD NOT set `error.type`.\n\nIf a specific domain defines its own set of error identifiers (such as HTTP or gRPC status codes),\nit's RECOMMENDED to:\n\n- Use a domain-specific attribute\n- Set `error.type` to capture all errors, regardless of whether they are defined within the domain-specific set or not.\n",
          "stability": "stable"
        },
        {
          "name": "messaging.client.id",
          "type": "string",
          "brief": "A unique identifier for the client that consumes or produces a message.\n",
          "examples": [
            "client-5",
            "myhost@8742@s8083jm"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "messaging.message.conversation_id",
          "type": "string",
          "brief": "The conversation ID identifying the conversation to which the message belongs, represented as a string. Sometimes called \"Correlation ID\".\n",
          "examples": "MyConversationId",
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "messaging.destination.name",
          "type": "string",
          "brief": "The message destination name",
          "examples": [
            "MyQueue",
            "MyTopic"
          ],
          "requirement_level": {
            "conditionally_required": "If span describes operation on a single message or if the value applies to all messages in the batch."
          },
          "sampling_relevant": true,
          "note": "Destination name SHOULD uniquely identify a specific queue, topic or other entity within the broker. If\nthe broker doesn't have such notion, the destination name SHOULD uniquely identify the broker.\n",
          "stability": "development"
        },
        {
          "name": "messaging.message.id",
          "type": "string",
          "brief": "A value used by the messaging system as an identifier for the message, represented as a string.",
          "examples": "452a7c7c7c7048c2f887f61572b18fc2",
          "requirement_level": {
            "recommended": "If span describes operation on a single message."
          },
          "stability": "development"
        },
        {
          "name": "messaging.operation.name",
          "type": "string",
          "brief": "The system-specific name of the messaging operation.\n",
          "examples": [
            "ack",
            "nack",
            "send"
          ],
          "requirement_level": "required",
          "sampling_relevant": true,
          "stability": "development"
        },
        {
          "name": "messaging.operation.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "create",
                "value": "create",
                "brief": "A message is created. \"Create\" spans always refer to a single message and are used to provide a unique creation context for messages in batch sending scenarios.\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "send",
                "value": "send",
                "brief": "One or more messages are provided for sending to an intermediary. If a single message is sent, the context of the \"Send\" span can be used as the creation context and no \"Create\" span needs to be created.\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "receive",
                "value": "receive",
                "brief": "One or more messages are requested by a consumer. This operation refers to pull-based scenarios, where consumers explicitly call methods of messaging SDKs to receive messages.\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "process",
                "value": "process",
                "brief": "One or more messages are processed by a consumer.\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "settle",
                "value": "settle",
                "brief": "One or more messages are settled.\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "deliver",
                "value": "deliver",
                "brief": "Deprecated. Use `process` instead.",
                "note": null,
                "stability": "development",
                "deprecated": "Replaced by `process`."
              },
              {
                "id": "publish",
                "value": "publish",
                "brief": "Deprecated. Use `send` instead.",
                "note": null,
                "stability": "development",
                "deprecated": "Replaced by `send`."
              }
            ]
          },
          "brief": "A string identifying the type of the messaging operation.\n",
          "requirement_level": {
            "conditionally_required": "If applicable."
          },
          "sampling_relevant": true,
          "note": "If a custom value is used, it MUST be of low cardinality.",
          "stability": "development"
        },
        {
          "name": "server.address",
          "type": "string",
          "brief": "Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": {
            "conditionally_required": "If available."
          },
          "sampling_relevant": true,
          "note": "Server domain name of the broker if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": "recommended",
          "sampling_relevant": true,
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "messaging.batch.message_count",
          "type": "int",
          "brief": "The number of messages sent, received, or processed in the scope of the batching operation.",
          "examples": [
            0,
            1,
            2
          ],
          "requirement_level": {
            "conditionally_required": "If the span describes an operation on a batch of messages."
          },
          "note": "Instrumentations SHOULD NOT set `messaging.batch.message_count` on spans that operate with a single message. When a messaging client library supports both batch and single-message API for the same operation, instrumentations SHOULD use `messaging.batch.message_count` for batching APIs and SHOULD NOT use it for single-message APIs.\n",
          "stability": "development"
        },
        {
          "name": "messaging.consumer.group.name",
          "type": "string",
          "brief": "The name of the consumer group with which a consumer is associated.\n",
          "examples": [
            "my-group",
            "indexer"
          ],
          "requirement_level": {
            "conditionally_required": "If applicable."
          },
          "sampling_relevant": true,
          "note": "Semantic conventions for individual messaging systems SHOULD document whether `messaging.consumer.group.name` is applicable and what it means in the context of that system.\n",
          "stability": "development"
        },
        {
          "name": "messaging.destination.anonymous",
          "type": "boolean",
          "brief": "A boolean that is true if the message destination is anonymous (could be unnamed or have auto-generated name).",
          "requirement_level": {
            "conditionally_required": "If value is `true`. When missing, the value is assumed to be `false`."
          },
          "stability": "development"
        },
        {
          "name": "messaging.destination.partition.id",
          "type": "string",
          "brief": "The identifier of the partition messages are sent to or received from, unique within the `messaging.destination.name`.\n",
          "examples": "1",
          "requirement_level": {
            "recommended": "When applicable."
          },
          "sampling_relevant": true,
          "stability": "development"
        },
        {
          "name": "messaging.destination.subscription.name",
          "type": "string",
          "brief": "The name of the destination subscription from which a message is consumed.",
          "examples": [
            "subscription-a"
          ],
          "requirement_level": {
            "conditionally_required": "If applicable."
          },
          "sampling_relevant": true,
          "note": "Semantic conventions for individual messaging systems SHOULD document whether `messaging.destination.subscription.name` is applicable and what it means in the context of that system.\n",
          "stability": "development"
        },
        {
          "name": "messaging.destination.template",
          "type": "string",
          "brief": "Low cardinality representation of the messaging destination name",
          "examples": [
            "/customers/{customerId}"
          ],
          "requirement_level": {
            "conditionally_required": "If available. Instrumentations MUST NOT use `messaging.destination.name` as template unless low-cardinality of destination name is guaranteed.\n"
          },
          "sampling_relevant": true,
          "note": "Destination names could be constructed from templates. An example would be a destination name involving a user name or product id. Although the destination name in this case is of high cardinality, the underlying template is of low cardinality and can be effectively used for grouping and aggregation.\n",
          "stability": "development"
        },
        {
          "name": "messaging.destination.temporary",
          "type": "boolean",
          "brief": "A boolean that is true if the message destination is temporary and might not exist anymore after messages are processed.",
          "requirement_level": {
            "conditionally_required": "If value is `true`. When missing, the value is assumed to be `false`."
          },
          "stability": "development"
        },
        {
          "name": "messaging.message.body.size",
          "type": "int",
          "brief": "The size of the message body in bytes.\n",
          "examples": 1439,
          "requirement_level": "opt_in",
          "note": "This can refer to both the compressed or uncompressed body size. If both sizes are known, the uncompressed\nbody size should be used.\n",
          "stability": "development"
        },
        {
          "name": "messaging.message.envelope.size",
          "type": "int",
          "brief": "The size of the message body and metadata in bytes.\n",
          "examples": 2738,
          "requirement_level": "opt_in",
          "note": "This can refer to both the compressed or uncompressed size. If both sizes are known, the uncompressed\nsize should be used.\n",
          "stability": "development"
        },
        {
          "name": "messaging.system",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "activemq",
                "value": "activemq",
                "brief": "Apache ActiveMQ",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "aws_sqs",
                "value": "aws_sqs",
                "brief": "Amazon Simple Queue Service (SQS)",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "eventgrid",
                "value": "eventgrid",
                "brief": "Azure Event Grid",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "eventhubs",
                "value": "eventhubs",
                "brief": "Azure Event Hubs",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "servicebus",
                "value": "servicebus",
                "brief": "Azure Service Bus",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "gcp_pubsub",
                "value": "gcp_pubsub",
                "brief": "Google Cloud Pub/Sub",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "jms",
                "value": "jms",
                "brief": "Java Message Service",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "kafka",
                "value": "kafka",
                "brief": "Apache Kafka",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "rabbitmq",
                "value": "rabbitmq",
                "brief": "RabbitMQ",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "rocketmq",
                "value": "rocketmq",
                "brief": "Apache RocketMQ",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "pulsar",
                "value": "pulsar",
                "brief": "Apache Pulsar",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "The messaging system as identified by the client instrumentation.",
          "requirement_level": "required",
          "sampling_relevant": true,
          "note": "The actual messaging system may differ from the one known by the client. For example, when using Kafka client libraries to communicate with Azure Event Hubs, the `messaging.system` is set to `kafka` based on the instrumentation's best knowledge.\n",
          "stability": "development"
        },
        {
          "name": "network.peer.address",
          "type": "string",
          "brief": "Peer address of the messaging intermediary node where the operation was performed.",
          "examples": [
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": {
            "recommended": "If applicable for this messaging system."
          },
          "note": "Semantic conventions for individual messaging systems SHOULD document whether `network.peer.*` attributes are applicable.\nNetwork peer address and port are important when the application interacts with individual intermediary nodes directly,\nIf a messaging operation involved multiple network calls (for example retries), the address of the last contacted node SHOULD be used.\n",
          "stability": "stable"
        },
        {
          "name": "network.peer.port",
          "type": "int",
          "brief": "Peer port of the messaging intermediary node where the operation was performed.",
          "examples": [
            65123
          ],
          "requirement_level": {
            "recommended": "if and only if `network.peer.address` is set."
          },
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/messaging/spans.yaml",
        "attributes": {
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ]
          },
          "messaging.batch.message_count": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "messaging.client.id": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "messaging.consumer.group.name": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "messaging.destination.anonymous": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "messaging.destination.name": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "messaging.destination.partition.id": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "messaging.destination.subscription.name": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "messaging.destination.template": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "messaging.destination.temporary": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "messaging.message.body.size": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "messaging.message.conversation_id": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "messaging.message.envelope.size": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "messaging.message.id": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "messaging.operation.name": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "messaging.operation.type": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "messaging.system": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "network.peer.address": {
            "source_group": "registry.network",
            "inherited_fields": [
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "note",
              "requirement_level"
            ]
          },
          "network.peer.port": {
            "source_group": "registry.network",
            "inherited_fields": [
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "sampling_relevant"
            ]
          }
        }
      }
    },
    {
      "id": "messaging.network.attributes",
      "type": "attribute_group",
      "brief": "Attributes that describe messaging operation along with network information.",
      "stability": "development",
      "attributes": [
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "amqp:decode-error",
            "KAFKA_STORAGE_ERROR",
            "channel-error"
          ],
          "requirement_level": {
            "conditionally_required": "If and only if the messaging operation has failed."
          },
          "note": "The `error.type` SHOULD be predictable, and SHOULD have low cardinality.\n\nWhen `error.type` is set to a type (e.g., an exception type), its\ncanonical class name identifying the type within the artifact SHOULD be used.\n\nInstrumentations SHOULD document the list of errors they report.\n\nThe cardinality of `error.type` within one instrumentation library SHOULD be low.\nTelemetry consumers that aggregate data from multiple instrumentation libraries and applications\nshould be prepared for `error.type` to have high cardinality at query time when no\nadditional filters are applied.\n\nIf the operation has completed successfully, instrumentations SHOULD NOT set `error.type`.\n\nIf a specific domain defines its own set of error identifiers (such as HTTP or gRPC status codes),\nit's RECOMMENDED to:\n\n- Use a domain-specific attribute\n- Set `error.type` to capture all errors, regardless of whether they are defined within the domain-specific set or not.\n",
          "stability": "stable"
        },
        {
          "name": "network.peer.port",
          "type": "int",
          "brief": "Peer port number of the network connection.",
          "examples": [
            65123
          ],
          "requirement_level": "recommended",
          "stability": "stable"
        },
        {
          "name": "messaging.destination.name",
          "type": "string",
          "brief": "The message destination name",
          "examples": [
            "MyQueue",
            "MyTopic"
          ],
          "requirement_level": {
            "conditionally_required": "If span describes operation on a single message or if the value applies to all messages in the batch."
          },
          "sampling_relevant": true,
          "note": "Destination name SHOULD uniquely identify a specific queue, topic or other entity within the broker. If\nthe broker doesn't have such notion, the destination name SHOULD uniquely identify the broker.\n",
          "stability": "development"
        },
        {
          "name": "messaging.message.id",
          "type": "string",
          "brief": "A value used by the messaging system as an identifier for the message, represented as a string.",
          "examples": "452a7c7c7c7048c2f887f61572b18fc2",
          "requirement_level": {
            "recommended": "If span describes operation on a single message."
          },
          "stability": "development"
        },
        {
          "name": "messaging.operation.name",
          "type": "string",
          "brief": "The system-specific name of the messaging operation.\n",
          "examples": [
            "ack",
            "nack",
            "send"
          ],
          "requirement_level": "required",
          "sampling_relevant": true,
          "stability": "development"
        },
        {
          "name": "messaging.operation.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "create",
                "value": "create",
                "brief": "A message is created. \"Create\" spans always refer to a single message and are used to provide a unique creation context for messages in batch sending scenarios.\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "send",
                "value": "send",
                "brief": "One or more messages are provided for sending to an intermediary. If a single message is sent, the context of the \"Send\" span can be used as the creation context and no \"Create\" span needs to be created.\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "receive",
                "value": "receive",
                "brief": "One or more messages are requested by a consumer. This operation refers to pull-based scenarios, where consumers explicitly call methods of messaging SDKs to receive messages.\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "process",
                "value": "process",
                "brief": "One or more messages are processed by a consumer.\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "settle",
                "value": "settle",
                "brief": "One or more messages are settled.\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "deliver",
                "value": "deliver",
                "brief": "Deprecated. Use `process` instead.",
                "note": null,
                "stability": "development",
                "deprecated": "Replaced by `process`."
              },
              {
                "id": "publish",
                "value": "publish",
                "brief": "Deprecated. Use `send` instead.",
                "note": null,
                "stability": "development",
                "deprecated": "Replaced by `send`."
              }
            ]
          },
          "brief": "A string identifying the type of the messaging operation.\n",
          "requirement_level": {
            "conditionally_required": "If applicable."
          },
          "sampling_relevant": true,
          "note": "If a custom value is used, it MUST be of low cardinality.",
          "stability": "development"
        },
        {
          "name": "server.address",
          "type": "string",
          "brief": "Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": {
            "conditionally_required": "If available."
          },
          "sampling_relevant": true,
          "note": "Server domain name of the broker if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": "recommended",
          "sampling_relevant": true,
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "network.peer.address",
          "type": "string",
          "brief": "Peer address of the network connection - IP address or Unix domain socket name.",
          "examples": [
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "recommended",
          "note": "If an operation involved multiple network calls (for example retries), the address of the last contacted node SHOULD be used.\n",
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/messaging/spans.yaml",
        "attributes": {
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ]
          },
          "messaging.destination.name": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "messaging.message.id": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "messaging.operation.name": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "messaging.operation.type": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "network.peer.address": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ]
          },
          "network.peer.port": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "sampling_relevant"
            ]
          }
        }
      }
    },
    {
      "id": "messaging.rabbitmq",
      "type": "attribute_group",
      "brief": "Attributes for RabbitMQ\n",
      "stability": "development",
      "attributes": [
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "amqp:decode-error",
            "KAFKA_STORAGE_ERROR",
            "channel-error"
          ],
          "requirement_level": {
            "conditionally_required": "If and only if the messaging operation has failed."
          },
          "note": "The `error.type` SHOULD be predictable, and SHOULD have low cardinality.\n\nWhen `error.type` is set to a type (e.g., an exception type), its\ncanonical class name identifying the type within the artifact SHOULD be used.\n\nInstrumentations SHOULD document the list of errors they report.\n\nThe cardinality of `error.type` within one instrumentation library SHOULD be low.\nTelemetry consumers that aggregate data from multiple instrumentation libraries and applications\nshould be prepared for `error.type` to have high cardinality at query time when no\nadditional filters are applied.\n\nIf the operation has completed successfully, instrumentations SHOULD NOT set `error.type`.\n\nIf a specific domain defines its own set of error identifiers (such as HTTP or gRPC status codes),\nit's RECOMMENDED to:\n\n- Use a domain-specific attribute\n- Set `error.type` to capture all errors, regardless of whether they are defined within the domain-specific set or not.\n",
          "stability": "stable"
        },
        {
          "name": "network.peer.port",
          "type": "int",
          "brief": "Peer port number of the network connection.",
          "examples": [
            65123
          ],
          "requirement_level": "recommended",
          "stability": "stable"
        },
        {
          "name": "messaging.message.id",
          "type": "string",
          "brief": "A value used by the messaging system as an identifier for the message, represented as a string.",
          "examples": "452a7c7c7c7048c2f887f61572b18fc2",
          "requirement_level": {
            "recommended": "If span describes operation on a single message."
          },
          "stability": "development"
        },
        {
          "name": "messaging.operation.name",
          "type": "string",
          "brief": "The system-specific name of the messaging operation.\n",
          "examples": [
            "ack",
            "nack",
            "send"
          ],
          "requirement_level": "required",
          "sampling_relevant": true,
          "stability": "development"
        },
        {
          "name": "messaging.operation.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "create",
                "value": "create",
                "brief": "A message is created. \"Create\" spans always refer to a single message and are used to provide a unique creation context for messages in batch sending scenarios.\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "send",
                "value": "send",
                "brief": "One or more messages are provided for sending to an intermediary. If a single message is sent, the context of the \"Send\" span can be used as the creation context and no \"Create\" span needs to be created.\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "receive",
                "value": "receive",
                "brief": "One or more messages are requested by a consumer. This operation refers to pull-based scenarios, where consumers explicitly call methods of messaging SDKs to receive messages.\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "process",
                "value": "process",
                "brief": "One or more messages are processed by a consumer.\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "settle",
                "value": "settle",
                "brief": "One or more messages are settled.\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "deliver",
                "value": "deliver",
                "brief": "Deprecated. Use `process` instead.",
                "note": null,
                "stability": "development",
                "deprecated": "Replaced by `process`."
              },
              {
                "id": "publish",
                "value": "publish",
                "brief": "Deprecated. Use `send` instead.",
                "note": null,
                "stability": "development",
                "deprecated": "Replaced by `send`."
              }
            ]
          },
          "brief": "A string identifying the type of the messaging operation.\n",
          "requirement_level": {
            "conditionally_required": "If applicable."
          },
          "sampling_relevant": true,
          "note": "If a custom value is used, it MUST be of low cardinality.",
          "stability": "development"
        },
        {
          "name": "server.address",
          "type": "string",
          "brief": "Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": {
            "conditionally_required": "If available."
          },
          "sampling_relevant": true,
          "note": "Server domain name of the broker if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": "recommended",
          "sampling_relevant": true,
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "messaging.message.body.size",
          "type": "int",
          "brief": "The size of the message body in bytes.\n",
          "examples": 1439,
          "requirement_level": "opt_in",
          "note": "This can refer to both the compressed or uncompressed body size. If both sizes are known, the uncompressed\nbody size should be used.\n",
          "stability": "development"
        },
        {
          "name": "network.peer.address",
          "type": "string",
          "brief": "Peer address of the network connection - IP address or Unix domain socket name.",
          "examples": [
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "recommended",
          "note": "If an operation involved multiple network calls (for example retries), the address of the last contacted node SHOULD be used.\n",
          "stability": "stable"
        },
        {
          "name": "messaging.destination.name",
          "type": "string",
          "brief": "The message destination name",
          "examples": [
            "direct_logs:warning",
            "logs"
          ],
          "requirement_level": "required",
          "sampling_relevant": true,
          "note": "In RabbitMQ, the destination is defined by an *exchange*, a *routing key* and for consumers, a *queue*.\n\n`messaging.destination.name` SHOULD be set to:\n\n- **On the producer side**: `{exchange}:{routing key}` when both values are present and non-empty.\nWhen only one is available, only that value SHOULD be used. E.g., `{exchange}` or `{routing key}`.\nOtherwise: `amq.default` when the default exchange is used and no routing key is provided\n\n- **On the consumer side**: `{exchange}:{routing key}:{queue}` when all values are present and non-empty.\nIf any has an empty value (e.g., the default exchange is used) it SHOULD be omitted.\nFor cases when `{routing key}` and `{queue}` are equal, only one of them SHOULD\nbe used, e.g., `{exchange}:{routing key}`.\n",
          "stability": "development"
        },
        {
          "name": "messaging.message.conversation_id",
          "type": "string",
          "brief": "Message [correlation Id](https://www.rabbitmq.com/tutorials/tutorial-six-java#correlation-id) property.\n",
          "examples": "MyConversationId",
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "messaging.rabbitmq.destination.routing_key",
          "type": "string",
          "brief": "RabbitMQ message routing key.\n",
          "examples": "myKey",
          "requirement_level": {
            "conditionally_required": "If not empty."
          },
          "stability": "development"
        },
        {
          "name": "messaging.rabbitmq.message.delivery_tag",
          "type": "int",
          "brief": "RabbitMQ message delivery tag\n",
          "examples": 123,
          "requirement_level": {
            "conditionally_required": "When available."
          },
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/messaging/spans.yaml",
        "attributes": {
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ]
          },
          "messaging.destination.name": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "note",
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "messaging.message.body.size": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "messaging.message.conversation_id": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief"
            ]
          },
          "messaging.message.id": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "messaging.operation.name": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "messaging.operation.type": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "messaging.rabbitmq.destination.routing_key": {
            "source_group": "registry.messaging.rabbitmq",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "messaging.rabbitmq.message.delivery_tag": {
            "source_group": "registry.messaging.rabbitmq",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "network.peer.address": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ]
          },
          "network.peer.port": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "sampling_relevant"
            ]
          }
        }
      }
    },
    {
      "id": "messaging.kafka",
      "type": "attribute_group",
      "brief": "Attributes for Apache Kafka\n",
      "stability": "development",
      "attributes": [
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "amqp:decode-error",
            "KAFKA_STORAGE_ERROR",
            "channel-error"
          ],
          "requirement_level": {
            "conditionally_required": "If and only if the messaging operation has failed."
          },
          "note": "The `error.type` SHOULD be predictable, and SHOULD have low cardinality.\n\nWhen `error.type` is set to a type (e.g., an exception type), its\ncanonical class name identifying the type within the artifact SHOULD be used.\n\nInstrumentations SHOULD document the list of errors they report.\n\nThe cardinality of `error.type` within one instrumentation library SHOULD be low.\nTelemetry consumers that aggregate data from multiple instrumentation libraries and applications\nshould be prepared for `error.type` to have high cardinality at query time when no\nadditional filters are applied.\n\nIf the operation has completed successfully, instrumentations SHOULD NOT set `error.type`.\n\nIf a specific domain defines its own set of error identifiers (such as HTTP or gRPC status codes),\nit's RECOMMENDED to:\n\n- Use a domain-specific attribute\n- Set `error.type` to capture all errors, regardless of whether they are defined within the domain-specific set or not.\n",
          "stability": "stable"
        },
        {
          "name": "messaging.client.id",
          "type": "string",
          "brief": "A unique identifier for the client that consumes or produces a message.\n",
          "examples": [
            "client-5",
            "myhost@8742@s8083jm"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "messaging.destination.name",
          "type": "string",
          "brief": "The message destination name",
          "examples": [
            "MyQueue",
            "MyTopic"
          ],
          "requirement_level": {
            "conditionally_required": "If span describes operation on a single message or if the value applies to all messages in the batch."
          },
          "sampling_relevant": true,
          "note": "Destination name SHOULD uniquely identify a specific queue, topic or other entity within the broker. If\nthe broker doesn't have such notion, the destination name SHOULD uniquely identify the broker.\n",
          "stability": "development"
        },
        {
          "name": "messaging.message.id",
          "type": "string",
          "brief": "A value used by the messaging system as an identifier for the message, represented as a string.",
          "examples": "452a7c7c7c7048c2f887f61572b18fc2",
          "requirement_level": {
            "recommended": "If span describes operation on a single message."
          },
          "stability": "development"
        },
        {
          "name": "messaging.operation.name",
          "type": "string",
          "brief": "The system-specific name of the messaging operation.\n",
          "examples": [
            "ack",
            "nack",
            "send"
          ],
          "requirement_level": "required",
          "sampling_relevant": true,
          "stability": "development"
        },
        {
          "name": "messaging.operation.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "create",
                "value": "create",
                "brief": "A message is created. \"Create\" spans always refer to a single message and are used to provide a unique creation context for messages in batch sending scenarios.\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "send",
                "value": "send",
                "brief": "One or more messages are provided for sending to an intermediary. If a single message is sent, the context of the \"Send\" span can be used as the creation context and no \"Create\" span needs to be created.\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "receive",
                "value": "receive",
                "brief": "One or more messages are requested by a consumer. This operation refers to pull-based scenarios, where consumers explicitly call methods of messaging SDKs to receive messages.\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "process",
                "value": "process",
                "brief": "One or more messages are processed by a consumer.\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "settle",
                "value": "settle",
                "brief": "One or more messages are settled.\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "deliver",
                "value": "deliver",
                "brief": "Deprecated. Use `process` instead.",
                "note": null,
                "stability": "development",
                "deprecated": "Replaced by `process`."
              },
              {
                "id": "publish",
                "value": "publish",
                "brief": "Deprecated. Use `send` instead.",
                "note": null,
                "stability": "development",
                "deprecated": "Replaced by `send`."
              }
            ]
          },
          "brief": "A string identifying the type of the messaging operation.\n",
          "requirement_level": {
            "conditionally_required": "If applicable."
          },
          "sampling_relevant": true,
          "note": "If a custom value is used, it MUST be of low cardinality.",
          "stability": "development"
        },
        {
          "name": "server.address",
          "type": "string",
          "brief": "Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": {
            "conditionally_required": "If available."
          },
          "sampling_relevant": true,
          "note": "Server domain name of the broker if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": "recommended",
          "sampling_relevant": true,
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "messaging.batch.message_count",
          "type": "int",
          "brief": "The number of messages sent, received, or processed in the scope of the batching operation.",
          "examples": [
            0,
            1,
            2
          ],
          "requirement_level": {
            "conditionally_required": "If the span describes an operation on a batch of messages."
          },
          "note": "Instrumentations SHOULD NOT set `messaging.batch.message_count` on spans that operate with a single message. When a messaging client library supports both batch and single-message API for the same operation, instrumentations SHOULD use `messaging.batch.message_count` for batching APIs and SHOULD NOT use it for single-message APIs.\n",
          "stability": "development"
        },
        {
          "name": "messaging.consumer.group.name",
          "type": "string",
          "brief": "Kafka [consumer group id](https://docs.confluent.io/platform/current/clients/consumer.html).",
          "examples": [
            "my-group",
            "indexer"
          ],
          "requirement_level": "recommended",
          "sampling_relevant": true,
          "stability": "development"
        },
        {
          "name": "messaging.destination.partition.id",
          "type": "string",
          "brief": "String representation of the partition id the message (or batch) is sent to or received from.\n",
          "examples": "1",
          "requirement_level": "recommended",
          "sampling_relevant": true,
          "stability": "development"
        },
        {
          "name": "messaging.kafka.message.key",
          "type": "string",
          "brief": "Message keys in Kafka are used for grouping alike messages to ensure they're processed on the same partition. They differ from `messaging.message.id` in that they're not unique. If the key is `null`, the attribute MUST NOT be set.\n",
          "examples": "myKey",
          "requirement_level": {
            "recommended": "If span describes operation on a single message."
          },
          "note": "If the key type is not string, it's string representation has to be supplied for the attribute. If the key has no unambiguous, canonical string form, don't include its value.\n",
          "stability": "development"
        },
        {
          "name": "messaging.kafka.message.tombstone",
          "type": "boolean",
          "brief": "A boolean that is true if the message is a tombstone.",
          "requirement_level": {
            "conditionally_required": "If value is `true`. When missing, the value is assumed to be `false`."
          },
          "stability": "development"
        },
        {
          "name": "messaging.kafka.offset",
          "type": "int",
          "brief": "The offset of a record in the corresponding Kafka partition.\n",
          "examples": 42,
          "requirement_level": {
            "recommended": "If span describes operation on a single message."
          },
          "stability": "development"
        },
        {
          "name": "messaging.message.body.size",
          "type": "int",
          "brief": "The size of the message body in bytes. Only applicable for spans describing single message operations.",
          "examples": 1439,
          "requirement_level": "opt_in",
          "note": "This can refer to both the compressed or uncompressed body size. If both sizes are known, the uncompressed\nbody size should be used.\n",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/messaging/spans.yaml",
        "attributes": {
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ]
          },
          "messaging.batch.message_count": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "messaging.client.id": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "messaging.consumer.group.name": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "examples",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "note",
              "sampling_relevant"
            ]
          },
          "messaging.destination.name": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "messaging.destination.partition.id": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "messaging.kafka.message.key": {
            "source_group": "registry.messaging.kafka",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "messaging.kafka.message.tombstone": {
            "source_group": "registry.messaging.kafka",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "messaging.kafka.offset": {
            "source_group": "registry.messaging.kafka",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "messaging.message.body.size": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "requirement_level"
            ]
          },
          "messaging.message.id": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "messaging.operation.name": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "messaging.operation.type": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "sampling_relevant"
            ]
          }
        }
      }
    },
    {
      "id": "messaging.rocketmq",
      "type": "attribute_group",
      "brief": "Attributes for Apache RocketMQ\n",
      "stability": "development",
      "attributes": [
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "amqp:decode-error",
            "KAFKA_STORAGE_ERROR",
            "channel-error"
          ],
          "requirement_level": {
            "conditionally_required": "If and only if the messaging operation has failed."
          },
          "note": "The `error.type` SHOULD be predictable, and SHOULD have low cardinality.\n\nWhen `error.type` is set to a type (e.g., an exception type), its\ncanonical class name identifying the type within the artifact SHOULD be used.\n\nInstrumentations SHOULD document the list of errors they report.\n\nThe cardinality of `error.type` within one instrumentation library SHOULD be low.\nTelemetry consumers that aggregate data from multiple instrumentation libraries and applications\nshould be prepared for `error.type` to have high cardinality at query time when no\nadditional filters are applied.\n\nIf the operation has completed successfully, instrumentations SHOULD NOT set `error.type`.\n\nIf a specific domain defines its own set of error identifiers (such as HTTP or gRPC status codes),\nit's RECOMMENDED to:\n\n- Use a domain-specific attribute\n- Set `error.type` to capture all errors, regardless of whether they are defined within the domain-specific set or not.\n",
          "stability": "stable"
        },
        {
          "name": "messaging.client.id",
          "type": "string",
          "brief": "A unique identifier for the client that consumes or produces a message.\n",
          "examples": [
            "client-5",
            "myhost@8742@s8083jm"
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "messaging.rocketmq.consumption_model",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "clustering",
                "value": "clustering",
                "brief": "Clustering consumption model",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "broadcasting",
                "value": "broadcasting",
                "brief": "Broadcasting consumption model",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "Model of message consumption. This only applies to consumer spans.\n",
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "messaging.rocketmq.message.keys",
          "type": "string[]",
          "brief": "Key(s) of message, another way to mark message besides message id.\n",
          "examples": [
            [
              "keyA",
              "keyB"
            ]
          ],
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "messaging.rocketmq.message.tag",
          "type": "string",
          "brief": "The secondary classifier of message besides topic.\n",
          "examples": "tagA",
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "messaging.rocketmq.message.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "normal",
                "value": "normal",
                "brief": "Normal message",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "fifo",
                "value": "fifo",
                "brief": "FIFO message",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "delay",
                "value": "delay",
                "brief": "Delay message",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "transaction",
                "value": "transaction",
                "brief": "Transaction message",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "Type of message.\n",
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "messaging.destination.name",
          "type": "string",
          "brief": "The message destination name",
          "examples": [
            "MyQueue",
            "MyTopic"
          ],
          "requirement_level": {
            "conditionally_required": "If span describes operation on a single message or if the value applies to all messages in the batch."
          },
          "sampling_relevant": true,
          "note": "Destination name SHOULD uniquely identify a specific queue, topic or other entity within the broker. If\nthe broker doesn't have such notion, the destination name SHOULD uniquely identify the broker.\n",
          "stability": "development"
        },
        {
          "name": "messaging.message.id",
          "type": "string",
          "brief": "A value used by the messaging system as an identifier for the message, represented as a string.",
          "examples": "452a7c7c7c7048c2f887f61572b18fc2",
          "requirement_level": {
            "recommended": "If span describes operation on a single message."
          },
          "stability": "development"
        },
        {
          "name": "messaging.operation.name",
          "type": "string",
          "brief": "The system-specific name of the messaging operation.\n",
          "examples": [
            "ack",
            "nack",
            "send"
          ],
          "requirement_level": "required",
          "sampling_relevant": true,
          "stability": "development"
        },
        {
          "name": "messaging.operation.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "create",
                "value": "create",
                "brief": "A message is created. \"Create\" spans always refer to a single message and are used to provide a unique creation context for messages in batch sending scenarios.\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "send",
                "value": "send",
                "brief": "One or more messages are provided for sending to an intermediary. If a single message is sent, the context of the \"Send\" span can be used as the creation context and no \"Create\" span needs to be created.\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "receive",
                "value": "receive",
                "brief": "One or more messages are requested by a consumer. This operation refers to pull-based scenarios, where consumers explicitly call methods of messaging SDKs to receive messages.\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "process",
                "value": "process",
                "brief": "One or more messages are processed by a consumer.\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "settle",
                "value": "settle",
                "brief": "One or more messages are settled.\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "deliver",
                "value": "deliver",
                "brief": "Deprecated. Use `process` instead.",
                "note": null,
                "stability": "development",
                "deprecated": "Replaced by `process`."
              },
              {
                "id": "publish",
                "value": "publish",
                "brief": "Deprecated. Use `send` instead.",
                "note": null,
                "stability": "development",
                "deprecated": "Replaced by `send`."
              }
            ]
          },
          "brief": "A string identifying the type of the messaging operation.\n",
          "requirement_level": {
            "conditionally_required": "If applicable."
          },
          "sampling_relevant": true,
          "note": "If a custom value is used, it MUST be of low cardinality.",
          "stability": "development"
        },
        {
          "name": "server.address",
          "type": "string",
          "brief": "Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": {
            "conditionally_required": "If available."
          },
          "sampling_relevant": true,
          "note": "Server domain name of the broker if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": "recommended",
          "sampling_relevant": true,
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "messaging.batch.message_count",
          "type": "int",
          "brief": "The number of messages sent, received, or processed in the scope of the batching operation.",
          "examples": [
            0,
            1,
            2
          ],
          "requirement_level": {
            "conditionally_required": "If the span describes an operation on a batch of messages."
          },
          "note": "Instrumentations SHOULD NOT set `messaging.batch.message_count` on spans that operate with a single message. When a messaging client library supports both batch and single-message API for the same operation, instrumentations SHOULD use `messaging.batch.message_count` for batching APIs and SHOULD NOT use it for single-message APIs.\n",
          "stability": "development"
        },
        {
          "name": "messaging.message.body.size",
          "type": "int",
          "brief": "The size of the message body in bytes.\n",
          "examples": 1439,
          "requirement_level": "opt_in",
          "note": "This can refer to both the compressed or uncompressed body size. If both sizes are known, the uncompressed\nbody size should be used.\n",
          "stability": "development"
        },
        {
          "name": "messaging.consumer.group.name",
          "type": "string",
          "brief": "RocketMQ [consumer group name](https://rocketmq.apache.org/docs/domainModel/07consumergroup).",
          "examples": [
            "my-group",
            "indexer"
          ],
          "requirement_level": "required",
          "sampling_relevant": true,
          "stability": "development"
        },
        {
          "name": "messaging.rocketmq.message.delay_time_level",
          "type": "int",
          "brief": "The delay time level for delay message, which determines the message delay time.\n",
          "examples": 3,
          "requirement_level": {
            "conditionally_required": "If the message type is delay and delivery timestamp is not specified."
          },
          "stability": "development"
        },
        {
          "name": "messaging.rocketmq.message.delivery_timestamp",
          "type": "int",
          "brief": "The timestamp in milliseconds that the delay message is expected to be delivered to consumer.\n",
          "examples": 1665987217045,
          "requirement_level": {
            "conditionally_required": "If the message type is delay and delay time level is not specified."
          },
          "stability": "development"
        },
        {
          "name": "messaging.rocketmq.message.group",
          "type": "string",
          "brief": "It is essential for FIFO message. Messages that belong to the same message group are always processed one by one within the same consumer group.\n",
          "examples": "myMessageGroup",
          "requirement_level": {
            "conditionally_required": "If the message type is FIFO."
          },
          "stability": "development"
        },
        {
          "name": "messaging.rocketmq.namespace",
          "type": "string",
          "brief": "Namespace of RocketMQ resources, resources in different namespaces are individual.\n",
          "examples": "myNamespace",
          "requirement_level": "required",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/messaging/spans.yaml",
        "attributes": {
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ]
          },
          "messaging.batch.message_count": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "messaging.client.id": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "messaging.consumer.group.name": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "note",
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "messaging.destination.name": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "messaging.message.body.size": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "messaging.message.id": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "messaging.operation.name": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "messaging.operation.type": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "messaging.rocketmq.consumption_model": {
            "source_group": "registry.messaging.rocketmq",
            "inherited_fields": [
              "brief",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "messaging.rocketmq.message.delay_time_level": {
            "source_group": "registry.messaging.rocketmq",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "messaging.rocketmq.message.delivery_timestamp": {
            "source_group": "registry.messaging.rocketmq",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "messaging.rocketmq.message.group": {
            "source_group": "registry.messaging.rocketmq",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "messaging.rocketmq.message.keys": {
            "source_group": "registry.messaging.rocketmq",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "messaging.rocketmq.message.tag": {
            "source_group": "registry.messaging.rocketmq",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "messaging.rocketmq.message.type": {
            "source_group": "registry.messaging.rocketmq",
            "inherited_fields": [
              "brief",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "messaging.rocketmq.namespace": {
            "source_group": "registry.messaging.rocketmq",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "sampling_relevant"
            ]
          }
        }
      }
    },
    {
      "id": "messaging.gcp_pubsub",
      "type": "attribute_group",
      "brief": "Attributes for Google Cloud Pub/Sub\n",
      "stability": "development",
      "attributes": [
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "amqp:decode-error",
            "KAFKA_STORAGE_ERROR",
            "channel-error"
          ],
          "requirement_level": {
            "conditionally_required": "If and only if the messaging operation has failed."
          },
          "note": "The `error.type` SHOULD be predictable, and SHOULD have low cardinality.\n\nWhen `error.type` is set to a type (e.g., an exception type), its\ncanonical class name identifying the type within the artifact SHOULD be used.\n\nInstrumentations SHOULD document the list of errors they report.\n\nThe cardinality of `error.type` within one instrumentation library SHOULD be low.\nTelemetry consumers that aggregate data from multiple instrumentation libraries and applications\nshould be prepared for `error.type` to have high cardinality at query time when no\nadditional filters are applied.\n\nIf the operation has completed successfully, instrumentations SHOULD NOT set `error.type`.\n\nIf a specific domain defines its own set of error identifiers (such as HTTP or gRPC status codes),\nit's RECOMMENDED to:\n\n- Use a domain-specific attribute\n- Set `error.type` to capture all errors, regardless of whether they are defined within the domain-specific set or not.\n",
          "stability": "stable"
        },
        {
          "name": "messaging.gcp_pubsub.message.ack_id",
          "type": "string",
          "brief": "The ack id for a given message.\n",
          "examples": "ack_id",
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "messaging.gcp_pubsub.message.ack_deadline",
          "type": "int",
          "brief": "The ack deadline in seconds set for the modify ack deadline request.\n",
          "examples": 10,
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "messaging.gcp_pubsub.message.delivery_attempt",
          "type": "int",
          "brief": "The delivery attempt for a given message.\n",
          "examples": 2,
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "messaging.destination.name",
          "type": "string",
          "brief": "The message destination name",
          "examples": [
            "MyQueue",
            "MyTopic"
          ],
          "requirement_level": {
            "conditionally_required": "If span describes operation on a single message or if the value applies to all messages in the batch."
          },
          "sampling_relevant": true,
          "note": "Destination name SHOULD uniquely identify a specific queue, topic or other entity within the broker. If\nthe broker doesn't have such notion, the destination name SHOULD uniquely identify the broker.\n",
          "stability": "development"
        },
        {
          "name": "messaging.message.id",
          "type": "string",
          "brief": "A value used by the messaging system as an identifier for the message, represented as a string.",
          "examples": "452a7c7c7c7048c2f887f61572b18fc2",
          "requirement_level": {
            "recommended": "If span describes operation on a single message."
          },
          "stability": "development"
        },
        {
          "name": "messaging.operation.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "create",
                "value": "create",
                "brief": "A message is created. \"Create\" spans always refer to a single message and are used to provide a unique creation context for messages in batch sending scenarios.\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "send",
                "value": "send",
                "brief": "One or more messages are provided for sending to an intermediary. If a single message is sent, the context of the \"Send\" span can be used as the creation context and no \"Create\" span needs to be created.\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "receive",
                "value": "receive",
                "brief": "One or more messages are requested by a consumer. This operation refers to pull-based scenarios, where consumers explicitly call methods of messaging SDKs to receive messages.\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "process",
                "value": "process",
                "brief": "One or more messages are processed by a consumer.\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "settle",
                "value": "settle",
                "brief": "One or more messages are settled.\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "deliver",
                "value": "deliver",
                "brief": "Deprecated. Use `process` instead.",
                "note": null,
                "stability": "development",
                "deprecated": "Replaced by `process`."
              },
              {
                "id": "publish",
                "value": "publish",
                "brief": "Deprecated. Use `send` instead.",
                "note": null,
                "stability": "development",
                "deprecated": "Replaced by `send`."
              }
            ]
          },
          "brief": "A string identifying the type of the messaging operation.\n",
          "requirement_level": {
            "conditionally_required": "If applicable."
          },
          "sampling_relevant": true,
          "note": "If a custom value is used, it MUST be of low cardinality.",
          "stability": "development"
        },
        {
          "name": "server.address",
          "type": "string",
          "brief": "Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": {
            "conditionally_required": "If available."
          },
          "sampling_relevant": true,
          "note": "Server domain name of the broker if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": "recommended",
          "sampling_relevant": true,
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "messaging.batch.message_count",
          "type": "int",
          "brief": "The number of messages sent, received, or processed in the scope of the batching operation.",
          "examples": [
            0,
            1,
            2
          ],
          "requirement_level": {
            "conditionally_required": "If the span describes an operation on a batch of messages."
          },
          "note": "Instrumentations SHOULD NOT set `messaging.batch.message_count` on spans that operate with a single message. When a messaging client library supports both batch and single-message API for the same operation, instrumentations SHOULD use `messaging.batch.message_count` for batching APIs and SHOULD NOT use it for single-message APIs.\n",
          "stability": "development"
        },
        {
          "name": "messaging.destination.subscription.name",
          "type": "string",
          "brief": "Google Pub/Sub [subscription name](https://cloud.google.com/pubsub/docs/subscription-overview).",
          "examples": [
            "subscription-a"
          ],
          "requirement_level": "recommended",
          "sampling_relevant": true,
          "stability": "development"
        },
        {
          "name": "messaging.gcp_pubsub.message.ordering_key",
          "type": "string",
          "brief": "The ordering key for a given message. If the attribute is not present, the message does not have an ordering key.\n",
          "examples": "ordering_key",
          "requirement_level": {
            "conditionally_required": "If the message type has an ordering key set."
          },
          "stability": "development"
        },
        {
          "name": "messaging.operation.name",
          "type": "string",
          "brief": "The system-specific name of the messaging operation.\n",
          "examples": [
            "ack",
            "nack",
            "send"
          ],
          "requirement_level": "required",
          "sampling_relevant": true,
          "note": "The `messaging.operation.name` has the following list of well-known values in the context of Google Pub/Sub.\nIf one of them applies, then the respective value MUST be used; otherwise, a custom value MAY be used.\n\n- `ack` and `nack` for settlement operations\n- `send` for publishing operations\n- `modack` for extending the lease for a single message or batch of messages\n- `subscribe` for operations that represent the time from after the message was received to when the message is acknowledged, negatively acknowledged, or expired.\n- `create` and `receive` for [common messaging operations](/docs/messaging/messaging-spans.md#operation-types)\n",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/messaging/spans.yaml",
        "attributes": {
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ]
          },
          "messaging.batch.message_count": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "messaging.destination.name": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "messaging.destination.subscription.name": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "examples",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "note",
              "sampling_relevant"
            ]
          },
          "messaging.gcp_pubsub.message.ack_deadline": {
            "source_group": "registry.messaging.gcp_pubsub",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "messaging.gcp_pubsub.message.ack_id": {
            "source_group": "registry.messaging.gcp_pubsub",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "messaging.gcp_pubsub.message.delivery_attempt": {
            "source_group": "registry.messaging.gcp_pubsub",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "messaging.gcp_pubsub.message.ordering_key": {
            "source_group": "registry.messaging.gcp_pubsub",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "messaging.message.id": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "messaging.operation.name": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "messaging.operation.type": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "sampling_relevant"
            ]
          }
        }
      }
    },
    {
      "id": "messaging.servicebus",
      "type": "attribute_group",
      "brief": "Attributes for Azure Service Bus\n",
      "stability": "development",
      "attributes": [
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "amqp:decode-error",
            "KAFKA_STORAGE_ERROR",
            "channel-error"
          ],
          "requirement_level": {
            "conditionally_required": "If and only if the messaging operation has failed."
          },
          "note": "The `error.type` SHOULD be predictable, and SHOULD have low cardinality.\n\nWhen `error.type` is set to a type (e.g., an exception type), its\ncanonical class name identifying the type within the artifact SHOULD be used.\n\nInstrumentations SHOULD document the list of errors they report.\n\nThe cardinality of `error.type` within one instrumentation library SHOULD be low.\nTelemetry consumers that aggregate data from multiple instrumentation libraries and applications\nshould be prepared for `error.type` to have high cardinality at query time when no\nadditional filters are applied.\n\nIf the operation has completed successfully, instrumentations SHOULD NOT set `error.type`.\n\nIf a specific domain defines its own set of error identifiers (such as HTTP or gRPC status codes),\nit's RECOMMENDED to:\n\n- Use a domain-specific attribute\n- Set `error.type` to capture all errors, regardless of whether they are defined within the domain-specific set or not.\n",
          "stability": "stable"
        },
        {
          "name": "messaging.servicebus.message.enqueued_time",
          "type": "int",
          "brief": "The UTC epoch seconds at which the message has been accepted and stored in the entity.\n",
          "examples": 1701393730,
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "messaging.destination.name",
          "type": "string",
          "brief": "The message destination name",
          "examples": [
            "MyQueue",
            "MyTopic"
          ],
          "requirement_level": {
            "conditionally_required": "If span describes operation on a single message or if the value applies to all messages in the batch."
          },
          "sampling_relevant": true,
          "note": "Destination name SHOULD uniquely identify a specific queue, topic or other entity within the broker. If\nthe broker doesn't have such notion, the destination name SHOULD uniquely identify the broker.\n",
          "stability": "development"
        },
        {
          "name": "messaging.message.id",
          "type": "string",
          "brief": "A value used by the messaging system as an identifier for the message, represented as a string.",
          "examples": "452a7c7c7c7048c2f887f61572b18fc2",
          "requirement_level": {
            "recommended": "If span describes operation on a single message."
          },
          "stability": "development"
        },
        {
          "name": "messaging.operation.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "create",
                "value": "create",
                "brief": "A message is created. \"Create\" spans always refer to a single message and are used to provide a unique creation context for messages in batch sending scenarios.\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "send",
                "value": "send",
                "brief": "One or more messages are provided for sending to an intermediary. If a single message is sent, the context of the \"Send\" span can be used as the creation context and no \"Create\" span needs to be created.\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "receive",
                "value": "receive",
                "brief": "One or more messages are requested by a consumer. This operation refers to pull-based scenarios, where consumers explicitly call methods of messaging SDKs to receive messages.\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "process",
                "value": "process",
                "brief": "One or more messages are processed by a consumer.\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "settle",
                "value": "settle",
                "brief": "One or more messages are settled.\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "deliver",
                "value": "deliver",
                "brief": "Deprecated. Use `process` instead.",
                "note": null,
                "stability": "development",
                "deprecated": "Replaced by `process`."
              },
              {
                "id": "publish",
                "value": "publish",
                "brief": "Deprecated. Use `send` instead.",
                "note": null,
                "stability": "development",
                "deprecated": "Replaced by `send`."
              }
            ]
          },
          "brief": "A string identifying the type of the messaging operation.\n",
          "requirement_level": {
            "conditionally_required": "If applicable."
          },
          "sampling_relevant": true,
          "note": "If a custom value is used, it MUST be of low cardinality.",
          "stability": "development"
        },
        {
          "name": "server.address",
          "type": "string",
          "brief": "Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": {
            "conditionally_required": "If available."
          },
          "sampling_relevant": true,
          "note": "Server domain name of the broker if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": "recommended",
          "sampling_relevant": true,
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "messaging.batch.message_count",
          "type": "int",
          "brief": "The number of messages sent, received, or processed in the scope of the batching operation.",
          "examples": [
            0,
            1,
            2
          ],
          "requirement_level": {
            "conditionally_required": "If the span describes an operation on a batch of messages."
          },
          "note": "Instrumentations SHOULD NOT set `messaging.batch.message_count` on spans that operate with a single message. When a messaging client library supports both batch and single-message API for the same operation, instrumentations SHOULD use `messaging.batch.message_count` for batching APIs and SHOULD NOT use it for single-message APIs.\n",
          "stability": "development"
        },
        {
          "name": "messaging.destination.subscription.name",
          "type": "string",
          "brief": "Azure Service Bus [subscription name](https://learn.microsoft.com/azure/service-bus-messaging/service-bus-queues-topics-subscriptions#topics-and-subscriptions).",
          "examples": [
            "subscription-a"
          ],
          "requirement_level": {
            "conditionally_required": "If messages are received from the subscription."
          },
          "sampling_relevant": true,
          "stability": "development"
        },
        {
          "name": "messaging.message.conversation_id",
          "type": "string",
          "brief": "Message [correlation Id](https://learn.microsoft.com/azure/service-bus-messaging/service-bus-messages-payloads#message-routing-and-correlation) property.",
          "examples": "MyConversationId",
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "messaging.operation.name",
          "type": "string",
          "brief": "Azure Service Bus operation name.",
          "examples": [
            "send",
            "receive",
            "complete",
            "process",
            "peek"
          ],
          "requirement_level": "required",
          "sampling_relevant": true,
          "note": "The operation name SHOULD match one of the following values:\n\n- sender operations: `send`, `schedule`, `cancel_scheduled`\n- transaction operations: `create_transaction`, `commit_transaction`, `rollback_transaction`\n- receiver operation: `receive`, `peek`, `receive_deferred`, `renew_message_lock`\n- settlement operations: `abandon`, `complete`, `defer`, `dead_letter`, `delete`\n- session operations: `accept_session`, `get_session_state`, `set_session_state`, `renew_session_lock`\n\nIf none of the above operation names apply, the attribute SHOULD be set\nto the name of the client method in snake_case.\n",
          "stability": "development"
        },
        {
          "name": "messaging.servicebus.disposition_status",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "complete",
                "value": "complete",
                "brief": "Message is completed",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "abandon",
                "value": "abandon",
                "brief": "Message is abandoned",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "dead_letter",
                "value": "dead_letter",
                "brief": "Message is sent to dead letter queue",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "defer",
                "value": "defer",
                "brief": "Message is deferred",
                "note": null,
                "stability": "development",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes the [settlement type](https://learn.microsoft.com/azure/service-bus-messaging/message-transfers-locks-settlement#peeklock).\n",
          "requirement_level": {
            "conditionally_required": "if and only if `messaging.operation` is `settle`."
          },
          "stability": "development"
        },
        {
          "name": "messaging.servicebus.message.delivery_count",
          "type": "int",
          "brief": "Number of deliveries that have been attempted for this message.\n",
          "examples": 2,
          "requirement_level": {
            "conditionally_required": "If delivery count is available and is bigger than 0."
          },
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/messaging/spans.yaml",
        "attributes": {
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ]
          },
          "messaging.batch.message_count": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "messaging.destination.name": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "messaging.destination.subscription.name": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "note",
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "messaging.message.conversation_id": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief"
            ]
          },
          "messaging.message.id": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "messaging.operation.name": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "messaging.operation.type": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "messaging.servicebus.disposition_status": {
            "source_group": "registry.messaging.servicebus",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "messaging.servicebus.message.delivery_count": {
            "source_group": "registry.messaging.servicebus",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "messaging.servicebus.message.enqueued_time": {
            "source_group": "registry.messaging.servicebus",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "sampling_relevant"
            ]
          }
        }
      }
    },
    {
      "id": "messaging.eventhubs",
      "type": "attribute_group",
      "brief": "Attributes for Azure Event Hubs\n",
      "stability": "development",
      "attributes": [
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "amqp:decode-error",
            "KAFKA_STORAGE_ERROR",
            "channel-error"
          ],
          "requirement_level": {
            "conditionally_required": "If and only if the messaging operation has failed."
          },
          "note": "The `error.type` SHOULD be predictable, and SHOULD have low cardinality.\n\nWhen `error.type` is set to a type (e.g., an exception type), its\ncanonical class name identifying the type within the artifact SHOULD be used.\n\nInstrumentations SHOULD document the list of errors they report.\n\nThe cardinality of `error.type` within one instrumentation library SHOULD be low.\nTelemetry consumers that aggregate data from multiple instrumentation libraries and applications\nshould be prepared for `error.type` to have high cardinality at query time when no\nadditional filters are applied.\n\nIf the operation has completed successfully, instrumentations SHOULD NOT set `error.type`.\n\nIf a specific domain defines its own set of error identifiers (such as HTTP or gRPC status codes),\nit's RECOMMENDED to:\n\n- Use a domain-specific attribute\n- Set `error.type` to capture all errors, regardless of whether they are defined within the domain-specific set or not.\n",
          "stability": "stable"
        },
        {
          "name": "messaging.eventhubs.message.enqueued_time",
          "type": "int",
          "brief": "The UTC epoch seconds at which the message has been accepted and stored in the entity.\n",
          "examples": 1701393730,
          "requirement_level": "recommended",
          "stability": "development"
        },
        {
          "name": "messaging.destination.name",
          "type": "string",
          "brief": "The message destination name",
          "examples": [
            "MyQueue",
            "MyTopic"
          ],
          "requirement_level": {
            "conditionally_required": "If span describes operation on a single message or if the value applies to all messages in the batch."
          },
          "sampling_relevant": true,
          "note": "Destination name SHOULD uniquely identify a specific queue, topic or other entity within the broker. If\nthe broker doesn't have such notion, the destination name SHOULD uniquely identify the broker.\n",
          "stability": "development"
        },
        {
          "name": "messaging.message.id",
          "type": "string",
          "brief": "A value used by the messaging system as an identifier for the message, represented as a string.",
          "examples": "452a7c7c7c7048c2f887f61572b18fc2",
          "requirement_level": {
            "recommended": "If span describes operation on a single message."
          },
          "stability": "development"
        },
        {
          "name": "messaging.operation.type",
          "type": {
            "allow_custom_values": null,
            "members": [
              {
                "id": "create",
                "value": "create",
                "brief": "A message is created. \"Create\" spans always refer to a single message and are used to provide a unique creation context for messages in batch sending scenarios.\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "send",
                "value": "send",
                "brief": "One or more messages are provided for sending to an intermediary. If a single message is sent, the context of the \"Send\" span can be used as the creation context and no \"Create\" span needs to be created.\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "receive",
                "value": "receive",
                "brief": "One or more messages are requested by a consumer. This operation refers to pull-based scenarios, where consumers explicitly call methods of messaging SDKs to receive messages.\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "process",
                "value": "process",
                "brief": "One or more messages are processed by a consumer.\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "settle",
                "value": "settle",
                "brief": "One or more messages are settled.\n",
                "note": null,
                "stability": "development",
                "deprecated": null
              },
              {
                "id": "deliver",
                "value": "deliver",
                "brief": "Deprecated. Use `process` instead.",
                "note": null,
                "stability": "development",
                "deprecated": "Replaced by `process`."
              },
              {
                "id": "publish",
                "value": "publish",
                "brief": "Deprecated. Use `send` instead.",
                "note": null,
                "stability": "development",
                "deprecated": "Replaced by `send`."
              }
            ]
          },
          "brief": "A string identifying the type of the messaging operation.\n",
          "requirement_level": {
            "conditionally_required": "If applicable."
          },
          "sampling_relevant": true,
          "note": "If a custom value is used, it MUST be of low cardinality.",
          "stability": "development"
        },
        {
          "name": "server.address",
          "type": "string",
          "brief": "Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": {
            "conditionally_required": "If available."
          },
          "sampling_relevant": true,
          "note": "Server domain name of the broker if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": "recommended",
          "sampling_relevant": true,
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "messaging.batch.message_count",
          "type": "int",
          "brief": "The number of messages sent, received, or processed in the scope of the batching operation.",
          "examples": [
            0,
            1,
            2
          ],
          "requirement_level": {
            "conditionally_required": "If the span describes an operation on a batch of messages."
          },
          "note": "Instrumentations SHOULD NOT set `messaging.batch.message_count` on spans that operate with a single message. When a messaging client library supports both batch and single-message API for the same operation, instrumentations SHOULD use `messaging.batch.message_count` for batching APIs and SHOULD NOT use it for single-message APIs.\n",
          "stability": "development"
        },
        {
          "name": "messaging.consumer.group.name",
          "type": "string",
          "brief": "Azure Event Hubs [consumer group name](https://learn.microsoft.com/azure/event-hubs/event-hubs-features#consumer-groups).",
          "examples": [
            "my-group",
            "indexer"
          ],
          "requirement_level": {
            "conditionally_required": "On consumer spans."
          },
          "sampling_relevant": true,
          "stability": "development"
        },
        {
          "name": "messaging.destination.partition.id",
          "type": "string",
          "brief": "String representation of the partition id messages are sent to or received from, unique within the Event Hub.\n",
          "examples": "1",
          "requirement_level": {
            "conditionally_required": "If available."
          },
          "sampling_relevant": true,
          "stability": "development"
        },
        {
          "name": "messaging.operation.name",
          "type": "string",
          "brief": "Azure Event Hubs operation name.",
          "examples": [
            "send",
            "receive",
            "checkpoint"
          ],
          "requirement_level": "required",
          "sampling_relevant": true,
          "note": "The operation name SHOULD match one of the following values:\n\n- `send`\n- `receive`\n- `process`\n- `checkpoint`\n- `get_partition_properties`\n- `get_event_hub_properties`\n\nIf none of the above operation names apply, the attribute SHOULD be set\nto the name of the client method in snake_case.\n",
          "stability": "development"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "https://github.com/open-telemetry/semantic-conventions/archive/refs/tags/v1.31.0.zip[model]/messaging/spans.yaml",
        "attributes": {
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ]
          },
          "messaging.batch.message_count": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "messaging.consumer.group.name": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "note",
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "messaging.destination.name": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "messaging.destination.partition.id": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "messaging.eventhubs.message.enqueued_time": {
            "source_group": "registry.messaging.eventhubs",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "messaging.message.id": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "messaging.operation.name": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "messaging.operation.type": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "sampling_relevant"
            ]
          }
        }
      }
    }
  ]
}
{%- set file_name = ctx.id | attribute_registry_namespace | snake_case -%}
{{- template.set_file_name("attributes/" ~ file_name ~ ".rs") -}}
{%- import 'attribute_macros.j2' as attribute_macros -%}

/*
 * Copyright The OpenTelemetry Authors
 * SPDX-License-Identifier: Apache-2.0
 */

{{ ctx.brief | comment_with_prefix("//! ") }}
{%- if ctx.note %}
//!
//! Notes:
{{ ctx.note | comment_with_prefix("//!   ") }}
{%- endif %}
//! DO NOT EDIT, THIS FILE HAS BEEN GENERATED BY WEAVER

{%- for attribute in ctx.attributes | attribute_sort %}
{{ attribute_macros.comments(attribute, "///") }}
{%- if attribute is experimental %}
#[cfg(feature = "semconv_experimental")]
{%- endif %}
{%- if attribute is deprecated %}
#[deprecated(note="{{ attribute.deprecated }}")]
{%- endif %}
{%- if attribute.type.allow_custom_values is defined %}
pub const {{ attribute.name | screaming_snake_case }}: crate::attributes::AttributeKey<{{ attribute.name | pascal_case }}> = crate::attributes::AttributeKey::new("{{ attribute.name }}");
{%- elif attribute.type == "string" %}
pub const {{ attribute.name | screaming_snake_case }}: crate::attributes::AttributeKey<opentelemetry::{{ attribute.type | map_text("rust_types") }}Value> = crate::attributes::AttributeKey::new("{{ attribute.name }}");
{%- else %}
pub const {{ attribute.name | screaming_snake_case }}: crate::attributes::AttributeKey<{{ attribute.type | map_text("rust_types") }}> = crate::attributes::AttributeKey::new("{{ attribute.name }}");
{%- endif %}
{%- if attribute.type.members is defined %}

{% if attribute.brief %}{{ attribute.brief | comment_with_prefix("/// ") }}{%- endif %}
#[derive(Debug, Clone)]
#[non_exhaustive]
pub enum {{ attribute.name | pascal_case }} {
{%- for variant in attribute.type.members %}
    {{ variant.brief | default("No brief") | comment_with_prefix("    /// ") }}
    {%- if variant.note %}{{ variant.note | comment_with_prefix("    /// ") }}{% endif %}
    {%- if variant is experimental %}
    #[cfg(feature = "semconv_experimental")] {% endif %}
    {{ variant.id | pascal_case }},
{%- endfor %}
    /// This variant allows defining a custom entry in the enum.
    _Custom(String),
}

impl {{ attribute.name | pascal_case }} {
    /// Returns the string representation of the [`{{ attribute.name | pascal_case }}`].
    #[must_use]
    pub fn as_str(&self) -> &str {
        match self {
        {%- for variant in attribute.type.members %}
            {%- if variant is experimental %}
            #[cfg(feature = "semconv_experimental")] {% endif %}
            {{ attribute.name | pascal_case }}::{{ variant.id | pascal_case }} => "{{ variant.value }}",
        {%- endfor %}
            {{ attribute.name | pascal_case }}::_Custom(v) => v.as_str(),
            // Without this default case, the match expression would not
            // contain any variants if all variants are annotated with the
            // 'semconv_experimental' feature and the feature is not enabled.
            #[allow(unreachable_patterns)]
            _ => unreachable!(),
        }
    }
}

impl core::fmt::Display for {{ attribute.name | pascal_case }} {
    /// Formats the value using the given formatter.
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        write!(f, "{}", self.as_str())
    }
}

impl crate::attributes::AttributeKey<{{ attribute.name | pascal_case }}> {
    /// Returns a [`KeyValue`] pair for the given value.
    #[must_use]
    pub fn value(&self, v: &{{ attribute.name | pascal_case }}) -> opentelemetry::KeyValue {
        opentelemetry::KeyValue::new(self.key.clone(), v.to_string())
    }
}
{%- endif %}
{%- endfor %}
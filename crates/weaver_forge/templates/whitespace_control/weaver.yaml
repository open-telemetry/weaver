file_name: snake_case
function_name: PascalCase
arg_name: camelCase
struct_name: PascalCase
field_name: PascalCase

type_mapping:
  int: int64
  double: double
  boolean: bool
  string: string
  "int[]": "[]int64"
  "double[]": "[]double"
  "boolean[]": "[]bool"
  "string[]": "[]string"

acronyms: ["iOS", "API", "URL"]

whitespace_control:
  trim_blocks: true
  lstrip_blocks: true
  keep_trailing_newline: true

templates:
  - template: "**/registry.md"
    filter: "."
    application_mode: single
  - template: "**/attribute_group.md"
    filter: ".groups[] | select(.type == \"attribute_group\")"
    application_mode: each
  - template: "**/attribute_groups.md"
    filter: ".groups[] | select(.type == \"attribute_group\")"
    application_mode: single
  - template: "**/event.md"
    filter: ".groups[] | select(.type == \"event\")"
    application_mode: each
  - template: "**/events.md"
    filter: ".groups[] | select(.type == \"event\")"
    application_mode: single
  - template: "**/group.md"
    filter: ".groups"
    application_mode: each
  - template: "**/groups.md"
    filter: ".groups"
    application_mode: single
  - template: "**/metric.md"
    filter: ".groups[] | select(.type == \"metric\")"
    application_mode: each
  - template: "**/metrics.md"
    filter: ".groups[] | select(.type == \"metric\")"
    application_mode: single
  - template: "**/resource.md"
    filter: ".groups[] | select(.type == \"resource\")"
    application_mode: each
  - template: "**/resources.md"
    filter: ".groups[] | select(.type == \"resource\")"
    application_mode: single
  - template: "**/scope.md"
    filter: ".groups[] | select(.type == \"scope\")"
    application_mode: each
  - template: "**/scopes.md"
    filter: ".groups[] | select(.type == \"scope\")"
    application_mode: single
  - template: "**/span.md"
    filter: ".groups[] | select(.type == \"span\")"
    application_mode: each
  - template: "**/spans.md"
    filter: ".groups[] | select(.type == \"span\")"
    application_mode: single
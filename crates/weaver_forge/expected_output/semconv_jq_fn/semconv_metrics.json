[
  {
    "metrics": [
      {
        "attributes": [
          {
            "brief": "HTTP request method.",
            "examples": [
              "GET",
              "POST",
              "HEAD"
            ],
            "name": "http.request.method",
            "note": "HTTP request method value SHOULD be \"known\" to the instrumentation.\nBy default, this convention defines \"known\" methods as the ones listed in [RFC9110](https://www.rfc-editor.org/rfc/rfc9110.html#name-methods)\nand the PATCH method defined in [RFC5789](https://www.rfc-editor.org/rfc/rfc5789.html).\n\nIf the HTTP request method is not known to instrumentation, it MUST set the `http.request.method` attribute to `_OTHER`.\n\nIf the HTTP instrumentation could end up converting valid HTTP request methods to `_OTHER`, then it MUST provide a way to override\nthe list of known HTTP methods. If this override is done via environment variable, then the environment variable MUST be named\nOTEL_INSTRUMENTATION_HTTP_KNOWN_METHODS and support a comma-separated list of case-sensitive known HTTP methods\n(this list MUST be a full override of the default known method, it is not a list of known methods in addition to the defaults).\n\nHTTP method names are case-sensitive and `http.request.method` attribute value MUST match a known HTTP method name exactly.\nInstrumentations for specific web frameworks that consider HTTP methods to be case insensitive, SHOULD populate a canonical equivalent.\nTracing instrumentations that do so, MUST also set `http.request.method_original` to the original value.\n",
            "requirement_level": "recommended",
            "stability": "stable",
            "type": {
              "members": [
                {
                  "brief": "CONNECT method.",
                  "id": "connect",
                  "stability": "stable",
                  "value": "CONNECT"
                },
                {
                  "brief": "DELETE method.",
                  "id": "delete",
                  "stability": "stable",
                  "value": "DELETE"
                },
                {
                  "brief": "GET method.",
                  "id": "get",
                  "stability": "stable",
                  "value": "GET"
                },
                {
                  "brief": "HEAD method.",
                  "id": "head",
                  "stability": "stable",
                  "value": "HEAD"
                },
                {
                  "brief": "OPTIONS method.",
                  "id": "options",
                  "stability": "stable",
                  "value": "OPTIONS"
                },
                {
                  "brief": "PATCH method.",
                  "id": "patch",
                  "stability": "stable",
                  "value": "PATCH"
                },
                {
                  "brief": "POST method.",
                  "id": "post",
                  "stability": "stable",
                  "value": "POST"
                },
                {
                  "brief": "PUT method.",
                  "id": "put",
                  "stability": "stable",
                  "value": "PUT"
                },
                {
                  "brief": "TRACE method.",
                  "id": "trace",
                  "stability": "stable",
                  "value": "TRACE"
                },
                {
                  "brief": "Any HTTP method that the instrumentation has no prior knowledge of.",
                  "id": "other",
                  "stability": "stable",
                  "value": "_OTHER"
                }
              ]
            }
          },
          {
            "brief": "[HTTP response status code](https://tools.ietf.org/html/rfc7231#section-6).",
            "examples": [
              200
            ],
            "name": "http.response.status_code",
            "requirement_level": "recommended",
            "stability": "stable",
            "type": "int"
          },
          {
            "brief": "Some HTTP specific description",
            "examples": [
              "example.com",
              "10.1.2.80",
              "/tmp/my.sock"
            ],
            "name": "server.address",
            "note": "When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it\u0027s available.\n",
            "requirement_level": "required",
            "stability": "stable",
            "type": "string"
          },
          {
            "brief": "Some HTTP specific description",
            "examples": [
              80,
              8080,
              443
            ],
            "name": "server.port",
            "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it\u0027s available.\n",
            "requirement_level": "required",
            "stability": "stable",
            "type": "int"
          },
          {
            "brief": "The [URI scheme](https://www.rfc-editor.org/rfc/rfc3986#section-3.1) component identifying the used protocol.",
            "examples": [
              "http",
              "https"
            ],
            "name": "url.scheme",
            "requirement_level": "opt_in",
            "stability": "stable",
            "type": "string"
          }
        ],
        "brief": "Duration of HTTP client requests.",
        "id": "metric.http.client.request.duration",
        "instrument": "histogram",
        "lineage": {
          "attributes": {
            "http.request.method": {
              "inherited_fields": [
                "brief",
                "examples",
                "note",
                "stability"
              ],
              "locally_overridden_fields": [
                "requirement_level"
              ],
              "source_group": "registry.data.registry-http"
            },
            "http.response.status_code": {
              "inherited_fields": [
                "note",
                "stability"
              ],
              "locally_overridden_fields": [
                "brief",
                "examples",
                "requirement_level"
              ],
              "source_group": "registry.data.registry-http"
            },
            "server.address": {
              "inherited_fields": [
                "examples",
                "note",
                "stability"
              ],
              "locally_overridden_fields": [
                "brief",
                "requirement_level"
              ],
              "source_group": "server"
            },
            "server.port": {
              "inherited_fields": [
                "examples",
                "note",
                "stability"
              ],
              "locally_overridden_fields": [
                "brief",
                "requirement_level"
              ],
              "source_group": "server"
            },
            "url.scheme": {
              "inherited_fields": [
                "brief",
                "note",
                "stability"
              ],
              "locally_overridden_fields": [
                "examples",
                "requirement_level"
              ],
              "source_group": "registry.url"
            }
          },
          "provenance": {
            "path": "data/http.yaml",
            "registry_id": "default"
          }
        },
        "metric_name": "http.client.request.duration",
        "root_namespace": "http",
        "stability": "stable",
        "type": "metric",
        "unit": "s"
      }
    ],
    "root_namespace": "http"
  },
  {
    "metrics": [
      {
        "attributes": null,
        "brief": "Number of classes currently loaded.",
        "id": "metric.jvm.class.count",
        "instrument": "updowncounter",
        "lineage": {
          "provenance": {
            "path": "data/jvm-metrics.yaml",
            "registry_id": "default"
          }
        },
        "metric_name": "jvm.class.count",
        "root_namespace": "jvm",
        "stability": "stable",
        "type": "metric",
        "unit": "{class}"
      },
      {
        "attributes": null,
        "brief": "Number of classes loaded since JVM start.",
        "id": "metric.jvm.class.loaded",
        "instrument": "counter",
        "lineage": {
          "provenance": {
            "path": "data/jvm-metrics.yaml",
            "registry_id": "default"
          }
        },
        "metric_name": "jvm.class.loaded",
        "root_namespace": "jvm",
        "stability": "stable",
        "type": "metric",
        "unit": "{class}"
      },
      {
        "attributes": null,
        "brief": "Number of classes unloaded since JVM start.",
        "id": "metric.jvm.class.unloaded",
        "instrument": "counter",
        "lineage": {
          "provenance": {
            "path": "data/jvm-metrics.yaml",
            "registry_id": "default"
          }
        },
        "metric_name": "jvm.class.unloaded",
        "root_namespace": "jvm",
        "stability": "stable",
        "type": "metric",
        "unit": "{class}"
      },
      {
        "attributes": null,
        "brief": "Number of processors available to the Java virtual machine.",
        "id": "metric.jvm.cpu.count",
        "instrument": "updowncounter",
        "lineage": {
          "provenance": {
            "path": "data/jvm-metrics.yaml",
            "registry_id": "default"
          }
        },
        "metric_name": "jvm.cpu.count",
        "root_namespace": "jvm",
        "stability": "stable",
        "type": "metric",
        "unit": "{cpu}"
      },
      {
        "attributes": null,
        "brief": "Recent CPU utilization for the process as reported by the JVM.",
        "id": "metric.jvm.cpu.recent_utilization",
        "instrument": "gauge",
        "lineage": {
          "provenance": {
            "path": "data/jvm-metrics.yaml",
            "registry_id": "default"
          }
        },
        "metric_name": "jvm.cpu.recent_utilization",
        "note": "The value range is [0.0,1.0]. This utilization is not defined as being for the specific interval since last measurement (unlike `system.cpu.utilization`). [Reference](https://docs.oracle.com/en/java/javase/17/docs/api/jdk.management/com/sun/management/OperatingSystemMXBean.html#getProcessCpuLoad()).\n",
        "root_namespace": "jvm",
        "stability": "stable",
        "type": "metric",
        "unit": "1"
      },
      {
        "attributes": null,
        "brief": "CPU time used by the process as reported by the JVM.",
        "id": "metric.jvm.cpu.time",
        "instrument": "counter",
        "lineage": {
          "provenance": {
            "path": "data/jvm-metrics.yaml",
            "registry_id": "default"
          }
        },
        "metric_name": "jvm.cpu.time",
        "root_namespace": "jvm",
        "stability": "stable",
        "type": "metric",
        "unit": "s"
      },
      {
        "attributes": [
          {
            "brief": "Name of the garbage collector.",
            "examples": [
              "G1 Young Generation",
              "G1 Old Generation"
            ],
            "name": "jvm.gc.name",
            "note": "Garbage collector name is generally obtained via [GarbageCollectionNotificationInfo#getGcName()](https://docs.oracle.com/en/java/javase/11/docs/api/jdk.management/com/sun/management/GarbageCollectionNotificationInfo.html#getGcName()).\n",
            "requirement_level": "recommended",
            "stability": "stable",
            "type": "string"
          },
          {
            "brief": "Name of the garbage collector action.",
            "examples": [
              "end of minor GC",
              "end of major GC"
            ],
            "name": "jvm.gc.action",
            "note": "Garbage collector action is generally obtained via [GarbageCollectionNotificationInfo#getGcAction()](https://docs.oracle.com/en/java/javase/11/docs/api/jdk.management/com/sun/management/GarbageCollectionNotificationInfo.html#getGcAction()).\n",
            "requirement_level": "recommended",
            "stability": "stable",
            "type": "string"
          }
        ],
        "brief": "Duration of JVM garbage collection actions.",
        "id": "metric.jvm.gc.duration",
        "instrument": "histogram",
        "lineage": {
          "provenance": {
            "path": "data/jvm-metrics.yaml",
            "registry_id": "default"
          }
        },
        "metric_name": "jvm.gc.duration",
        "root_namespace": "jvm",
        "stability": "stable",
        "type": "metric",
        "unit": "s"
      },
      {
        "attributes": [
          {
            "brief": "The type of memory.",
            "examples": [
              "heap",
              "non_heap"
            ],
            "name": "jvm.memory.type",
            "requirement_level": "recommended",
            "stability": "stable",
            "type": {
              "members": [
                {
                  "brief": "Heap memory.",
                  "id": "heap",
                  "stability": "stable",
                  "value": "heap"
                },
                {
                  "brief": "Non-heap memory",
                  "id": "non_heap",
                  "stability": "stable",
                  "value": "non_heap"
                },
                {
                  "brief": "This member is deprecated.",
                  "deprecated": {
                    "note": "Use `heap` or `non_heap` instead.",
                    "reason": "obsoleted"
                  },
                  "id": "deprecated",
                  "stability": "stable",
                  "value": "deprecated"
                },
                {
                  "brief": "This member is experimental.",
                  "id": "experimental",
                  "stability": "development",
                  "value": "experimental"
                }
              ]
            }
          },
          {
            "brief": "Name of the memory pool.",
            "examples": [
              "G1 Old Gen",
              "G1 Eden space",
              "G1 Survivor Space"
            ],
            "name": "jvm.memory.pool.name",
            "note": "Pool names are generally obtained via [MemoryPoolMXBean#getName()](https://docs.oracle.com/en/java/javase/11/docs/api/java.management/java/lang/management/MemoryPoolMXBean.html#getName()).\n",
            "requirement_level": "recommended",
            "stability": "stable",
            "type": "string"
          }
        ],
        "brief": "Measure of memory committed.",
        "id": "metric.jvm.memory.committed",
        "instrument": "updowncounter",
        "lineage": {
          "attributes": {
            "jvm.memory.pool.name": {
              "inherited_fields": [
                "brief",
                "examples",
                "note",
                "requirement_level",
                "stability"
              ],
              "source_group": "attributes.jvm.memory"
            },
            "jvm.memory.type": {
              "inherited_fields": [
                "brief",
                "examples",
                "note",
                "requirement_level",
                "stability"
              ],
              "source_group": "attributes.jvm.memory"
            }
          },
          "provenance": {
            "path": "data/jvm-metrics.yaml",
            "registry_id": "default"
          }
        },
        "metric_name": "jvm.memory.committed",
        "root_namespace": "jvm",
        "stability": "stable",
        "type": "metric",
        "unit": "By"
      },
      {
        "attributes": null,
        "brief": "Measure something deprecated.",
        "deprecated": {
          "note": "Use `metric.jvm.memory.used` instead.",
          "reason": "obsoleted"
        },
        "entity_associations": [
          "service"
        ],
        "id": "metric.jvm.memory.deprecated",
        "instrument": "updowncounter",
        "lineage": {
          "provenance": {
            "path": "data/jvm-metrics.yaml",
            "registry_id": "default"
          }
        },
        "metric_name": "jvm.memory.deprecated",
        "root_namespace": "jvm",
        "stability": "stable",
        "type": "metric",
        "unit": "By"
      },
      {
        "attributes": [
          {
            "brief": "The type of memory.",
            "examples": [
              "heap",
              "non_heap"
            ],
            "name": "jvm.memory.type",
            "requirement_level": "recommended",
            "stability": "stable",
            "type": {
              "members": [
                {
                  "brief": "Heap memory.",
                  "id": "heap",
                  "stability": "stable",
                  "value": "heap"
                },
                {
                  "brief": "Non-heap memory",
                  "id": "non_heap",
                  "stability": "stable",
                  "value": "non_heap"
                },
                {
                  "brief": "This member is deprecated.",
                  "deprecated": {
                    "note": "Use `heap` or `non_heap` instead.",
                    "reason": "obsoleted"
                  },
                  "id": "deprecated",
                  "stability": "stable",
                  "value": "deprecated"
                },
                {
                  "brief": "This member is experimental.",
                  "id": "experimental",
                  "stability": "development",
                  "value": "experimental"
                }
              ]
            }
          },
          {
            "brief": "Name of the memory pool.",
            "examples": [
              "G1 Old Gen",
              "G1 Eden space",
              "G1 Survivor Space"
            ],
            "name": "jvm.memory.pool.name",
            "note": "Pool names are generally obtained via [MemoryPoolMXBean#getName()](https://docs.oracle.com/en/java/javase/11/docs/api/java.management/java/lang/management/MemoryPoolMXBean.html#getName()).\n",
            "requirement_level": "recommended",
            "stability": "stable",
            "type": "string"
          }
        ],
        "brief": "Measure of max obtainable memory.",
        "id": "metric.jvm.memory.limit",
        "instrument": "updowncounter",
        "lineage": {
          "attributes": {
            "jvm.memory.pool.name": {
              "inherited_fields": [
                "brief",
                "examples",
                "note",
                "requirement_level",
                "stability"
              ],
              "source_group": "attributes.jvm.memory"
            },
            "jvm.memory.type": {
              "inherited_fields": [
                "brief",
                "examples",
                "note",
                "requirement_level",
                "stability"
              ],
              "source_group": "attributes.jvm.memory"
            }
          },
          "provenance": {
            "path": "data/jvm-metrics.yaml",
            "registry_id": "default"
          }
        },
        "metric_name": "jvm.memory.limit",
        "root_namespace": "jvm",
        "stability": "stable",
        "type": "metric",
        "unit": "By"
      },
      {
        "attributes": [
          {
            "brief": "The type of memory.",
            "examples": [
              "heap",
              "non_heap"
            ],
            "name": "jvm.memory.type",
            "requirement_level": "recommended",
            "stability": "stable",
            "type": {
              "members": [
                {
                  "brief": "Heap memory.",
                  "id": "heap",
                  "stability": "stable",
                  "value": "heap"
                },
                {
                  "brief": "Non-heap memory",
                  "id": "non_heap",
                  "stability": "stable",
                  "value": "non_heap"
                },
                {
                  "brief": "This member is deprecated.",
                  "deprecated": {
                    "note": "Use `heap` or `non_heap` instead.",
                    "reason": "obsoleted"
                  },
                  "id": "deprecated",
                  "stability": "stable",
                  "value": "deprecated"
                },
                {
                  "brief": "This member is experimental.",
                  "id": "experimental",
                  "stability": "development",
                  "value": "experimental"
                }
              ]
            }
          },
          {
            "brief": "Name of the memory pool.",
            "examples": [
              "G1 Old Gen",
              "G1 Eden space",
              "G1 Survivor Space"
            ],
            "name": "jvm.memory.pool.name",
            "note": "Pool names are generally obtained via [MemoryPoolMXBean#getName()](https://docs.oracle.com/en/java/javase/11/docs/api/java.management/java/lang/management/MemoryPoolMXBean.html#getName()).\n",
            "requirement_level": "recommended",
            "stability": "stable",
            "type": "string"
          },
          {
            "brief": "Something deprecated.",
            "deprecated": {
              "note": "Use `jvm.memory.stable.attribute` instead.",
              "reason": "obsoleted"
            },
            "name": "jvm.memory.deprecated.attribute",
            "requirement_level": "recommended",
            "stability": "stable",
            "type": "boolean"
          },
          {
            "brief": "Something experimental.",
            "name": "jvm.memory.experimental.attribute",
            "requirement_level": "opt_in",
            "stability": "development",
            "type": "boolean"
          },
          {
            "brief": "Something stable.",
            "name": "jvm.memory.stable.attribute",
            "requirement_level": "recommended",
            "stability": "stable",
            "type": "boolean"
          }
        ],
        "brief": "Measure of memory used.",
        "entity_associations": [
          "service"
        ],
        "id": "metric.jvm.memory.used",
        "instrument": "updowncounter",
        "lineage": {
          "attributes": {
            "jvm.memory.pool.name": {
              "inherited_fields": [
                "brief",
                "examples",
                "note",
                "requirement_level",
                "stability"
              ],
              "source_group": "attributes.jvm.memory"
            },
            "jvm.memory.type": {
              "inherited_fields": [
                "brief",
                "examples",
                "note",
                "requirement_level",
                "stability"
              ],
              "source_group": "attributes.jvm.memory"
            }
          },
          "provenance": {
            "path": "data/jvm-metrics.yaml",
            "registry_id": "default"
          }
        },
        "metric_name": "jvm.memory.used",
        "root_namespace": "jvm",
        "stability": "stable",
        "type": "metric",
        "unit": "By"
      },
      {
        "attributes": [
          {
            "brief": "The type of memory.",
            "examples": [
              "heap",
              "non_heap"
            ],
            "name": "jvm.memory.type",
            "requirement_level": "recommended",
            "stability": "stable",
            "type": {
              "members": [
                {
                  "brief": "Heap memory.",
                  "id": "heap",
                  "stability": "stable",
                  "value": "heap"
                },
                {
                  "brief": "Non-heap memory",
                  "id": "non_heap",
                  "stability": "stable",
                  "value": "non_heap"
                },
                {
                  "brief": "This member is deprecated.",
                  "deprecated": {
                    "note": "Use `heap` or `non_heap` instead.",
                    "reason": "obsoleted"
                  },
                  "id": "deprecated",
                  "stability": "stable",
                  "value": "deprecated"
                },
                {
                  "brief": "This member is experimental.",
                  "id": "experimental",
                  "stability": "development",
                  "value": "experimental"
                }
              ]
            }
          },
          {
            "brief": "Name of the memory pool.",
            "examples": [
              "G1 Old Gen",
              "G1 Eden space",
              "G1 Survivor Space"
            ],
            "name": "jvm.memory.pool.name",
            "note": "Pool names are generally obtained via [MemoryPoolMXBean#getName()](https://docs.oracle.com/en/java/javase/11/docs/api/java.management/java/lang/management/MemoryPoolMXBean.html#getName()).\n",
            "requirement_level": "recommended",
            "stability": "stable",
            "type": "string"
          }
        ],
        "brief": "Measure of memory used, as measured after the most recent garbage collection event on this pool.",
        "id": "metric.jvm.memory.used_after_last_gc",
        "instrument": "updowncounter",
        "lineage": {
          "attributes": {
            "jvm.memory.pool.name": {
              "inherited_fields": [
                "brief",
                "examples",
                "note",
                "requirement_level",
                "stability"
              ],
              "source_group": "attributes.jvm.memory"
            },
            "jvm.memory.type": {
              "inherited_fields": [
                "brief",
                "examples",
                "note",
                "requirement_level",
                "stability"
              ],
              "source_group": "attributes.jvm.memory"
            }
          },
          "provenance": {
            "path": "data/jvm-metrics.yaml",
            "registry_id": "default"
          }
        },
        "metric_name": "jvm.memory.used_after_last_gc",
        "root_namespace": "jvm",
        "stability": "stable",
        "type": "metric",
        "unit": "By"
      },
      {
        "attributes": [
          {
            "brief": "Whether the thread is daemon or not.",
            "name": "jvm.thread.daemon",
            "requirement_level": "recommended",
            "stability": "stable",
            "type": "boolean"
          },
          {
            "brief": "State of the thread.",
            "examples": [
              "runnable",
              "blocked"
            ],
            "name": "jvm.thread.state",
            "requirement_level": "recommended",
            "stability": "stable",
            "type": {
              "members": [
                {
                  "brief": "A thread that has not yet started is in this state.",
                  "id": "new",
                  "stability": "stable",
                  "value": "new"
                },
                {
                  "brief": "A thread executing in the Java virtual machine is in this state.",
                  "id": "runnable",
                  "stability": "stable",
                  "value": "runnable"
                },
                {
                  "brief": "A thread that is blocked waiting for a monitor lock is in this state.",
                  "id": "blocked",
                  "stability": "stable",
                  "value": "blocked"
                },
                {
                  "brief": "A thread that is waiting indefinitely for another thread to perform a particular action is in this state.",
                  "id": "waiting",
                  "stability": "stable",
                  "value": "waiting"
                },
                {
                  "brief": "A thread that is waiting for another thread to perform an action for up to a specified waiting time is in this state.",
                  "id": "timed_waiting",
                  "stability": "stable",
                  "value": "timed_waiting"
                },
                {
                  "brief": "A thread that has exited is in this state.",
                  "id": "terminated",
                  "stability": "stable",
                  "value": "terminated"
                }
              ]
            }
          }
        ],
        "brief": "Number of executing platform threads.",
        "id": "metric.jvm.thread.count",
        "instrument": "updowncounter",
        "lineage": {
          "provenance": {
            "path": "data/jvm-metrics.yaml",
            "registry_id": "default"
          }
        },
        "metric_name": "jvm.thread.count",
        "root_namespace": "jvm",
        "stability": "stable",
        "type": "metric",
        "unit": "{thread}"
      }
    ],
    "root_namespace": "jvm"
  }
]
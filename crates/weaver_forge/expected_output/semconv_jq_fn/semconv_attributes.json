[
  {
    "brief": "The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n",
    "name": "db.cassandra.consistency_level",
    "requirement_level": "recommended",
    "root_namespace": "db",
    "stability": "development",
    "tag": "tech-specific-cassandra",
    "type": {
      "allow_custom_values": null,
      "members": [
        {
          "brief": null,
          "deprecated": null,
          "id": "all",
          "note": null,
          "stability": "stable",
          "value": "all"
        },
        {
          "brief": null,
          "deprecated": null,
          "id": "each_quorum",
          "note": null,
          "stability": "stable",
          "value": "each_quorum"
        },
        {
          "brief": null,
          "deprecated": null,
          "id": "quorum",
          "note": null,
          "stability": "stable",
          "value": "quorum"
        },
        {
          "brief": null,
          "deprecated": null,
          "id": "local_quorum",
          "note": null,
          "stability": "stable",
          "value": "local_quorum"
        },
        {
          "brief": null,
          "deprecated": null,
          "id": "one",
          "note": null,
          "stability": "stable",
          "value": "one"
        },
        {
          "brief": null,
          "deprecated": null,
          "id": "two",
          "note": null,
          "stability": "stable",
          "value": "two"
        },
        {
          "brief": null,
          "deprecated": null,
          "id": "three",
          "note": null,
          "stability": "stable",
          "value": "three"
        },
        {
          "brief": null,
          "deprecated": null,
          "id": "local_one",
          "note": null,
          "stability": "stable",
          "value": "local_one"
        },
        {
          "brief": null,
          "deprecated": null,
          "id": "any",
          "note": null,
          "stability": "stable",
          "value": "any"
        },
        {
          "brief": null,
          "deprecated": null,
          "id": "serial",
          "note": null,
          "stability": "stable",
          "value": "serial"
        },
        {
          "brief": null,
          "deprecated": null,
          "id": "local_serial",
          "note": null,
          "stability": "stable",
          "value": "local_serial"
        }
      ]
    }
  },
  {
    "brief": "The data center of the coordinating node for a query.\n",
    "examples": "us-west-2",
    "name": "db.cassandra.coordinator.dc",
    "requirement_level": "recommended",
    "root_namespace": "db",
    "stability": "release_candidate",
    "tag": "tech-specific-cassandra",
    "type": "string"
  },
  {
    "brief": "The ID of the coordinating node for a query.\n",
    "examples": "be13faa2-8574-4d71-926d-27f16cf8a7af",
    "name": "db.cassandra.coordinator.id",
    "requirement_level": "recommended",
    "root_namespace": "db",
    "stability": "development",
    "tag": "tech-specific-cassandra",
    "type": "string"
  },
  {
    "brief": "Whether or not the query is idempotent.\n",
    "name": "db.cassandra.idempotence",
    "requirement_level": "recommended",
    "root_namespace": "db",
    "stability": "alpha",
    "tag": "tech-specific-cassandra",
    "type": "boolean"
  },
  {
    "brief": "The fetch size used for paging, i.e. how many rows will be returned at once.\n",
    "examples": [
      5000
    ],
    "name": "db.cassandra.page_size",
    "requirement_level": "recommended",
    "root_namespace": "db",
    "stability": "stable",
    "tag": "tech-specific-cassandra",
    "type": "int"
  },
  {
    "brief": "The number of times a query was speculatively executed. Not set or `0` if the query was not executed speculatively.\n",
    "examples": [
      0,
      2
    ],
    "name": "db.cassandra.speculative_execution_count",
    "requirement_level": "recommended",
    "root_namespace": "db",
    "stability": "beta",
    "tag": "tech-specific-cassandra",
    "type": "int"
  },
  {
    "brief": "The name of the primary Cassandra table that the operation is acting upon, including the keyspace name (if applicable).",
    "examples": "mytable",
    "name": "db.cassandra.table",
    "note": "This mirrors the db.sql.table attribute but references cassandra rather than sql. It is not recommended to attempt any client-side parsing of `db.statement` just to get this property, but it should be set if it is provided by the library being instrumented. If the operation is acting upon an anonymous table, or more than one table, this value MUST NOT be set.\n",
    "requirement_level": "recommended",
    "root_namespace": "db",
    "stability": "stable",
    "tag": "tech-specific-cassandra",
    "type": "string"
  },
  {
    "brief": "The connection string used to connect to the database. It is recommended to remove embedded credentials.\n",
    "examples": "Server=(localdb)\\v11.0;Integrated Security=true;",
    "name": "db.connection_string",
    "requirement_level": "recommended",
    "root_namespace": "db",
    "stability": "stable",
    "tag": "db-generic",
    "type": "string"
  },
  {
    "brief": "Unique Cosmos client instance id.",
    "examples": "3ba4827d-4422-483f-b59f-85b74211c11d",
    "name": "db.cosmosdb.client_id",
    "requirement_level": "recommended",
    "root_namespace": "db",
    "stability": "stable",
    "tag": "tech-specific-cosmosdb",
    "type": "string"
  },
  {
    "brief": "Cosmos client connection mode.",
    "name": "db.cosmosdb.connection_mode",
    "requirement_level": "recommended",
    "root_namespace": "db",
    "stability": "stable",
    "tag": "tech-specific-cosmosdb",
    "type": {
      "allow_custom_values": null,
      "members": [
        {
          "brief": "Gateway (HTTP) connections mode",
          "deprecated": null,
          "id": "gateway",
          "note": null,
          "stability": "stable",
          "value": "gateway"
        },
        {
          "brief": "Direct connection.",
          "deprecated": null,
          "id": "direct",
          "note": null,
          "stability": "stable",
          "value": "direct"
        }
      ]
    }
  },
  {
    "brief": "Cosmos DB container name.",
    "examples": "anystring",
    "name": "db.cosmosdb.container",
    "requirement_level": "recommended",
    "root_namespace": "db",
    "stability": "stable",
    "tag": "tech-specific-cosmosdb",
    "type": "string"
  },
  {
    "brief": "CosmosDB Operation Type.",
    "name": "db.cosmosdb.operation_type",
    "requirement_level": "recommended",
    "root_namespace": "db",
    "stability": "stable",
    "tag": "tech-specific-cosmosdb",
    "type": {
      "allow_custom_values": null,
      "members": [
        {
          "brief": null,
          "deprecated": null,
          "id": "invalid",
          "note": null,
          "stability": "stable",
          "value": "Invalid"
        },
        {
          "brief": null,
          "deprecated": null,
          "id": "create",
          "note": null,
          "stability": "stable",
          "value": "Create"
        },
        {
          "brief": null,
          "deprecated": null,
          "id": "patch",
          "note": null,
          "stability": "stable",
          "value": "Patch"
        },
        {
          "brief": null,
          "deprecated": null,
          "id": "read",
          "note": null,
          "stability": "stable",
          "value": "Read"
        },
        {
          "brief": null,
          "deprecated": null,
          "id": "read_feed",
          "note": null,
          "stability": "stable",
          "value": "ReadFeed"
        },
        {
          "brief": null,
          "deprecated": null,
          "id": "delete",
          "note": null,
          "stability": "stable",
          "value": "Delete"
        },
        {
          "brief": null,
          "deprecated": null,
          "id": "replace",
          "note": null,
          "stability": "stable",
          "value": "Replace"
        },
        {
          "brief": null,
          "deprecated": null,
          "id": "execute",
          "note": null,
          "stability": "stable",
          "value": "Execute"
        },
        {
          "brief": null,
          "deprecated": null,
          "id": "query",
          "note": null,
          "stability": "stable",
          "value": "Query"
        },
        {
          "brief": null,
          "deprecated": null,
          "id": "head",
          "note": null,
          "stability": "stable",
          "value": "Head"
        },
        {
          "brief": null,
          "deprecated": null,
          "id": "head_feed",
          "note": null,
          "stability": "stable",
          "value": "HeadFeed"
        },
        {
          "brief": null,
          "deprecated": null,
          "id": "upsert",
          "note": null,
          "stability": "stable",
          "value": "Upsert"
        },
        {
          "brief": null,
          "deprecated": null,
          "id": "batch",
          "note": null,
          "stability": "stable",
          "value": "Batch"
        },
        {
          "brief": null,
          "deprecated": null,
          "id": "query_plan",
          "note": null,
          "stability": "stable",
          "value": "QueryPlan"
        },
        {
          "brief": null,
          "deprecated": null,
          "id": "execute_javascript",
          "note": null,
          "stability": "stable",
          "value": "ExecuteJavaScript"
        }
      ]
    }
  },
  {
    "brief": "RU consumed for that operation",
    "examples": [
      46.18,
      1.0
    ],
    "name": "db.cosmosdb.request_charge",
    "requirement_level": "recommended",
    "root_namespace": "db",
    "stability": "stable",
    "tag": "tech-specific-cosmosdb",
    "type": "double"
  },
  {
    "brief": "Request payload size in bytes",
    "name": "db.cosmosdb.request_content_length",
    "requirement_level": "recommended",
    "root_namespace": "db",
    "stability": "stable",
    "tag": "tech-specific-cosmosdb",
    "type": "int"
  },
  {
    "brief": "Cosmos DB status code.",
    "examples": [
      200,
      201
    ],
    "name": "db.cosmosdb.status_code",
    "requirement_level": "recommended",
    "root_namespace": "db",
    "stability": "stable",
    "tag": "tech-specific-cosmosdb",
    "type": "int"
  },
  {
    "brief": "Cosmos DB sub status code.",
    "examples": [
      1000,
      1002
    ],
    "name": "db.cosmosdb.sub_status_code",
    "requirement_level": "recommended",
    "root_namespace": "db",
    "stability": "stable",
    "tag": "tech-specific-cosmosdb",
    "type": "int"
  },
  {
    "brief": "Represents the identifier of an Elasticsearch cluster.\n",
    "examples": [
      "e9106fc68e3044f0b1475b04bf4ffd5f"
    ],
    "name": "db.elasticsearch.cluster.name",
    "requirement_level": "recommended",
    "root_namespace": "db",
    "stability": "stable",
    "tag": "tech-specific-elasticsearch",
    "type": "string"
  },
  {
    "brief": "Represents the human-readable identifier of the node/instance to which a request was routed.\n",
    "examples": [
      "instance-0000000001"
    ],
    "name": "db.elasticsearch.node.name",
    "requirement_level": "recommended",
    "root_namespace": "db",
    "stability": "stable",
    "tag": "tech-specific-elasticsearch",
    "type": "string"
  },
  {
    "brief": "A dynamic value in the url path.\n",
    "examples": [
      "db.elasticsearch.path_parts.index=test-index",
      "db.elasticsearch.path_parts.doc_id=123"
    ],
    "name": "db.elasticsearch.path_parts",
    "note": "Many Elasticsearch url paths allow dynamic values. These SHOULD be recorded in span attributes in the format `db.elasticsearch.path_parts.\u003ckey\u003e`, where `\u003ckey\u003e` is the url path part name. The implementation SHOULD reference the [elasticsearch schema](https://raw.githubusercontent.com/elastic/elasticsearch-specification/main/output/schema/schema.json) in order to map the path part values to their names.\n",
    "requirement_level": "recommended",
    "root_namespace": "db",
    "stability": "stable",
    "tag": "tech-specific-elasticsearch",
    "type": "template[string]"
  },
  {
    "brief": "An identifier (address, unique name, or any other identifier) of the database instance that is executing queries or mutations on the current connection. This is useful in cases where the database is running in a clustered environment and the instrumentation is able to record the node executing the query. The client may obtain this value in databases like MySQL using queries like `select @@hostname`.\n",
    "examples": "mysql-e26b99z.example.com",
    "name": "db.instance.id",
    "requirement_level": "recommended",
    "root_namespace": "db",
    "stability": "stable",
    "tag": "db-generic",
    "type": "string"
  },
  {
    "brief": "The fully-qualified class name of the [Java Database Connectivity (JDBC)](https://docs.oracle.com/javase/8/docs/technotes/guides/jdbc/) driver used to connect.\n",
    "examples": [
      "org.postgresql.Driver",
      "com.microsoft.sqlserver.jdbc.SQLServerDriver"
    ],
    "name": "db.jdbc.driver_classname",
    "requirement_level": "recommended",
    "root_namespace": "db",
    "stability": "stable",
    "tag": "tech-specific-jdbc",
    "type": "string"
  },
  {
    "brief": "The MongoDB collection being accessed within the database stated in `db.name`.\n",
    "examples": [
      "customers",
      "products"
    ],
    "name": "db.mongodb.collection",
    "requirement_level": "recommended",
    "root_namespace": "db",
    "stability": "stable",
    "tag": "tech-specific-mongodb",
    "type": "string"
  },
  {
    "brief": "The Microsoft SQL Server [instance name](https://docs.microsoft.com/sql/connect/jdbc/building-the-connection-url?view=sql-server-ver15) connecting to. This name is used to determine the port of a named instance.\n",
    "examples": "MSSQLSERVER",
    "name": "db.mssql.instance_name",
    "note": "If setting a `db.mssql.instance_name`, `server.port` is no longer required (but still recommended if non-standard).\n",
    "requirement_level": "recommended",
    "root_namespace": "db",
    "stability": "stable",
    "tag": "tech-specific-mssql",
    "type": "string"
  },
  {
    "brief": "This attribute is used to report the name of the database being accessed. For commands that switch the database, this should be set to the target database (even if the command fails).\n",
    "examples": [
      "customers",
      "main"
    ],
    "name": "db.name",
    "note": "In some SQL databases, the database name to be used is called \"schema name\". In case there are multiple layers that could be considered for database name (e.g. Oracle instance name and schema name), the database name to be used is the more specific layer (e.g. Oracle schema name).\n",
    "requirement_level": "recommended",
    "root_namespace": "db",
    "stability": "stable",
    "tag": "db-generic",
    "type": "string"
  },
  {
    "brief": "The name of the operation being executed, e.g. the [MongoDB command name](https://docs.mongodb.com/manual/reference/command/#database-operations) such as `findAndModify`, or the SQL keyword.\n",
    "examples": [
      "findAndModify",
      "HMSET",
      "SELECT"
    ],
    "name": "db.operation",
    "note": "When setting this to an SQL keyword, it is not recommended to attempt any client-side parsing of `db.statement` just to get this property, but it should be set if the operation name is provided by the library being instrumented. If the SQL statement has an ambiguous operation, or performs more than one operation, this value may be omitted.\n",
    "requirement_level": "recommended",
    "root_namespace": "db",
    "stability": "stable",
    "tag": "db-generic",
    "type": "string"
  },
  {
    "brief": "The index of the database being accessed as used in the [`SELECT` command](https://redis.io/commands/select), provided as an integer. To be used instead of the generic `db.name` attribute.\n",
    "examples": [
      0,
      1,
      15
    ],
    "name": "db.redis.database_index",
    "requirement_level": "recommended",
    "root_namespace": "db",
    "stability": "stable",
    "tag": "tech-specific-redis",
    "type": "int"
  },
  {
    "annotations": {
      "code_generation": {
        "exclude": false
      },
      "privacy_sensitivity": "PII"
    },
    "brief": "An attribute that contains sensitive information.\n",
    "examples": [
      "bar"
    ],
    "name": "db.sensitive_attribute",
    "requirement_level": "recommended",
    "root_namespace": "db",
    "stability": "development",
    "type": "string"
  },
  {
    "brief": "The name of the primary table that the operation is acting upon, including the database name (if applicable).",
    "examples": [
      "public.users",
      "customers"
    ],
    "name": "db.sql.table",
    "note": "It is not recommended to attempt any client-side parsing of `db.statement` just to get this property, but it should be set if it is provided by the library being instrumented. If the operation is acting upon an anonymous table, or more than one table, this value MUST NOT be set.\n",
    "requirement_level": "recommended",
    "root_namespace": "db",
    "stability": "stable",
    "tag": "tech-specific-sql",
    "type": "string"
  },
  {
    "brief": "The database statement being executed.\n",
    "examples": [
      "SELECT * FROM wuser_table",
      "SET mykey \"WuValue\""
    ],
    "name": "db.statement",
    "requirement_level": "recommended",
    "root_namespace": "db",
    "stability": "stable",
    "tag": "db-generic",
    "type": "string"
  },
  {
    "brief": "An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.",
    "name": "db.system",
    "requirement_level": "recommended",
    "root_namespace": "db",
    "stability": "stable",
    "tag": "db-generic",
    "type": {
      "allow_custom_values": null,
      "members": [
        {
          "brief": "Some other SQL database. Fallback only. See notes.",
          "deprecated": null,
          "id": "other_sql",
          "note": null,
          "stability": "stable",
          "value": "other_sql"
        },
        {
          "brief": "Microsoft SQL Server",
          "deprecated": null,
          "id": "mssql",
          "note": null,
          "stability": "stable",
          "value": "mssql"
        },
        {
          "brief": "Microsoft SQL Server Compact",
          "deprecated": null,
          "id": "mssqlcompact",
          "note": null,
          "stability": "stable",
          "value": "mssqlcompact"
        },
        {
          "brief": "MySQL",
          "deprecated": null,
          "id": "mysql",
          "note": null,
          "stability": "stable",
          "value": "mysql"
        },
        {
          "brief": "Oracle Database",
          "deprecated": null,
          "id": "oracle",
          "note": null,
          "stability": "stable",
          "value": "oracle"
        },
        {
          "brief": "IBM Db2",
          "deprecated": null,
          "id": "db2",
          "note": null,
          "stability": "stable",
          "value": "db2"
        },
        {
          "brief": "PostgreSQL",
          "deprecated": null,
          "id": "postgresql",
          "note": null,
          "stability": "stable",
          "value": "postgresql"
        },
        {
          "brief": "Amazon Redshift",
          "deprecated": null,
          "id": "redshift",
          "note": null,
          "stability": "stable",
          "value": "redshift"
        },
        {
          "brief": "Apache Hive",
          "deprecated": null,
          "id": "hive",
          "note": null,
          "stability": "stable",
          "value": "hive"
        },
        {
          "brief": "Cloudscape",
          "deprecated": null,
          "id": "cloudscape",
          "note": null,
          "stability": "stable",
          "value": "cloudscape"
        },
        {
          "brief": "HyperSQL DataBase",
          "deprecated": null,
          "id": "hsqldb",
          "note": null,
          "stability": "stable",
          "value": "hsqldb"
        },
        {
          "brief": "Progress Database",
          "deprecated": null,
          "id": "progress",
          "note": null,
          "stability": "stable",
          "value": "progress"
        },
        {
          "brief": "SAP MaxDB",
          "deprecated": null,
          "id": "maxdb",
          "note": null,
          "stability": "stable",
          "value": "maxdb"
        },
        {
          "brief": "SAP HANA",
          "deprecated": null,
          "id": "hanadb",
          "note": null,
          "stability": "stable",
          "value": "hanadb"
        },
        {
          "brief": "Ingres",
          "deprecated": null,
          "id": "ingres",
          "note": null,
          "stability": "stable",
          "value": "ingres"
        },
        {
          "brief": "FirstSQL",
          "deprecated": null,
          "id": "firstsql",
          "note": null,
          "stability": "stable",
          "value": "firstsql"
        },
        {
          "brief": "EnterpriseDB",
          "deprecated": null,
          "id": "edb",
          "note": null,
          "stability": "stable",
          "value": "edb"
        },
        {
          "brief": "InterSystems Caché",
          "deprecated": null,
          "id": "cache",
          "note": null,
          "stability": "stable",
          "value": "cache"
        },
        {
          "brief": "Adabas (Adaptable Database System)",
          "deprecated": null,
          "id": "adabas",
          "note": null,
          "stability": "stable",
          "value": "adabas"
        },
        {
          "brief": "Firebird",
          "deprecated": null,
          "id": "firebird",
          "note": null,
          "stability": "stable",
          "value": "firebird"
        },
        {
          "brief": "Apache Derby",
          "deprecated": null,
          "id": "derby",
          "note": null,
          "stability": "stable",
          "value": "derby"
        },
        {
          "brief": "FileMaker",
          "deprecated": null,
          "id": "filemaker",
          "note": null,
          "stability": "stable",
          "value": "filemaker"
        },
        {
          "brief": "Informix",
          "deprecated": null,
          "id": "informix",
          "note": null,
          "stability": "stable",
          "value": "informix"
        },
        {
          "brief": "InstantDB",
          "deprecated": null,
          "id": "instantdb",
          "note": null,
          "stability": "stable",
          "value": "instantdb"
        },
        {
          "brief": "InterBase",
          "deprecated": null,
          "id": "interbase",
          "note": null,
          "stability": "stable",
          "value": "interbase"
        },
        {
          "brief": "MariaDB",
          "deprecated": null,
          "id": "mariadb",
          "note": null,
          "stability": "stable",
          "value": "mariadb"
        },
        {
          "brief": "Netezza",
          "deprecated": null,
          "id": "netezza",
          "note": null,
          "stability": "stable",
          "value": "netezza"
        },
        {
          "brief": "Pervasive PSQL",
          "deprecated": null,
          "id": "pervasive",
          "note": null,
          "stability": "stable",
          "value": "pervasive"
        },
        {
          "brief": "PointBase",
          "deprecated": null,
          "id": "pointbase",
          "note": null,
          "stability": "stable",
          "value": "pointbase"
        },
        {
          "brief": "SQLite",
          "deprecated": null,
          "id": "sqlite",
          "note": null,
          "stability": "stable",
          "value": "sqlite"
        },
        {
          "brief": "Sybase",
          "deprecated": null,
          "id": "sybase",
          "note": null,
          "stability": "stable",
          "value": "sybase"
        },
        {
          "brief": "Teradata",
          "deprecated": null,
          "id": "teradata",
          "note": null,
          "stability": "stable",
          "value": "teradata"
        },
        {
          "brief": "Vertica",
          "deprecated": null,
          "id": "vertica",
          "note": null,
          "stability": "stable",
          "value": "vertica"
        },
        {
          "brief": "H2",
          "deprecated": null,
          "id": "h2",
          "note": null,
          "stability": "stable",
          "value": "h2"
        },
        {
          "brief": "ColdFusion IMQ",
          "deprecated": null,
          "id": "coldfusion",
          "note": null,
          "stability": "stable",
          "value": "coldfusion"
        },
        {
          "brief": "Apache Cassandra",
          "deprecated": null,
          "id": "cassandra",
          "note": null,
          "stability": "stable",
          "value": "cassandra"
        },
        {
          "brief": "Apache HBase",
          "deprecated": null,
          "id": "hbase",
          "note": null,
          "stability": "stable",
          "value": "hbase"
        },
        {
          "brief": "MongoDB",
          "deprecated": null,
          "id": "mongodb",
          "note": null,
          "stability": "stable",
          "value": "mongodb"
        },
        {
          "brief": "Redis",
          "deprecated": null,
          "id": "redis",
          "note": null,
          "stability": "stable",
          "value": "redis"
        },
        {
          "brief": "Couchbase",
          "deprecated": null,
          "id": "couchbase",
          "note": null,
          "stability": "stable",
          "value": "couchbase"
        },
        {
          "brief": "CouchDB",
          "deprecated": null,
          "id": "couchdb",
          "note": null,
          "stability": "stable",
          "value": "couchdb"
        },
        {
          "brief": "Microsoft Azure Cosmos DB",
          "deprecated": null,
          "id": "cosmosdb",
          "note": null,
          "stability": "stable",
          "value": "cosmosdb"
        },
        {
          "brief": "Amazon DynamoDB",
          "deprecated": null,
          "id": "dynamodb",
          "note": null,
          "stability": "stable",
          "value": "dynamodb"
        },
        {
          "brief": "Neo4j",
          "deprecated": null,
          "id": "neo4j",
          "note": null,
          "stability": "stable",
          "value": "neo4j"
        },
        {
          "brief": "Apache Geode",
          "deprecated": null,
          "id": "geode",
          "note": null,
          "stability": "stable",
          "value": "geode"
        },
        {
          "brief": "Elasticsearch",
          "deprecated": null,
          "id": "elasticsearch",
          "note": null,
          "stability": "stable",
          "value": "elasticsearch"
        },
        {
          "brief": "Memcached",
          "deprecated": null,
          "id": "memcached",
          "note": null,
          "stability": "stable",
          "value": "memcached"
        },
        {
          "brief": "CockroachDB",
          "deprecated": null,
          "id": "cockroachdb",
          "note": null,
          "stability": "stable",
          "value": "cockroachdb"
        },
        {
          "brief": "OpenSearch",
          "deprecated": null,
          "id": "opensearch",
          "note": null,
          "stability": "stable",
          "value": "opensearch"
        },
        {
          "brief": "ClickHouse",
          "deprecated": null,
          "id": "clickhouse",
          "note": null,
          "stability": "stable",
          "value": "clickhouse"
        },
        {
          "brief": "Cloud Spanner",
          "deprecated": null,
          "id": "spanner",
          "note": null,
          "stability": "stable",
          "value": "spanner"
        },
        {
          "brief": "Trino",
          "deprecated": null,
          "id": "trino",
          "note": null,
          "stability": "stable",
          "value": "trino"
        }
      ]
    }
  },
  {
    "brief": "Username for accessing the database.\n",
    "examples": [
      "readonly_user",
      "reporting_user"
    ],
    "name": "db.user",
    "requirement_level": "recommended",
    "root_namespace": "db",
    "stability": "stable",
    "tag": "db-generic",
    "type": "string"
  },
  {
    "brief": "SHOULD be set to true if the exception event is recorded at a point where it is known that the exception is escaping the scope of the span.\n",
    "name": "exception.escaped",
    "note": "An exception is considered to have escaped (or left) the scope of a span,\nif that span is ended while the exception is still logically \"in flight\".\nThis may be actually \"in flight\" in some languages (e.g. if the exception\nis passed to a Context manager\u0027s `__exit__` method in Python) but will\nusually be caught at the point of recording the exception in most languages.\n\nIt is usually not possible to determine at the point where an exception is thrown\nwhether it will escape the scope of a span.\nHowever, it is trivial to know that an exception\nwill escape, if one checks for an active exception just before ending the span,\nas done in the [example for recording span exceptions](https://opentelemetry.io/docs/specs/semconv/exceptions/exceptions-spans/#recording-an-exception).\n\nIt follows that an exception may still escape the scope of the span\neven if the `exception.escaped` attribute was not set or set to false,\nsince the event might have been recorded at a time where it was not\nclear whether the exception will escape.",
    "requirement_level": "recommended",
    "root_namespace": "exception",
    "stability": "stable",
    "type": "boolean"
  },
  {
    "brief": "The exception message.",
    "examples": [
      "Division by zero",
      "Can\u0027t convert \u0027int\u0027 object to str implicitly"
    ],
    "name": "exception.message",
    "requirement_level": "recommended",
    "root_namespace": "exception",
    "stability": "stable",
    "type": "string"
  },
  {
    "brief": "A stacktrace as a string in the natural representation for the language runtime. The representation is to be determined and documented by each language SIG.\n",
    "examples": "Exception in thread \"main\" java.lang.RuntimeException: Test exception\\n at com.example.GenerateTrace.methodB(GenerateTrace.java:13)\\n at com.example.GenerateTrace.methodA(GenerateTrace.java:9)\\n at com.example.GenerateTrace.main(GenerateTrace.java:5)",
    "name": "exception.stacktrace",
    "requirement_level": "recommended",
    "root_namespace": "exception",
    "stability": "stable",
    "type": "string"
  },
  {
    "brief": "The type of the exception (its fully-qualified class name, if applicable). The dynamic type of the exception should be preferred over the static type in languages that support it.\n",
    "examples": [
      "java.net.ConnectException",
      "OSError"
    ],
    "name": "exception.type",
    "requirement_level": "recommended",
    "root_namespace": "exception",
    "stability": "stable",
    "type": "string"
  },
  {
    "brief": "The size of the request payload body in bytes. This is the number of bytes transferred excluding headers and is often, but not always, present as the [Content-Length](https://www.rfc-editor.org/rfc/rfc9110.html#field.content-length) header. For requests using transport encoding, this should be the compressed size.\n",
    "examples": 3495,
    "name": "http.request.body.size",
    "requirement_level": "recommended",
    "root_namespace": "http",
    "stability": "development",
    "type": "int"
  },
  {
    "brief": "HTTP request headers, `\u003ckey\u003e` being the normalized HTTP Header name (lowercase), the value being the header values.\n",
    "examples": [
      "http.request.header.content-type=[\"application/json\"]",
      "http.request.header.x-forwarded-for=[\"1.2.3.4\", \"1.2.3.5\"]"
    ],
    "name": "http.request.header",
    "note": "Instrumentations SHOULD require an explicit configuration of which headers are to be captured. Including all request headers can be a security risk - explicit configuration helps avoid leaking sensitive information.\nThe `User-Agent` header is already captured in the `user_agent.original` attribute. Users MAY explicitly configure instrumentations to capture them even though it is not recommended.\nThe attribute value MUST consist of either multiple header values as an array of strings or a single-item array containing a possibly comma-concatenated string, depending on the way the HTTP library provides access to headers.\n",
    "requirement_level": "recommended",
    "root_namespace": "http",
    "stability": "stable",
    "type": "template[string[]]"
  },
  {
    "brief": "HTTP request method.",
    "examples": [
      "GET",
      "POST",
      "HEAD"
    ],
    "name": "http.request.method",
    "note": "HTTP request method value SHOULD be \"known\" to the instrumentation.\nBy default, this convention defines \"known\" methods as the ones listed in [RFC9110](https://www.rfc-editor.org/rfc/rfc9110.html#name-methods)\nand the PATCH method defined in [RFC5789](https://www.rfc-editor.org/rfc/rfc5789.html).\n\nIf the HTTP request method is not known to instrumentation, it MUST set the `http.request.method` attribute to `_OTHER`.\n\nIf the HTTP instrumentation could end up converting valid HTTP request methods to `_OTHER`, then it MUST provide a way to override\nthe list of known HTTP methods. If this override is done via environment variable, then the environment variable MUST be named\nOTEL_INSTRUMENTATION_HTTP_KNOWN_METHODS and support a comma-separated list of case-sensitive known HTTP methods\n(this list MUST be a full override of the default known method, it is not a list of known methods in addition to the defaults).\n\nHTTP method names are case-sensitive and `http.request.method` attribute value MUST match a known HTTP method name exactly.\nInstrumentations for specific web frameworks that consider HTTP methods to be case insensitive, SHOULD populate a canonical equivalent.\nTracing instrumentations that do so, MUST also set `http.request.method_original` to the original value.\n",
    "requirement_level": "recommended",
    "root_namespace": "http",
    "stability": "stable",
    "type": {
      "allow_custom_values": null,
      "members": [
        {
          "brief": "CONNECT method.",
          "deprecated": null,
          "id": "connect",
          "note": null,
          "stability": "development",
          "value": "CONNECT"
        },
        {
          "brief": "DELETE method.",
          "deprecated": null,
          "id": "delete",
          "note": null,
          "stability": "development",
          "value": "DELETE"
        },
        {
          "brief": "GET method.",
          "deprecated": null,
          "id": "get",
          "note": null,
          "stability": "development",
          "value": "GET"
        },
        {
          "brief": "HEAD method.",
          "deprecated": null,
          "id": "head",
          "note": null,
          "stability": "development",
          "value": "HEAD"
        },
        {
          "brief": "OPTIONS method.",
          "deprecated": null,
          "id": "options",
          "note": null,
          "stability": "development",
          "value": "OPTIONS"
        },
        {
          "brief": "PATCH method.",
          "deprecated": null,
          "id": "patch",
          "note": null,
          "stability": "development",
          "value": "PATCH"
        },
        {
          "brief": "POST method.",
          "deprecated": null,
          "id": "post",
          "note": null,
          "stability": "development",
          "value": "POST"
        },
        {
          "brief": "PUT method.",
          "deprecated": null,
          "id": "put",
          "note": null,
          "stability": "development",
          "value": "PUT"
        },
        {
          "brief": "TRACE method.",
          "deprecated": null,
          "id": "trace",
          "note": null,
          "stability": "development",
          "value": "TRACE"
        },
        {
          "brief": "Any HTTP method that the instrumentation has no prior knowledge of.",
          "deprecated": null,
          "id": "other",
          "note": null,
          "stability": "development",
          "value": "_OTHER"
        }
      ]
    }
  },
  {
    "brief": "Original HTTP method sent by the client in the request line.",
    "examples": [
      "GeT",
      "ACL",
      "foo"
    ],
    "name": "http.request.method_original",
    "requirement_level": "recommended",
    "root_namespace": "http",
    "stability": "stable",
    "type": "string"
  },
  {
    "brief": "The ordinal number of request resending attempt (for any reason, including redirects).\n",
    "examples": 3,
    "name": "http.request.resend_count",
    "note": "The resend count SHOULD be updated each time an HTTP request gets resent by the client, regardless of what was the cause of the resending (e.g. redirection, authorization failure, 503 Server Unavailable, network issues, or any other).\n",
    "requirement_level": "recommended",
    "root_namespace": "http",
    "stability": "stable",
    "type": "int"
  },
  {
    "brief": "The size of the response payload body in bytes. This is the number of bytes transferred excluding headers and is often, but not always, present as the [Content-Length](https://www.rfc-editor.org/rfc/rfc9110.html#field.content-length) header. For requests using transport encoding, this should be the compressed size.\n",
    "examples": 3495,
    "name": "http.response.body.size",
    "requirement_level": "recommended",
    "root_namespace": "http",
    "stability": "development",
    "type": "int"
  },
  {
    "brief": "HTTP response headers, `\u003ckey\u003e` being the normalized HTTP Header name (lowercase), the value being the header values.\n",
    "examples": [
      "http.response.header.content-type=[\"application/json\"]",
      "http.response.header.my-custom-header=[\"abc\", \"def\"]"
    ],
    "name": "http.response.header",
    "note": "Instrumentations SHOULD require an explicit configuration of which headers are to be captured. Including all response headers can be a security risk - explicit configuration helps avoid leaking sensitive information.\nUsers MAY explicitly configure instrumentations to capture them even though it is not recommended.\nThe attribute value MUST consist of either multiple header values as an array of strings or a single-item array containing a possibly comma-concatenated string, depending on the way the HTTP library provides access to headers.\n",
    "requirement_level": "recommended",
    "root_namespace": "http",
    "stability": "stable",
    "type": "template[string[]]"
  },
  {
    "brief": "[HTTP response status code](https://tools.ietf.org/html/rfc7231#section-6).",
    "examples": [
      200
    ],
    "name": "http.response.status_code",
    "requirement_level": "recommended",
    "root_namespace": "http",
    "stability": "stable",
    "type": "int"
  },
  {
    "brief": "The matched route, that is, the path template in the format used by the respective server framework.\n",
    "examples": [
      "/users/:userID?",
      "{controller}/{action}/{id?}"
    ],
    "name": "http.route",
    "note": "MUST NOT be populated when this is not supported by the HTTP server framework as the route attribute should have low-cardinality and the URI path can NOT substitute it.\nSHOULD include the [application root](/docs/http/http-spans.md#http-server-definitions) if there is one.",
    "requirement_level": "recommended",
    "root_namespace": "http",
    "stability": "stable",
    "type": "string"
  },
  {
    "brief": "The ISO 3166-1 alpha-2 2-character country code associated with the mobile carrier network.",
    "examples": "DE",
    "name": "network.carrier.icc",
    "requirement_level": "recommended",
    "root_namespace": "network",
    "stability": "stable",
    "type": "string"
  },
  {
    "brief": "The mobile carrier country code.",
    "examples": "310",
    "name": "network.carrier.mcc",
    "requirement_level": "recommended",
    "root_namespace": "network",
    "stability": "stable",
    "type": "string"
  },
  {
    "brief": "The mobile carrier network code.",
    "examples": "001",
    "name": "network.carrier.mnc",
    "requirement_level": "recommended",
    "root_namespace": "network",
    "stability": "stable",
    "type": "string"
  },
  {
    "brief": "The name of the mobile carrier.",
    "examples": "sprint",
    "name": "network.carrier.name",
    "requirement_level": "recommended",
    "root_namespace": "network",
    "stability": "stable",
    "type": "string"
  },
  {
    "brief": "This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.",
    "examples": "LTE",
    "name": "network.connection.subtype",
    "requirement_level": "recommended",
    "root_namespace": "network",
    "stability": "stable",
    "type": {
      "allow_custom_values": null,
      "members": [
        {
          "brief": "GPRS",
          "deprecated": null,
          "id": "gprs",
          "note": null,
          "stability": "stable",
          "value": "gprs"
        },
        {
          "brief": "EDGE",
          "deprecated": null,
          "id": "edge",
          "note": null,
          "stability": "stable",
          "value": "edge"
        },
        {
          "brief": "UMTS",
          "deprecated": null,
          "id": "umts",
          "note": null,
          "stability": "stable",
          "value": "umts"
        },
        {
          "brief": "CDMA",
          "deprecated": null,
          "id": "cdma",
          "note": null,
          "stability": "stable",
          "value": "cdma"
        },
        {
          "brief": "EVDO Rel. 0",
          "deprecated": null,
          "id": "evdo_0",
          "note": null,
          "stability": "stable",
          "value": "evdo_0"
        },
        {
          "brief": "EVDO Rev. A",
          "deprecated": null,
          "id": "evdo_a",
          "note": null,
          "stability": "stable",
          "value": "evdo_a"
        },
        {
          "brief": "CDMA2000 1XRTT",
          "deprecated": null,
          "id": "cdma2000_1xrtt",
          "note": null,
          "stability": "stable",
          "value": "cdma2000_1xrtt"
        },
        {
          "brief": "HSDPA",
          "deprecated": null,
          "id": "hsdpa",
          "note": null,
          "stability": "stable",
          "value": "hsdpa"
        },
        {
          "brief": "HSUPA",
          "deprecated": null,
          "id": "hsupa",
          "note": null,
          "stability": "stable",
          "value": "hsupa"
        },
        {
          "brief": "HSPA",
          "deprecated": null,
          "id": "hspa",
          "note": null,
          "stability": "stable",
          "value": "hspa"
        },
        {
          "brief": "IDEN",
          "deprecated": null,
          "id": "iden",
          "note": null,
          "stability": "stable",
          "value": "iden"
        },
        {
          "brief": "EVDO Rev. B",
          "deprecated": null,
          "id": "evdo_b",
          "note": null,
          "stability": "stable",
          "value": "evdo_b"
        },
        {
          "brief": "LTE",
          "deprecated": null,
          "id": "lte",
          "note": null,
          "stability": "stable",
          "value": "lte"
        },
        {
          "brief": "EHRPD",
          "deprecated": null,
          "id": "ehrpd",
          "note": null,
          "stability": "stable",
          "value": "ehrpd"
        },
        {
          "brief": "HSPAP",
          "deprecated": null,
          "id": "hspap",
          "note": null,
          "stability": "stable",
          "value": "hspap"
        },
        {
          "brief": "GSM",
          "deprecated": null,
          "id": "gsm",
          "note": null,
          "stability": "stable",
          "value": "gsm"
        },
        {
          "brief": "TD-SCDMA",
          "deprecated": null,
          "id": "td_scdma",
          "note": null,
          "stability": "stable",
          "value": "td_scdma"
        },
        {
          "brief": "IWLAN",
          "deprecated": null,
          "id": "iwlan",
          "note": null,
          "stability": "stable",
          "value": "iwlan"
        },
        {
          "brief": "5G NR (New Radio)",
          "deprecated": null,
          "id": "nr",
          "note": null,
          "stability": "stable",
          "value": "nr"
        },
        {
          "brief": "5G NRNSA (New Radio Non-Standalone)",
          "deprecated": null,
          "id": "nrnsa",
          "note": null,
          "stability": "stable",
          "value": "nrnsa"
        },
        {
          "brief": "LTE CA",
          "deprecated": null,
          "id": "lte_ca",
          "note": null,
          "stability": "stable",
          "value": "lte_ca"
        }
      ]
    }
  },
  {
    "brief": "The internet connection type.",
    "examples": "wifi",
    "name": "network.connection.type",
    "requirement_level": "recommended",
    "root_namespace": "network",
    "stability": "stable",
    "type": {
      "allow_custom_values": null,
      "members": [
        {
          "brief": null,
          "deprecated": null,
          "id": "wifi",
          "note": null,
          "stability": "stable",
          "value": "wifi"
        },
        {
          "brief": null,
          "deprecated": null,
          "id": "wired",
          "note": null,
          "stability": "stable",
          "value": "wired"
        },
        {
          "brief": null,
          "deprecated": null,
          "id": "cell",
          "note": null,
          "stability": "stable",
          "value": "cell"
        },
        {
          "brief": null,
          "deprecated": null,
          "id": "unavailable",
          "note": null,
          "stability": "stable",
          "value": "unavailable"
        },
        {
          "brief": null,
          "deprecated": null,
          "id": "unknown",
          "note": null,
          "stability": "stable",
          "value": "unknown"
        }
      ]
    }
  },
  {
    "brief": "The network IO operation direction.",
    "examples": [
      "transmit"
    ],
    "name": "network.io.direction",
    "requirement_level": "recommended",
    "root_namespace": "network",
    "stability": "stable",
    "type": {
      "allow_custom_values": null,
      "members": [
        {
          "brief": null,
          "deprecated": null,
          "id": "transmit",
          "note": null,
          "stability": "stable",
          "value": "transmit"
        },
        {
          "brief": null,
          "deprecated": null,
          "id": "receive",
          "note": null,
          "stability": "stable",
          "value": "receive"
        }
      ]
    }
  },
  {
    "brief": "Local address of the network connection - IP address or Unix domain socket name.",
    "examples": [
      "10.1.2.80",
      "/tmp/my.sock"
    ],
    "name": "network.local.address",
    "requirement_level": "recommended",
    "root_namespace": "network",
    "stability": "stable",
    "type": "string"
  },
  {
    "brief": "Local port number of the network connection.",
    "examples": [
      65123
    ],
    "name": "network.local.port",
    "requirement_level": "recommended",
    "root_namespace": "network",
    "stability": "stable",
    "type": "int"
  },
  {
    "brief": "Peer address of the network connection - IP address or Unix domain socket name.",
    "examples": [
      "10.1.2.80",
      "/tmp/my.sock"
    ],
    "name": "network.peer.address",
    "requirement_level": "recommended",
    "root_namespace": "network",
    "stability": "stable",
    "type": "string"
  },
  {
    "brief": "Peer port number of the network connection.",
    "examples": [
      65123
    ],
    "name": "network.peer.port",
    "requirement_level": "recommended",
    "root_namespace": "network",
    "stability": "stable",
    "type": "int"
  },
  {
    "brief": "[OSI application layer](https://osi-model.com/application-layer/) or non-OSI equivalent.",
    "examples": [
      "amqp",
      "http",
      "mqtt"
    ],
    "name": "network.protocol.name",
    "note": "The value SHOULD be normalized to lowercase.",
    "requirement_level": "recommended",
    "root_namespace": "network",
    "stability": "stable",
    "type": "string"
  },
  {
    "brief": "Version of the protocol specified in `network.protocol.name`.",
    "examples": "3.1.1",
    "name": "network.protocol.version",
    "note": "`network.protocol.version` refers to the version of the protocol used and might be different from the protocol client\u0027s version. If the HTTP client has a version of `0.27.2`, but sends HTTP version `1.1`, this attribute should be set to `1.1`.\n",
    "requirement_level": "recommended",
    "root_namespace": "network",
    "stability": "stable",
    "type": "string"
  },
  {
    "brief": "[OSI transport layer](https://osi-model.com/transport-layer/) or [inter-process communication method](https://wikipedia.org/wiki/Inter-process_communication).\n",
    "examples": [
      "tcp",
      "udp"
    ],
    "name": "network.transport",
    "note": "The value SHOULD be normalized to lowercase.\n\nConsider always setting the transport when setting a port number, since\na port number is ambiguous without knowing the transport. For example\ndifferent processes could be listening on TCP port 12345 and UDP port 12345.\n",
    "requirement_level": "recommended",
    "root_namespace": "network",
    "stability": "stable",
    "type": {
      "allow_custom_values": null,
      "members": [
        {
          "brief": "TCP",
          "deprecated": null,
          "id": "tcp",
          "note": null,
          "stability": "stable",
          "value": "tcp"
        },
        {
          "brief": "UDP",
          "deprecated": null,
          "id": "udp",
          "note": null,
          "stability": "stable",
          "value": "udp"
        },
        {
          "brief": "Named or anonymous pipe.",
          "deprecated": null,
          "id": "pipe",
          "note": null,
          "stability": "stable",
          "value": "pipe"
        },
        {
          "brief": "Unix domain socket",
          "deprecated": null,
          "id": "unix",
          "note": null,
          "stability": "stable",
          "value": "unix"
        }
      ]
    }
  },
  {
    "brief": "[OSI network layer](https://osi-model.com/network-layer/) or non-OSI equivalent.",
    "examples": [
      "ipv4",
      "ipv6"
    ],
    "name": "network.type",
    "note": "The value SHOULD be normalized to lowercase.",
    "requirement_level": "recommended",
    "root_namespace": "network",
    "stability": "stable",
    "type": {
      "allow_custom_values": null,
      "members": [
        {
          "brief": "IPv4",
          "deprecated": null,
          "id": "ipv4",
          "note": null,
          "stability": "stable",
          "value": "ipv4"
        },
        {
          "brief": "IPv6",
          "deprecated": null,
          "id": "ipv6",
          "note": null,
          "stability": "stable",
          "value": "ipv6"
        }
      ]
    }
  },
  {
    "brief": "The [URI fragment](https://www.rfc-editor.org/rfc/rfc3986#section-3.5) component",
    "examples": [
      "SemConv"
    ],
    "name": "url.fragment",
    "requirement_level": "recommended",
    "root_namespace": "url",
    "stability": "stable",
    "type": "string"
  },
  {
    "brief": "Absolute URL describing a network resource according to [RFC3986](https://www.rfc-editor.org/rfc/rfc3986)",
    "examples": [
      "https://www.foo.bar/search?q=OpenTelemetry#SemConv",
      "//localhost"
    ],
    "name": "url.full",
    "note": "For network calls, URL usually has `scheme://host[:port][path][?query][#fragment]` format, where the fragment is not transmitted over HTTP, but if it is known, it SHOULD be included nevertheless.\n`url.full` MUST NOT contain credentials passed via URL in form of `https://username:password@www.example.com/`. In such case username and password SHOULD be redacted and attribute\u0027s value SHOULD be `https://REDACTED:REDACTED@www.example.com/`.\n`url.full` SHOULD capture the absolute URL when it is available (or can be reconstructed) and SHOULD NOT be validated or modified except for sanitizing purposes.\n",
    "requirement_level": "recommended",
    "root_namespace": "url",
    "stability": "stable",
    "type": "string"
  },
  {
    "brief": "The [URI path](https://www.rfc-editor.org/rfc/rfc3986#section-3.3) component",
    "examples": [
      "/search"
    ],
    "name": "url.path",
    "requirement_level": "recommended",
    "root_namespace": "url",
    "stability": "stable",
    "type": "string"
  },
  {
    "brief": "The [URI query](https://www.rfc-editor.org/rfc/rfc3986#section-3.4) component",
    "examples": [
      "q=OpenTelemetry"
    ],
    "name": "url.query",
    "note": "Sensitive content provided in query string SHOULD be scrubbed when instrumentations can identify it.",
    "requirement_level": "recommended",
    "root_namespace": "url",
    "stability": "stable",
    "type": "string"
  },
  {
    "brief": "The [URI scheme](https://www.rfc-editor.org/rfc/rfc3986#section-3.1) component identifying the used protocol.",
    "examples": [
      "https",
      "ftp",
      "telnet"
    ],
    "name": "url.scheme",
    "requirement_level": "recommended",
    "root_namespace": "url",
    "stability": "stable",
    "type": "string"
  },
  {
    "brief": "Value of the [HTTP User-Agent](https://www.rfc-editor.org/rfc/rfc9110.html#field.user-agent) header sent by the client.\n",
    "examples": [
      "CERN-LineMode/2.15 libwww/2.17b3",
      "Mozilla/5.0 (iPhone; CPU iPhone OS 14_7_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.1.2 Mobile/15E148 Safari/604.1"
    ],
    "name": "user_agent.original",
    "requirement_level": "recommended",
    "root_namespace": "user_agent",
    "stability": "stable",
    "type": "string"
  }
]